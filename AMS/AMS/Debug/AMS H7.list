
AMS H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c690  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800c960  0800c960  0000d960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cd38  0800cd38  0000dd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800cd40  0800cd40  0000dd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cd48  0800cd48  0000dd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800cd4c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e30  2400006c  0800cdb8  0000e06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e9c  0800cdb8  0000ee9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026f5b  00000000  00000000  0000e09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c03  00000000  00000000  00034ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001920  00000000  00000000  00038bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013ad  00000000  00000000  0003a518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b7cc  00000000  00000000  0003b8c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020d30  00000000  00000000  00077091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017622c  00000000  00000000  00097dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020dfed  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007324  00000000  00000000  0020e030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  00215354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c948 	.word	0x0800c948

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800c948 	.word	0x0800c948

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <_ZN7BMS_MODC1Emiiihjii>:
/*********************************************************************************************************
 ** Function name:           BMS_MOD
 ** Descriptions:            Initialization function of teh class
 *********************************************************************************************************/

BMS_MOD::BMS_MOD(uint32_t _ID, int _MAXV, int _MINV, int _MAXT,
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	603b      	str	r3, [r7, #0]
		uint8_t _NUMCELLS, unsigned int _SHUNT, int _LAG_V, int _LAG_T) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	22fa      	movs	r2, #250	@ 0xfa
 8000732:	621a      	str	r2, [r3, #32]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800073a:	625a      	str	r2, [r3, #36]	@ 0x24
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2200      	movs	r2, #0
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2200      	movs	r2, #0
 8000776:	645a      	str	r2, [r3, #68]	@ 0x44
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	649a      	str	r2, [r3, #72]	@ 0x48
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2200      	movs	r2, #0
 8000784:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2200      	movs	r2, #0
 800078c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2200      	movs	r2, #0
 8000794:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2200      	movs	r2, #0
 800079c:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2213      	movs	r2, #19
 80007a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	220a      	movs	r2, #10
 80007ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3358      	adds	r3, #88	@ 0x58
 80007b2:	2230      	movs	r2, #48	@ 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00b fc48 	bl	800c04c <memset>
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2200      	movs	r2, #0
 80007d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f241 0268 	movw	r2, #4200	@ 0x1068
 80007da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2200      	movs	r2, #0
 80007f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	33a4      	adds	r3, #164	@ 0xa4
 80007fa:	224c      	movs	r2, #76	@ 0x4c
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00b fc24 	bl	800c04c <memset>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	33f0      	adds	r3, #240	@ 0xf0
 8000808:	2298      	movs	r2, #152	@ 0x98
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f00b fc1d 	bl	800c04c <memset>
	CANID = _ID;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	601a      	str	r2, [r3, #0]
	LIMIT_MAX_V = _MAXV;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	60da      	str	r2, [r3, #12]
	LIMIT_MIN_V = _MINV;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	611a      	str	r2, [r3, #16]
	LIMIT_MAX_T = _MAXT;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	6a3a      	ldr	r2, [r7, #32]
 8000828:	615a      	str	r2, [r3, #20]
	NUM_CELLS = _NUMCELLS;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	uint32_t now = HAL_GetTick();
 8000834:	f002 fa60 	bl	8002cf8 <HAL_GetTick>
 8000838:	6178      	str	r0, [r7, #20]

	time_lim_plotted_volts = now + _LAG_V;
 800083a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	441a      	add	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	635a      	str	r2, [r3, #52]	@ 0x34
	time_lim_sent_volts = now + _LAG_V;
 8000844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	441a      	add	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	639a      	str	r2, [r3, #56]	@ 0x38
	time_lim_received_volts = now + TIME_LIM_RECV_VOLTS + _LAG_V;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	441a      	add	r2, r3
 8000856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000858:	441a      	add	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	63da      	str	r2, [r3, #60]	@ 0x3c

	time_lim_plotted_temps = now + _LAG_T;
 800085e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	441a      	add	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	641a      	str	r2, [r3, #64]	@ 0x40
	time_lim_sent_temps = now + _LAG_T;
 8000868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	441a      	add	r2, r3
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	645a      	str	r2, [r3, #68]	@ 0x44
	time_lim_received_temps = now + TIME_LIM_RECV_TEMPS + _LAG_T;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	441a      	add	r2, r3
 800087a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800087c:	441a      	add	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4618      	mov	r0, r3
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <_ZN7BMS_MOD12voltage_infoEPc>:

/*********************************************************************************************************
 ** Function name:           info
 ** Descriptions:            Function for printing the class data
 *********************************************************************************************************/
void BMS_MOD::voltage_info(char *buffer) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]

	if (getUARTState() == HAL_UART_STATE_READY) { // Send the message just if there is a serial por connected
 8000896:	f001 fad3 	bl	8001e40 <getUARTState>
 800089a:	4603      	mov	r3, r0
 800089c:	2b20      	cmp	r3, #32
 800089e:	bf0c      	ite	eq
 80008a0:	2301      	moveq	r3, #1
 80008a2:	2300      	movne	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	f000 8084 	beq.w	80009b4 <_ZN7BMS_MOD12voltage_infoEPc+0x128>
		print((char*) "\n***********************");
 80008ac:	4851      	ldr	r0, [pc, #324]	@ (80009f4 <_ZN7BMS_MOD12voltage_infoEPc+0x168>)
 80008ae:	f001 fa8b 	bl	8001dc8 <print>
		print((char*) "         BMS");
 80008b2:	4851      	ldr	r0, [pc, #324]	@ (80009f8 <_ZN7BMS_MOD12voltage_infoEPc+0x16c>)
 80008b4:	f001 fa88 	bl	8001dc8 <print>
		print((char*) "***********************");
 80008b8:	4850      	ldr	r0, [pc, #320]	@ (80009fc <_ZN7BMS_MOD12voltage_infoEPc+0x170>)
 80008ba:	f001 fa85 	bl	8001dc8 <print>
		sprintf(buffer, " - ERROR:     %i", error_volt);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	461a      	mov	r2, r3
 80008c4:	494e      	ldr	r1, [pc, #312]	@ (8000a00 <_ZN7BMS_MOD12voltage_infoEPc+0x174>)
 80008c6:	6838      	ldr	r0, [r7, #0]
 80008c8:	f00b fb9e 	bl	800c008 <siprintf>
		print(buffer);
 80008cc:	6838      	ldr	r0, [r7, #0]
 80008ce:	f001 fa7b 	bl	8001dc8 <print>
		sprintf(buffer, " - CAN ID:    0x%lx", CANID);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	494a      	ldr	r1, [pc, #296]	@ (8000a04 <_ZN7BMS_MOD12voltage_infoEPc+0x178>)
 80008da:	6838      	ldr	r0, [r7, #0]
 80008dc:	f00b fb94 	bl	800c008 <siprintf>
		print(buffer);
 80008e0:	6838      	ldr	r0, [r7, #0]
 80008e2:	f001 fa71 	bl	8001dc8 <print>
		sprintf(buffer, " - MAX V =    %i mV", MAX_V);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4946      	ldr	r1, [pc, #280]	@ (8000a08 <_ZN7BMS_MOD12voltage_infoEPc+0x17c>)
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	f00b fb8a 	bl	800c008 <siprintf>
		print(buffer);
 80008f4:	6838      	ldr	r0, [r7, #0]
 80008f6:	f001 fa67 	bl	8001dc8 <print>
		sprintf(buffer, " - MIN V =    %i mV", MIN_V);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000900:	461a      	mov	r2, r3
 8000902:	4942      	ldr	r1, [pc, #264]	@ (8000a0c <_ZN7BMS_MOD12voltage_infoEPc+0x180>)
 8000904:	6838      	ldr	r0, [r7, #0]
 8000906:	f00b fb7f 	bl	800c008 <siprintf>
		print(buffer);
 800090a:	6838      	ldr	r0, [r7, #0]
 800090c:	f001 fa5c 	bl	8001dc8 <print>
		print((char*) "-----------------------");
 8000910:	483f      	ldr	r0, [pc, #252]	@ (8000a10 <_ZN7BMS_MOD12voltage_infoEPc+0x184>)
 8000912:	f001 fa59 	bl	8001dc8 <print>
		sprintf(buffer, "VOLTS (mV): [%i", cellVoltagemV[0]);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800091c:	461a      	mov	r2, r3
 800091e:	493d      	ldr	r1, [pc, #244]	@ (8000a14 <_ZN7BMS_MOD12voltage_infoEPc+0x188>)
 8000920:	6838      	ldr	r0, [r7, #0]
 8000922:	f00b fb71 	bl	800c008 <siprintf>
		printnl(buffer);
 8000926:	6838      	ldr	r0, [r7, #0]
 8000928:	f001 fa6c 	bl	8001e04 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e010      	b.n	8000954 <_ZN7BMS_MOD12voltage_infoEPc+0xc8>
			sprintf(buffer, ", %i", cellVoltagemV[i]);
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3328      	adds	r3, #40	@ 0x28
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	461a      	mov	r2, r3
 8000940:	4935      	ldr	r1, [pc, #212]	@ (8000a18 <_ZN7BMS_MOD12voltage_infoEPc+0x18c>)
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f00b fb60 	bl	800c008 <siprintf>
			printnl(buffer);
 8000948:	6838      	ldr	r0, [r7, #0]
 800094a:	f001 fa5b 	bl	8001e04 <printnl>
		for (int i = 0; i < NUM_CELLS; i++) {
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3301      	adds	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800095a:	461a      	mov	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4293      	cmp	r3, r2
 8000960:	dbe7      	blt.n	8000932 <_ZN7BMS_MOD12voltage_infoEPc+0xa6>
		}

		for (int i = 0; i < NUM_CELLS; i++) {
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	e00f      	b.n	8000988 <_ZN7BMS_MOD12voltage_infoEPc+0xfc>
			voltage_acum += cellVoltagemV[i];
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	3328      	adds	r3, #40	@ 0x28
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	440b      	add	r3, r1
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	441a      	add	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		for (int i = 0; i < NUM_CELLS; i++) {
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	3301      	adds	r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800098e:	461a      	mov	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4293      	cmp	r3, r2
 8000994:	dbe8      	blt.n	8000968 <_ZN7BMS_MOD12voltage_infoEPc+0xdc>
		}

		print((char*) "]");
 8000996:	4821      	ldr	r0, [pc, #132]	@ (8000a1c <_ZN7BMS_MOD12voltage_infoEPc+0x190>)
 8000998:	f001 fa16 	bl	8001dc8 <print>
		sprintf(buffer, " - V(max) = %i mV || V(min) = %i", MAX_V, MIN_V);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	699a      	ldr	r2, [r3, #24]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009a6:	491e      	ldr	r1, [pc, #120]	@ (8000a20 <_ZN7BMS_MOD12voltage_infoEPc+0x194>)
 80009a8:	6838      	ldr	r0, [r7, #0]
 80009aa:	f00b fb2d 	bl	800c008 <siprintf>
		print(buffer);
 80009ae:	6838      	ldr	r0, [r7, #0]
 80009b0:	f001 fa0a 	bl	8001dc8 <print>
	}
	sprintf(buffer, "- BALANCING V = %i mV", BALANCING_V);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009ba:	461a      	mov	r2, r3
 80009bc:	4919      	ldr	r1, [pc, #100]	@ (8000a24 <_ZN7BMS_MOD12voltage_infoEPc+0x198>)
 80009be:	6838      	ldr	r0, [r7, #0]
 80009c0:	f00b fb22 	bl	800c008 <siprintf>
	print(buffer);
 80009c4:	6838      	ldr	r0, [r7, #0]
 80009c6:	f001 f9ff 	bl	8001dc8 <print>

	sprintf(buffer, "- STACK VOLTAGE = %i V", voltage_acum / 1000);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d0:	4a15      	ldr	r2, [pc, #84]	@ (8000a28 <_ZN7BMS_MOD12voltage_infoEPc+0x19c>)
 80009d2:	fb82 1203 	smull	r1, r2, r2, r3
 80009d6:	1192      	asrs	r2, r2, #6
 80009d8:	17db      	asrs	r3, r3, #31
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	4913      	ldr	r1, [pc, #76]	@ (8000a2c <_ZN7BMS_MOD12voltage_infoEPc+0x1a0>)
 80009e0:	6838      	ldr	r0, [r7, #0]
 80009e2:	f00b fb11 	bl	800c008 <siprintf>
	print(buffer);
 80009e6:	6838      	ldr	r0, [r7, #0]
 80009e8:	f001 f9ee 	bl	8001dc8 <print>
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	0800c960 	.word	0x0800c960
 80009f8:	0800c97c 	.word	0x0800c97c
 80009fc:	0800c98c 	.word	0x0800c98c
 8000a00:	0800c9a4 	.word	0x0800c9a4
 8000a04:	0800c9b8 	.word	0x0800c9b8
 8000a08:	0800c9cc 	.word	0x0800c9cc
 8000a0c:	0800c9e0 	.word	0x0800c9e0
 8000a10:	0800c9f4 	.word	0x0800c9f4
 8000a14:	0800ca0c 	.word	0x0800ca0c
 8000a18:	0800ca1c 	.word	0x0800ca1c
 8000a1c:	0800ca24 	.word	0x0800ca24
 8000a20:	0800ca28 	.word	0x0800ca28
 8000a24:	0800ca4c 	.word	0x0800ca4c
 8000a28:	10624dd3 	.word	0x10624dd3
 8000a2c:	0800ca64 	.word	0x0800ca64

08000a30 <_ZN7BMS_MOD5parseEmPhm>:

/*********************************************************************************************************
 ** Function name:           parse
 ** Descriptions:            Function for parsing the received data via CAN protocol
 *********************************************************************************************************/
bool BMS_MOD::parse(uint32_t id, uint8_t *buf, uint32_t t) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]
	if (id > CANID && id < CANID + 30) {
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f240 8130 	bls.w	8000caa <_ZN7BMS_MOD5parseEmPhm+0x27a>
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	331e      	adds	r3, #30
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	f080 8129 	bcs.w	8000caa <_ZN7BMS_MOD5parseEmPhm+0x27a>
		int m = id % CANID;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a62:	fb01 f202 	mul.w	r2, r1, r2
 8000a66:	1a9b      	subs	r3, r3, r2
 8000a68:	617b      	str	r3, [r7, #20]
		int pos = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
		if (m >= 1 && m <= 5) {
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f340 809e 	ble.w	8000bb2 <_ZN7BMS_MOD5parseEmPhm+0x182>
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	2b05      	cmp	r3, #5
 8000a7a:	f300 809a 	bgt.w	8000bb2 <_ZN7BMS_MOD5parseEmPhm+0x182>
			time_lim_received_volts = t + TIME_LIM_RECV_VOLTS;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	441a      	add	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	63da      	str	r2, [r3, #60]	@ 0x3c

			for (int i = 0; i < 4; i++) {
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a8e:	e04e      	b.n	8000b2e <_ZN7BMS_MOD5parseEmPhm+0xfe>
				pos = (m - 1) * 4 + i;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a98:	4413      	add	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
				if (pos >= 19)
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	2b12      	cmp	r3, #18
 8000aa0:	dc49      	bgt.n	8000b36 <_ZN7BMS_MOD5parseEmPhm+0x106>
					break;

				cellVoltagemV[pos] = (buf[2 * i] << 8) | buf[2 * i + 1];
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	021b      	lsls	r3, r3, #8
 8000ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ab2:	0052      	lsls	r2, r2, #1
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	440a      	add	r2, r1
 8000aba:	7812      	ldrb	r2, [r2, #0]
 8000abc:	431a      	orrs	r2, r3
 8000abe:	68f9      	ldr	r1, [r7, #12]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	3328      	adds	r3, #40	@ 0x28
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	605a      	str	r2, [r3, #4]
				 //error_volt = BMS_OK;
				 } else {
				 flag_error_volt[pos] = 0;
				 }*/

				if ((cellVoltagemV[pos] > LIMIT_MAX_V) && pos < NUM_CELLS) {
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	3328      	adds	r3, #40	@ 0x28
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dd1e      	ble.n	8000b1c <_ZN7BMS_MOD5parseEmPhm+0xec>
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	da17      	bge.n	8000b1c <_ZN7BMS_MOD5parseEmPhm+0xec>
					flag_error_volt[pos]++;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	3216      	adds	r2, #22
 8000af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af6:	1c59      	adds	r1, r3, #1
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	3216      	adds	r2, #22
 8000afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					if (flag_error_volt[pos] >= max_flag)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	3216      	adds	r2, #22
 8000b08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b10:	429a      	cmp	r2, r3
 8000b12:	db09      	blt.n	8000b28 <_ZN7BMS_MOD5parseEmPhm+0xf8>
						error_volt = BMS_ERROR_VOLTS;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2202      	movs	r2, #2
 8000b18:	605a      	str	r2, [r3, #4]
					if (flag_error_volt[pos] >= max_flag)
 8000b1a:	e005      	b.n	8000b28 <_ZN7BMS_MOD5parseEmPhm+0xf8>
					//error_volt = BMS_OK;
				} else {
					flag_error_volt[pos] = 0;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	3216      	adds	r2, #22
 8000b22:	2100      	movs	r1, #0
 8000b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < 4; i++) {
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	ddad      	ble.n	8000a90 <_ZN7BMS_MOD5parseEmPhm+0x60>
 8000b34:	e000      	b.n	8000b38 <_ZN7BMS_MOD5parseEmPhm+0x108>
					break;
 8000b36:	bf00      	nop
				}
			}

			MAX_V = cellVoltagemV[0];
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	619a      	str	r2, [r3, #24]
			MIN_V = cellVoltagemV[0];
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
 8000b52:	e029      	b.n	8000ba8 <_ZN7BMS_MOD5parseEmPhm+0x178>
				if (cellVoltagemV[i] > MAX_V)
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	3328      	adds	r3, #40	@ 0x28
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dd08      	ble.n	8000b7a <_ZN7BMS_MOD5parseEmPhm+0x14a>
					MAX_V = cellVoltagemV[i];
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	3328      	adds	r3, #40	@ 0x28
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	619a      	str	r2, [r3, #24]
 8000b78:	e013      	b.n	8000ba2 <_ZN7BMS_MOD5parseEmPhm+0x172>
				else if (cellVoltagemV[i] < MIN_V)
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	3328      	adds	r3, #40	@ 0x28
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	da08      	bge.n	8000ba2 <_ZN7BMS_MOD5parseEmPhm+0x172>
					MIN_V = cellVoltagemV[i];
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	6a3b      	ldr	r3, [r7, #32]
 8000b94:	3328      	adds	r3, #40	@ 0x28
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			for (int i = 1; i < 19; i++) {
 8000ba2:	6a3b      	ldr	r3, [r7, #32]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	2b12      	cmp	r3, #18
 8000bac:	ddd2      	ble.n	8000b54 <_ZN7BMS_MOD5parseEmPhm+0x124>
			}

			return true;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e07c      	b.n	8000cac <_ZN7BMS_MOD5parseEmPhm+0x27c>

		} else if (m >= 21 && m <= 25) {
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b14      	cmp	r3, #20
 8000bb6:	dd78      	ble.n	8000caa <_ZN7BMS_MOD5parseEmPhm+0x27a>
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	2b19      	cmp	r3, #25
 8000bbc:	dc75      	bgt.n	8000caa <_ZN7BMS_MOD5parseEmPhm+0x27a>
			// m = 21 → packet 0, m = 25 → packet 4
			time_lim_received_temps = t + TIME_LIM_RECV_TEMPS;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	649a      	str	r2, [r3, #72]	@ 0x48
			if (flag_charger == 1)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d104      	bne.n	8000bde <_ZN7BMS_MOD5parseEmPhm+0x1ae>
				module_send_message_CAN1(id, buf, 8);
 8000bd4:	2208      	movs	r2, #8
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	68b8      	ldr	r0, [r7, #8]
 8000bda:	f001 f893 	bl	8001d04 <module_send_message_CAN1>

			for (int i = 0; i < 8; i++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	e021      	b.n	8000c28 <_ZN7BMS_MOD5parseEmPhm+0x1f8>
				pos = (m - 21) * 8 + i;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3b15      	subs	r3, #21
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	4413      	add	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
				if (pos >= 38)
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	2b25      	cmp	r3, #37	@ 0x25
 8000bf4:	dc1c      	bgt.n	8000c30 <_ZN7BMS_MOD5parseEmPhm+0x200>
					break;

				cellTemperature[pos] = buf[i];
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	323c      	adds	r2, #60	@ 0x3c
 8000c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				if (cellTemperature[pos] > LIMIT_MAX_T)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	323c      	adds	r2, #60	@ 0x3c
 8000c10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dd02      	ble.n	8000c22 <_ZN7BMS_MOD5parseEmPhm+0x1f2>
					error_temp = BMS_ERROR_TEMP;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2203      	movs	r2, #3
 8000c20:	609a      	str	r2, [r3, #8]
			for (int i = 0; i < 8; i++) {
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3301      	adds	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	2b07      	cmp	r3, #7
 8000c2c:	ddda      	ble.n	8000be4 <_ZN7BMS_MOD5parseEmPhm+0x1b4>
 8000c2e:	e000      	b.n	8000c32 <_ZN7BMS_MOD5parseEmPhm+0x202>
					break;
 8000c30:	bf00      	nop

			}

			MAX_T = cellTemperature[0];
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			MIN_T = cellTemperature[0];
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
			for (int i = 0; i < 38; i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
 8000c4e:	e027      	b.n	8000ca0 <_ZN7BMS_MOD5parseEmPhm+0x270>
				if (cellTemperature[i] > MAX_T)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	323c      	adds	r2, #60	@ 0x3c
 8000c56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dd08      	ble.n	8000c76 <_ZN7BMS_MOD5parseEmPhm+0x246>
					MAX_T = cellTemperature[i];
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	323c      	adds	r2, #60	@ 0x3c
 8000c6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8000c74:	e011      	b.n	8000c9a <_ZN7BMS_MOD5parseEmPhm+0x26a>
				else if (cellTemperature[i] < MIN_T)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	323c      	adds	r2, #60	@ 0x3c
 8000c7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c86:	429a      	cmp	r2, r3
 8000c88:	da07      	bge.n	8000c9a <_ZN7BMS_MOD5parseEmPhm+0x26a>
					MIN_T = cellTemperature[i];
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	323c      	adds	r2, #60	@ 0x3c
 8000c90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
			for (int i = 0; i < 38; i++) {
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2b25      	cmp	r3, #37	@ 0x25
 8000ca4:	ddd4      	ble.n	8000c50 <_ZN7BMS_MOD5parseEmPhm+0x220>
			}

			return true;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <_ZN7BMS_MOD5parseEmPhm+0x27c>
		}

	}

	return false;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3728      	adds	r7, #40	@ 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_ZN7BMS_MOD13query_voltageEmPc>:

/*********************************************************************************************************
 ** Function name:           query_voltage
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/
int BMS_MOD::query_voltage(uint32_t time, char *buffer) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
	// Shunt voltage in milivolts

	if (get_state() == charge) {
 8000cc0:	f001 f91a 	bl	8001ef8 <_Z9get_statev>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf0c      	ite	eq
 8000cca:	2301      	moveq	r3, #1
 8000ccc:	2300      	movne	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d00f      	beq.n	8000cf4 <_ZN7BMS_MOD13query_voltageEmPc+0x40>
		//Only balance when charging
		message_balancing[1] = BALANCING_V & 0xFF; // Coment this two lines for disabling the balancing
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		message_balancing[0] = (BALANCING_V >> 8) & 0xFF; // Coment this two lines for disabling the balancing
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ce8:	121b      	asrs	r3, r3, #8
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8000cf2:	e007      	b.n	8000d04 <_ZN7BMS_MOD13query_voltageEmPc+0x50>

	} else {

		//Don't do anything

		message_balancing[0] = 0;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		message_balancing[1] = 0;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	}

	if (time > time_lim_sent_volts) {
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d91d      	bls.n	8000d4a <_ZN7BMS_MOD13query_voltageEmPc+0x96>
		time_lim_sent_volts += TIME_LIM_SEND_VOLTS;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6a1b      	ldr	r3, [r3, #32]
 8000d16:	441a      	add	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	639a      	str	r2, [r3, #56]	@ 0x38
		if (CANID != 0x00) { //It keeps sending 0x00 and dont know where
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d012      	beq.n	8000d4a <_ZN7BMS_MOD13query_voltageEmPc+0x96>
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	334c      	adds	r3, #76	@ 0x4c
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f001 f82a 	bl	8001d88 <module_send_message_CAN2>
 8000d34:	4603      	mov	r3, r0
					!= HAL_OK) {
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	bf14      	ite	ne
 8000d3a:	2301      	movne	r3, #1
 8000d3c:	2300      	moveq	r3, #0
 8000d3e:	b2db      	uxtb	r3, r3
			if (module_send_message_CAN2(CANID, message_balancing, 2)
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <_ZN7BMS_MOD13query_voltageEmPc+0x96>
				error_volt = BMS_ERROR_COMMUNICATION;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2201      	movs	r2, #1
 8000d48:	605a      	str	r2, [r3, #4]
	if (time > time_lim_received_volts) {

		//error_volt = BMS_ERROR_COMMUNICATION;
	}

	if (TIME_LIM_PLOT_VOLTS > 0 && time > time_lim_plotted_volts) {
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00f      	beq.n	8000d72 <_ZN7BMS_MOD13query_voltageEmPc+0xbe>
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d90a      	bls.n	8000d72 <_ZN7BMS_MOD13query_voltageEmPc+0xbe>
		time_lim_plotted_volts += TIME_LIM_PLOT_VOLTS;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	441a      	add	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	635a      	str	r2, [r3, #52]	@ 0x34
		voltage_info(buffer);
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f7ff fd8d 	bl	800088c <_ZN7BMS_MOD12voltage_infoEPc>
	}

	for (int i = 0; i < NUM_CELLS; i++) {
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e00f      	b.n	8000d98 <_ZN7BMS_MOD13query_voltageEmPc+0xe4>
		voltage_acum += cellVoltagemV[i];
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000d7e:	68f9      	ldr	r1, [r7, #12]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3328      	adds	r3, #40	@ 0x28
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	440b      	add	r3, r1
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	441a      	add	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < NUM_CELLS; i++) {
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000d9e:	461a      	mov	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	4293      	cmp	r3, r2
 8000da4:	dbe8      	blt.n	8000d78 <_ZN7BMS_MOD13query_voltageEmPc+0xc4>
	}
	return error_volt;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	685b      	ldr	r3, [r3, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_ZN7BMS_MOD17query_temperatureEmPc>:
/*********************************************************************************************************
 ** Function name:           query_temperature
 ** Descriptions:            Function to check if i need to send a message new message and the received messages interval are within the limits
 *********************************************************************************************************/

int BMS_MOD::query_temperature(uint32_t time, char *buffer) {
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
// Function for performing a correct behavior
	if (time > time_lim_sent_temps) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE TEMPERATURES
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d91b      	bls.n	8000e00 <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
		time_lim_sent_temps += TIME_LIM_SEND_TEMPS;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd0:	441a      	add	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	645a      	str	r2, [r3, #68]	@ 0x44

		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f103 0014 	add.w	r0, r3, #20
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	334e      	adds	r3, #78	@ 0x4e
 8000de2:	2202      	movs	r2, #2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f000 ffcf 	bl	8001d88 <module_send_message_CAN2>
 8000dea:	4603      	mov	r3, r0
				!= HAL_OK) {
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	bf14      	ite	ne
 8000df0:	2301      	movne	r3, #1
 8000df2:	2300      	moveq	r3, #0
 8000df4:	b2db      	uxtb	r3, r3
		if (module_send_message_CAN2(CANID + 20, message_temperatures, 2)
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <_ZN7BMS_MOD17query_temperatureEmPc+0x4e>
			error_temp = BMS_ERROR_TEMP; // If the message is not sended then, error
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	609a      	str	r2, [r3, #8]
		}
	}

	if (time_lim_sent_temps > 0 && time > time_lim_received_temps
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00f      	beq.n	8000e28 <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d90a      	bls.n	8000e28 <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
			&& time - time_lim_received_temps > TIME_LIM_RECV_TEMPS) {
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	1ad2      	subs	r2, r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d902      	bls.n	8000e28 <_ZN7BMS_MOD17query_temperatureEmPc+0x76>
		error_temp = BMS_ERROR_COMMUNICATION;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2201      	movs	r2, #1
 8000e26:	609a      	str	r2, [r3, #8]
	}

	if (TIME_LIM_PLOT_TEMPS > 0 && time > time_lim_plotted_temps) {
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d00b      	beq.n	8000e48 <_ZN7BMS_MOD17query_temperatureEmPc+0x96>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d906      	bls.n	8000e48 <_ZN7BMS_MOD17query_temperatureEmPc+0x96>
		time_lim_plotted_temps += TIME_LIM_PLOT_TEMPS;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e42:	441a      	add	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	641a      	str	r2, [r3, #64]	@ 0x40
		//temperature_info(buffer);
	}

	return error_temp;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	689b      	ldr	r3, [r3, #8]

}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_ZN7CPU_MODC1Emmi>:

// ********************************************************************************************************
// **Function name:           CPU_MOD
// **Descriptions:            Initialization function of teh class
// ********************************************************************************************************
CPU_MOD::CPU_MOD(uint32_t _ID_send, uint32_t _ID_recv, int _LAG) { /////////////////////////Habia un _LAG=0
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2201      	movs	r2, #1
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2202      	movs	r2, #2
 8000e78:	731a      	strb	r2, [r3, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e86:	615a      	str	r2, [r3, #20]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2264      	movs	r2, #100	@ 0x64
 8000e8c:	619a      	str	r2, [r3, #24]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4a18      	ldr	r2, [pc, #96]	@ (8000ef4 <_ZN7CPU_MODC1Emmi+0xa0>)
 8000e92:	61da      	str	r2, [r3, #28]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	695a      	ldr	r2, [r3, #20]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	621a      	str	r2, [r3, #32]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	69da      	ldr	r2, [r3, #28]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2200      	movs	r2, #0
 8000eae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	631a      	str	r2, [r3, #48]	@ 0x30
    CANID_send = _ID_send;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	601a      	str	r2, [r3, #0]
    CANID_recv = _ID_recv;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	605a      	str	r2, [r3, #4]

    time_lim_plotted += _LAG;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6a1a      	ldr	r2, [r3, #32]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	441a      	add	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	621a      	str	r2, [r3, #32]
    time_lim_sended += _LAG;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	441a      	add	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	625a      	str	r2, [r3, #36]	@ 0x24
    time_lim_received += _LAG;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	441a      	add	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	000f4240 	.word	0x000f4240

08000ef8 <_ZN7CPU_MOD5parseEmPhm>:

// ********************************************************************************************************
// **Function name:           parse
// **Descriptions:            Function for parsing the received data via CAN protocl
// ********************************************************************************************************
bool CPU_MOD::parse(uint32_t id, uint8_t* buf, uint32_t t) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	603b      	str	r3, [r7, #0]
    if (id == 0x100) {
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f0c:	d131      	bne.n	8000f72 <_ZN7CPU_MOD5parseEmPhm+0x7a>
        error = CPU_OK;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
        time_lim_received = t + TIME_LIM_RECV;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	69da      	ldr	r2, [r3, #28]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	441a      	add	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	629a      	str	r2, [r3, #40]	@ 0x28
        DC_BUS = (int)((buf[1]<<8)|buf[0]); // This direction sends the voltage in DC_BUS
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3301      	adds	r3, #1
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	7812      	ldrb	r2, [r2, #0]
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	631a      	str	r2, [r3, #48]	@ 0x30
        if (DC_BUS > 280) { //(DC_BUS>0.9*voltage_acum)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000f3a:	dd18      	ble.n	8000f6e <_ZN7CPU_MOD5parseEmPhm+0x76>
            error = CPU_BUS_LINE_OK;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2202      	movs	r2, #2
 8000f40:	609a      	str	r2, [r3, #8]
            if (module_send_message_CAN1(CANID_send, currentState, 1) != HAL_OK){
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	330c      	adds	r3, #12
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f000 fed9 	bl	8001d04 <module_send_message_CAN1>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf14      	ite	ne
 8000f58:	2301      	movne	r3, #1
 8000f5a:	2300      	moveq	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d005      	beq.n	8000f6e <_ZN7CPU_MOD5parseEmPhm+0x76>
                error = CPU_ERROR_COMMUNICATION;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2201      	movs	r2, #1
 8000f66:	609a      	str	r2, [r3, #8]
                print((char*)"error message");
 8000f68:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <_ZN7CPU_MOD5parseEmPhm+0x84>)
 8000f6a:	f000 ff2d 	bl	8001dc8 <print>
            }

        }
        return true;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <_ZN7CPU_MOD5parseEmPhm+0x7c>
    }
    return false;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	0800cbd8 	.word	0x0800cbd8

08000f80 <_ZN7CPU_MOD5queryEmPc>:

// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function to check if i need to send a mesage new mesage and the received mesajes interval are within the limits
// ********************************************************************************************************
int CPU_MOD::query(uint32_t time, char* buffer) {
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
	// Function for performing a correct behaivour
    if (time > time_lim_sended) { // HERE I HAVE TO SEND THE REQUEST MESSAGE FOR THE BMS
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d906      	bls.n	8000fa4 <_ZN7CPU_MOD5queryEmPc+0x24>
        time_lim_sended += TIME_LIM_SEND;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	441a      	add	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (time > time_lim_received)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d902      	bls.n	8000fb4 <_ZN7CPU_MOD5queryEmPc+0x34>
        error = CPU_ERROR_COMMUNICATION; ///////Cheking if everything is alright each time
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	609a      	str	r2, [r3, #8]

    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted) {
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00b      	beq.n	8000fd4 <_ZN7CPU_MOD5queryEmPc+0x54>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d906      	bls.n	8000fd4 <_ZN7CPU_MOD5queryEmPc+0x54>
        time_lim_plotted += TIME_LIM_PLOT;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6a1a      	ldr	r2, [r3, #32]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	441a      	add	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	621a      	str	r2, [r3, #32]
        //info(buffer);
    }
    return error;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	689b      	ldr	r3, [r3, #8]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_ZN7CPU_MOD11updateStateEi>:

void CPU_MOD::updateState(int s) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
    currentState[0] = s & 0xFF;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	731a      	strb	r2, [r3, #12]
    current_state = s;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	611a      	str	r2, [r3, #16]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_ZN11Current_MODC1Emi>:

// ********************************************************************************************************
// **Function name:           Current_MOD
// **Descriptions:            Initialization function of current class
// **********************************************************************************************************
Current_MOD::Current_MOD(uint32_t ID, int _C_MAX)
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	721a      	strb	r2, [r3, #8]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2200      	movs	r2, #0
 800102a:	725a      	strb	r2, [r3, #9]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001050:	621a      	str	r2, [r3, #32]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	22fa      	movs	r2, #250	@ 0xfa
 8001056:	625a      	str	r2, [r3, #36]	@ 0x24
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2232      	movs	r2, #50	@ 0x32
 800105c:	629a      	str	r2, [r3, #40]	@ 0x28
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2232      	movs	r2, #50	@ 0x32
 8001062:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	631a      	str	r2, [r3, #48]	@ 0x30
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2200      	movs	r2, #0
 800106e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2200      	movs	r2, #0
 8001074:	639a      	str	r2, [r3, #56]	@ 0x38
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2200      	movs	r2, #0
 8001080:	641a      	str	r2, [r3, #64]	@ 0x40
{
    CANID = ID;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	605a      	str	r2, [r3, #4]
    C_MAX = _C_MAX;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	601a      	str	r2, [r3, #0]
    flag_error_current = 1;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2201      	movs	r2, #1
 8001092:	61da      	str	r2, [r3, #28]
}
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	0000      	movs	r0, r0
 80010a4:	0000      	movs	r0, r0
	...

080010a8 <_ZN11Current_MOD5queryEiPc>:
// ********************************************************************************************************
// ** Function name:           query
// ** Descriptions:            Function that transforms the voltage measured by the sensor to its equivalent current
// **********************************************************************************************************
int Current_MOD::query(int time, char* buffer)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
    error = Current_OK;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2200      	movs	r2, #0
 80010b8:	631a      	str	r2, [r3, #48]	@ 0x30

    //printValue(Current);
    Current=(2.5-VoltageV)/0.0057; //Sensitivity is 5,7 mv/A
    */

    Current = readAnalogValue();
 80010ba:	f000 fecd 	bl	8001e58 <readAnalogValue>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c6:	ee17 2a90 	vmov	r2, s15
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(Current > C_MAX*0.8 && Current < C_MAX)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010e6:	ed9f 5b42 	vldr	d5, [pc, #264]	@ 80011f0 <_ZN11Current_MOD5queryEiPc+0x148>
 80010ea:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	dd11      	ble.n	800111c <_ZN11Current_MOD5queryEiPc+0x74>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	da0b      	bge.n	800111c <_ZN11Current_MOD5queryEiPc+0x74>
    {
        if(flag_error_current == 0) module_send_message_NoExtId_CAN1(0x500,message,1); //If current between 80 and 100% of maximun, sends alert
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d107      	bne.n	800111c <_ZN11Current_MOD5queryEiPc+0x74>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3308      	adds	r3, #8
 8001110:	2201      	movs	r2, #1
 8001112:	4619      	mov	r1, r3
 8001114:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001118:	f000 fe16 	bl	8001d48 <module_send_message_NoExtId_CAN1>
    }

    if (Current > C_MAX)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	dd18      	ble.n	800115a <_ZN11Current_MOD5queryEiPc+0xb2>
    {
        if (flag_error_current == 1) {
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d107      	bne.n	8001140 <_ZN11Current_MOD5queryEiPc+0x98>
        	module_send_message_NoExtId_CAN1(0x501, message, 2); //If current over maximun, sends alert
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3308      	adds	r3, #8
 8001134:	2202      	movs	r2, #2
 8001136:	4619      	mov	r1, r3
 8001138:	f240 5001 	movw	r0, #1281	@ 0x501
 800113c:	f000 fe04 	bl	8001d48 <module_send_message_NoExtId_CAN1>
        }

        flag_error_current++;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	61da      	str	r2, [r3, #28]

        if (flag_charger != 1 || flag_charger == 1) //Only cut the AMS if accu not connected to charger, during charging the current control is on charger
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800114e:	2b01      	cmp	r3, #1
 8001150:	d119      	bne.n	8001186 <_ZN11Current_MOD5queryEiPc+0xde>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001156:	2b01      	cmp	r3, #1
 8001158:	e015      	b.n	8001186 <_ZN11Current_MOD5queryEiPc+0xde>
            }
        }
    }
    else
    {
        if (flag_error_current != 0)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00e      	beq.n	8001180 <_ZN11Current_MOD5queryEiPc+0xd8>
		for (int i = 0; i < 5; i++)
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	e008      	b.n	800117a <_ZN11Current_MOD5queryEiPc+0xd2>
		{
			module_send_message_NoExtId_CAN1(0x502, 0, 2); //If current normal, sends green flag
 8001168:	2202      	movs	r2, #2
 800116a:	2100      	movs	r1, #0
 800116c:	f240 5002 	movw	r0, #1282	@ 0x502
 8001170:	f000 fdea 	bl	8001d48 <module_send_message_NoExtId_CAN1>
		for (int i = 0; i < 5; i++)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2b04      	cmp	r3, #4
 800117e:	ddf3      	ble.n	8001168 <_ZN11Current_MOD5queryEiPc+0xc0>
		}
        flag_error_current = 0;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
    }


    if (time > time_lim_sended)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	429a      	cmp	r2, r3
 800118e:	dd16      	ble.n	80011be <_ZN11Current_MOD5queryEiPc+0x116>
    {
        time_lim_sended += TIME_LIM_SEND;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001198:	441a      	add	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	62da      	str	r2, [r3, #44]	@ 0x2c
        message[0] = 0;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	721a      	strb	r2, [r3, #8]
        message[1] = Current & 0xFF;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	725a      	strb	r2, [r3, #9]
        module_send_message_NoExtId_CAN1(CANID, message, 2); //Sends current through CAN each interval of ms
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6858      	ldr	r0, [r3, #4]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3308      	adds	r3, #8
 80011b6:	2202      	movs	r2, #2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f000 fdc5 	bl	8001d48 <module_send_message_NoExtId_CAN1>
    }


    if (TIME_LIM_PLOT > 0 && time > time_lim_plotted)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	dd0b      	ble.n	80011de <_ZN11Current_MOD5queryEiPc+0x136>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dd06      	ble.n	80011de <_ZN11Current_MOD5queryEiPc+0x136>
    {
        time_lim_plotted += TIME_LIM_PLOT;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	441a      	add	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
        //info(buffer);

    }

    
    return error;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	f3af 8000 	nop.w
 80011f0:	9999999a 	.word	0x9999999a
 80011f4:	3fe99999 	.word	0x3fe99999

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fe:	f001 fcf5 	bl	8002bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001202:	f000 f8a5 	bl	8001350 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001206:	f000 f91f 	bl	8001448 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120a:	f000 fc57 	bl	8001abc <_ZL12MX_GPIO_Initv>
  MX_FDCAN2_Init();
 800120e:	f000 fadd 	bl	80017cc <_ZL14MX_FDCAN2_Initv>
  MX_FDCAN1_Init();
 8001212:	f000 fa51 	bl	80016b8 <_ZL14MX_FDCAN1_Initv>
  MX_USART2_UART_Init();
 8001216:	f000 fbf1 	bl	80019fc <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800121a:	f000 f949 	bl	80014b0 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 800121e:	f000 f9d1 	bl	80015c4 <_ZL12MX_ADC3_Initv>
  MX_TIM17_Init();
 8001222:	f000 fb5d 	bl	80018e0 <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001226:	2100      	movs	r1, #0
 8001228:	483e      	ldr	r0, [pc, #248]	@ (8001324 <main+0x12c>)
 800122a:	f008 fe05 	bl	8009e38 <HAL_TIM_PWM_Start>



  if (HAL_FDCAN_Start(&hfdcan1) == HAL_OK){
 800122e:	483e      	ldr	r0, [pc, #248]	@ (8001328 <main+0x130>)
 8001230:	f004 f870 	bl	8005314 <HAL_FDCAN_Start>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	bf0c      	ite	eq
 800123a:	2301      	moveq	r3, #1
 800123c:	2300      	movne	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <main+0x52>
	  print((char*)"CAN_ACU iniciado");
 8001244:	4839      	ldr	r0, [pc, #228]	@ (800132c <main+0x134>)
 8001246:	f000 fdbf 	bl	8001dc8 <print>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) == HAL_OK)
 800124a:	2200      	movs	r2, #0
 800124c:	2101      	movs	r1, #1
 800124e:	4836      	ldr	r0, [pc, #216]	@ (8001328 <main+0x130>)
 8001250:	f004 fa52 	bl	80056f8 <HAL_FDCAN_ActivateNotification>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <main+0x72>
  {
	  print((char*)"CAN_ACU notification");
 8001264:	4832      	ldr	r0, [pc, #200]	@ (8001330 <main+0x138>)
 8001266:	f000 fdaf 	bl	8001dc8 <print>
  }

  if (HAL_FDCAN_Start(&hfdcan2) == HAL_OK){
 800126a:	4832      	ldr	r0, [pc, #200]	@ (8001334 <main+0x13c>)
 800126c:	f004 f852 	bl	8005314 <HAL_FDCAN_Start>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	bf0c      	ite	eq
 8001276:	2301      	moveq	r3, #1
 8001278:	2300      	movne	r3, #0
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <main+0x8e>
	  print((char*)"CAN_BMS iniciado");
 8001280:	482d      	ldr	r0, [pc, #180]	@ (8001338 <main+0x140>)
 8001282:	f000 fda1 	bl	8001dc8 <print>
  }

  if(HAL_ADC_Start(&hadc3) == HAL_OK){
 8001286:	482d      	ldr	r0, [pc, #180]	@ (800133c <main+0x144>)
 8001288:	f002 fa70 	bl	800376c <HAL_ADC_Start>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf0c      	ite	eq
 8001292:	2301      	moveq	r3, #1
 8001294:	2300      	movne	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <main+0xaa>
	  print((char*)"ADC iniciado");
 800129c:	4828      	ldr	r0, [pc, #160]	@ (8001340 <main+0x148>)
 800129e:	f000 fd93 	bl	8001dc8 <print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_state();
 80012a2:	f000 fe35 	bl	8001f10 <_Z12select_statev>
		  msg_acu.bus = 1;
		  msg_acu.time = HAL_GetTick();
		  parse_state(msg_acu);
	  }*/

	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader_bms, RxData) == HAL_OK) {
 80012a6:	4b27      	ldr	r3, [pc, #156]	@ (8001344 <main+0x14c>)
 80012a8:	4a27      	ldr	r2, [pc, #156]	@ (8001348 <main+0x150>)
 80012aa:	2140      	movs	r1, #64	@ 0x40
 80012ac:	4821      	ldr	r0, [pc, #132]	@ (8001334 <main+0x13c>)
 80012ae:	f004 f8b7 	bl	8005420 <HAL_FDCAN_GetRxMessage>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0ef      	beq.n	80012a2 <main+0xaa>

		  msg_bms.id = RxHeader_bms.Identifier;
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <main+0x150>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a21      	ldr	r2, [pc, #132]	@ (800134c <main+0x154>)
 80012c8:	6013      	str	r3, [r2, #0]
		  msg_bms.len = RxHeader_bms.DataLength;
 80012ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <main+0x150>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <main+0x154>)
 80012d2:	711a      	strb	r2, [r3, #4]
		  for (int i = 0; i < 8; i++) {msg_bms.buf[i] = RxData[i];}
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	e00c      	b.n	80012f4 <main+0xfc>
 80012da:	4a1a      	ldr	r2, [pc, #104]	@ (8001344 <main+0x14c>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	7819      	ldrb	r1, [r3, #0]
 80012e2:	4a1a      	ldr	r2, [pc, #104]	@ (800134c <main+0x154>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	3305      	adds	r3, #5
 80012ea:	460a      	mov	r2, r1
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3301      	adds	r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	ddef      	ble.n	80012da <main+0xe2>
		  msg_bms.bus = 2;
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <main+0x154>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	611a      	str	r2, [r3, #16]
		  msg_bms.time = HAL_GetTick();
 8001300:	f001 fcfa 	bl	8002cf8 <HAL_GetTick>
 8001304:	4603      	mov	r3, r0
 8001306:	4a11      	ldr	r2, [pc, #68]	@ (800134c <main+0x154>)
 8001308:	6153      	str	r3, [r2, #20]

		  parse_state(msg_bms);
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <main+0x154>)
 800130c:	466c      	mov	r4, sp
 800130e:	f103 0210 	add.w	r2, r3, #16
 8001312:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001316:	e884 0003 	stmia.w	r4, {r0, r1}
 800131a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800131c:	f001 f828 	bl	8002370 <_Z11parse_state6CANMsg>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001320:	e7bf      	b.n	80012a2 <main+0xaa>
 8001322:	bf00      	nop
 8001324:	240002a8 	.word	0x240002a8
 8001328:	24000168 	.word	0x24000168
 800132c:	0800cbe8 	.word	0x0800cbe8
 8001330:	0800cbfc 	.word	0x0800cbfc
 8001334:	24000208 	.word	0x24000208
 8001338:	0800cc14 	.word	0x0800cc14
 800133c:	240000f8 	.word	0x240000f8
 8001340:	0800cc28 	.word	0x0800cc28
 8001344:	24000420 	.word	0x24000420
 8001348:	240003f8 	.word	0x240003f8
 800134c:	2400048c 	.word	0x2400048c

08001350 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b09c      	sub	sp, #112	@ 0x70
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135a:	224c      	movs	r2, #76	@ 0x4c
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f00a fe74 	bl	800c04c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2220      	movs	r2, #32
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f00a fe6e 	bl	800c04c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001370:	2002      	movs	r0, #2
 8001372:	f005 f923 	bl	80065bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	4b32      	ldr	r3, [pc, #200]	@ (8001444 <_Z18SystemClock_Configv+0xf4>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4a31      	ldr	r2, [pc, #196]	@ (8001444 <_Z18SystemClock_Configv+0xf4>)
 8001380:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001384:	6193      	str	r3, [r2, #24]
 8001386:	4b2f      	ldr	r3, [pc, #188]	@ (8001444 <_Z18SystemClock_Configv+0xf4>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001392:	bf00      	nop
 8001394:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <_Z18SystemClock_Configv+0xf4>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800139c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f3      	bne.n	8001394 <_Z18SystemClock_Configv+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ac:	2301      	movs	r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b6:	2302      	movs	r3, #2
 80013b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ba:	2302      	movs	r3, #2
 80013bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80013be:	2302      	movs	r3, #2
 80013c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80013c2:	232c      	movs	r3, #44	@ 0x2c
 80013c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013ca:	2304      	movs	r3, #4
 80013cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013d2:	230c      	movs	r3, #12
 80013d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e2:	4618      	mov	r0, r3
 80013e4:	f005 f924 	bl	8006630 <HAL_RCC_OscConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf14      	ite	ne
 80013ee:	2301      	movne	r3, #1
 80013f0:	2300      	moveq	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 80013f8:	f000 fd78 	bl	8001eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fc:	233f      	movs	r3, #63	@ 0x3f
 80013fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	2303      	movs	r3, #3
 8001402:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001408:	2308      	movs	r3, #8
 800140a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800140c:	2340      	movs	r3, #64	@ 0x40
 800140e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001410:	2340      	movs	r3, #64	@ 0x40
 8001412:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001414:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001418:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800141a:	2340      	movs	r3, #64	@ 0x40
 800141c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2103      	movs	r1, #3
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fcde 	bl	8006de4 <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf14      	ite	ne
 800142e:	2301      	movne	r3, #1
 8001430:	2300      	moveq	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 8001438:	f000 fd58 	bl	8001eec <Error_Handler>
  }
}
 800143c:	bf00      	nop
 800143e:	3770      	adds	r7, #112	@ 0x70
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	58024800 	.word	0x58024800

08001448 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0ae      	sub	sp, #184	@ 0xb8
 800144c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800144e:	463b      	mov	r3, r7
 8001450:	22b8      	movs	r2, #184	@ 0xb8
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f00a fdf9 	bl	800c04c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800145a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001466:	2302      	movs	r3, #2
 8001468:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800146a:	2310      	movs	r3, #16
 800146c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800146e:	2302      	movs	r3, #2
 8001470:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001472:	2302      	movs	r3, #2
 8001474:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800147a:	23c0      	movs	r3, #192	@ 0xc0
 800147c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	4618      	mov	r0, r3
 8001490:	f006 f834 	bl	80074fc <HAL_RCCEx_PeriphCLKConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	bf14      	ite	ne
 800149a:	2301      	movne	r3, #1
 800149c:	2300      	moveq	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 80014a4:	f000 fd22 	bl	8001eec <Error_Handler>
  }
}
 80014a8:	bf00      	nop
 80014aa:	37b8      	adds	r7, #184	@ 0xb8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	@ 0x30
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	463b      	mov	r3, r7
 80014c4:	2224      	movs	r2, #36	@ 0x24
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00a fdbf 	bl	800c04c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014ce:	4b3a      	ldr	r3, [pc, #232]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 80014d0:	4a3a      	ldr	r2, [pc, #232]	@ (80015bc <_ZL12MX_ADC1_Initv+0x10c>)
 80014d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014d4:	4b38      	ldr	r3, [pc, #224]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014da:	4b37      	ldr	r3, [pc, #220]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 80014dc:	2208      	movs	r2, #8
 80014de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014e0:	4b35      	ldr	r3, [pc, #212]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e6:	4b34      	ldr	r3, [pc, #208]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 80014e8:	2204      	movs	r2, #4
 80014ea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014ec:	4b32      	ldr	r3, [pc, #200]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014f2:	4b31      	ldr	r3, [pc, #196]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014f8:	4b2f      	ldr	r3, [pc, #188]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014fe:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001506:	4b2c      	ldr	r3, [pc, #176]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 8001508:	2200      	movs	r2, #0
 800150a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150c:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 800150e:	2200      	movs	r2, #0
 8001510:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001512:	4b29      	ldr	r3, [pc, #164]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 8001514:	2200      	movs	r2, #0
 8001516:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001518:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 800151a:	2200      	movs	r2, #0
 800151c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800151e:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 8001520:	2200      	movs	r2, #0
 8001522:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001524:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800152c:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 800152e:	2201      	movs	r2, #1
 8001530:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001532:	4821      	ldr	r0, [pc, #132]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 8001534:	f001 ff12 	bl	800335c <HAL_ADC_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf14      	ite	ne
 800153e:	2301      	movne	r3, #1
 8001540:	2300      	moveq	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8001548:	f000 fcd0 	bl	8001eec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001550:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	4818      	ldr	r0, [pc, #96]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 8001558:	f003 fa96 	bl	8004a88 <HAL_ADCEx_MultiModeConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 800156c:	f000 fcbe 	bl	8001eec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001570:	4b13      	ldr	r3, [pc, #76]	@ (80015c0 <_ZL12MX_ADC1_Initv+0x110>)
 8001572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001574:	2306      	movs	r3, #6
 8001576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800157c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001580:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001582:	2304      	movs	r3, #4
 8001584:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	4619      	mov	r1, r3
 8001594:	4808      	ldr	r0, [pc, #32]	@ (80015b8 <_ZL12MX_ADC1_Initv+0x108>)
 8001596:	f002 fae9 	bl	8003b6c <HAL_ADC_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf14      	ite	ne
 80015a0:	2301      	movne	r3, #1
 80015a2:	2300      	moveq	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <_ZL12MX_ADC1_Initv+0xfe>
  {
    Error_Handler();
 80015aa:	f000 fc9f 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	3730      	adds	r7, #48	@ 0x30
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	24000088 	.word	0x24000088
 80015bc:	40022000 	.word	0x40022000
 80015c0:	08600004 	.word	0x08600004

080015c4 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2224      	movs	r2, #36	@ 0x24
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f00a fd3b 	bl	800c04c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80015d6:	4b35      	ldr	r3, [pc, #212]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 80015d8:	4a35      	ldr	r2, [pc, #212]	@ (80016b0 <_ZL12MX_ADC3_Initv+0xec>)
 80015da:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015dc:	4b33      	ldr	r3, [pc, #204]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 80015e2:	4b32      	ldr	r3, [pc, #200]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 80015e4:	220c      	movs	r2, #12
 80015e6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80015e8:	4b30      	ldr	r3, [pc, #192]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015ee:	4b2f      	ldr	r3, [pc, #188]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f4:	4b2d      	ldr	r3, [pc, #180]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 80015f6:	2204      	movs	r2, #4
 80015f8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015fa:	4b2c      	ldr	r3, [pc, #176]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001600:	4b2a      	ldr	r3, [pc, #168]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 8001602:	2200      	movs	r2, #0
 8001604:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001606:	4b29      	ldr	r3, [pc, #164]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 8001608:	2201      	movs	r2, #1
 800160a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800160c:	4b27      	ldr	r3, [pc, #156]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001614:	4b25      	ldr	r3, [pc, #148]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800161a:	4b24      	ldr	r3, [pc, #144]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 800161c:	2200      	movs	r2, #0
 800161e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001620:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001628:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 800162a:	2200      	movs	r2, #0
 800162c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800162e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 8001630:	2200      	movs	r2, #0
 8001632:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001634:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 8001636:	2200      	movs	r2, #0
 8001638:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800163a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 800163c:	2200      	movs	r2, #0
 800163e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8001648:	4b18      	ldr	r3, [pc, #96]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 800164a:	2200      	movs	r2, #0
 800164c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800164e:	4817      	ldr	r0, [pc, #92]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 8001650:	f001 fe84 	bl	800335c <HAL_ADC_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 8001664:	f000 fc42 	bl	8001eec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <_ZL12MX_ADC3_Initv+0xf0>)
 800166a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800166c:	2306      	movs	r3, #6
 800166e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001674:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001678:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800167a:	2304      	movs	r3, #4
 800167c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	4619      	mov	r1, r3
 800168a:	4808      	ldr	r0, [pc, #32]	@ (80016ac <_ZL12MX_ADC3_Initv+0xe8>)
 800168c:	f002 fa6e 	bl	8003b6c <HAL_ADC_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	bf14      	ite	ne
 8001696:	2301      	movne	r3, #1
 8001698:	2300      	moveq	r3, #0
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <_ZL12MX_ADC3_Initv+0xe0>
  {
    Error_Handler();
 80016a0:	f000 fc24 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	@ 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	240000f8 	.word	0x240000f8
 80016b0:	58026000 	.word	0x58026000
 80016b4:	1d500080 	.word	0x1d500080

080016b8 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80016be:	4b41      	ldr	r3, [pc, #260]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016c0:	4a41      	ldr	r2, [pc, #260]	@ (80017c8 <_ZL14MX_FDCAN1_Initv+0x110>)
 80016c2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80016c4:	4b3f      	ldr	r3, [pc, #252]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016ca:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80016cc:	4b3d      	ldr	r3, [pc, #244]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80016d2:	4b3c      	ldr	r3, [pc, #240]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80016d8:	4b3a      	ldr	r3, [pc, #232]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80016de:	4b39      	ldr	r3, [pc, #228]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 80016e4:	4b37      	ldr	r3, [pc, #220]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016e6:	2203      	movs	r2, #3
 80016e8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80016ea:	4b36      	ldr	r3, [pc, #216]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 80016f0:	4b34      	ldr	r3, [pc, #208]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016f2:	220a      	movs	r2, #10
 80016f4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80016f6:	4b33      	ldr	r3, [pc, #204]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016f8:	2205      	movs	r2, #5
 80016fa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80016fc:	4b31      	ldr	r3, [pc, #196]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80016fe:	2201      	movs	r2, #1
 8001700:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001702:	4b30      	ldr	r3, [pc, #192]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001704:	2201      	movs	r2, #1
 8001706:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001708:	4b2e      	ldr	r3, [pc, #184]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800170a:	2201      	movs	r2, #1
 800170c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800170e:	4b2d      	ldr	r3, [pc, #180]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001710:	2201      	movs	r2, #1
 8001712:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001714:	4b2b      	ldr	r3, [pc, #172]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001716:	2200      	movs	r2, #0
 8001718:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800171a:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800171c:	2200      	movs	r2, #0
 800171e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 5;
 8001720:	4b28      	ldr	r3, [pc, #160]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001722:	2205      	movs	r2, #5
 8001724:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8001726:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001728:	2220      	movs	r2, #32
 800172a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800172c:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800172e:	2204      	movs	r2, #4
 8001730:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8001732:	4b24      	ldr	r3, [pc, #144]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001734:	2220      	movs	r2, #32
 8001736:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001738:	4b22      	ldr	r3, [pc, #136]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800173a:	2204      	movs	r2, #4
 800173c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 800173e:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001740:	2201      	movs	r2, #1
 8001742:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001744:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001746:	2204      	movs	r2, #4
 8001748:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 1;
 800174a:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800174c:	2201      	movs	r2, #1
 800174e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8001750:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001752:	2220      	movs	r2, #32
 8001754:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8001756:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001758:	2220      	movs	r2, #32
 800175a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800175c:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800175e:	2200      	movs	r2, #0
 8001760:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001762:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 8001764:	2204      	movs	r2, #4
 8001766:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001768:	4816      	ldr	r0, [pc, #88]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 800176a:	f003 fb7f 	bl	8004e6c <HAL_FDCAN_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	bf14      	ite	ne
 8001774:	2301      	movne	r3, #1
 8001776:	2300      	moveq	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <_ZL14MX_FDCAN1_Initv+0xca>
  {
    Error_Handler();
 800177e:	f000 fbb5 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001782:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001786:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800178c:	2302      	movs	r3, #2
 800178e:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001790:	2301      	movs	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800179c:	463b      	mov	r3, r7
 800179e:	4619      	mov	r1, r3
 80017a0:	4808      	ldr	r0, [pc, #32]	@ (80017c4 <_ZL14MX_FDCAN1_Initv+0x10c>)
 80017a2:	f003 fd41 	bl	8005228 <HAL_FDCAN_ConfigFilter>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf14      	ite	ne
 80017ac:	2301      	movne	r3, #1
 80017ae:	2300      	moveq	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <_ZL14MX_FDCAN1_Initv+0x102>
  {
    Error_Handler();
 80017b6:	f000 fb99 	bl	8001eec <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	24000168 	.word	0x24000168
 80017c8:	4000a000 	.word	0x4000a000

080017cc <_ZL14MX_FDCAN2_Initv>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80017d2:	4b41      	ldr	r3, [pc, #260]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017d4:	4a41      	ldr	r2, [pc, #260]	@ (80018dc <_ZL14MX_FDCAN2_Initv+0x110>)
 80017d6:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80017d8:	4b3f      	ldr	r3, [pc, #252]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017de:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80017e0:	4b3d      	ldr	r3, [pc, #244]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80017e6:	4b3c      	ldr	r3, [pc, #240]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80017ec:	4b3a      	ldr	r3, [pc, #232]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80017f2:	4b39      	ldr	r3, [pc, #228]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 3;
 80017f8:	4b37      	ldr	r3, [pc, #220]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80017fa:	2203      	movs	r2, #3
 80017fc:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80017fe:	4b36      	ldr	r3, [pc, #216]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001800:	2201      	movs	r2, #1
 8001802:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8001804:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001806:	220a      	movs	r2, #10
 8001808:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 800180a:	4b33      	ldr	r3, [pc, #204]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800180c:	2205      	movs	r2, #5
 800180e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001810:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001812:	2201      	movs	r2, #1
 8001814:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001816:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001818:	2201      	movs	r2, #1
 800181a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800181c:	4b2e      	ldr	r3, [pc, #184]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800181e:	2201      	movs	r2, #1
 8001820:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001822:	4b2d      	ldr	r3, [pc, #180]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001824:	2201      	movs	r2, #1
 8001826:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001828:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800182e:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001830:	2200      	movs	r2, #0
 8001832:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 5;
 8001834:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001836:	2205      	movs	r2, #5
 8001838:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 32;
 800183a:	4b27      	ldr	r3, [pc, #156]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800183c:	2220      	movs	r2, #32
 800183e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001840:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001842:	2204      	movs	r2, #4
 8001844:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 32;
 8001846:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001848:	2220      	movs	r2, #32
 800184a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800184c:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800184e:	2204      	movs	r2, #4
 8001850:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 1;
 8001852:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001854:	2201      	movs	r2, #1
 8001856:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800185a:	2204      	movs	r2, #4
 800185c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 1;
 800185e:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001860:	2201      	movs	r2, #1
 8001862:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 32;
 8001864:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001866:	2220      	movs	r2, #32
 8001868:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 32;
 800186a:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800186c:	2220      	movs	r2, #32
 800186e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001870:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001872:	2200      	movs	r2, #0
 8001874:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 8001878:	2204      	movs	r2, #4
 800187a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800187c:	4816      	ldr	r0, [pc, #88]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 800187e:	f003 faf5 	bl	8004e6c <HAL_FDCAN_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	bf14      	ite	ne
 8001888:	2301      	movne	r3, #1
 800188a:	2300      	moveq	r3, #0
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <_ZL14MX_FDCAN2_Initv+0xca>
  {
    Error_Handler();
 8001892:	f000 fb2b 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001896:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800189a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80018a0:	2302      	movs	r3, #2
 80018a2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80018a4:	2301      	movs	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x10;
 80018a8:	2310      	movs	r3, #16
 80018aa:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x10;
 80018ac:	2310      	movs	r3, #16
 80018ae:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	4619      	mov	r1, r3
 80018b4:	4808      	ldr	r0, [pc, #32]	@ (80018d8 <_ZL14MX_FDCAN2_Initv+0x10c>)
 80018b6:	f003 fcb7 	bl	8005228 <HAL_FDCAN_ConfigFilter>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf14      	ite	ne
 80018c0:	2301      	movne	r3, #1
 80018c2:	2300      	moveq	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <_ZL14MX_FDCAN2_Initv+0x102>
  {
    Error_Handler();
 80018ca:	f000 fb0f 	bl	8001eec <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	3720      	adds	r7, #32
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	24000208 	.word	0x24000208
 80018dc:	4000a400 	.word	0x4000a400

080018e0 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b094      	sub	sp, #80	@ 0x50
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	615a      	str	r2, [r3, #20]
 80018f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018fa:	463b      	mov	r3, r7
 80018fc:	2234      	movs	r2, #52	@ 0x34
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f00a fba3 	bl	800c04c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001906:	4b3b      	ldr	r3, [pc, #236]	@ (80019f4 <_ZL13MX_TIM17_Initv+0x114>)
 8001908:	4a3b      	ldr	r2, [pc, #236]	@ (80019f8 <_ZL13MX_TIM17_Initv+0x118>)
 800190a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800190c:	4b39      	ldr	r3, [pc, #228]	@ (80019f4 <_ZL13MX_TIM17_Initv+0x114>)
 800190e:	2200      	movs	r2, #0
 8001910:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b38      	ldr	r3, [pc, #224]	@ (80019f4 <_ZL13MX_TIM17_Initv+0x114>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10559;
 8001918:	4b36      	ldr	r3, [pc, #216]	@ (80019f4 <_ZL13MX_TIM17_Initv+0x114>)
 800191a:	f642 123f 	movw	r2, #10559	@ 0x293f
 800191e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b34      	ldr	r3, [pc, #208]	@ (80019f4 <_ZL13MX_TIM17_Initv+0x114>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001926:	4b33      	ldr	r3, [pc, #204]	@ (80019f4 <_ZL13MX_TIM17_Initv+0x114>)
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800192c:	4b31      	ldr	r3, [pc, #196]	@ (80019f4 <_ZL13MX_TIM17_Initv+0x114>)
 800192e:	2280      	movs	r2, #128	@ 0x80
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001932:	4830      	ldr	r0, [pc, #192]	@ (80019f4 <_ZL13MX_TIM17_Initv+0x114>)
 8001934:	f008 f9c8 	bl	8009cc8 <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	bf14      	ite	ne
 800193e:	2301      	movne	r3, #1
 8001940:	2300      	moveq	r3, #0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <_ZL13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 8001948:	f000 fad0 	bl	8001eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800194c:	4829      	ldr	r0, [pc, #164]	@ (80019f4 <_ZL13MX_TIM17_Initv+0x114>)
 800194e:	f008 fa12 	bl	8009d76 <HAL_TIM_PWM_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf14      	ite	ne
 8001958:	2301      	movne	r3, #1
 800195a:	2300      	moveq	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <_ZL13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 8001962:	f000 fac3 	bl	8001eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001966:	2360      	movs	r3, #96	@ 0x60
 8001968:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800196e:	2300      	movs	r3, #0
 8001970:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001972:	2300      	movs	r3, #0
 8001974:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001982:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001986:	2200      	movs	r2, #0
 8001988:	4619      	mov	r1, r3
 800198a:	481a      	ldr	r0, [pc, #104]	@ (80019f4 <_ZL13MX_TIM17_Initv+0x114>)
 800198c:	f008 fb70 	bl	800a070 <HAL_TIM_PWM_ConfigChannel>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf14      	ite	ne
 8001996:	2301      	movne	r3, #1
 8001998:	2300      	moveq	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <_ZL13MX_TIM17_Initv+0xc4>
  {
    Error_Handler();
 80019a0:	f000 faa4 	bl	8001eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80019c6:	463b      	mov	r3, r7
 80019c8:	4619      	mov	r1, r3
 80019ca:	480a      	ldr	r0, [pc, #40]	@ (80019f4 <_ZL13MX_TIM17_Initv+0x114>)
 80019cc:	f009 f80c 	bl	800a9e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bf14      	ite	ne
 80019d6:	2301      	movne	r3, #1
 80019d8:	2300      	moveq	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <_ZL13MX_TIM17_Initv+0x104>
  {
    Error_Handler();
 80019e0:	f000 fa84 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80019e4:	4803      	ldr	r0, [pc, #12]	@ (80019f4 <_ZL13MX_TIM17_Initv+0x114>)
 80019e6:	f000 ff4b 	bl	8002880 <HAL_TIM_MspPostInit>

}
 80019ea:	bf00      	nop
 80019ec:	3750      	adds	r7, #80	@ 0x50
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	240002a8 	.word	0x240002a8
 80019f8:	40014800 	.word	0x40014800

080019fc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a00:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a02:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab8 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a06:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b27      	ldr	r3, [pc, #156]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a32:	4b20      	ldr	r3, [pc, #128]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a38:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a44:	481b      	ldr	r0, [pc, #108]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a46:	f009 f85b 	bl	800ab00 <HAL_UART_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf14      	ite	ne
 8001a50:	2301      	movne	r3, #1
 8001a52:	2300      	moveq	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001a5a:	f000 fa47 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4814      	ldr	r0, [pc, #80]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a62:	f00a fa06 	bl	800be72 <HAL_UARTEx_SetTxFifoThreshold>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf14      	ite	ne
 8001a6c:	2301      	movne	r3, #1
 8001a6e:	2300      	moveq	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001a76:	f000 fa39 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	480d      	ldr	r0, [pc, #52]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a7e:	f00a fa36 	bl	800beee <HAL_UARTEx_SetRxFifoThreshold>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bf14      	ite	ne
 8001a88:	2301      	movne	r3, #1
 8001a8a:	2300      	moveq	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001a92:	f000 fa2b 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a96:	4807      	ldr	r0, [pc, #28]	@ (8001ab4 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001a98:	f00a f9b2 	bl	800be00 <HAL_UARTEx_DisableFifoMode>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001aac:	f000 fa1e 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	240002f4 	.word	0x240002f4
 8001ab8:	40004400 	.word	0x40004400

08001abc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08c      	sub	sp, #48	@ 0x30
 8001ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ad2:	4b57      	ldr	r3, [pc, #348]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad8:	4a55      	ldr	r2, [pc, #340]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001ada:	f043 0320 	orr.w	r3, r3, #32
 8001ade:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ae2:	4b53      	ldr	r3, [pc, #332]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae8:	f003 0320 	and.w	r3, r3, #32
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af0:	4b4f      	ldr	r3, [pc, #316]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af6:	4a4e      	ldr	r2, [pc, #312]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001afc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b00:	4b4b      	ldr	r3, [pc, #300]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b48      	ldr	r3, [pc, #288]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b14:	4a46      	ldr	r2, [pc, #280]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b1e:	4b44      	ldr	r3, [pc, #272]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b2c:	4b40      	ldr	r3, [pc, #256]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b32:	4a3f      	ldr	r2, [pc, #252]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b34:	f043 0310 	orr.w	r3, r3, #16
 8001b38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4a:	4b39      	ldr	r3, [pc, #228]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b50:	4a37      	ldr	r2, [pc, #220]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b52:	f043 0302 	orr.w	r3, r3, #2
 8001b56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b5a:	4b35      	ldr	r3, [pc, #212]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b68:	4b31      	ldr	r3, [pc, #196]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b6e:	4a30      	ldr	r2, [pc, #192]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b78:	4b2d      	ldr	r3, [pc, #180]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b86:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b8c:	4a28      	ldr	r2, [pc, #160]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b96:	4b26      	ldr	r3, [pc, #152]	@ (8001c30 <_ZL12MX_GPIO_Initv+0x174>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001baa:	4822      	ldr	r0, [pc, #136]	@ (8001c34 <_ZL12MX_GPIO_Initv+0x178>)
 8001bac:	f004 fcec 	bl	8006588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2138      	movs	r1, #56	@ 0x38
 8001bb4:	4820      	ldr	r0, [pc, #128]	@ (8001c38 <_ZL12MX_GPIO_Initv+0x17c>)
 8001bb6:	f004 fce7 	bl	8006588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AMS_OK_Pin */
  GPIO_InitStruct.Pin = AMS_OK_Pin;
 8001bba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AMS_OK_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4818      	ldr	r0, [pc, #96]	@ (8001c34 <_ZL12MX_GPIO_Initv+0x178>)
 8001bd4:	f004 fb18 	bl	8006208 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGITAL1_Pin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin;
 8001bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIGITAL1_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	4619      	mov	r1, r3
 8001bec:	4813      	ldr	r0, [pc, #76]	@ (8001c3c <_ZL12MX_GPIO_Initv+0x180>)
 8001bee:	f004 fb0b 	bl	8006208 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Button_Pin */
  GPIO_InitStruct.Pin = Charge_Button_Pin;
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Charge_Button_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	480e      	ldr	r0, [pc, #56]	@ (8001c40 <_ZL12MX_GPIO_Initv+0x184>)
 8001c06:	f004 faff 	bl	8006208 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_AIR_N_Pin RELAY_AIR_P_Pin RELAY_PRECHARGE_Pin */
  GPIO_InitStruct.Pin = RELAY_AIR_N_Pin|RELAY_AIR_P_Pin|RELAY_PRECHARGE_Pin;
 8001c0a:	2338      	movs	r3, #56	@ 0x38
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	@ (8001c38 <_ZL12MX_GPIO_Initv+0x17c>)
 8001c22:	f004 faf1 	bl	8006208 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c26:	bf00      	nop
 8001c28:	3730      	adds	r7, #48	@ 0x30
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	58024400 	.word	0x58024400
 8001c34:	58021400 	.word	0x58021400
 8001c38:	58020c00 	.word	0x58020c00
 8001c3c:	58021000 	.word	0x58021000
 8001c40:	58021800 	.word	0x58021800

08001c44 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d04b      	beq.n	8001cf0 <HAL_FDCAN_RxFifo0Callback+0xac>
	{
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_acu, RxData) == HAL_OK)
 8001c58:	4b27      	ldr	r3, [pc, #156]	@ (8001cf8 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001c5a:	4a28      	ldr	r2, [pc, #160]	@ (8001cfc <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001c5c:	2140      	movs	r1, #64	@ 0x40
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f003 fbde 	bl	8005420 <HAL_FDCAN_GetRxMessage>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf0c      	ite	eq
 8001c6a:	2301      	moveq	r3, #1
 8001c6c:	2300      	movne	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d02e      	beq.n	8001cd2 <HAL_FDCAN_RxFifo0Callback+0x8e>
    {
		msg_acu.id = RxHeader_acu.Identifier;
 8001c74:	4b21      	ldr	r3, [pc, #132]	@ (8001cfc <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a21      	ldr	r2, [pc, #132]	@ (8001d00 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001c7a:	6013      	str	r3, [r2, #0]
		msg_acu.len = RxHeader_acu.DataLength;
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001c84:	711a      	strb	r2, [r3, #4]
		for (int i = 0; i < 8; i++) {msg_acu.buf[i] = RxData[i];}
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	e00c      	b.n	8001ca6 <HAL_FDCAN_RxFifo0Callback+0x62>
 8001c8c:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf8 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	7819      	ldrb	r1, [r3, #0]
 8001c94:	4a1a      	ldr	r2, [pc, #104]	@ (8001d00 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4413      	add	r3, r2
 8001c9a:	3305      	adds	r3, #5
 8001c9c:	460a      	mov	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b07      	cmp	r3, #7
 8001caa:	ddef      	ble.n	8001c8c <HAL_FDCAN_RxFifo0Callback+0x48>
		msg_acu.bus = 1;
 8001cac:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	611a      	str	r2, [r3, #16]
		msg_acu.time = HAL_GetTick();
 8001cb2:	f001 f821 	bl	8002cf8 <HAL_GetTick>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4a11      	ldr	r2, [pc, #68]	@ (8001d00 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001cba:	6153      	str	r3, [r2, #20]
		parse_state(msg_acu);
 8001cbc:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001cbe:	466c      	mov	r4, sp
 8001cc0:	f103 0210 	add.w	r2, r3, #16
 8001cc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cc8:	e884 0003 	stmia.w	r4, {r0, r1}
 8001ccc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cce:	f000 fb4f 	bl	8002370 <_Z11parse_state6CANMsg>

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f003 fd0e 	bl	80056f8 <HAL_FDCAN_ActivateNotification>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
      /* Notification Error */
      Error_Handler();
 8001cec:	f000 f8fe 	bl	8001eec <Error_Handler>
    }
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd90      	pop	{r4, r7, pc}
 8001cf8:	24000420 	.word	0x24000420
 8001cfc:	240003d0 	.word	0x240003d0
 8001d00:	240004a4 	.word	0x240004a4

08001d04 <module_send_message_CAN1>:

//extended ID
HAL_StatusTypeDef module_send_message_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001d12:	4a0b      	ldr	r2, [pc, #44]	@ (8001d40 <module_send_message_CAN1+0x3c>)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_EXTENDED_ID;
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <module_send_message_CAN1+0x3c>)
 8001d1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d1e:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4a07      	ldr	r2, [pc, #28]	@ (8001d40 <module_send_message_CAN1+0x3c>)
 8001d24:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	4905      	ldr	r1, [pc, #20]	@ (8001d40 <module_send_message_CAN1+0x3c>)
 8001d2a:	4806      	ldr	r0, [pc, #24]	@ (8001d44 <module_send_message_CAN1+0x40>)
 8001d2c:	f003 fb1d 	bl	800536a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001d30:	4603      	mov	r3, r0
 8001d32:	75fb      	strb	r3, [r7, #23]

	return status;
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	24000388 	.word	0x24000388
 8001d44:	24000168 	.word	0x24000168

08001d48 <module_send_message_NoExtId_CAN1>:

//NO extended ID
HAL_StatusTypeDef module_send_message_NoExtId_CAN1(uint32_t id, uint8_t* data, uint8_t length) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	4613      	mov	r3, r2
 8001d54:	71fb      	strb	r3, [r7, #7]
	TxHeader_acu.Identifier = id;
 8001d56:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <module_send_message_NoExtId_CAN1+0x38>)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6013      	str	r3, [r2, #0]
	TxHeader_acu.IdType = FDCAN_STANDARD_ID;
 8001d5c:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <module_send_message_NoExtId_CAN1+0x38>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
	TxHeader_acu.DataLength = length;
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	4a06      	ldr	r2, [pc, #24]	@ (8001d80 <module_send_message_NoExtId_CAN1+0x38>)
 8001d66:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_acu, data);
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	4905      	ldr	r1, [pc, #20]	@ (8001d80 <module_send_message_NoExtId_CAN1+0x38>)
 8001d6c:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <module_send_message_NoExtId_CAN1+0x3c>)
 8001d6e:	f003 fafc 	bl	800536a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001d72:	4603      	mov	r3, r0
 8001d74:	75fb      	strb	r3, [r7, #23]

	return status;
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	24000388 	.word	0x24000388
 8001d84:	24000168 	.word	0x24000168

08001d88 <module_send_message_CAN2>:

HAL_StatusTypeDef module_send_message_CAN2(uint32_t id, uint8_t* data, uint8_t length) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	71fb      	strb	r3, [r7, #7]
	TxHeader_bms.Identifier = id;
 8001d96:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <module_send_message_CAN2+0x38>)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6013      	str	r3, [r2, #0]
	TxHeader_bms.IdType = FDCAN_STANDARD_ID;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <module_send_message_CAN2+0x38>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	605a      	str	r2, [r3, #4]
	TxHeader_bms.DataLength = length;
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	4a06      	ldr	r2, [pc, #24]	@ (8001dc0 <module_send_message_CAN2+0x38>)
 8001da6:	60d3      	str	r3, [r2, #12]

	HAL_StatusTypeDef status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_bms, data);
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	4905      	ldr	r1, [pc, #20]	@ (8001dc0 <module_send_message_CAN2+0x38>)
 8001dac:	4805      	ldr	r0, [pc, #20]	@ (8001dc4 <module_send_message_CAN2+0x3c>)
 8001dae:	f003 fadc 	bl	800536a <HAL_FDCAN_AddMessageToTxFifoQ>
 8001db2:	4603      	mov	r3, r0
 8001db4:	75fb      	strb	r3, [r7, #23]

	return status;
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	240003ac 	.word	0x240003ac
 8001dc4:	24000208 	.word	0x24000208

08001dc8 <print>:

void print(char uart_buffer[]){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4909      	ldr	r1, [pc, #36]	@ (8001df8 <print+0x30>)
 8001dd4:	4809      	ldr	r0, [pc, #36]	@ (8001dfc <print+0x34>)
 8001dd6:	f00a f917 	bl	800c008 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001dda:	4808      	ldr	r0, [pc, #32]	@ (8001dfc <print+0x34>)
 8001ddc:	f7fe fa98 	bl	8000310 <strlen>
 8001de0:	4603      	mov	r3, r0
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295
 8001de8:	4904      	ldr	r1, [pc, #16]	@ (8001dfc <print+0x34>)
 8001dea:	4805      	ldr	r0, [pc, #20]	@ (8001e00 <print+0x38>)
 8001dec:	f008 fed8 	bl	800aba0 <HAL_UART_Transmit>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	0800cc38 	.word	0x0800cc38
 8001dfc:	24000428 	.word	0x24000428
 8001e00:	240002f4 	.word	0x240002f4

08001e04 <printnl>:

void printnl(char uart_buffer[]){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s", uart_buffer);
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4909      	ldr	r1, [pc, #36]	@ (8001e34 <printnl+0x30>)
 8001e10:	4809      	ldr	r0, [pc, #36]	@ (8001e38 <printnl+0x34>)
 8001e12:	f00a f8f9 	bl	800c008 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8001e16:	4808      	ldr	r0, [pc, #32]	@ (8001e38 <printnl+0x34>)
 8001e18:	f7fe fa7a 	bl	8000310 <strlen>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
 8001e24:	4904      	ldr	r1, [pc, #16]	@ (8001e38 <printnl+0x34>)
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <printnl+0x38>)
 8001e28:	f008 feba 	bl	800aba0 <HAL_UART_Transmit>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	0800cc40 	.word	0x0800cc40
 8001e38:	24000428 	.word	0x24000428
 8001e3c:	240002f4 	.word	0x240002f4

08001e40 <getUARTState>:
void printValue(int value){
	sprintf(uart_msg, "%hu \n\r", value);
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
}

HAL_UART_StateTypeDef getUARTState(){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&huart2);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <getUARTState+0x10>)
 8001e46:	f008 ff39 	bl	800acbc <HAL_UART_GetState>
 8001e4a:	4603      	mov	r3, r0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	240002f4 	.word	0x240002f4
 8001e54:	00000000 	.word	0x00000000

08001e58 <readAnalogValue>:

float readAnalogValue(void){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
	analogValue = HAL_ADC_GetValue(&hadc3);
	HAL_ADC_Stop(&hadc3);
	return analogValue;*/


	HAL_ADC_Start(&hadc1);
 8001e5e:	4820      	ldr	r0, [pc, #128]	@ (8001ee0 <readAnalogValue+0x88>)
 8001e60:	f001 fc84 	bl	800376c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	481d      	ldr	r0, [pc, #116]	@ (8001ee0 <readAnalogValue+0x88>)
 8001e6a:	f001 fd7d 	bl	8003968 <HAL_ADC_PollForConversion>

	float adc_value, V_adc;
	int current;

	adc_value = HAL_ADC_GetValue(&hadc1);
 8001e6e:	481c      	ldr	r0, [pc, #112]	@ (8001ee0 <readAnalogValue+0x88>)
 8001e70:	f001 fe6e 	bl	8003b50 <HAL_ADC_GetValue>
 8001e74:	ee07 0a90 	vmov	s15, r0
 8001e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e7c:	edc7 7a03 	vstr	s15, [r7, #12]
	V_adc = (adc_value * 5 / 4095); //12 bits de resolución
 8001e80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e84:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001e88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e8c:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001ee4 <readAnalogValue+0x8c>
 8001e90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e94:	edc7 7a02 	vstr	s15, [r7, #8]

	current = (3020 - adc_value) * 0.14286;
 8001e98:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001ee8 <readAnalogValue+0x90>
 8001e9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ea8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8001ed8 <readAnalogValue+0x80>
 8001eac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001eb0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001eb4:	ee17 3a90 	vmov	r3, s15
 8001eb8:	607b      	str	r3, [r7, #4]

	HAL_ADC_Stop(&hadc1);
 8001eba:	4809      	ldr	r0, [pc, #36]	@ (8001ee0 <readAnalogValue+0x88>)
 8001ebc:	f001 fd20 	bl	8003900 <HAL_ADC_Stop>
	return current;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	89f40a28 	.word	0x89f40a28
 8001edc:	3fc2493c 	.word	0x3fc2493c
 8001ee0:	24000088 	.word	0x24000088
 8001ee4:	457ff000 	.word	0x457ff000
 8001ee8:	453cc000 	.word	0x453cc000

08001eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef0:	b672      	cpsid	i
}
 8001ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <Error_Handler+0x8>

08001ef8 <_Z9get_statev>:
/*********************************************************************************************************
 ** Function name:           get_state
 ** Descriptions:            get the current state
 *********************************************************************************************************/

STATE get_state() {
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
    return state;
 8001efc:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <_Z9get_statev+0x14>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	24000cf4 	.word	0x24000cf4

08001f10 <_Z12select_statev>:

/*********************************************************************************************************
 ** Function name:           select_state
 ** Descriptions:            check what should they do on the state machine
 *********************************************************************************************************/
void select_state() {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	@ 0x30
 8001f14:	af00      	add	r7, sp, #0
	int state_air_n = 0;     // 0 means open, 1 closed     // Turn on SEVCON
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int state_air_p = 0;     // 0 means open, 1 closed     // Energize HV relay
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	int state_precharge = 0; // 0 means open, 1 closed
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
	int flag_cpu = CPU_ERROR_COMMUNICATION;
 8001f22:	2301      	movs	r3, #1
 8001f24:	61bb      	str	r3, [r7, #24]
	int flag_current = Current_ERROR_Comunication;
 8001f26:	2302      	movs	r3, #2
 8001f28:	617b      	str	r3, [r7, #20]


	int gpio_charge = HAL_GPIO_ReadPin(Charge_Button_GPIO_Port, Charge_Button_Pin); // pull-up: 1 = charge started
 8001f2a:	2180      	movs	r1, #128	@ 0x80
 8001f2c:	48a8      	ldr	r0, [pc, #672]	@ (80021d0 <_Z12select_statev+0x2c0>)
 8001f2e:	f004 fb13 	bl	8006558 <HAL_GPIO_ReadPin>
 8001f32:	4603      	mov	r3, r0
 8001f34:	613b      	str	r3, [r7, #16]
	 * 1 ms interruption => 1ms * 264MHz = 264000
	 * prescalado 264 (por ejemplo)
	 * timer count = 264000 / 264 = 1000
	 */

	uint32_t time = HAL_GetTick();
 8001f36:	f000 fedf 	bl	8002cf8 <HAL_GetTick>
 8001f3a:	60f8      	str	r0, [r7, #12]
	int time_s = HAL_GetTick();
 8001f3c:	f000 fedc 	bl	8002cf8 <HAL_GetTick>
 8001f40:	4603      	mov	r3, r0
 8001f42:	60bb      	str	r3, [r7, #8]


	CPU.voltage_acum = 0; // For precharge
 8001f44:	4ba3      	ldr	r3, [pc, #652]	@ (80021d4 <_Z12select_statev+0x2c4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	62da      	str	r2, [r3, #44]	@ 0x2c


	MIN_V = 4200; /// I reset the number each cycle cause if the voltages goes up again I wanna has it risen again on telemetry
 8001f4a:	4ba3      	ldr	r3, [pc, #652]	@ (80021d8 <_Z12select_statev+0x2c8>)
 8001f4c:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001f50:	601a      	str	r2, [r3, #0]
	MAX_T = 0;
 8001f52:	4ba2      	ldr	r3, [pc, #648]	@ (80021dc <_Z12select_statev+0x2cc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	e06f      	b.n	800203e <_Z12select_statev+0x12e>
		BMS[i].voltage_acum = 0;// For precharge
 8001f5e:	4aa0      	ldr	r2, [pc, #640]	@ (80021e0 <_Z12select_statev+0x2d0>)
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	338c      	adds	r3, #140	@ 0x8c
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]


		if (BMS[i].query_voltage(time, buffer) != BMS_OK) //I ask the BMS about voltages and cheking their states
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001f78:	fb02 f303 	mul.w	r3, r2, r3
 8001f7c:	4a98      	ldr	r2, [pc, #608]	@ (80021e0 <_Z12select_statev+0x2d0>)
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a98      	ldr	r2, [pc, #608]	@ (80021e4 <_Z12select_statev+0x2d4>)
 8001f82:	68f9      	ldr	r1, [r7, #12]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fe95 	bl	8000cb4 <_ZN7BMS_MOD13query_voltageEmPc>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <_Z12select_statev+0x90>
		{
			//state = error;
			flag_ams_ok = 0;
 8001f9a:	4b93      	ldr	r3, [pc, #588]	@ (80021e8 <_Z12select_statev+0x2d8>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
		}

		CPU.voltage_acum += BMS[i].voltage_acum; // For precharge
 8001fa0:	4b8c      	ldr	r3, [pc, #560]	@ (80021d4 <_Z12select_statev+0x2c4>)
 8001fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fa4:	498e      	ldr	r1, [pc, #568]	@ (80021e0 <_Z12select_statev+0x2d0>)
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001fac:	fb00 f303 	mul.w	r3, r0, r3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	338c      	adds	r3, #140	@ 0x8c
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a86      	ldr	r2, [pc, #536]	@ (80021d4 <_Z12select_statev+0x2c4>)
 8001fba:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if (BMS[i].MIN_V < MIN_V)
 8001fbc:	4a88      	ldr	r2, [pc, #544]	@ (80021e0 <_Z12select_statev+0x2d0>)
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3390      	adds	r3, #144	@ 0x90
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4b82      	ldr	r3, [pc, #520]	@ (80021d8 <_Z12select_statev+0x2c8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	da0a      	bge.n	8001fec <_Z12select_statev+0xdc>
			MIN_V = BMS[i].MIN_V; //Checking the minimun voltage of cell in the whole battery
 8001fd6:	4a82      	ldr	r2, [pc, #520]	@ (80021e0 <_Z12select_statev+0x2d0>)
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001fde:	fb01 f303 	mul.w	r3, r1, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3390      	adds	r3, #144	@ 0x90
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a7b      	ldr	r2, [pc, #492]	@ (80021d8 <_Z12select_statev+0x2c8>)
 8001fea:	6013      	str	r3, [r2, #0]


		if (BMS[i].query_temperature(time, buffer) != Temperatures_OK){
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	4a7a      	ldr	r2, [pc, #488]	@ (80021e0 <_Z12select_statev+0x2d0>)
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a7a      	ldr	r2, [pc, #488]	@ (80021e4 <_Z12select_statev+0x2d4>)
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fed7 	bl	8000db2 <_ZN7BMS_MOD17query_temperatureEmPc>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
			//state = error;
		}

		if (BMS[i].MAX_T > MAX_T)
 8002008:	4a75      	ldr	r2, [pc, #468]	@ (80021e0 <_Z12select_statev+0x2d0>)
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	33a0      	adds	r3, #160	@ 0xa0
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4b70      	ldr	r3, [pc, #448]	@ (80021dc <_Z12select_statev+0x2cc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	dd0a      	ble.n	8002038 <_Z12select_statev+0x128>
			MAX_T = BMS[i].MAX_T;
 8002022:	4a6f      	ldr	r2, [pc, #444]	@ (80021e0 <_Z12select_statev+0x2d0>)
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	33a0      	adds	r3, #160	@ 0xa0
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a69      	ldr	r2, [pc, #420]	@ (80021dc <_Z12select_statev+0x2cc>)
 8002036:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < BMS_N; i++) {
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	3301      	adds	r3, #1
 800203c:	623b      	str	r3, [r7, #32]
 800203e:	4b6b      	ldr	r3, [pc, #428]	@ (80021ec <_Z12select_statev+0x2dc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6a3a      	ldr	r2, [r7, #32]
 8002044:	429a      	cmp	r2, r3
 8002046:	db8a      	blt.n	8001f5e <_Z12select_statev+0x4e>
	}

	if (time_s > time_sending_minV + 500) {
 8002048:	4b69      	ldr	r3, [pc, #420]	@ (80021f0 <_Z12select_statev+0x2e0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	429a      	cmp	r2, r3
 8002054:	dd23      	ble.n	800209e <_Z12select_statev+0x18e>
		message_MINV[1] = MIN_V & 0xFF;
 8002056:	4b60      	ldr	r3, [pc, #384]	@ (80021d8 <_Z12select_statev+0x2c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b65      	ldr	r3, [pc, #404]	@ (80021f4 <_Z12select_statev+0x2e4>)
 800205e:	705a      	strb	r2, [r3, #1]
		message_MINV[0] = (MIN_V >> 8) & 0xFF;
 8002060:	4b5d      	ldr	r3, [pc, #372]	@ (80021d8 <_Z12select_statev+0x2c8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	121b      	asrs	r3, r3, #8
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b62      	ldr	r3, [pc, #392]	@ (80021f4 <_Z12select_statev+0x2e4>)
 800206a:	701a      	strb	r2, [r3, #0]
		if (BMS[0].flag_charger != 1) {
 800206c:	4b5c      	ldr	r3, [pc, #368]	@ (80021e0 <_Z12select_statev+0x2d0>)
 800206e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002072:	2b01      	cmp	r3, #1
 8002074:	d010      	beq.n	8002098 <_Z12select_statev+0x188>
			if (module_send_message_CAN1(BMS_ID, message_MINV, 2) != HAL_OK)
 8002076:	2202      	movs	r2, #2
 8002078:	495e      	ldr	r1, [pc, #376]	@ (80021f4 <_Z12select_statev+0x2e4>)
 800207a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800207e:	f7ff fe41 	bl	8001d04 <module_send_message_CAN1>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <_Z12select_statev+0x188>
				print((char*) "Error al enviar tension minima"); //Sending the message through telemtry each 500 ms
 8002092:	4859      	ldr	r0, [pc, #356]	@ (80021f8 <_Z12select_statev+0x2e8>)
 8002094:	f7ff fe98 	bl	8001dc8 <print>
		}
		time_sending_minV = time_s;
 8002098:	4a55      	ldr	r2, [pc, #340]	@ (80021f0 <_Z12select_statev+0x2e0>)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	6013      	str	r3, [r2, #0]
	}
	for (int i = 0; i < BMS_N; i++) {
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e00d      	b.n	80020c0 <_Z12select_statev+0x1b0>
		BMS[i].BALANCING_V = MIN_V; //Here I say I wanna balance all the cells in the battery to the minimun
 80020a4:	4b4c      	ldr	r3, [pc, #304]	@ (80021d8 <_Z12select_statev+0x2c8>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	494d      	ldr	r1, [pc, #308]	@ (80021e0 <_Z12select_statev+0x2d0>)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 80020b0:	fb00 f303 	mul.w	r3, r0, r3
 80020b4:	440b      	add	r3, r1
 80020b6:	3394      	adds	r3, #148	@ 0x94
 80020b8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BMS_N; i++) {
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3301      	adds	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	4b4a      	ldr	r3, [pc, #296]	@ (80021ec <_Z12select_statev+0x2dc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	dbec      	blt.n	80020a4 <_Z12select_statev+0x194>

	}


	flag_cpu = CPU.query(time, buffer); //Asking the rest of the car how is it
 80020ca:	4a46      	ldr	r2, [pc, #280]	@ (80021e4 <_Z12select_statev+0x2d4>)
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	4841      	ldr	r0, [pc, #260]	@ (80021d4 <_Z12select_statev+0x2c4>)
 80020d0:	f7fe ff56 	bl	8000f80 <_ZN7CPU_MOD5queryEmPc>
 80020d4:	61b8      	str	r0, [r7, #24]
	//flag_cpu = CPU_OK;

	flag_current = current.query(time, buffer); //asking current how is it
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4a42      	ldr	r2, [pc, #264]	@ (80021e4 <_Z12select_statev+0x2d4>)
 80020da:	4619      	mov	r1, r3
 80020dc:	4847      	ldr	r0, [pc, #284]	@ (80021fc <_Z12select_statev+0x2ec>)
 80020de:	f7fe ffe3 	bl	80010a8 <_ZN11Current_MOD5queryEiPc>
 80020e2:	6178      	str	r0, [r7, #20]
	print((char*)"voltage acu");
	printValue(CPU.voltage_acum);
	print((char*)"dc bus");
	printValue(CPU.DC_BUS);
	printValue(state);*/
	switch (state) {
 80020e4:	4b46      	ldr	r3, [pc, #280]	@ (8002200 <_Z12select_statev+0x2f0>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	f200 80f4 	bhi.w	80022d6 <_Z12select_statev+0x3c6>
 80020ee:	a201      	add	r2, pc, #4	@ (adr r2, 80020f4 <_Z12select_statev+0x1e4>)
 80020f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f4:	0800210d 	.word	0x0800210d
 80020f8:	0800214f 	.word	0x0800214f
 80020fc:	0800216b 	.word	0x0800216b
 8002100:	08002211 	.word	0x08002211
 8002104:	0800225b 	.word	0x0800225b
 8002108:	080022a7 	.word	0x080022a7
	case start:
		state_air_n = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_DISCONNECTED);
 8002118:	2102      	movs	r1, #2
 800211a:	482e      	ldr	r0, [pc, #184]	@ (80021d4 <_Z12select_statev+0x2c4>)
 800211c:	f7fe ff62 	bl	8000fe4 <_ZN7CPU_MOD11updateStateEi>
		fan_speed = 0;
 8002120:	4b38      	ldr	r3, [pc, #224]	@ (8002204 <_Z12select_statev+0x2f4>)
 8002122:	2200      	movs	r2, #0
 8002124:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 8002126:	4b37      	ldr	r3, [pc, #220]	@ (8002204 <_Z12select_statev+0x2f4>)
 8002128:	881a      	ldrh	r2, [r3, #0]
 800212a:	4b37      	ldr	r3, [pc, #220]	@ (8002208 <_Z12select_statev+0x2f8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	635a      	str	r2, [r3, #52]	@ 0x34
		if(gpio_charge == GPIO_PIN_SET){
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d103      	bne.n	800213e <_Z12select_statev+0x22e>
			state = charge;
 8002136:	4b32      	ldr	r3, [pc, #200]	@ (8002200 <_Z12select_statev+0x2f0>)
 8002138:	2204      	movs	r2, #4
 800213a:	701a      	strb	r2, [r3, #0]
		}

		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
		break;
 800213c:	e0c6      	b.n	80022cc <_Z12select_statev+0x3bc>
		else if (flag_cpu != CPU_ERROR_COMMUNICATION)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b01      	cmp	r3, #1
 8002142:	f000 80c3 	beq.w	80022cc <_Z12select_statev+0x3bc>
			state = precharge; //If I do comunicate with the rest of the car, I go to precharge
 8002146:	4b2e      	ldr	r3, [pc, #184]	@ (8002200 <_Z12select_statev+0x2f0>)
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
		break;
 800214c:	e0be      	b.n	80022cc <_Z12select_statev+0x3bc>
	case precharge:
		state_air_n = 1;
 800214e:	2301      	movs	r3, #1
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002156:	2301      	movs	r3, #1
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 800215a:	2101      	movs	r1, #1
 800215c:	481d      	ldr	r0, [pc, #116]	@ (80021d4 <_Z12select_statev+0x2c4>)
 800215e:	f7fe ff41 	bl	8000fe4 <_ZN7CPU_MOD11updateStateEi>
		//if (flag_cpu == CPU_OK) {
			state = transition;
 8002162:	4b27      	ldr	r3, [pc, #156]	@ (8002200 <_Z12select_statev+0x2f0>)
 8002164:	2202      	movs	r2, #2
 8002166:	701a      	strb	r2, [r3, #0]
		//} else if (flag_cpu == CPU_ERROR_COMMUNICATION)
			//state = error;
		 //else if(flag_current != Current_OK) state = error; //I take this out cause in precharge current can be very high, but probably can be uncommented,
		break;
 8002168:	e0b5      	b.n	80022d6 <_Z12select_statev+0x3c6>
	case transition:
		state_air_n = 1;
 800216a:	2301      	movs	r3, #1
 800216c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002172:	2301      	movs	r3, #1
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_PRECHARGE);
 8002176:	2101      	movs	r1, #1
 8002178:	4816      	ldr	r0, [pc, #88]	@ (80021d4 <_Z12select_statev+0x2c4>)
 800217a:	f7fe ff33 	bl	8000fe4 <_ZN7CPU_MOD11updateStateEi>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS) && (CPU.voltage_acum != 0)){
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <_Z12select_statev+0x2c4>)
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	4a22      	ldr	r2, [pc, #136]	@ (800220c <_Z12select_statev+0x2fc>)
 8002184:	fb82 1203 	smull	r1, r2, r2, r3
 8002188:	1192      	asrs	r2, r2, #6
 800218a:	17db      	asrs	r3, r3, #31
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002196:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80021c8 <_Z12select_statev+0x2b8>
 800219a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800219e:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <_Z12select_statev+0x2c4>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80021aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80021ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b2:	d400      	bmi.n	80021b6 <_Z12select_statev+0x2a6>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
		//}else if((flag_cpu == CPU_ERROR_COMMUNICATION)&&(flag_charger == 1)) state = error;
		 //else if(flag_current != Current_OK) state = error;
		}
		break;
 80021b4:	e08c      	b.n	80022d0 <_Z12select_statev+0x3c0>
		if ((((CPU.voltage_acum)/1000) * 0.9 < CPU.DC_BUS) && (CPU.voltage_acum != 0)){
 80021b6:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <_Z12select_statev+0x2c4>)
 80021b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8088 	beq.w	80022d0 <_Z12select_statev+0x3c0>
			state = run; //If DC_BUS voltage is higher than 90% of battery voltage, precharge finish
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <_Z12select_statev+0x2f0>)
 80021c2:	2203      	movs	r2, #3
 80021c4:	701a      	strb	r2, [r3, #0]
		break;
 80021c6:	e083      	b.n	80022d0 <_Z12select_statev+0x3c0>
 80021c8:	cccccccd 	.word	0xcccccccd
 80021cc:	3feccccc 	.word	0x3feccccc
 80021d0:	58021800 	.word	0x58021800
 80021d4:	24000c74 	.word	0x24000c74
 80021d8:	24000004 	.word	0x24000004
 80021dc:	24000c64 	.word	0x24000c64
 80021e0:	240004bc 	.word	0x240004bc
 80021e4:	24000cf8 	.word	0x24000cf8
 80021e8:	24000008 	.word	0x24000008
 80021ec:	24000000 	.word	0x24000000
 80021f0:	24000c6c 	.word	0x24000c6c
 80021f4:	24000c68 	.word	0x24000c68
 80021f8:	0800cc4c 	.word	0x0800cc4c
 80021fc:	24000cb0 	.word	0x24000cb0
 8002200:	24000cf4 	.word	0x24000cf4
 8002204:	24000c70 	.word	0x24000c70
 8002208:	240002a8 	.word	0x240002a8
 800220c:	10624dd3 	.word	0x10624dd3
	case run:
		state_air_n = 1;
 8002210:	2301      	movs	r3, #1
 8002212:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 1;
 8002214:	2301      	movs	r3, #1
 8002216:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002218:	2301      	movs	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_POWER);
 800221c:	2100      	movs	r1, #0
 800221e:	4847      	ldr	r0, [pc, #284]	@ (800233c <_Z12select_statev+0x42c>)
 8002220:	f7fe fee0 	bl	8000fe4 <_ZN7CPU_MOD11updateStateEi>
		fan_speed = (FAN_TIMER_ARR * 75) / 100;
 8002224:	4b46      	ldr	r3, [pc, #280]	@ (8002340 <_Z12select_statev+0x430>)
 8002226:	f641 62ef 	movw	r2, #7919	@ 0x1eef
 800222a:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 800222c:	4b44      	ldr	r3, [pc, #272]	@ (8002340 <_Z12select_statev+0x430>)
 800222e:	881a      	ldrh	r2, [r3, #0]
 8002230:	4b44      	ldr	r3, [pc, #272]	@ (8002344 <_Z12select_statev+0x434>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	635a      	str	r2, [r3, #52]	@ 0x34

		if ((flag_cpu == CPU_ERROR_COMMUNICATION) && (flag_charger == 1)){
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d106      	bne.n	800224a <_Z12select_statev+0x33a>
 800223c:	4b42      	ldr	r3, [pc, #264]	@ (8002348 <_Z12select_statev+0x438>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d102      	bne.n	800224a <_Z12select_statev+0x33a>
			//state = error; //If I disconnect the charger, error
			print((char*)"CPU");
 8002244:	4841      	ldr	r0, [pc, #260]	@ (800234c <_Z12select_statev+0x43c>)
 8002246:	f7ff fdbf 	bl	8001dc8 <print>
		}
		if (flag_current != Current_OK){
			//state = error; //If current is too high, error
		}
		if(HAL_GPIO_ReadPin(DIGITAL1_GPIO_Port, DIGITAL1_Pin) == GPIO_PIN_RESET){ //SDC IO
 800224a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800224e:	4840      	ldr	r0, [pc, #256]	@ (8002350 <_Z12select_statev+0x440>)
 8002250:	f004 f982 	bl	8006558 <HAL_GPIO_ReadPin>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
			//state = error;
			//print((char*)"DIGITAL");
		}
		break;
 8002258:	e03d      	b.n	80022d6 <_Z12select_statev+0x3c6>

	case charge: {
		state_air_n = 1;
 800225a:	2301      	movs	r3, #1
 800225c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 1;
 800225e:	2301      	movs	r3, #1
 8002260:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_CHARGING);
 8002266:	2104      	movs	r1, #4
 8002268:	4834      	ldr	r0, [pc, #208]	@ (800233c <_Z12select_statev+0x42c>)
 800226a:	f7fe febb 	bl	8000fe4 <_ZN7CPU_MOD11updateStateEi>


		fan_speed = (FAN_TIMER_ARR * 40) / 100;
 800226e:	4b34      	ldr	r3, [pc, #208]	@ (8002340 <_Z12select_statev+0x430>)
 8002270:	f241 027f 	movw	r2, #4223	@ 0x107f
 8002274:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 8002276:	4b32      	ldr	r3, [pc, #200]	@ (8002340 <_Z12select_statev+0x430>)
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <_Z12select_statev+0x434>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	635a      	str	r2, [r3, #52]	@ 0x34


		int32_t current_act = current.Current / 1000; //Actual current in mA to check if it's charging
 8002280:	4b34      	ldr	r3, [pc, #208]	@ (8002354 <_Z12select_statev+0x444>)
 8002282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002284:	4a34      	ldr	r2, [pc, #208]	@ (8002358 <_Z12select_statev+0x448>)
 8002286:	fb82 1203 	smull	r1, r2, r2, r3
 800228a:	1192      	asrs	r2, r2, #6
 800228c:	17db      	asrs	r3, r3, #31
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	607b      	str	r3, [r7, #4]
				state = error; //Charge has been interrupted
		} else {
			charge_current_error_counter = 0;
		}*/

		if (gpio_charge == GPIO_PIN_RESET){
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d11d      	bne.n	80022d4 <_Z12select_statev+0x3c4>
			state = start;
 8002298:	4b30      	ldr	r3, [pc, #192]	@ (800235c <_Z12select_statev+0x44c>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
			charge_current_error_counter = 0;
 800229e:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <_Z12select_statev+0x450>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
		}


		break;
 80022a4:	e016      	b.n	80022d4 <_Z12select_statev+0x3c4>
	}

	case error:
		state_air_n = 0; //All relés closed
 80022a6:	2300      	movs	r3, #0
 80022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		state_air_p = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	@ 0x28
		state_precharge = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
		CPU.updateState(CPU_ERROR);
 80022b2:	2103      	movs	r1, #3
 80022b4:	4821      	ldr	r0, [pc, #132]	@ (800233c <_Z12select_statev+0x42c>)
 80022b6:	f7fe fe95 	bl	8000fe4 <_ZN7CPU_MOD11updateStateEi>
		fan_speed = 0;
 80022ba:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <_Z12select_statev+0x430>)
 80022bc:	2200      	movs	r2, #0
 80022be:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, fan_speed);
 80022c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <_Z12select_statev+0x430>)
 80022c2:	881a      	ldrh	r2, [r3, #0]
 80022c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002344 <_Z12select_statev+0x434>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 80022ca:	e004      	b.n	80022d6 <_Z12select_statev+0x3c6>
		break;
 80022cc:	bf00      	nop
 80022ce:	e002      	b.n	80022d6 <_Z12select_statev+0x3c6>
		break;
 80022d0:	bf00      	nop
 80022d2:	e000      	b.n	80022d6 <_Z12select_statev+0x3c6>
		break;
 80022d4:	bf00      	nop
	 sprintf(buffer, " - STATE:     %i\n", state);
	 print(buffer);
	 sprintf(buffer, "***********************\n");
	 print(buffer);*/
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
			flag_ams_ok ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80022d6:	4b23      	ldr	r3, [pc, #140]	@ (8002364 <_Z12select_statev+0x454>)
 80022d8:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin,
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <_Z12select_statev+0x3d2>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <_Z12select_statev+0x3d4>
 80022e2:	2300      	movs	r3, #0
 80022e4:	461a      	mov	r2, r3
 80022e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022ea:	481f      	ldr	r0, [pc, #124]	@ (8002368 <_Z12select_statev+0x458>)
 80022ec:	f004 f94c 	bl	8006588 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_AIR_N_GPIO_Port, RELAY_AIR_N_Pin,
 80022f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <_Z12select_statev+0x3ea>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <_Z12select_statev+0x3ec>
 80022fa:	2300      	movs	r3, #0
 80022fc:	461a      	mov	r2, r3
 80022fe:	2108      	movs	r1, #8
 8002300:	481a      	ldr	r0, [pc, #104]	@ (800236c <_Z12select_statev+0x45c>)
 8002302:	f004 f941 	bl	8006588 <HAL_GPIO_WritePin>
			state_air_n ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_AIR_P_GPIO_Port, RELAY_AIR_P_Pin,
 8002306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <_Z12select_statev+0x400>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <_Z12select_statev+0x402>
 8002310:	2300      	movs	r3, #0
 8002312:	461a      	mov	r2, r3
 8002314:	2110      	movs	r1, #16
 8002316:	4815      	ldr	r0, [pc, #84]	@ (800236c <_Z12select_statev+0x45c>)
 8002318:	f004 f936 	bl	8006588 <HAL_GPIO_WritePin>
			state_air_p ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RELAY_PRECHARGE_GPIO_Port, RELAY_PRECHARGE_Pin,
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <_Z12select_statev+0x416>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <_Z12select_statev+0x418>
 8002326:	2300      	movs	r3, #0
 8002328:	461a      	mov	r2, r3
 800232a:	2120      	movs	r1, #32
 800232c:	480f      	ldr	r0, [pc, #60]	@ (800236c <_Z12select_statev+0x45c>)
 800232e:	f004 f92b 	bl	8006588 <HAL_GPIO_WritePin>





}
 8002332:	bf00      	nop
 8002334:	3730      	adds	r7, #48	@ 0x30
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	24000c74 	.word	0x24000c74
 8002340:	24000c70 	.word	0x24000c70
 8002344:	240002a8 	.word	0x240002a8
 8002348:	24000ca8 	.word	0x24000ca8
 800234c:	0800cc6c 	.word	0x0800cc6c
 8002350:	58021000 	.word	0x58021000
 8002354:	24000cb0 	.word	0x24000cb0
 8002358:	10624dd3 	.word	0x10624dd3
 800235c:	24000cf4 	.word	0x24000cf4
 8002360:	24000cac 	.word	0x24000cac
 8002364:	24000008 	.word	0x24000008
 8002368:	58021400 	.word	0x58021400
 800236c:	58020c00 	.word	0x58020c00

08002370 <_Z11parse_state6CANMsg>:

/*********************************************************************************************************
 ** Function name:           parse_state
 ** Descriptions:            Function for analysing the data from the CAN
 *********************************************************************************************************/
void parse_state(CANMsg data) {
 8002370:	b084      	sub	sp, #16
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	f107 0c18 	add.w	ip, r7, #24
 800237c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t time = HAL_GetTick();
 8002380:	f000 fcba 	bl	8002cf8 <HAL_GetTick>
 8002384:	6038      	str	r0, [r7, #0]
	bool flag_bms = false;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < BMS_N; i++) {
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	e017      	b.n	80023c0 <_Z11parse_state6CANMsg+0x50>
		flag_bms = BMS[i].parse(data.id, &data.buf[0], time); //Checking if the message received is for  BMS
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	4a25      	ldr	r2, [pc, #148]	@ (8002430 <_Z11parse_state6CANMsg+0xc0>)
 800239c:	1898      	adds	r0, r3, r2
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	f107 021d 	add.w	r2, r7, #29
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f7fe fb43 	bl	8000a30 <_ZN7BMS_MOD5parseEmPhm>
 80023aa:	4603      	mov	r3, r0
 80023ac:	73fb      	strb	r3, [r7, #15]
		if (flag_bms)
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <_Z11parse_state6CANMsg+0x4a>
			i = BMS_N;
 80023b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <_Z11parse_state6CANMsg+0xc4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < BMS_N; i++) {
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	3301      	adds	r3, #1
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <_Z11parse_state6CANMsg+0xc4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dbe2      	blt.n	8002390 <_Z11parse_state6CANMsg+0x20>
	}

	if (!flag_bms) {
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	f083 0301 	eor.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d025      	beq.n	8002422 <_Z11parse_state6CANMsg+0xb2>
		if (CPU.parse(data.id, &data.buf[0], time))
 80023d6:	69b9      	ldr	r1, [r7, #24]
 80023d8:	f107 021d 	add.w	r2, r7, #29
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	4816      	ldr	r0, [pc, #88]	@ (8002438 <_Z11parse_state6CANMsg+0xc8>)
 80023e0:	f7fe fd8a 	bl	8000ef8 <_ZN7CPU_MOD5parseEmPhm>
			;                       //Cheking if message is for CPU
		if (data.id == 419385575) //If message from this direction received, it is because the charger is connected and the accu is for charging
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	4a15      	ldr	r2, [pc, #84]	@ (800243c <_Z11parse_state6CANMsg+0xcc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d11a      	bne.n	8002422 <_Z11parse_state6CANMsg+0xb2>
				{
			for (int i = 0; i < BMS_N; i++) {
 80023ec:	2300      	movs	r3, #0
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	e00c      	b.n	800240c <_Z11parse_state6CANMsg+0x9c>
				BMS[i].flag_charger = 1;
 80023f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002430 <_Z11parse_state6CANMsg+0xc0>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	3398      	adds	r3, #152	@ 0x98
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < BMS_N; i++) {
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3301      	adds	r3, #1
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <_Z11parse_state6CANMsg+0xc4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	dbed      	blt.n	80023f2 <_Z11parse_state6CANMsg+0x82>
			}

			current.flag_charger = 1;
 8002416:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <_Z11parse_state6CANMsg+0xd0>)
 8002418:	2201      	movs	r2, #1
 800241a:	639a      	str	r2, [r3, #56]	@ 0x38
			flag_charger = 1;
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <_Z11parse_state6CANMsg+0xd4>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]
		} else {
			// Serial.print("ID: ");
			// Serial.println(data.id);
		}
	}
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800242c:	b004      	add	sp, #16
 800242e:	4770      	bx	lr
 8002430:	240004bc 	.word	0x240004bc
 8002434:	24000000 	.word	0x24000000
 8002438:	24000c74 	.word	0x24000c74
 800243c:	18ff50e7 	.word	0x18ff50e7
 8002440:	24000cb0 	.word	0x24000cb0
 8002444:	24000ca8 	.word	0x24000ca8

08002448 <_Z41__static_initialization_and_destruction_0v>:
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b087      	sub	sp, #28
 800244c:	af06      	add	r7, sp, #24
		};
 800244e:	4c40      	ldr	r4, [pc, #256]	@ (8002550 <_Z41__static_initialization_and_destruction_0v+0x108>)
 8002450:	2369      	movs	r3, #105	@ 0x69
 8002452:	9304      	str	r3, [sp, #16]
 8002454:	2332      	movs	r3, #50	@ 0x32
 8002456:	9303      	str	r3, [sp, #12]
 8002458:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800245c:	9302      	str	r3, [sp, #8]
 800245e:	2313      	movs	r3, #19
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	233c      	movs	r3, #60	@ 0x3c
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 800246a:	f241 0268 	movw	r2, #4200	@ 0x1068
 800246e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002472:	4620      	mov	r0, r4
 8002474:	f7fe f93a 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002478:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 800247c:	23cd      	movs	r3, #205	@ 0xcd
 800247e:	9304      	str	r3, [sp, #16]
 8002480:	2364      	movs	r3, #100	@ 0x64
 8002482:	9303      	str	r3, [sp, #12]
 8002484:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002488:	9302      	str	r3, [sp, #8]
 800248a:	2313      	movs	r3, #19
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	233c      	movs	r3, #60	@ 0x3c
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002496:	f241 0268 	movw	r2, #4200	@ 0x1068
 800249a:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800249e:	4620      	mov	r0, r4
 80024a0:	f7fe f924 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80024a4:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 80024a8:	f240 1331 	movw	r3, #305	@ 0x131
 80024ac:	9304      	str	r3, [sp, #16]
 80024ae:	2396      	movs	r3, #150	@ 0x96
 80024b0:	9303      	str	r3, [sp, #12]
 80024b2:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	2313      	movs	r3, #19
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	233c      	movs	r3, #60	@ 0x3c
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80024c4:	f241 0268 	movw	r2, #4200	@ 0x1068
 80024c8:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7fe f90d 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 80024d2:	f504 74c4 	add.w	r4, r4, #392	@ 0x188
 80024d6:	f240 1395 	movw	r3, #405	@ 0x195
 80024da:	9304      	str	r3, [sp, #16]
 80024dc:	23c8      	movs	r3, #200	@ 0xc8
 80024de:	9303      	str	r3, [sp, #12]
 80024e0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80024e4:	9302      	str	r3, [sp, #8]
 80024e6:	2313      	movs	r3, #19
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	233c      	movs	r3, #60	@ 0x3c
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80024f2:	f241 0268 	movw	r2, #4200	@ 0x1068
 80024f6:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7fe f8f6 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
 8002500:	f504 70c4 	add.w	r0, r4, #392	@ 0x188
 8002504:	f240 13f9 	movw	r3, #505	@ 0x1f9
 8002508:	9304      	str	r3, [sp, #16]
 800250a:	23fa      	movs	r3, #250	@ 0xfa
 800250c:	9303      	str	r3, [sp, #12]
 800250e:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8002512:	9302      	str	r3, [sp, #8]
 8002514:	2313      	movs	r3, #19
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	233c      	movs	r3, #60	@ 0x3c
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8002520:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002524:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8002528:	f7fe f8e0 	bl	80006ec <_ZN7BMS_MODC1Emiiihjii>
CPU_MOD CPU(CPU_ID_send, CPU_ID_recv, 500); //Same with CPU, rest of vehicle
 800252c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002534:	2120      	movs	r1, #32
 8002536:	4807      	ldr	r0, [pc, #28]	@ (8002554 <_Z41__static_initialization_and_destruction_0v+0x10c>)
 8002538:	f7fe fc8c 	bl	8000e54 <_ZN7CPU_MODC1Emmi>
Current_MOD current(Current_ID, Current_max); //Class for current measurement
 800253c:	22c8      	movs	r2, #200	@ 0xc8
 800253e:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002542:	4805      	ldr	r0, [pc, #20]	@ (8002558 <_Z41__static_initialization_and_destruction_0v+0x110>)
 8002544:	f7fe fd60 	bl	8001008 <_ZN11Current_MODC1Emi>
}
 8002548:	bf00      	nop
 800254a:	3704      	adds	r7, #4
 800254c:	46bd      	mov	sp, r7
 800254e:	bd90      	pop	{r4, r7, pc}
 8002550:	240004bc 	.word	0x240004bc
 8002554:	24000c74 	.word	0x24000c74
 8002558:	24000cb0 	.word	0x24000cb0

0800255c <_GLOBAL__sub_I_BMS>:
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
 8002560:	f7ff ff72 	bl	8002448 <_Z41__static_initialization_and_destruction_0v>
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <HAL_MspInit+0x30>)
 8002570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002574:	4a08      	ldr	r2, [pc, #32]	@ (8002598 <HAL_MspInit+0x30>)
 8002576:	f043 0302 	orr.w	r3, r3, #2
 800257a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_MspInit+0x30>)
 8002580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	58024400 	.word	0x58024400

0800259c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08c      	sub	sp, #48	@ 0x30
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a31      	ldr	r2, [pc, #196]	@ (8002680 <HAL_ADC_MspInit+0xe4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d12b      	bne.n	8002616 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80025be:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <HAL_ADC_MspInit+0xe8>)
 80025c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002684 <HAL_ADC_MspInit+0xe8>)
 80025c6:	f043 0320 	orr.w	r3, r3, #32
 80025ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80025ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002684 <HAL_ADC_MspInit+0xe8>)
 80025d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025dc:	4b29      	ldr	r3, [pc, #164]	@ (8002684 <HAL_ADC_MspInit+0xe8>)
 80025de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025e2:	4a28      	ldr	r2, [pc, #160]	@ (8002684 <HAL_ADC_MspInit+0xe8>)
 80025e4:	f043 0320 	orr.w	r3, r3, #32
 80025e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025ec:	4b25      	ldr	r3, [pc, #148]	@ (8002684 <HAL_ADC_MspInit+0xe8>)
 80025ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002600:	2303      	movs	r3, #3
 8002602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	481e      	ldr	r0, [pc, #120]	@ (8002688 <HAL_ADC_MspInit+0xec>)
 8002610:	f003 fdfa 	bl	8006208 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002614:	e02f      	b.n	8002676 <HAL_ADC_MspInit+0xda>
  else if(hadc->Instance==ADC3)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1c      	ldr	r2, [pc, #112]	@ (800268c <HAL_ADC_MspInit+0xf0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d12a      	bne.n	8002676 <HAL_ADC_MspInit+0xda>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002620:	4b18      	ldr	r3, [pc, #96]	@ (8002684 <HAL_ADC_MspInit+0xe8>)
 8002622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002626:	4a17      	ldr	r2, [pc, #92]	@ (8002684 <HAL_ADC_MspInit+0xe8>)
 8002628:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800262c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002630:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <HAL_ADC_MspInit+0xe8>)
 8002632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002636:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800263e:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <HAL_ADC_MspInit+0xe8>)
 8002640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002644:	4a0f      	ldr	r2, [pc, #60]	@ (8002684 <HAL_ADC_MspInit+0xe8>)
 8002646:	f043 0320 	orr.w	r3, r3, #32
 800264a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800264e:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <HAL_ADC_MspInit+0xe8>)
 8002650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800265c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002662:	2303      	movs	r3, #3
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800266a:	f107 031c 	add.w	r3, r7, #28
 800266e:	4619      	mov	r1, r3
 8002670:	4805      	ldr	r0, [pc, #20]	@ (8002688 <HAL_ADC_MspInit+0xec>)
 8002672:	f003 fdc9 	bl	8006208 <HAL_GPIO_Init>
}
 8002676:	bf00      	nop
 8002678:	3730      	adds	r7, #48	@ 0x30
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40022000 	.word	0x40022000
 8002684:	58024400 	.word	0x58024400
 8002688:	58021400 	.word	0x58021400
 800268c:	58026000 	.word	0x58026000

08002690 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0ba      	sub	sp, #232	@ 0xe8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a8:	f107 0318 	add.w	r3, r7, #24
 80026ac:	22b8      	movs	r2, #184	@ 0xb8
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f009 fccb 	bl	800c04c <memset>
  if(hfdcan->Instance==FDCAN1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002824 <HAL_FDCAN_MspInit+0x194>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d157      	bne.n	8002770 <HAL_FDCAN_MspInit+0xe0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80026c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d2:	f107 0318 	add.w	r3, r7, #24
 80026d6:	4618      	mov	r0, r3
 80026d8:	f004 ff10 	bl	80074fc <HAL_RCCEx_PeriphCLKConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80026e2:	f7ff fc03 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80026e6:	4b50      	ldr	r3, [pc, #320]	@ (8002828 <HAL_FDCAN_MspInit+0x198>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	3301      	adds	r3, #1
 80026ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002828 <HAL_FDCAN_MspInit+0x198>)
 80026ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80026f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002828 <HAL_FDCAN_MspInit+0x198>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d10e      	bne.n	8002716 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80026f8:	4b4c      	ldr	r3, [pc, #304]	@ (800282c <HAL_FDCAN_MspInit+0x19c>)
 80026fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80026fe:	4a4b      	ldr	r2, [pc, #300]	@ (800282c <HAL_FDCAN_MspInit+0x19c>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002704:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002708:	4b48      	ldr	r3, [pc, #288]	@ (800282c <HAL_FDCAN_MspInit+0x19c>)
 800270a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800270e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002716:	4b45      	ldr	r3, [pc, #276]	@ (800282c <HAL_FDCAN_MspInit+0x19c>)
 8002718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800271c:	4a43      	ldr	r2, [pc, #268]	@ (800282c <HAL_FDCAN_MspInit+0x19c>)
 800271e:	f043 0308 	orr.w	r3, r3, #8
 8002722:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002726:	4b41      	ldr	r3, [pc, #260]	@ (800282c <HAL_FDCAN_MspInit+0x19c>)
 8002728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002734:	2303      	movs	r3, #3
 8002736:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800274c:	2309      	movs	r3, #9
 800274e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002752:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002756:	4619      	mov	r1, r3
 8002758:	4835      	ldr	r0, [pc, #212]	@ (8002830 <HAL_FDCAN_MspInit+0x1a0>)
 800275a:	f003 fd55 	bl	8006208 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	2013      	movs	r0, #19
 8002764:	f002 fb4d 	bl	8004e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002768:	2013      	movs	r0, #19
 800276a:	f002 fb64 	bl	8004e36 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN FDCAN2_MspInit 1 */

    /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800276e:	e054      	b.n	800281a <HAL_FDCAN_MspInit+0x18a>
  else if(hfdcan->Instance==FDCAN2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a2f      	ldr	r2, [pc, #188]	@ (8002834 <HAL_FDCAN_MspInit+0x1a4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d14f      	bne.n	800281a <HAL_FDCAN_MspInit+0x18a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800277a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800278c:	f107 0318 	add.w	r3, r7, #24
 8002790:	4618      	mov	r0, r3
 8002792:	f004 feb3 	bl	80074fc <HAL_RCCEx_PeriphCLKConfig>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 800279c:	f7ff fba6 	bl	8001eec <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80027a0:	4b21      	ldr	r3, [pc, #132]	@ (8002828 <HAL_FDCAN_MspInit+0x198>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3301      	adds	r3, #1
 80027a6:	4a20      	ldr	r2, [pc, #128]	@ (8002828 <HAL_FDCAN_MspInit+0x198>)
 80027a8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80027aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002828 <HAL_FDCAN_MspInit+0x198>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d10e      	bne.n	80027d0 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80027b2:	4b1e      	ldr	r3, [pc, #120]	@ (800282c <HAL_FDCAN_MspInit+0x19c>)
 80027b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80027b8:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <HAL_FDCAN_MspInit+0x19c>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027be:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80027c2:	4b1a      	ldr	r3, [pc, #104]	@ (800282c <HAL_FDCAN_MspInit+0x19c>)
 80027c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80027c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d0:	4b16      	ldr	r3, [pc, #88]	@ (800282c <HAL_FDCAN_MspInit+0x19c>)
 80027d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d6:	4a15      	ldr	r2, [pc, #84]	@ (800282c <HAL_FDCAN_MspInit+0x19c>)
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027e0:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_FDCAN_MspInit+0x19c>)
 80027e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80027ee:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80027f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002808:	2309      	movs	r3, #9
 800280a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002812:	4619      	mov	r1, r3
 8002814:	4808      	ldr	r0, [pc, #32]	@ (8002838 <HAL_FDCAN_MspInit+0x1a8>)
 8002816:	f003 fcf7 	bl	8006208 <HAL_GPIO_Init>
}
 800281a:	bf00      	nop
 800281c:	37e8      	adds	r7, #232	@ 0xe8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	4000a000 	.word	0x4000a000
 8002828:	24000d48 	.word	0x24000d48
 800282c:	58024400 	.word	0x58024400
 8002830:	58020c00 	.word	0x58020c00
 8002834:	4000a400 	.word	0x4000a400
 8002838:	58020400 	.word	0x58020400

0800283c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0b      	ldr	r2, [pc, #44]	@ (8002878 <HAL_TIM_Base_MspInit+0x3c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10e      	bne.n	800286c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800284e:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <HAL_TIM_Base_MspInit+0x40>)
 8002850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002854:	4a09      	ldr	r2, [pc, #36]	@ (800287c <HAL_TIM_Base_MspInit+0x40>)
 8002856:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800285a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800285e:	4b07      	ldr	r3, [pc, #28]	@ (800287c <HAL_TIM_Base_MspInit+0x40>)
 8002860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002864:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	40014800 	.word	0x40014800
 800287c:	58024400 	.word	0x58024400

08002880 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a13      	ldr	r2, [pc, #76]	@ (80028ec <HAL_TIM_MspPostInit+0x6c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d11f      	bne.n	80028e2 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a2:	4b13      	ldr	r3, [pc, #76]	@ (80028f0 <HAL_TIM_MspPostInit+0x70>)
 80028a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a8:	4a11      	ldr	r2, [pc, #68]	@ (80028f0 <HAL_TIM_MspPostInit+0x70>)
 80028aa:	f043 0302 	orr.w	r3, r3, #2
 80028ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028b2:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <HAL_TIM_MspPostInit+0x70>)
 80028b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c6:	2302      	movs	r3, #2
 80028c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80028d2:	2301      	movs	r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d6:	f107 030c 	add.w	r3, r7, #12
 80028da:	4619      	mov	r1, r3
 80028dc:	4805      	ldr	r0, [pc, #20]	@ (80028f4 <HAL_TIM_MspPostInit+0x74>)
 80028de:	f003 fc93 	bl	8006208 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80028e2:	bf00      	nop
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40014800 	.word	0x40014800
 80028f0:	58024400 	.word	0x58024400
 80028f4:	58020400 	.word	0x58020400

080028f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b0b8      	sub	sp, #224	@ 0xe0
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002910:	f107 0310 	add.w	r3, r7, #16
 8002914:	22b8      	movs	r2, #184	@ 0xb8
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f009 fb97 	bl	800c04c <memset>
  if(huart->Instance==USART2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a26      	ldr	r2, [pc, #152]	@ (80029bc <HAL_UART_MspInit+0xc4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d145      	bne.n	80029b4 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002928:	f04f 0202 	mov.w	r2, #2
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800293a:	f107 0310 	add.w	r3, r7, #16
 800293e:	4618      	mov	r0, r3
 8002940:	f004 fddc 	bl	80074fc <HAL_RCCEx_PeriphCLKConfig>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800294a:	f7ff facf 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800294e:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <HAL_UART_MspInit+0xc8>)
 8002950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002954:	4a1a      	ldr	r2, [pc, #104]	@ (80029c0 <HAL_UART_MspInit+0xc8>)
 8002956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800295a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800295e:	4b18      	ldr	r3, [pc, #96]	@ (80029c0 <HAL_UART_MspInit+0xc8>)
 8002960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296c:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <HAL_UART_MspInit+0xc8>)
 800296e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002972:	4a13      	ldr	r2, [pc, #76]	@ (80029c0 <HAL_UART_MspInit+0xc8>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800297c:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <HAL_UART_MspInit+0xc8>)
 800297e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800298a:	230c      	movs	r3, #12
 800298c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029a2:	2307      	movs	r3, #7
 80029a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80029ac:	4619      	mov	r1, r3
 80029ae:	4805      	ldr	r0, [pc, #20]	@ (80029c4 <HAL_UART_MspInit+0xcc>)
 80029b0:	f003 fc2a 	bl	8006208 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80029b4:	bf00      	nop
 80029b6:	37e0      	adds	r7, #224	@ 0xe0
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40004400 	.word	0x40004400
 80029c0:	58024400 	.word	0x58024400
 80029c4:	58020000 	.word	0x58020000

080029c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <NMI_Handler+0x4>

080029d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <HardFault_Handler+0x4>

080029d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <MemManage_Handler+0x4>

080029e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <BusFault_Handler+0x4>

080029e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <UsageFault_Handler+0x4>

080029f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a1e:	f000 f957 	bl	8002cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002a2c:	4802      	ldr	r0, [pc, #8]	@ (8002a38 <FDCAN1_IT0_IRQHandler+0x10>)
 8002a2e:	f002 fedd 	bl	80057ec <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	24000168 	.word	0x24000168

08002a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a44:	4a14      	ldr	r2, [pc, #80]	@ (8002a98 <_sbrk+0x5c>)
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <_sbrk+0x60>)
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a50:	4b13      	ldr	r3, [pc, #76]	@ (8002aa0 <_sbrk+0x64>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <_sbrk+0x64>)
 8002a5a:	4a12      	ldr	r2, [pc, #72]	@ (8002aa4 <_sbrk+0x68>)
 8002a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <_sbrk+0x64>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d207      	bcs.n	8002a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a6c:	f009 faf6 	bl	800c05c <__errno>
 8002a70:	4603      	mov	r3, r0
 8002a72:	220c      	movs	r2, #12
 8002a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	e009      	b.n	8002a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a7c:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <_sbrk+0x64>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a82:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <_sbrk+0x64>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	4a05      	ldr	r2, [pc, #20]	@ (8002aa0 <_sbrk+0x64>)
 8002a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	24050000 	.word	0x24050000
 8002a9c:	00000400 	.word	0x00000400
 8002aa0:	24000d4c 	.word	0x24000d4c
 8002aa4:	24000ea0 	.word	0x24000ea0

08002aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002aac:	4b32      	ldr	r3, [pc, #200]	@ (8002b78 <SystemInit+0xd0>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab2:	4a31      	ldr	r2, [pc, #196]	@ (8002b78 <SystemInit+0xd0>)
 8002ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002abc:	4b2f      	ldr	r3, [pc, #188]	@ (8002b7c <SystemInit+0xd4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	2b06      	cmp	r3, #6
 8002ac6:	d807      	bhi.n	8002ad8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b7c <SystemInit+0xd4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 030f 	bic.w	r3, r3, #15
 8002ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8002b7c <SystemInit+0xd4>)
 8002ad2:	f043 0307 	orr.w	r3, r3, #7
 8002ad6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ad8:	4b29      	ldr	r3, [pc, #164]	@ (8002b80 <SystemInit+0xd8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a28      	ldr	r2, [pc, #160]	@ (8002b80 <SystemInit+0xd8>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ae4:	4b26      	ldr	r3, [pc, #152]	@ (8002b80 <SystemInit+0xd8>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002aea:	4b25      	ldr	r3, [pc, #148]	@ (8002b80 <SystemInit+0xd8>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4924      	ldr	r1, [pc, #144]	@ (8002b80 <SystemInit+0xd8>)
 8002af0:	4b24      	ldr	r3, [pc, #144]	@ (8002b84 <SystemInit+0xdc>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002af6:	4b21      	ldr	r3, [pc, #132]	@ (8002b7c <SystemInit+0xd4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b02:	4b1e      	ldr	r3, [pc, #120]	@ (8002b7c <SystemInit+0xd4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 030f 	bic.w	r3, r3, #15
 8002b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002b7c <SystemInit+0xd4>)
 8002b0c:	f043 0307 	orr.w	r3, r3, #7
 8002b10:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002b12:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <SystemInit+0xd8>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002b18:	4b19      	ldr	r3, [pc, #100]	@ (8002b80 <SystemInit+0xd8>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002b1e:	4b18      	ldr	r3, [pc, #96]	@ (8002b80 <SystemInit+0xd8>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002b24:	4b16      	ldr	r3, [pc, #88]	@ (8002b80 <SystemInit+0xd8>)
 8002b26:	4a18      	ldr	r2, [pc, #96]	@ (8002b88 <SystemInit+0xe0>)
 8002b28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002b2a:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <SystemInit+0xd8>)
 8002b2c:	4a17      	ldr	r2, [pc, #92]	@ (8002b8c <SystemInit+0xe4>)
 8002b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b30:	4b13      	ldr	r3, [pc, #76]	@ (8002b80 <SystemInit+0xd8>)
 8002b32:	4a17      	ldr	r2, [pc, #92]	@ (8002b90 <SystemInit+0xe8>)
 8002b34:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b36:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <SystemInit+0xd8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b3c:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <SystemInit+0xd8>)
 8002b3e:	4a14      	ldr	r2, [pc, #80]	@ (8002b90 <SystemInit+0xe8>)
 8002b40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002b42:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <SystemInit+0xd8>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002b48:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <SystemInit+0xd8>)
 8002b4a:	4a11      	ldr	r2, [pc, #68]	@ (8002b90 <SystemInit+0xe8>)
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <SystemInit+0xd8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b54:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <SystemInit+0xd8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a09      	ldr	r2, [pc, #36]	@ (8002b80 <SystemInit+0xd8>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b60:	4b07      	ldr	r3, [pc, #28]	@ (8002b80 <SystemInit+0xd8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <SystemInit+0xec>)
 8002b68:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002b6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000ed00 	.word	0xe000ed00
 8002b7c:	52002000 	.word	0x52002000
 8002b80:	58024400 	.word	0x58024400
 8002b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b88:	02020200 	.word	0x02020200
 8002b8c:	01ff0000 	.word	0x01ff0000
 8002b90:	01010280 	.word	0x01010280
 8002b94:	52004000 	.word	0x52004000

08002b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b9c:	f7ff ff84 	bl	8002aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ba0:	480c      	ldr	r0, [pc, #48]	@ (8002bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ba2:	490d      	ldr	r1, [pc, #52]	@ (8002bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba8:	e002      	b.n	8002bb0 <LoopCopyDataInit>

08002baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bae:	3304      	adds	r3, #4

08002bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb4:	d3f9      	bcc.n	8002baa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8002be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bbc:	e001      	b.n	8002bc2 <LoopFillZerobss>

08002bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bbe:	6013      	str	r3, [r2, #0]
   adds r2, r2, #4
 8002bc0:	3204      	adds	r2, #4

08002bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc4:	d3fb      	bcc.n	8002bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bc6:	f009 fa4f 	bl	800c068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bca:	f7fe fb15 	bl	80011f8 <main>
  bx  lr
 8002bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bd0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002bd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002bd8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002bdc:	0800cd4c 	.word	0x0800cd4c
  ldr r2, =_sbss
 8002be0:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002be4:	24000e9c 	.word	0x24000e9c

08002be8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be8:	e7fe      	b.n	8002be8 <ADC3_IRQHandler>
	...

08002bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf2:	2003      	movs	r0, #3
 8002bf4:	f002 f8fa 	bl	8004dec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bf8:	f004 faaa 	bl	8007150 <HAL_RCC_GetSysClockFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <HAL_Init+0x68>)
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	4913      	ldr	r1, [pc, #76]	@ (8002c58 <HAL_Init+0x6c>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
 8002c14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c16:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <HAL_Init+0x68>)
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c58 <HAL_Init+0x6c>)
 8002c20:	5cd3      	ldrb	r3, [r2, r3]
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c5c <HAL_Init+0x70>)
 8002c2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c30:	4a0b      	ldr	r2, [pc, #44]	@ (8002c60 <HAL_Init+0x74>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c36:	200f      	movs	r0, #15
 8002c38:	f000 f814 	bl	8002c64 <HAL_InitTick>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e002      	b.n	8002c4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c46:	f7ff fc8f 	bl	8002568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	58024400 	.word	0x58024400
 8002c58:	0800ccbc 	.word	0x0800ccbc
 8002c5c:	24000010 	.word	0x24000010
 8002c60:	2400000c 	.word	0x2400000c

08002c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c6c:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <HAL_InitTick+0x60>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e021      	b.n	8002cbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c78:	4b13      	ldr	r3, [pc, #76]	@ (8002cc8 <HAL_InitTick+0x64>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_InitTick+0x60>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f002 f8df 	bl	8004e52 <HAL_SYSTICK_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00e      	b.n	8002cbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b0f      	cmp	r3, #15
 8002ca2:	d80a      	bhi.n	8002cba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	f002 f8a9 	bl	8004e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cb0:	4a06      	ldr	r2, [pc, #24]	@ (8002ccc <HAL_InitTick+0x68>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e000      	b.n	8002cbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	24000018 	.word	0x24000018
 8002cc8:	2400000c 	.word	0x2400000c
 8002ccc:	24000014 	.word	0x24000014

08002cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <HAL_IncTick+0x20>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_IncTick+0x24>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	4a04      	ldr	r2, [pc, #16]	@ (8002cf4 <HAL_IncTick+0x24>)
 8002ce2:	6013      	str	r3, [r2, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	24000018 	.word	0x24000018
 8002cf4:	24000d50 	.word	0x24000d50

08002cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <HAL_GetTick+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	24000d50 	.word	0x24000d50

08002d10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	609a      	str	r2, [r3, #8]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a18      	ldr	r2, [pc, #96]	@ (8002de8 <LL_ADC_SetChannelPreselection+0x70>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d027      	beq.n	8002dda <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <LL_ADC_SetChannelPreselection+0x2c>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	0e9b      	lsrs	r3, r3, #26
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	e015      	b.n	8002dd0 <LL_ADC_SetChannelPreselection+0x58>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	e003      	b.n	8002dc6 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2201      	movs	r2, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	69d2      	ldr	r2, [r2, #28]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	58026000 	.word	0x58026000

08002dec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3360      	adds	r3, #96	@ 0x60
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a10      	ldr	r2, [pc, #64]	@ (8002e4c <LL_ADC_SetOffset+0x60>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d10b      	bne.n	8002e28 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e26:	e00b      	b.n	8002e40 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	601a      	str	r2, [r3, #0]
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	58026000 	.word	0x58026000

08002e50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3360      	adds	r3, #96	@ 0x60
 8002e5e:	461a      	mov	r2, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	611a      	str	r2, [r3, #16]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00e      	beq.n	8002ee2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3360      	adds	r3, #96	@ 0x60
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	431a      	orrs	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	601a      	str	r2, [r3, #0]
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	58026000 	.word	0x58026000

08002ef4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a0c      	ldr	r2, [pc, #48]	@ (8002f34 <LL_ADC_SetOffsetSaturation+0x40>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d10e      	bne.n	8002f26 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3360      	adds	r3, #96	@ 0x60
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002f26:	bf00      	nop
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	58026000 	.word	0x58026000

08002f38 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a0c      	ldr	r2, [pc, #48]	@ (8002f78 <LL_ADC_SetOffsetSign+0x40>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d10e      	bne.n	8002f6a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3360      	adds	r3, #96	@ 0x60
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	58026000 	.word	0x58026000

08002f7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3360      	adds	r3, #96	@ 0x60
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a0c      	ldr	r2, [pc, #48]	@ (8002fcc <LL_ADC_SetOffsetState+0x50>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d108      	bne.n	8002fb0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002fae:	e007      	b.n	8002fc0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	601a      	str	r2, [r3, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	58026000 	.word	0x58026000

08002fd0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b087      	sub	sp, #28
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3330      	adds	r3, #48	@ 0x30
 8003006:	461a      	mov	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	4413      	add	r3, r2
 8003014:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	211f      	movs	r1, #31
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	401a      	ands	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	f003 011f 	and.w	r1, r3, #31
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	431a      	orrs	r2, r3
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800304e:	b480      	push	{r7}
 8003050:	b087      	sub	sp, #28
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3314      	adds	r3, #20
 800305e:	461a      	mov	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	0e5b      	lsrs	r3, r3, #25
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	4413      	add	r3, r2
 800306c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	0d1b      	lsrs	r3, r3, #20
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	2107      	movs	r1, #7
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	401a      	ands	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	0d1b      	lsrs	r3, r3, #20
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	431a      	orrs	r2, r3
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a1a      	ldr	r2, [pc, #104]	@ (800311c <LL_ADC_SetChannelSingleDiff+0x78>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d115      	bne.n	80030e4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030c4:	43db      	mvns	r3, r3
 80030c6:	401a      	ands	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0318 	and.w	r3, r3, #24
 80030ce:	4914      	ldr	r1, [pc, #80]	@ (8003120 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80030d0:	40d9      	lsrs	r1, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	400b      	ands	r3, r1
 80030d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030da:	431a      	orrs	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80030e2:	e014      	b.n	800310e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030f0:	43db      	mvns	r3, r3
 80030f2:	401a      	ands	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0318 	and.w	r3, r3, #24
 80030fa:	4909      	ldr	r1, [pc, #36]	@ (8003120 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80030fc:	40d9      	lsrs	r1, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	400b      	ands	r3, r1
 8003102:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003106:	431a      	orrs	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	58026000 	.word	0x58026000
 8003120:	000fffff 	.word	0x000fffff

08003124 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 031f 	and.w	r3, r3, #31
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	4b04      	ldr	r3, [pc, #16]	@ (800317c <LL_ADC_DisableDeepPowerDown+0x20>)
 800316a:	4013      	ands	r3, r2
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6093      	str	r3, [r2, #8]
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	5fffffc0 	.word	0x5fffffc0

08003180 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003194:	d101      	bne.n	800319a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	4b05      	ldr	r3, [pc, #20]	@ (80031cc <LL_ADC_EnableInternalRegulator+0x24>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	6fffffc0 	.word	0x6fffffc0

080031d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031e4:	d101      	bne.n	80031ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	4b05      	ldr	r3, [pc, #20]	@ (800321c <LL_ADC_Enable+0x24>)
 8003206:	4013      	ands	r3, r2
 8003208:	f043 0201 	orr.w	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	7fffffc0 	.word	0x7fffffc0

08003220 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <LL_ADC_Disable+0x24>)
 800322e:	4013      	ands	r3, r2
 8003230:	f043 0202 	orr.w	r2, r3, #2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	7fffffc0 	.word	0x7fffffc0

08003248 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <LL_ADC_IsEnabled+0x18>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <LL_ADC_IsEnabled+0x1a>
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b02      	cmp	r3, #2
 8003280:	d101      	bne.n	8003286 <LL_ADC_IsDisableOngoing+0x18>
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <LL_ADC_IsDisableOngoing+0x1a>
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <LL_ADC_REG_StartConversion+0x24>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	f043 0204 	orr.w	r2, r3, #4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	7fffffc0 	.word	0x7fffffc0

080032bc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <LL_ADC_REG_StopConversion+0x24>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	f043 0210 	orr.w	r2, r3, #16
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	7fffffc0 	.word	0x7fffffc0

080032e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d101      	bne.n	80032fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	4b05      	ldr	r3, [pc, #20]	@ (8003330 <LL_ADC_INJ_StopConversion+0x24>)
 800331a:	4013      	ands	r3, r2
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	7fffffc0 	.word	0x7fffffc0

08003334 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b08      	cmp	r3, #8
 8003346:	d101      	bne.n	800334c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b089      	sub	sp, #36	@ 0x24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e1ee      	b.n	8003754 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003380:	2b00      	cmp	r3, #0
 8003382:	d109      	bne.n	8003398 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff f909 	bl	800259c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff feef 	bl	8003180 <LL_ADC_IsDeepPowerDownEnabled>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d004      	beq.n	80033b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fed5 	bl	800315c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff ff0a 	bl	80031d0 <LL_ADC_IsInternalRegulatorEnabled>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d114      	bne.n	80033ec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff feee 	bl	80031a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003608 <HAL_ADC_Init+0x2ac>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	4a8e      	ldr	r2, [pc, #568]	@ (800360c <HAL_ADC_Init+0x2b0>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	099b      	lsrs	r3, r3, #6
 80033da:	3301      	adds	r3, #1
 80033dc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033de:	e002      	b.n	80033e6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f9      	bne.n	80033e0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff feed 	bl	80031d0 <LL_ADC_IsInternalRegulatorEnabled>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10d      	bne.n	8003418 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003400:	f043 0210 	orr.w	r2, r3, #16
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800340c:	f043 0201 	orr.w	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff61 	bl	80032e4 <LL_ADC_REG_IsConversionOngoing>
 8003422:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	f040 8188 	bne.w	8003742 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f040 8184 	bne.w	8003742 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003442:	f043 0202 	orr.w	r2, r3, #2
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fefa 	bl	8003248 <LL_ADC_IsEnabled>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d136      	bne.n	80034c8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6c      	ldr	r2, [pc, #432]	@ (8003610 <HAL_ADC_Init+0x2b4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_ADC_Init+0x112>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a6a      	ldr	r2, [pc, #424]	@ (8003614 <HAL_ADC_Init+0x2b8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d10e      	bne.n	800348c <HAL_ADC_Init+0x130>
 800346e:	4868      	ldr	r0, [pc, #416]	@ (8003610 <HAL_ADC_Init+0x2b4>)
 8003470:	f7ff feea 	bl	8003248 <LL_ADC_IsEnabled>
 8003474:	4604      	mov	r4, r0
 8003476:	4867      	ldr	r0, [pc, #412]	@ (8003614 <HAL_ADC_Init+0x2b8>)
 8003478:	f7ff fee6 	bl	8003248 <LL_ADC_IsEnabled>
 800347c:	4603      	mov	r3, r0
 800347e:	4323      	orrs	r3, r4
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e008      	b.n	800349e <HAL_ADC_Init+0x142>
 800348c:	4862      	ldr	r0, [pc, #392]	@ (8003618 <HAL_ADC_Init+0x2bc>)
 800348e:	f7ff fedb 	bl	8003248 <LL_ADC_IsEnabled>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d012      	beq.n	80034c8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a5a      	ldr	r2, [pc, #360]	@ (8003610 <HAL_ADC_Init+0x2b4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_ADC_Init+0x15a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a58      	ldr	r2, [pc, #352]	@ (8003614 <HAL_ADC_Init+0x2b8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_Init+0x15e>
 80034b6:	4a59      	ldr	r2, [pc, #356]	@ (800361c <HAL_ADC_Init+0x2c0>)
 80034b8:	e000      	b.n	80034bc <HAL_ADC_Init+0x160>
 80034ba:	4a59      	ldr	r2, [pc, #356]	@ (8003620 <HAL_ADC_Init+0x2c4>)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4619      	mov	r1, r3
 80034c2:	4610      	mov	r0, r2
 80034c4:	f7ff fc24 	bl	8002d10 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a52      	ldr	r2, [pc, #328]	@ (8003618 <HAL_ADC_Init+0x2bc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d129      	bne.n	8003526 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7e5b      	ldrb	r3, [r3, #25]
 80034d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80034dc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80034e2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d013      	beq.n	8003514 <HAL_ADC_Init+0x1b8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	d00d      	beq.n	8003510 <HAL_ADC_Init+0x1b4>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b1c      	cmp	r3, #28
 80034fa:	d007      	beq.n	800350c <HAL_ADC_Init+0x1b0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b18      	cmp	r3, #24
 8003502:	d101      	bne.n	8003508 <HAL_ADC_Init+0x1ac>
 8003504:	2318      	movs	r3, #24
 8003506:	e006      	b.n	8003516 <HAL_ADC_Init+0x1ba>
 8003508:	2300      	movs	r3, #0
 800350a:	e004      	b.n	8003516 <HAL_ADC_Init+0x1ba>
 800350c:	2310      	movs	r3, #16
 800350e:	e002      	b.n	8003516 <HAL_ADC_Init+0x1ba>
 8003510:	2308      	movs	r3, #8
 8003512:	e000      	b.n	8003516 <HAL_ADC_Init+0x1ba>
 8003514:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003516:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800351e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
 8003524:	e00e      	b.n	8003544 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7e5b      	ldrb	r3, [r3, #25]
 800352a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003530:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003536:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800353e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d106      	bne.n	800355c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	3b01      	subs	r3, #1
 8003554:	045b      	lsls	r3, r3, #17
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d009      	beq.n	8003578 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003568:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003570:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a26      	ldr	r2, [pc, #152]	@ (8003618 <HAL_ADC_Init+0x2bc>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d115      	bne.n	80035ae <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	4b26      	ldr	r3, [pc, #152]	@ (8003624 <HAL_ADC_Init+0x2c8>)
 800358a:	4013      	ands	r3, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	69b9      	ldr	r1, [r7, #24]
 8003592:	430b      	orrs	r3, r1
 8003594:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	611a      	str	r2, [r3, #16]
 80035ac:	e009      	b.n	80035c2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003628 <HAL_ADC_Init+0x2cc>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	69b9      	ldr	r1, [r7, #24]
 80035be:	430b      	orrs	r3, r1
 80035c0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fe8c 	bl	80032e4 <LL_ADC_REG_IsConversionOngoing>
 80035cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff feae 	bl	8003334 <LL_ADC_INJ_IsConversionOngoing>
 80035d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f040 808e 	bne.w	80036fe <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f040 808a 	bne.w	80036fe <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003618 <HAL_ADC_Init+0x2bc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d11b      	bne.n	800362c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	7e1b      	ldrb	r3, [r3, #24]
 80035f8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003600:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	e018      	b.n	800363a <HAL_ADC_Init+0x2de>
 8003608:	2400000c 	.word	0x2400000c
 800360c:	053e2d63 	.word	0x053e2d63
 8003610:	40022000 	.word	0x40022000
 8003614:	40022100 	.word	0x40022100
 8003618:	58026000 	.word	0x58026000
 800361c:	40022300 	.word	0x40022300
 8003620:	58026300 	.word	0x58026300
 8003624:	fff04007 	.word	0xfff04007
 8003628:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	7e1b      	ldrb	r3, [r3, #24]
 8003630:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	4b46      	ldr	r3, [pc, #280]	@ (800375c <HAL_ADC_Init+0x400>)
 8003642:	4013      	ands	r3, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	430b      	orrs	r3, r1
 800364c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003654:	2b01      	cmp	r3, #1
 8003656:	d137      	bne.n	80036c8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a3f      	ldr	r2, [pc, #252]	@ (8003760 <HAL_ADC_Init+0x404>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d116      	bne.n	8003696 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	4b3d      	ldr	r3, [pc, #244]	@ (8003764 <HAL_ADC_Init+0x408>)
 8003670:	4013      	ands	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800367a:	4311      	orrs	r1, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003680:	4311      	orrs	r1, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003686:	430a      	orrs	r2, r1
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	611a      	str	r2, [r3, #16]
 8003694:	e020      	b.n	80036d8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	4b32      	ldr	r3, [pc, #200]	@ (8003768 <HAL_ADC_Init+0x40c>)
 800369e:	4013      	ands	r3, r2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80036a4:	3a01      	subs	r2, #1
 80036a6:	0411      	lsls	r1, r2, #16
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80036ac:	4311      	orrs	r1, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036b2:	4311      	orrs	r1, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80036b8:	430a      	orrs	r2, r1
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	611a      	str	r2, [r3, #16]
 80036c6:	e007      	b.n	80036d8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003760 <HAL_ADC_Init+0x404>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d002      	beq.n	80036fe <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f001 f8b1 	bl	8004860 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d10c      	bne.n	8003720 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370c:	f023 010f 	bic.w	r1, r3, #15
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	1e5a      	subs	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	631a      	str	r2, [r3, #48]	@ 0x30
 800371e:	e007      	b.n	8003730 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 020f 	bic.w	r2, r2, #15
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003734:	f023 0303 	bic.w	r3, r3, #3
 8003738:	f043 0201 	orr.w	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003740:	e007      	b.n	8003752 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003746:	f043 0210 	orr.w	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003752:	7ffb      	ldrb	r3, [r7, #31]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3724      	adds	r7, #36	@ 0x24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd90      	pop	{r4, r7, pc}
 800375c:	ffffbffc 	.word	0xffffbffc
 8003760:	58026000 	.word	0x58026000
 8003764:	fc00f81f 	.word	0xfc00f81f
 8003768:	fc00f81e 	.word	0xfc00f81e

0800376c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a5c      	ldr	r2, [pc, #368]	@ (80038ec <HAL_ADC_Start+0x180>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_ADC_Start+0x1c>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a5b      	ldr	r2, [pc, #364]	@ (80038f0 <HAL_ADC_Start+0x184>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_ADC_Start+0x20>
 8003788:	4b5a      	ldr	r3, [pc, #360]	@ (80038f4 <HAL_ADC_Start+0x188>)
 800378a:	e000      	b.n	800378e <HAL_ADC_Start+0x22>
 800378c:	4b5a      	ldr	r3, [pc, #360]	@ (80038f8 <HAL_ADC_Start+0x18c>)
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fcc8 	bl	8003124 <LL_ADC_GetMultimode>
 8003794:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff fda2 	bl	80032e4 <LL_ADC_REG_IsConversionOngoing>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 809a 	bne.w	80038dc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_Start+0x4a>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e095      	b.n	80038e2 <HAL_ADC_Start+0x176>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 ff64 	bl	800468c <ADC_Enable>
 80037c4:	4603      	mov	r3, r0
 80037c6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f040 8081 	bne.w	80038d2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037d4:	4b49      	ldr	r3, [pc, #292]	@ (80038fc <HAL_ADC_Start+0x190>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a42      	ldr	r2, [pc, #264]	@ (80038f0 <HAL_ADC_Start+0x184>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d002      	beq.n	80037f0 <HAL_ADC_Start+0x84>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	e000      	b.n	80037f2 <HAL_ADC_Start+0x86>
 80037f0:	4b3e      	ldr	r3, [pc, #248]	@ (80038ec <HAL_ADC_Start+0x180>)
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d002      	beq.n	8003800 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d105      	bne.n	800380c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003804:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003810:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003818:	d106      	bne.n	8003828 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800381e:	f023 0206 	bic.w	r2, r3, #6
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	665a      	str	r2, [r3, #100]	@ 0x64
 8003826:	e002      	b.n	800382e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	221c      	movs	r2, #28
 8003834:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a2b      	ldr	r2, [pc, #172]	@ (80038f0 <HAL_ADC_Start+0x184>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d002      	beq.n	800384e <HAL_ADC_Start+0xe2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	e000      	b.n	8003850 <HAL_ADC_Start+0xe4>
 800384e:	4b27      	ldr	r3, [pc, #156]	@ (80038ec <HAL_ADC_Start+0x180>)
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	4293      	cmp	r3, r2
 8003856:	d008      	beq.n	800386a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b05      	cmp	r3, #5
 8003862:	d002      	beq.n	800386a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b09      	cmp	r3, #9
 8003868:	d114      	bne.n	8003894 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003880:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fd01 	bl	8003294 <LL_ADC_REG_StartConversion>
 8003892:	e025      	b.n	80038e0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003898:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a12      	ldr	r2, [pc, #72]	@ (80038f0 <HAL_ADC_Start+0x184>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d002      	beq.n	80038b0 <HAL_ADC_Start+0x144>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	e000      	b.n	80038b2 <HAL_ADC_Start+0x146>
 80038b0:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <HAL_ADC_Start+0x180>)
 80038b2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00f      	beq.n	80038e0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80038c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	661a      	str	r2, [r3, #96]	@ 0x60
 80038d0:	e006      	b.n	80038e0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80038da:	e001      	b.n	80038e0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038dc:	2302      	movs	r3, #2
 80038de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40022000 	.word	0x40022000
 80038f0:	40022100 	.word	0x40022100
 80038f4:	40022300 	.word	0x40022300
 80038f8:	58026300 	.word	0x58026300
 80038fc:	fffff0fe 	.word	0xfffff0fe

08003900 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_ADC_Stop+0x16>
 8003912:	2302      	movs	r3, #2
 8003914:	e021      	b.n	800395a <HAL_ADC_Stop+0x5a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800391e:	2103      	movs	r1, #3
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fdf7 	bl	8004514 <ADC_ConversionStop>
 8003926:	4603      	mov	r3, r0
 8003928:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10f      	bne.n	8003950 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 ff35 	bl	80047a0 <ADC_Disable>
 8003936:	4603      	mov	r3, r0
 8003938:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d107      	bne.n	8003950 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003944:	4b07      	ldr	r3, [pc, #28]	@ (8003964 <HAL_ADC_Stop+0x64>)
 8003946:	4013      	ands	r3, r2
 8003948:	f043 0201 	orr.w	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003958:	7bfb      	ldrb	r3, [r7, #15]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	ffffeefe 	.word	0xffffeefe

08003968 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a72      	ldr	r2, [pc, #456]	@ (8003b40 <HAL_ADC_PollForConversion+0x1d8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_ADC_PollForConversion+0x1e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a70      	ldr	r2, [pc, #448]	@ (8003b44 <HAL_ADC_PollForConversion+0x1dc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <HAL_ADC_PollForConversion+0x22>
 8003986:	4b70      	ldr	r3, [pc, #448]	@ (8003b48 <HAL_ADC_PollForConversion+0x1e0>)
 8003988:	e000      	b.n	800398c <HAL_ADC_PollForConversion+0x24>
 800398a:	4b70      	ldr	r3, [pc, #448]	@ (8003b4c <HAL_ADC_PollForConversion+0x1e4>)
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fbc9 	bl	8003124 <LL_ADC_GetMultimode>
 8003992:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	2b08      	cmp	r3, #8
 800399a:	d102      	bne.n	80039a2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800399c:	2308      	movs	r3, #8
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	e037      	b.n	8003a12 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b05      	cmp	r3, #5
 80039ac:	d002      	beq.n	80039b4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b09      	cmp	r3, #9
 80039b2:	d111      	bne.n	80039d8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c6:	f043 0220 	orr.w	r2, r3, #32
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e0b1      	b.n	8003b36 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80039d2:	2304      	movs	r3, #4
 80039d4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80039d6:	e01c      	b.n	8003a12 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a58      	ldr	r2, [pc, #352]	@ (8003b40 <HAL_ADC_PollForConversion+0x1d8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_ADC_PollForConversion+0x84>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a57      	ldr	r2, [pc, #348]	@ (8003b44 <HAL_ADC_PollForConversion+0x1dc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d101      	bne.n	80039f0 <HAL_ADC_PollForConversion+0x88>
 80039ec:	4b56      	ldr	r3, [pc, #344]	@ (8003b48 <HAL_ADC_PollForConversion+0x1e0>)
 80039ee:	e000      	b.n	80039f2 <HAL_ADC_PollForConversion+0x8a>
 80039f0:	4b56      	ldr	r3, [pc, #344]	@ (8003b4c <HAL_ADC_PollForConversion+0x1e4>)
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fba4 	bl	8003140 <LL_ADC_GetMultiDMATransfer>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e093      	b.n	8003b36 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a0e:	2304      	movs	r3, #4
 8003a10:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a12:	f7ff f971 	bl	8002cf8 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a18:	e021      	b.n	8003a5e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d01d      	beq.n	8003a5e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003a22:	f7ff f969 	bl	8002cf8 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <HAL_ADC_PollForConversion+0xd0>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d112      	bne.n	8003a5e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10b      	bne.n	8003a5e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4a:	f043 0204 	orr.w	r2, r3, #4
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e06b      	b.n	8003b36 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0d6      	beq.n	8003a1a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a70:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff faa7 	bl	8002fd0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01c      	beq.n	8003ac2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7e5b      	ldrb	r3, [r3, #25]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d118      	bne.n	8003ac2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d111      	bne.n	8003ac2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aba:	f043 0201 	orr.w	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b44 <HAL_ADC_PollForConversion+0x1dc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d002      	beq.n	8003ad2 <HAL_ADC_PollForConversion+0x16a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	e000      	b.n	8003ad4 <HAL_ADC_PollForConversion+0x16c>
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b40 <HAL_ADC_PollForConversion+0x1d8>)
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d008      	beq.n	8003aee <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	d002      	beq.n	8003aee <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b09      	cmp	r3, #9
 8003aec:	d104      	bne.n	8003af8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	e00c      	b.n	8003b12 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a11      	ldr	r2, [pc, #68]	@ (8003b44 <HAL_ADC_PollForConversion+0x1dc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d002      	beq.n	8003b08 <HAL_ADC_PollForConversion+0x1a0>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	e000      	b.n	8003b0a <HAL_ADC_PollForConversion+0x1a2>
 8003b08:	4b0d      	ldr	r3, [pc, #52]	@ (8003b40 <HAL_ADC_PollForConversion+0x1d8>)
 8003b0a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d104      	bne.n	8003b22 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e008      	b.n	8003b34 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d103      	bne.n	8003b34 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	220c      	movs	r2, #12
 8003b32:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40022000 	.word	0x40022000
 8003b44:	40022100 	.word	0x40022100
 8003b48:	40022300 	.word	0x40022300
 8003b4c:	58026300 	.word	0x58026300

08003b50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b0a5      	sub	sp, #148	@ 0x94
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b86:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4aa4      	ldr	r2, [pc, #656]	@ (8003e20 <HAL_ADC_ConfigChannel+0x2b4>)
 8003b8e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d102      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x34>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	f000 bca2 	b.w	80044e4 <HAL_ADC_ConfigChannel+0x978>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fb99 	bl	80032e4 <LL_ADC_REG_IsConversionOngoing>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f040 8486 	bne.w	80044c6 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	db31      	blt.n	8003c26 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a97      	ldr	r2, [pc, #604]	@ (8003e24 <HAL_ADC_ConfigChannel+0x2b8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d02c      	beq.n	8003c26 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d108      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x7e>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0e9b      	lsrs	r3, r3, #26
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2201      	movs	r2, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	e016      	b.n	8003c18 <HAL_ADC_ConfigChannel+0xac>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003bf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bfa:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003c02:	2320      	movs	r3, #32
 8003c04:	e003      	b.n	8003c0e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003c06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c08:	fab3 f383 	clz	r3, r3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	2201      	movs	r2, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	69d1      	ldr	r1, [r2, #28]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	430b      	orrs	r3, r1
 8003c24:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6859      	ldr	r1, [r3, #4]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f7ff f9df 	bl	8002ff6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fb51 	bl	80032e4 <LL_ADC_REG_IsConversionOngoing>
 8003c42:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fb72 	bl	8003334 <LL_ADC_INJ_IsConversionOngoing>
 8003c50:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f040 824a 	bne.w	80040f2 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 8245 	bne.w	80040f2 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	6819      	ldr	r1, [r3, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	461a      	mov	r2, r3
 8003c76:	f7ff f9ea 	bl	800304e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a69      	ldr	r2, [pc, #420]	@ (8003e24 <HAL_ADC_ConfigChannel+0x2b8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d10d      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	08db      	lsrs	r3, r3, #3
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c9e:	e032      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ca0:	4b61      	ldr	r3, [pc, #388]	@ (8003e28 <HAL_ADC_ConfigChannel+0x2bc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003ca8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cac:	d10b      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x15a>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	089b      	lsrs	r3, r3, #2
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	e01d      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x196>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x180>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	089b      	lsrs	r3, r3, #2
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	e00a      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x196>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	695a      	ldr	r2, [r3, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	089b      	lsrs	r3, r3, #2
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d048      	beq.n	8003da0 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6919      	ldr	r1, [r3, #16]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d1e:	f7ff f865 	bl	8002dec <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a3f      	ldr	r2, [pc, #252]	@ (8003e24 <HAL_ADC_ConfigChannel+0x2b8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d119      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	6919      	ldr	r1, [r3, #16]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f7ff f8fd 	bl	8002f38 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6919      	ldr	r1, [r3, #16]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d102      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x1ea>
 8003d50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d54:	e000      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x1ec>
 8003d56:	2300      	movs	r3, #0
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f7ff f8cb 	bl	8002ef4 <LL_ADC_SetOffsetSaturation>
 8003d5e:	e1c8      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6919      	ldr	r1, [r3, #16]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d102      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x20c>
 8003d72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003d76:	e000      	b.n	8003d7a <HAL_ADC_ConfigChannel+0x20e>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f7ff f898 	bl	8002eb0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	6919      	ldr	r1, [r3, #16]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	7e1b      	ldrb	r3, [r3, #24]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d102      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x22a>
 8003d90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d94:	e000      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x22c>
 8003d96:	2300      	movs	r3, #0
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f7ff f86f 	bl	8002e7c <LL_ADC_SetDataRightShift>
 8003d9e:	e1a8      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e24 <HAL_ADC_ConfigChannel+0x2b8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	f040 815b 	bne.w	8004062 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff f84c 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x26c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff f841 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	0e9b      	lsrs	r3, r3, #26
 8003dd2:	f003 021f 	and.w	r2, r3, #31
 8003dd6:	e017      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x29c>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2100      	movs	r1, #0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff f836 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003de4:	4603      	mov	r3, r0
 8003de6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003dfa:	2320      	movs	r3, #32
 8003dfc:	e003      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10b      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x2c0>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	0e9b      	lsrs	r3, r3, #26
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	e017      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x2e4>
 8003e20:	47ff0000 	.word	0x47ff0000
 8003e24:	58026000 	.word	0x58026000
 8003e28:	5c001000 	.word	0x5c001000
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e34:	fa93 f3a3 	rbit	r3, r3
 8003e38:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003e3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e3c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003e3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003e44:	2320      	movs	r3, #32
 8003e46:	e003      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003e48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d106      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff f88d 	bl	8002f7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2101      	movs	r1, #1
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe fff1 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x322>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe ffe6 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003e84:	4603      	mov	r3, r0
 8003e86:	0e9b      	lsrs	r3, r3, #26
 8003e88:	f003 021f 	and.w	r2, r3, #31
 8003e8c:	e017      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x352>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2101      	movs	r1, #1
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fe ffdb 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ea0:	fa93 f3a3 	rbit	r3, r3
 8003ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ea8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8003eb0:	2320      	movs	r3, #32
 8003eb2:	e003      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x36a>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	0e9b      	lsrs	r3, r3, #26
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	e011      	b.n	8003efa <HAL_ADC_ConfigChannel+0x38e>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003ee8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003eee:	2320      	movs	r3, #32
 8003ef0:	e003      	b.n	8003efa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ef4:	fab3 f383 	clz	r3, r3
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d106      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2200      	movs	r2, #0
 8003f04:	2101      	movs	r1, #1
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff f838 	bl	8002f7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2102      	movs	r1, #2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe ff9c 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x3cc>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2102      	movs	r1, #2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe ff91 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	0e9b      	lsrs	r3, r3, #26
 8003f32:	f003 021f 	and.w	r2, r3, #31
 8003f36:	e017      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x3fc>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe ff86 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003f44:	4603      	mov	r3, r0
 8003f46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003f5a:	2320      	movs	r3, #32
 8003f5c:	e003      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f60:	fab3 f383 	clz	r3, r3
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d105      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x414>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	0e9b      	lsrs	r3, r3, #26
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	e011      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x438>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f90:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003f98:	2320      	movs	r3, #32
 8003f9a:	e003      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d106      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2200      	movs	r2, #0
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe ffe3 	bl	8002f7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2103      	movs	r1, #3
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fe ff47 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x476>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2103      	movs	r1, #3
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe ff3c 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	0e9b      	lsrs	r3, r3, #26
 8003fdc:	f003 021f 	and.w	r2, r3, #31
 8003fe0:	e017      	b.n	8004012 <HAL_ADC_ConfigChannel+0x4a6>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2103      	movs	r1, #3
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe ff31 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	fa93 f3a3 	rbit	r3, r3
 8003ff8:	61fb      	str	r3, [r7, #28]
  return result;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004004:	2320      	movs	r3, #32
 8004006:	e003      	b.n	8004010 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800401a:	2b00      	cmp	r3, #0
 800401c:	d105      	bne.n	800402a <HAL_ADC_ConfigChannel+0x4be>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	0e9b      	lsrs	r3, r3, #26
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	e011      	b.n	800404e <HAL_ADC_ConfigChannel+0x4e2>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	fa93 f3a3 	rbit	r3, r3
 8004036:	613b      	str	r3, [r7, #16]
  return result;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8004042:	2320      	movs	r3, #32
 8004044:	e003      	b.n	800404e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	fab3 f383 	clz	r3, r3
 800404c:	b2db      	uxtb	r3, r3
 800404e:	429a      	cmp	r2, r3
 8004050:	d14f      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	2103      	movs	r1, #3
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe ff8e 	bl	8002f7c <LL_ADC_SetOffsetState>
 8004060:	e047      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004068:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	069b      	lsls	r3, r3, #26
 8004072:	429a      	cmp	r2, r3
 8004074:	d107      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004084:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800408c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	069b      	lsls	r3, r3, #26
 8004096:	429a      	cmp	r2, r3
 8004098:	d107      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040a8:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	069b      	lsls	r3, r3, #26
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d107      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040cc:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	069b      	lsls	r3, r3, #26
 80040de:	429a      	cmp	r2, r3
 80040e0:	d107      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff f8a6 	bl	8003248 <LL_ADC_IsEnabled>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 81ea 	bne.w	80044d8 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6819      	ldr	r1, [r3, #0]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	461a      	mov	r2, r3
 8004112:	f7fe ffc7 	bl	80030a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	4a7a      	ldr	r2, [pc, #488]	@ (8004304 <HAL_ADC_ConfigChannel+0x798>)
 800411c:	4293      	cmp	r3, r2
 800411e:	f040 80e0 	bne.w	80042e2 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4977      	ldr	r1, [pc, #476]	@ (8004308 <HAL_ADC_ConfigChannel+0x79c>)
 800412c:	428b      	cmp	r3, r1
 800412e:	d147      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x654>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4975      	ldr	r1, [pc, #468]	@ (800430c <HAL_ADC_ConfigChannel+0x7a0>)
 8004136:	428b      	cmp	r3, r1
 8004138:	d040      	beq.n	80041bc <HAL_ADC_ConfigChannel+0x650>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4974      	ldr	r1, [pc, #464]	@ (8004310 <HAL_ADC_ConfigChannel+0x7a4>)
 8004140:	428b      	cmp	r3, r1
 8004142:	d039      	beq.n	80041b8 <HAL_ADC_ConfigChannel+0x64c>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4972      	ldr	r1, [pc, #456]	@ (8004314 <HAL_ADC_ConfigChannel+0x7a8>)
 800414a:	428b      	cmp	r3, r1
 800414c:	d032      	beq.n	80041b4 <HAL_ADC_ConfigChannel+0x648>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4971      	ldr	r1, [pc, #452]	@ (8004318 <HAL_ADC_ConfigChannel+0x7ac>)
 8004154:	428b      	cmp	r3, r1
 8004156:	d02b      	beq.n	80041b0 <HAL_ADC_ConfigChannel+0x644>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	496f      	ldr	r1, [pc, #444]	@ (800431c <HAL_ADC_ConfigChannel+0x7b0>)
 800415e:	428b      	cmp	r3, r1
 8004160:	d024      	beq.n	80041ac <HAL_ADC_ConfigChannel+0x640>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	496e      	ldr	r1, [pc, #440]	@ (8004320 <HAL_ADC_ConfigChannel+0x7b4>)
 8004168:	428b      	cmp	r3, r1
 800416a:	d01d      	beq.n	80041a8 <HAL_ADC_ConfigChannel+0x63c>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	496c      	ldr	r1, [pc, #432]	@ (8004324 <HAL_ADC_ConfigChannel+0x7b8>)
 8004172:	428b      	cmp	r3, r1
 8004174:	d016      	beq.n	80041a4 <HAL_ADC_ConfigChannel+0x638>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	496b      	ldr	r1, [pc, #428]	@ (8004328 <HAL_ADC_ConfigChannel+0x7bc>)
 800417c:	428b      	cmp	r3, r1
 800417e:	d00f      	beq.n	80041a0 <HAL_ADC_ConfigChannel+0x634>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4969      	ldr	r1, [pc, #420]	@ (800432c <HAL_ADC_ConfigChannel+0x7c0>)
 8004186:	428b      	cmp	r3, r1
 8004188:	d008      	beq.n	800419c <HAL_ADC_ConfigChannel+0x630>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4968      	ldr	r1, [pc, #416]	@ (8004330 <HAL_ADC_ConfigChannel+0x7c4>)
 8004190:	428b      	cmp	r3, r1
 8004192:	d101      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x62c>
 8004194:	4b67      	ldr	r3, [pc, #412]	@ (8004334 <HAL_ADC_ConfigChannel+0x7c8>)
 8004196:	e0a0      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 8004198:	2300      	movs	r3, #0
 800419a:	e09e      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 800419c:	4b66      	ldr	r3, [pc, #408]	@ (8004338 <HAL_ADC_ConfigChannel+0x7cc>)
 800419e:	e09c      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80041a0:	4b66      	ldr	r3, [pc, #408]	@ (800433c <HAL_ADC_ConfigChannel+0x7d0>)
 80041a2:	e09a      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80041a4:	4b60      	ldr	r3, [pc, #384]	@ (8004328 <HAL_ADC_ConfigChannel+0x7bc>)
 80041a6:	e098      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80041a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004324 <HAL_ADC_ConfigChannel+0x7b8>)
 80041aa:	e096      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80041ac:	4b64      	ldr	r3, [pc, #400]	@ (8004340 <HAL_ADC_ConfigChannel+0x7d4>)
 80041ae:	e094      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80041b0:	4b64      	ldr	r3, [pc, #400]	@ (8004344 <HAL_ADC_ConfigChannel+0x7d8>)
 80041b2:	e092      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80041b4:	4b64      	ldr	r3, [pc, #400]	@ (8004348 <HAL_ADC_ConfigChannel+0x7dc>)
 80041b6:	e090      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80041b8:	4b64      	ldr	r3, [pc, #400]	@ (800434c <HAL_ADC_ConfigChannel+0x7e0>)
 80041ba:	e08e      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80041bc:	2301      	movs	r3, #1
 80041be:	e08c      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4962      	ldr	r1, [pc, #392]	@ (8004350 <HAL_ADC_ConfigChannel+0x7e4>)
 80041c6:	428b      	cmp	r3, r1
 80041c8:	d140      	bne.n	800424c <HAL_ADC_ConfigChannel+0x6e0>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	494f      	ldr	r1, [pc, #316]	@ (800430c <HAL_ADC_ConfigChannel+0x7a0>)
 80041d0:	428b      	cmp	r3, r1
 80041d2:	d039      	beq.n	8004248 <HAL_ADC_ConfigChannel+0x6dc>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	494d      	ldr	r1, [pc, #308]	@ (8004310 <HAL_ADC_ConfigChannel+0x7a4>)
 80041da:	428b      	cmp	r3, r1
 80041dc:	d032      	beq.n	8004244 <HAL_ADC_ConfigChannel+0x6d8>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	494c      	ldr	r1, [pc, #304]	@ (8004314 <HAL_ADC_ConfigChannel+0x7a8>)
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d02b      	beq.n	8004240 <HAL_ADC_ConfigChannel+0x6d4>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	494a      	ldr	r1, [pc, #296]	@ (8004318 <HAL_ADC_ConfigChannel+0x7ac>)
 80041ee:	428b      	cmp	r3, r1
 80041f0:	d024      	beq.n	800423c <HAL_ADC_ConfigChannel+0x6d0>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4949      	ldr	r1, [pc, #292]	@ (800431c <HAL_ADC_ConfigChannel+0x7b0>)
 80041f8:	428b      	cmp	r3, r1
 80041fa:	d01d      	beq.n	8004238 <HAL_ADC_ConfigChannel+0x6cc>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4947      	ldr	r1, [pc, #284]	@ (8004320 <HAL_ADC_ConfigChannel+0x7b4>)
 8004202:	428b      	cmp	r3, r1
 8004204:	d016      	beq.n	8004234 <HAL_ADC_ConfigChannel+0x6c8>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4946      	ldr	r1, [pc, #280]	@ (8004324 <HAL_ADC_ConfigChannel+0x7b8>)
 800420c:	428b      	cmp	r3, r1
 800420e:	d00f      	beq.n	8004230 <HAL_ADC_ConfigChannel+0x6c4>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4944      	ldr	r1, [pc, #272]	@ (8004328 <HAL_ADC_ConfigChannel+0x7bc>)
 8004216:	428b      	cmp	r3, r1
 8004218:	d008      	beq.n	800422c <HAL_ADC_ConfigChannel+0x6c0>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4944      	ldr	r1, [pc, #272]	@ (8004330 <HAL_ADC_ConfigChannel+0x7c4>)
 8004220:	428b      	cmp	r3, r1
 8004222:	d101      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x6bc>
 8004224:	4b43      	ldr	r3, [pc, #268]	@ (8004334 <HAL_ADC_ConfigChannel+0x7c8>)
 8004226:	e058      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 8004228:	2300      	movs	r3, #0
 800422a:	e056      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 800422c:	4b43      	ldr	r3, [pc, #268]	@ (800433c <HAL_ADC_ConfigChannel+0x7d0>)
 800422e:	e054      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 8004230:	4b3d      	ldr	r3, [pc, #244]	@ (8004328 <HAL_ADC_ConfigChannel+0x7bc>)
 8004232:	e052      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 8004234:	4b3b      	ldr	r3, [pc, #236]	@ (8004324 <HAL_ADC_ConfigChannel+0x7b8>)
 8004236:	e050      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 8004238:	4b41      	ldr	r3, [pc, #260]	@ (8004340 <HAL_ADC_ConfigChannel+0x7d4>)
 800423a:	e04e      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 800423c:	4b41      	ldr	r3, [pc, #260]	@ (8004344 <HAL_ADC_ConfigChannel+0x7d8>)
 800423e:	e04c      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 8004240:	4b41      	ldr	r3, [pc, #260]	@ (8004348 <HAL_ADC_ConfigChannel+0x7dc>)
 8004242:	e04a      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 8004244:	4b41      	ldr	r3, [pc, #260]	@ (800434c <HAL_ADC_ConfigChannel+0x7e0>)
 8004246:	e048      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 8004248:	2301      	movs	r3, #1
 800424a:	e046      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4940      	ldr	r1, [pc, #256]	@ (8004354 <HAL_ADC_ConfigChannel+0x7e8>)
 8004252:	428b      	cmp	r3, r1
 8004254:	d140      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x76c>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	492c      	ldr	r1, [pc, #176]	@ (800430c <HAL_ADC_ConfigChannel+0x7a0>)
 800425c:	428b      	cmp	r3, r1
 800425e:	d039      	beq.n	80042d4 <HAL_ADC_ConfigChannel+0x768>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	492a      	ldr	r1, [pc, #168]	@ (8004310 <HAL_ADC_ConfigChannel+0x7a4>)
 8004266:	428b      	cmp	r3, r1
 8004268:	d032      	beq.n	80042d0 <HAL_ADC_ConfigChannel+0x764>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4929      	ldr	r1, [pc, #164]	@ (8004314 <HAL_ADC_ConfigChannel+0x7a8>)
 8004270:	428b      	cmp	r3, r1
 8004272:	d02b      	beq.n	80042cc <HAL_ADC_ConfigChannel+0x760>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4927      	ldr	r1, [pc, #156]	@ (8004318 <HAL_ADC_ConfigChannel+0x7ac>)
 800427a:	428b      	cmp	r3, r1
 800427c:	d024      	beq.n	80042c8 <HAL_ADC_ConfigChannel+0x75c>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4926      	ldr	r1, [pc, #152]	@ (800431c <HAL_ADC_ConfigChannel+0x7b0>)
 8004284:	428b      	cmp	r3, r1
 8004286:	d01d      	beq.n	80042c4 <HAL_ADC_ConfigChannel+0x758>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4924      	ldr	r1, [pc, #144]	@ (8004320 <HAL_ADC_ConfigChannel+0x7b4>)
 800428e:	428b      	cmp	r3, r1
 8004290:	d016      	beq.n	80042c0 <HAL_ADC_ConfigChannel+0x754>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4923      	ldr	r1, [pc, #140]	@ (8004324 <HAL_ADC_ConfigChannel+0x7b8>)
 8004298:	428b      	cmp	r3, r1
 800429a:	d00f      	beq.n	80042bc <HAL_ADC_ConfigChannel+0x750>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4926      	ldr	r1, [pc, #152]	@ (800433c <HAL_ADC_ConfigChannel+0x7d0>)
 80042a2:	428b      	cmp	r3, r1
 80042a4:	d008      	beq.n	80042b8 <HAL_ADC_ConfigChannel+0x74c>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	492b      	ldr	r1, [pc, #172]	@ (8004358 <HAL_ADC_ConfigChannel+0x7ec>)
 80042ac:	428b      	cmp	r3, r1
 80042ae:	d101      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x748>
 80042b0:	4b2a      	ldr	r3, [pc, #168]	@ (800435c <HAL_ADC_ConfigChannel+0x7f0>)
 80042b2:	e012      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80042b4:	2300      	movs	r3, #0
 80042b6:	e010      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80042b8:	4b27      	ldr	r3, [pc, #156]	@ (8004358 <HAL_ADC_ConfigChannel+0x7ec>)
 80042ba:	e00e      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80042bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004328 <HAL_ADC_ConfigChannel+0x7bc>)
 80042be:	e00c      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80042c0:	4b18      	ldr	r3, [pc, #96]	@ (8004324 <HAL_ADC_ConfigChannel+0x7b8>)
 80042c2:	e00a      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80042c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004340 <HAL_ADC_ConfigChannel+0x7d4>)
 80042c6:	e008      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80042c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004344 <HAL_ADC_ConfigChannel+0x7d8>)
 80042ca:	e006      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80042cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004348 <HAL_ADC_ConfigChannel+0x7dc>)
 80042ce:	e004      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80042d0:	4b1e      	ldr	r3, [pc, #120]	@ (800434c <HAL_ADC_ConfigChannel+0x7e0>)
 80042d2:	e002      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <HAL_ADC_ConfigChannel+0x76e>
 80042d8:	2300      	movs	r3, #0
 80042da:	4619      	mov	r1, r3
 80042dc:	4610      	mov	r0, r2
 80042de:	f7fe fd4b 	bl	8002d78 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f280 80f6 	bge.w	80044d8 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a05      	ldr	r2, [pc, #20]	@ (8004308 <HAL_ADC_ConfigChannel+0x79c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <HAL_ADC_ConfigChannel+0x794>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a15      	ldr	r2, [pc, #84]	@ (8004350 <HAL_ADC_ConfigChannel+0x7e4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d131      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x7f8>
 8004300:	4b17      	ldr	r3, [pc, #92]	@ (8004360 <HAL_ADC_ConfigChannel+0x7f4>)
 8004302:	e030      	b.n	8004366 <HAL_ADC_ConfigChannel+0x7fa>
 8004304:	47ff0000 	.word	0x47ff0000
 8004308:	40022000 	.word	0x40022000
 800430c:	04300002 	.word	0x04300002
 8004310:	08600004 	.word	0x08600004
 8004314:	0c900008 	.word	0x0c900008
 8004318:	10c00010 	.word	0x10c00010
 800431c:	14f00020 	.word	0x14f00020
 8004320:	2a000400 	.word	0x2a000400
 8004324:	2e300800 	.word	0x2e300800
 8004328:	32601000 	.word	0x32601000
 800432c:	43210000 	.word	0x43210000
 8004330:	4b840000 	.word	0x4b840000
 8004334:	4fb80000 	.word	0x4fb80000
 8004338:	47520000 	.word	0x47520000
 800433c:	36902000 	.word	0x36902000
 8004340:	25b00200 	.word	0x25b00200
 8004344:	21800100 	.word	0x21800100
 8004348:	1d500080 	.word	0x1d500080
 800434c:	19200040 	.word	0x19200040
 8004350:	40022100 	.word	0x40022100
 8004354:	58026000 	.word	0x58026000
 8004358:	3ac04000 	.word	0x3ac04000
 800435c:	3ef08000 	.word	0x3ef08000
 8004360:	40022300 	.word	0x40022300
 8004364:	4b61      	ldr	r3, [pc, #388]	@ (80044ec <HAL_ADC_ConfigChannel+0x980>)
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fcf8 	bl	8002d5c <LL_ADC_GetCommonPathInternalCh>
 800436c:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a5f      	ldr	r2, [pc, #380]	@ (80044f0 <HAL_ADC_ConfigChannel+0x984>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_ADC_ConfigChannel+0x816>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a5d      	ldr	r2, [pc, #372]	@ (80044f4 <HAL_ADC_ConfigChannel+0x988>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d10e      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x834>
 8004382:	485b      	ldr	r0, [pc, #364]	@ (80044f0 <HAL_ADC_ConfigChannel+0x984>)
 8004384:	f7fe ff60 	bl	8003248 <LL_ADC_IsEnabled>
 8004388:	4604      	mov	r4, r0
 800438a:	485a      	ldr	r0, [pc, #360]	@ (80044f4 <HAL_ADC_ConfigChannel+0x988>)
 800438c:	f7fe ff5c 	bl	8003248 <LL_ADC_IsEnabled>
 8004390:	4603      	mov	r3, r0
 8004392:	4323      	orrs	r3, r4
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf0c      	ite	eq
 8004398:	2301      	moveq	r3, #1
 800439a:	2300      	movne	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e008      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x846>
 80043a0:	4855      	ldr	r0, [pc, #340]	@ (80044f8 <HAL_ADC_ConfigChannel+0x98c>)
 80043a2:	f7fe ff51 	bl	8003248 <LL_ADC_IsEnabled>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d07d      	beq.n	80044b2 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a50      	ldr	r2, [pc, #320]	@ (80044fc <HAL_ADC_ConfigChannel+0x990>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d130      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x8b6>
 80043c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d12b      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a4a      	ldr	r2, [pc, #296]	@ (80044f8 <HAL_ADC_ConfigChannel+0x98c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	f040 8081 	bne.w	80044d8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a45      	ldr	r2, [pc, #276]	@ (80044f0 <HAL_ADC_ConfigChannel+0x984>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_ADC_ConfigChannel+0x87e>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a43      	ldr	r2, [pc, #268]	@ (80044f4 <HAL_ADC_ConfigChannel+0x988>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x882>
 80043ea:	4a45      	ldr	r2, [pc, #276]	@ (8004500 <HAL_ADC_ConfigChannel+0x994>)
 80043ec:	e000      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x884>
 80043ee:	4a3f      	ldr	r2, [pc, #252]	@ (80044ec <HAL_ADC_ConfigChannel+0x980>)
 80043f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f7fe fc9c 	bl	8002d36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043fe:	4b41      	ldr	r3, [pc, #260]	@ (8004504 <HAL_ADC_ConfigChannel+0x998>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	099b      	lsrs	r3, r3, #6
 8004404:	4a40      	ldr	r2, [pc, #256]	@ (8004508 <HAL_ADC_ConfigChannel+0x99c>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	099b      	lsrs	r3, r3, #6
 800440c:	3301      	adds	r3, #1
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004412:	e002      	b.n	800441a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3b01      	subs	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f9      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004420:	e05a      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a39      	ldr	r2, [pc, #228]	@ (800450c <HAL_ADC_ConfigChannel+0x9a0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d11e      	bne.n	800446a <HAL_ADC_ConfigChannel+0x8fe>
 800442c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800442e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d119      	bne.n	800446a <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2f      	ldr	r2, [pc, #188]	@ (80044f8 <HAL_ADC_ConfigChannel+0x98c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d14b      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a2a      	ldr	r2, [pc, #168]	@ (80044f0 <HAL_ADC_ConfigChannel+0x984>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_ADC_ConfigChannel+0x8e8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a29      	ldr	r2, [pc, #164]	@ (80044f4 <HAL_ADC_ConfigChannel+0x988>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x8ec>
 8004454:	4a2a      	ldr	r2, [pc, #168]	@ (8004500 <HAL_ADC_ConfigChannel+0x994>)
 8004456:	e000      	b.n	800445a <HAL_ADC_ConfigChannel+0x8ee>
 8004458:	4a24      	ldr	r2, [pc, #144]	@ (80044ec <HAL_ADC_ConfigChannel+0x980>)
 800445a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800445c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004460:	4619      	mov	r1, r3
 8004462:	4610      	mov	r0, r2
 8004464:	f7fe fc67 	bl	8002d36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004468:	e036      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a28      	ldr	r2, [pc, #160]	@ (8004510 <HAL_ADC_ConfigChannel+0x9a4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d131      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x96c>
 8004474:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d12c      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1d      	ldr	r2, [pc, #116]	@ (80044f8 <HAL_ADC_ConfigChannel+0x98c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d127      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a18      	ldr	r2, [pc, #96]	@ (80044f0 <HAL_ADC_ConfigChannel+0x984>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_ADC_ConfigChannel+0x930>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a17      	ldr	r2, [pc, #92]	@ (80044f4 <HAL_ADC_ConfigChannel+0x988>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d101      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x934>
 800449c:	4a18      	ldr	r2, [pc, #96]	@ (8004500 <HAL_ADC_ConfigChannel+0x994>)
 800449e:	e000      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x936>
 80044a0:	4a12      	ldr	r2, [pc, #72]	@ (80044ec <HAL_ADC_ConfigChannel+0x980>)
 80044a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044a8:	4619      	mov	r1, r3
 80044aa:	4610      	mov	r0, r2
 80044ac:	f7fe fc43 	bl	8002d36 <LL_ADC_SetCommonPathInternalCh>
 80044b0:	e012      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80044c4:	e008      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ca:	f043 0220 	orr.w	r2, r3, #32
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80044e0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3794      	adds	r7, #148	@ 0x94
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd90      	pop	{r4, r7, pc}
 80044ec:	58026300 	.word	0x58026300
 80044f0:	40022000 	.word	0x40022000
 80044f4:	40022100 	.word	0x40022100
 80044f8:	58026000 	.word	0x58026000
 80044fc:	c7520000 	.word	0xc7520000
 8004500:	40022300 	.word	0x40022300
 8004504:	2400000c 	.word	0x2400000c
 8004508:	053e2d63 	.word	0x053e2d63
 800450c:	c3210000 	.word	0xc3210000
 8004510:	cb840000 	.word	0xcb840000

08004514 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe feda 	bl	80032e4 <LL_ADC_REG_IsConversionOngoing>
 8004530:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fefc 	bl	8003334 <LL_ADC_INJ_IsConversionOngoing>
 800453c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8098 	beq.w	800467c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d02a      	beq.n	80045b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	7e5b      	ldrb	r3, [r3, #25]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d126      	bne.n	80045b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	7e1b      	ldrb	r3, [r3, #24]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d122      	bne.n	80045b0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800456a:	2301      	movs	r3, #1
 800456c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800456e:	e014      	b.n	800459a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	4a45      	ldr	r2, [pc, #276]	@ (8004688 <ADC_ConversionStop+0x174>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d90d      	bls.n	8004594 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457c:	f043 0210 	orr.w	r2, r3, #16
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e074      	b.n	800467e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	3301      	adds	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a4:	2b40      	cmp	r3, #64	@ 0x40
 80045a6:	d1e3      	bne.n	8004570 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2240      	movs	r2, #64	@ 0x40
 80045ae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d014      	beq.n	80045e0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fe92 	bl	80032e4 <LL_ADC_REG_IsConversionOngoing>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fe4f 	bl	800326e <LL_ADC_IsDisableOngoing>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d104      	bne.n	80045e0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe fe6e 	bl	80032bc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d014      	beq.n	8004610 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fea2 	bl	8003334 <LL_ADC_INJ_IsConversionOngoing>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00c      	beq.n	8004610 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe fe37 	bl	800326e <LL_ADC_IsDisableOngoing>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d104      	bne.n	8004610 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe fe7e 	bl	800330c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d005      	beq.n	8004622 <ADC_ConversionStop+0x10e>
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d105      	bne.n	8004628 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800461c:	230c      	movs	r3, #12
 800461e:	617b      	str	r3, [r7, #20]
        break;
 8004620:	e005      	b.n	800462e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004622:	2308      	movs	r3, #8
 8004624:	617b      	str	r3, [r7, #20]
        break;
 8004626:	e002      	b.n	800462e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004628:	2304      	movs	r3, #4
 800462a:	617b      	str	r3, [r7, #20]
        break;
 800462c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800462e:	f7fe fb63 	bl	8002cf8 <HAL_GetTick>
 8004632:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004634:	e01b      	b.n	800466e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004636:	f7fe fb5f 	bl	8002cf8 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b05      	cmp	r3, #5
 8004642:	d914      	bls.n	800466e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00d      	beq.n	800466e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004656:	f043 0210 	orr.w	r2, r3, #16
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004662:	f043 0201 	orr.w	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e007      	b.n	800467e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1dc      	bne.n	8004636 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3720      	adds	r7, #32
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	000cdbff 	.word	0x000cdbff

0800468c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fe fdd5 	bl	8003248 <LL_ADC_IsEnabled>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d16e      	bne.n	8004782 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	4b38      	ldr	r3, [pc, #224]	@ (800478c <ADC_Enable+0x100>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00d      	beq.n	80046ce <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b6:	f043 0210 	orr.w	r2, r3, #16
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046c2:	f043 0201 	orr.w	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e05a      	b.n	8004784 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fd90 	bl	80031f8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80046d8:	f7fe fb0e 	bl	8002cf8 <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004790 <ADC_Enable+0x104>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <ADC_Enable+0x66>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a29      	ldr	r2, [pc, #164]	@ (8004794 <ADC_Enable+0x108>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d101      	bne.n	80046f6 <ADC_Enable+0x6a>
 80046f2:	4b29      	ldr	r3, [pc, #164]	@ (8004798 <ADC_Enable+0x10c>)
 80046f4:	e000      	b.n	80046f8 <ADC_Enable+0x6c>
 80046f6:	4b29      	ldr	r3, [pc, #164]	@ (800479c <ADC_Enable+0x110>)
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe fd13 	bl	8003124 <LL_ADC_GetMultimode>
 80046fe:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a23      	ldr	r2, [pc, #140]	@ (8004794 <ADC_Enable+0x108>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d002      	beq.n	8004710 <ADC_Enable+0x84>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	e000      	b.n	8004712 <ADC_Enable+0x86>
 8004710:	4b1f      	ldr	r3, [pc, #124]	@ (8004790 <ADC_Enable+0x104>)
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	4293      	cmp	r3, r2
 8004718:	d02c      	beq.n	8004774 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d130      	bne.n	8004782 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004720:	e028      	b.n	8004774 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fd8e 	bl	8003248 <LL_ADC_IsEnabled>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe fd5e 	bl	80031f8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800473c:	f7fe fadc 	bl	8002cf8 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d914      	bls.n	8004774 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b01      	cmp	r3, #1
 8004756:	d00d      	beq.n	8004774 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800475c:	f043 0210 	orr.w	r2, r3, #16
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004768:	f043 0201 	orr.w	r2, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e007      	b.n	8004784 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b01      	cmp	r3, #1
 8004780:	d1cf      	bne.n	8004722 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	8000003f 	.word	0x8000003f
 8004790:	40022000 	.word	0x40022000
 8004794:	40022100 	.word	0x40022100
 8004798:	40022300 	.word	0x40022300
 800479c:	58026300 	.word	0x58026300

080047a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe fd5e 	bl	800326e <LL_ADC_IsDisableOngoing>
 80047b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe fd45 	bl	8003248 <LL_ADC_IsEnabled>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d047      	beq.n	8004854 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d144      	bne.n	8004854 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 030d 	and.w	r3, r3, #13
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d10c      	bne.n	80047f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe fd1f 	bl	8003220 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2203      	movs	r2, #3
 80047e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80047ea:	f7fe fa85 	bl	8002cf8 <HAL_GetTick>
 80047ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047f0:	e029      	b.n	8004846 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f6:	f043 0210 	orr.w	r2, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004802:	f043 0201 	orr.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e023      	b.n	8004856 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800480e:	f7fe fa73 	bl	8002cf8 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d914      	bls.n	8004846 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00d      	beq.n	8004846 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482e:	f043 0210 	orr.w	r2, r3, #16
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800483a:	f043 0201 	orr.w	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e007      	b.n	8004856 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1dc      	bne.n	800480e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a6c      	ldr	r2, [pc, #432]	@ (8004a20 <ADC_ConfigureBoostMode+0x1c0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <ADC_ConfigureBoostMode+0x1c>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a6b      	ldr	r2, [pc, #428]	@ (8004a24 <ADC_ConfigureBoostMode+0x1c4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d109      	bne.n	8004890 <ADC_ConfigureBoostMode+0x30>
 800487c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a28 <ADC_ConfigureBoostMode+0x1c8>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e008      	b.n	80048a2 <ADC_ConfigureBoostMode+0x42>
 8004890:	4b66      	ldr	r3, [pc, #408]	@ (8004a2c <ADC_ConfigureBoostMode+0x1cc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01c      	beq.n	80048e0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80048a6:	f002 fdcd 	bl	8007444 <HAL_RCC_GetHCLKFreq>
 80048aa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048b4:	d010      	beq.n	80048d8 <ADC_ConfigureBoostMode+0x78>
 80048b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048ba:	d873      	bhi.n	80049a4 <ADC_ConfigureBoostMode+0x144>
 80048bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c0:	d002      	beq.n	80048c8 <ADC_ConfigureBoostMode+0x68>
 80048c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048c6:	d16d      	bne.n	80049a4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	60fb      	str	r3, [r7, #12]
        break;
 80048d6:	e068      	b.n	80049aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	089b      	lsrs	r3, r3, #2
 80048dc:	60fb      	str	r3, [r7, #12]
        break;
 80048de:	e064      	b.n	80049aa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80048e0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80048e4:	f04f 0100 	mov.w	r1, #0
 80048e8:	f003 ffa8 	bl	800883c <HAL_RCCEx_GetPeriphCLKFreq>
 80048ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80048f6:	d051      	beq.n	800499c <ADC_ConfigureBoostMode+0x13c>
 80048f8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80048fc:	d854      	bhi.n	80049a8 <ADC_ConfigureBoostMode+0x148>
 80048fe:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004902:	d047      	beq.n	8004994 <ADC_ConfigureBoostMode+0x134>
 8004904:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004908:	d84e      	bhi.n	80049a8 <ADC_ConfigureBoostMode+0x148>
 800490a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800490e:	d03d      	beq.n	800498c <ADC_ConfigureBoostMode+0x12c>
 8004910:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004914:	d848      	bhi.n	80049a8 <ADC_ConfigureBoostMode+0x148>
 8004916:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800491a:	d033      	beq.n	8004984 <ADC_ConfigureBoostMode+0x124>
 800491c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004920:	d842      	bhi.n	80049a8 <ADC_ConfigureBoostMode+0x148>
 8004922:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004926:	d029      	beq.n	800497c <ADC_ConfigureBoostMode+0x11c>
 8004928:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800492c:	d83c      	bhi.n	80049a8 <ADC_ConfigureBoostMode+0x148>
 800492e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004932:	d01a      	beq.n	800496a <ADC_ConfigureBoostMode+0x10a>
 8004934:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004938:	d836      	bhi.n	80049a8 <ADC_ConfigureBoostMode+0x148>
 800493a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800493e:	d014      	beq.n	800496a <ADC_ConfigureBoostMode+0x10a>
 8004940:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004944:	d830      	bhi.n	80049a8 <ADC_ConfigureBoostMode+0x148>
 8004946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800494a:	d00e      	beq.n	800496a <ADC_ConfigureBoostMode+0x10a>
 800494c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004950:	d82a      	bhi.n	80049a8 <ADC_ConfigureBoostMode+0x148>
 8004952:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004956:	d008      	beq.n	800496a <ADC_ConfigureBoostMode+0x10a>
 8004958:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800495c:	d824      	bhi.n	80049a8 <ADC_ConfigureBoostMode+0x148>
 800495e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004962:	d002      	beq.n	800496a <ADC_ConfigureBoostMode+0x10a>
 8004964:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004968:	d11e      	bne.n	80049a8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	0c9b      	lsrs	r3, r3, #18
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	60fb      	str	r3, [r7, #12]
        break;
 800497a:	e016      	b.n	80049aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	091b      	lsrs	r3, r3, #4
 8004980:	60fb      	str	r3, [r7, #12]
        break;
 8004982:	e012      	b.n	80049aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	60fb      	str	r3, [r7, #12]
        break;
 800498a:	e00e      	b.n	80049aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	099b      	lsrs	r3, r3, #6
 8004990:	60fb      	str	r3, [r7, #12]
        break;
 8004992:	e00a      	b.n	80049aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	09db      	lsrs	r3, r3, #7
 8004998:	60fb      	str	r3, [r7, #12]
        break;
 800499a:	e006      	b.n	80049aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	0a1b      	lsrs	r3, r3, #8
 80049a0:	60fb      	str	r3, [r7, #12]
        break;
 80049a2:	e002      	b.n	80049aa <ADC_ConfigureBoostMode+0x14a>
        break;
 80049a4:	bf00      	nop
 80049a6:	e000      	b.n	80049aa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80049a8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a30 <ADC_ConfigureBoostMode+0x1d0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d808      	bhi.n	80049ca <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80049c6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80049c8:	e025      	b.n	8004a16 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4a19      	ldr	r2, [pc, #100]	@ (8004a34 <ADC_ConfigureBoostMode+0x1d4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d80a      	bhi.n	80049e8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049e4:	609a      	str	r2, [r3, #8]
}
 80049e6:	e016      	b.n	8004a16 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a13      	ldr	r2, [pc, #76]	@ (8004a38 <ADC_ConfigureBoostMode+0x1d8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d80a      	bhi.n	8004a06 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a02:	609a      	str	r2, [r3, #8]
}
 8004a04:	e007      	b.n	8004a16 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004a14:	609a      	str	r2, [r3, #8]
}
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40022000 	.word	0x40022000
 8004a24:	40022100 	.word	0x40022100
 8004a28:	40022300 	.word	0x40022300
 8004a2c:	58026300 	.word	0x58026300
 8004a30:	005f5e10 	.word	0x005f5e10
 8004a34:	00bebc20 	.word	0x00bebc20
 8004a38:	017d7840 	.word	0x017d7840

08004a3c <LL_ADC_IsEnabled>:
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <LL_ADC_IsEnabled+0x18>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <LL_ADC_IsEnabled+0x1a>
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <LL_ADC_REG_IsConversionOngoing>:
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d101      	bne.n	8004a7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b0a3      	sub	sp, #140	@ 0x8c
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e0c1      	b.n	8004c2a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a5e      	ldr	r2, [pc, #376]	@ (8004c34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d102      	bne.n	8004ac6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ac0:	4b5d      	ldr	r3, [pc, #372]	@ (8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e001      	b.n	8004aca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e0a0      	b.n	8004c2a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff ffb9 	bl	8004a62 <LL_ADC_REG_IsConversionOngoing>
 8004af0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff ffb2 	bl	8004a62 <LL_ADC_REG_IsConversionOngoing>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f040 8081 	bne.w	8004c08 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004b06:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d17c      	bne.n	8004c08 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a48      	ldr	r2, [pc, #288]	@ (8004c34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a46      	ldr	r2, [pc, #280]	@ (8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d101      	bne.n	8004b26 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004b22:	4b46      	ldr	r3, [pc, #280]	@ (8004c3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004b24:	e000      	b.n	8004b28 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004b26:	4b46      	ldr	r3, [pc, #280]	@ (8004c40 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004b28:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d039      	beq.n	8004ba6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004b32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a3a      	ldr	r2, [pc, #232]	@ (8004c34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a39      	ldr	r2, [pc, #228]	@ (8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d10e      	bne.n	8004b76 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004b58:	4836      	ldr	r0, [pc, #216]	@ (8004c34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b5a:	f7ff ff6f 	bl	8004a3c <LL_ADC_IsEnabled>
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4835      	ldr	r0, [pc, #212]	@ (8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b62:	f7ff ff6b 	bl	8004a3c <LL_ADC_IsEnabled>
 8004b66:	4603      	mov	r3, r0
 8004b68:	4323      	orrs	r3, r4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e008      	b.n	8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004b76:	4833      	ldr	r0, [pc, #204]	@ (8004c44 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004b78:	f7ff ff60 	bl	8004a3c <LL_ADC_IsEnabled>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bf0c      	ite	eq
 8004b82:	2301      	moveq	r3, #1
 8004b84:	2300      	movne	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d047      	beq.n	8004c1c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004b8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	4b2d      	ldr	r3, [pc, #180]	@ (8004c48 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	6811      	ldr	r1, [r2, #0]
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	6892      	ldr	r2, [r2, #8]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ba2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ba4:	e03a      	b.n	8004c1c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004ba6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bb0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d004      	beq.n	8004bc6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d10e      	bne.n	8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004bc6:	481b      	ldr	r0, [pc, #108]	@ (8004c34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bc8:	f7ff ff38 	bl	8004a3c <LL_ADC_IsEnabled>
 8004bcc:	4604      	mov	r4, r0
 8004bce:	481a      	ldr	r0, [pc, #104]	@ (8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bd0:	f7ff ff34 	bl	8004a3c <LL_ADC_IsEnabled>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4323      	orrs	r3, r4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	e008      	b.n	8004bf6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004be4:	4817      	ldr	r0, [pc, #92]	@ (8004c44 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004be6:	f7ff ff29 	bl	8004a3c <LL_ADC_IsEnabled>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d010      	beq.n	8004c1c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004bfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	4b12      	ldr	r3, [pc, #72]	@ (8004c48 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004c04:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c06:	e009      	b.n	8004c1c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004c1a:	e000      	b.n	8004c1e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004c26:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	378c      	adds	r7, #140	@ 0x8c
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd90      	pop	{r4, r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40022000 	.word	0x40022000
 8004c38:	40022100 	.word	0x40022100
 8004c3c:	40022300 	.word	0x40022300
 8004c40:	58026300 	.word	0x58026300
 8004c44:	58026000 	.word	0x58026000
 8004c48:	fffff0e0 	.word	0xfffff0e0

08004c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <__NVIC_SetPriorityGrouping+0x40>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c68:	4013      	ands	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c74:	4b06      	ldr	r3, [pc, #24]	@ (8004c90 <__NVIC_SetPriorityGrouping+0x44>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c7a:	4a04      	ldr	r2, [pc, #16]	@ (8004c8c <__NVIC_SetPriorityGrouping+0x40>)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	60d3      	str	r3, [r2, #12]
}
 8004c80:	bf00      	nop
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	e000ed00 	.word	0xe000ed00
 8004c90:	05fa0000 	.word	0x05fa0000

08004c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c98:	4b04      	ldr	r3, [pc, #16]	@ (8004cac <__NVIC_GetPriorityGrouping+0x18>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	0a1b      	lsrs	r3, r3, #8
 8004c9e:	f003 0307 	and.w	r3, r3, #7
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	e000ed00 	.word	0xe000ed00

08004cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	db0b      	blt.n	8004cda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	f003 021f 	and.w	r2, r3, #31
 8004cc8:	4907      	ldr	r1, [pc, #28]	@ (8004ce8 <__NVIC_EnableIRQ+0x38>)
 8004cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8004cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	e000e100 	.word	0xe000e100

08004cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	6039      	str	r1, [r7, #0]
 8004cf6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	db0a      	blt.n	8004d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	490c      	ldr	r1, [pc, #48]	@ (8004d38 <__NVIC_SetPriority+0x4c>)
 8004d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d0a:	0112      	lsls	r2, r2, #4
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	440b      	add	r3, r1
 8004d10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d14:	e00a      	b.n	8004d2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	4908      	ldr	r1, [pc, #32]	@ (8004d3c <__NVIC_SetPriority+0x50>)
 8004d1c:	88fb      	ldrh	r3, [r7, #6]
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	3b04      	subs	r3, #4
 8004d24:	0112      	lsls	r2, r2, #4
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	440b      	add	r3, r1
 8004d2a:	761a      	strb	r2, [r3, #24]
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	e000e100 	.word	0xe000e100
 8004d3c:	e000ed00 	.word	0xe000ed00

08004d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b089      	sub	sp, #36	@ 0x24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f1c3 0307 	rsb	r3, r3, #7
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	bf28      	it	cs
 8004d5e:	2304      	movcs	r3, #4
 8004d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	3304      	adds	r3, #4
 8004d66:	2b06      	cmp	r3, #6
 8004d68:	d902      	bls.n	8004d70 <NVIC_EncodePriority+0x30>
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	3b03      	subs	r3, #3
 8004d6e:	e000      	b.n	8004d72 <NVIC_EncodePriority+0x32>
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d74:	f04f 32ff 	mov.w	r2, #4294967295
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43da      	mvns	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	401a      	ands	r2, r3
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d88:	f04f 31ff 	mov.w	r1, #4294967295
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d92:	43d9      	mvns	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d98:	4313      	orrs	r3, r2
         );
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3724      	adds	r7, #36	@ 0x24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004db8:	d301      	bcc.n	8004dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e00f      	b.n	8004dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004de8 <SysTick_Config+0x40>)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dc6:	210f      	movs	r1, #15
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	f7ff ff8e 	bl	8004cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dd0:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <SysTick_Config+0x40>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dd6:	4b04      	ldr	r3, [pc, #16]	@ (8004de8 <SysTick_Config+0x40>)
 8004dd8:	2207      	movs	r2, #7
 8004dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	e000e010 	.word	0xe000e010

08004dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ff29 	bl	8004c4c <__NVIC_SetPriorityGrouping>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b086      	sub	sp, #24
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	4603      	mov	r3, r0
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e10:	f7ff ff40 	bl	8004c94 <__NVIC_GetPriorityGrouping>
 8004e14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	6978      	ldr	r0, [r7, #20]
 8004e1c:	f7ff ff90 	bl	8004d40 <NVIC_EncodePriority>
 8004e20:	4602      	mov	r2, r0
 8004e22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e26:	4611      	mov	r1, r2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff ff5f 	bl	8004cec <__NVIC_SetPriority>
}
 8004e2e:	bf00      	nop
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff ff33 	bl	8004cb0 <__NVIC_EnableIRQ>
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff ffa4 	bl	8004da8 <SysTick_Config>
 8004e60:	4603      	mov	r3, r0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b098      	sub	sp, #96	@ 0x60
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004e74:	4a84      	ldr	r2, [pc, #528]	@ (8005088 <HAL_FDCAN_Init+0x21c>)
 8004e76:	f107 030c 	add.w	r3, r7, #12
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	224c      	movs	r2, #76	@ 0x4c
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f007 f918 	bl	800c0b4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e1c6      	b.n	800521c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a7e      	ldr	r2, [pc, #504]	@ (800508c <HAL_FDCAN_Init+0x220>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d106      	bne.n	8004ea6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fd fbe8 	bl	8002690 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0210 	bic.w	r2, r2, #16
 8004ece:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ed0:	f7fd ff12 	bl	8002cf8 <HAL_GetTick>
 8004ed4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004ed6:	e014      	b.n	8004f02 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004ed8:	f7fd ff0e 	bl	8002cf8 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b0a      	cmp	r3, #10
 8004ee4:	d90d      	bls.n	8004f02 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004eec:	f043 0201 	orr.w	r2, r3, #1
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2203      	movs	r2, #3
 8004efa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e18c      	b.n	800521c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d0e3      	beq.n	8004ed8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f20:	f7fd feea 	bl	8002cf8 <HAL_GetTick>
 8004f24:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004f26:	e014      	b.n	8004f52 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004f28:	f7fd fee6 	bl	8002cf8 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b0a      	cmp	r3, #10
 8004f34:	d90d      	bls.n	8004f52 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f3c:	f043 0201 	orr.w	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2203      	movs	r2, #3
 8004f4a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e164      	b.n	800521c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0e3      	beq.n	8004f28 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0202 	orr.w	r2, r2, #2
 8004f6e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	7c1b      	ldrb	r3, [r3, #16]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d108      	bne.n	8004f8a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f86:	619a      	str	r2, [r3, #24]
 8004f88:	e007      	b.n	8004f9a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699a      	ldr	r2, [r3, #24]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f98:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	7c5b      	ldrb	r3, [r3, #17]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d108      	bne.n	8004fb4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fb0:	619a      	str	r2, [r3, #24]
 8004fb2:	e007      	b.n	8004fc4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004fc2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	7c9b      	ldrb	r3, [r3, #18]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d108      	bne.n	8004fde <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004fda:	619a      	str	r2, [r3, #24]
 8004fdc:	e007      	b.n	8004fee <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699a      	ldr	r2, [r3, #24]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004fec:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005012:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0210 	bic.w	r2, r2, #16
 8005022:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d108      	bne.n	800503e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0204 	orr.w	r2, r2, #4
 800503a:	619a      	str	r2, [r3, #24]
 800503c:	e030      	b.n	80050a0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d02c      	beq.n	80050a0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d020      	beq.n	8005090 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800505c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0210 	orr.w	r2, r2, #16
 800506c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	2b03      	cmp	r3, #3
 8005074:	d114      	bne.n	80050a0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0220 	orr.w	r2, r2, #32
 8005084:	619a      	str	r2, [r3, #24]
 8005086:	e00b      	b.n	80050a0 <HAL_FDCAN_Init+0x234>
 8005088:	0800cc70 	.word	0x0800cc70
 800508c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0220 	orr.w	r2, r2, #32
 800509e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050b0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80050b8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80050c8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80050ca:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050d4:	d115      	bne.n	8005102 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050da:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e0:	3b01      	subs	r3, #1
 80050e2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80050e4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ea:	3b01      	subs	r3, #1
 80050ec:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80050ee:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f6:	3b01      	subs	r3, #1
 80050f8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80050fe:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005100:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005128:	4413      	add	r3, r2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d011      	beq.n	8005152 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005136:	f023 0107 	bic.w	r1, r3, #7
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	3360      	adds	r3, #96	@ 0x60
 8005142:	443b      	add	r3, r7
 8005144:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d011      	beq.n	800517e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005162:	f023 0107 	bic.w	r1, r3, #7
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	3360      	adds	r3, #96	@ 0x60
 800516e:	443b      	add	r3, r7
 8005170:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800518e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	3360      	adds	r3, #96	@ 0x60
 800519a:	443b      	add	r3, r7
 800519c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80051a0:	011a      	lsls	r2, r3, #4
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d012      	beq.n	80051da <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051bc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	3360      	adds	r3, #96	@ 0x60
 80051c8:	443b      	add	r3, r7
 80051ca:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80051ce:	021a      	lsls	r2, r3, #8
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a11      	ldr	r2, [pc, #68]	@ (8005224 <HAL_FDCAN_Init+0x3b8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d107      	bne.n	80051f4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f022 0203 	bic.w	r2, r2, #3
 80051f2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fdf7 	bl	8005e00 <FDCAN_CalcultateRamBlockAddresses>
 8005212:	4603      	mov	r3, r0
 8005214:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005218:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800521c:	4618      	mov	r0, r3
 800521e:	3760      	adds	r7, #96	@ 0x60
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	4000a000 	.word	0x4000a000

08005228 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005238:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d002      	beq.n	8005246 <HAL_FDCAN_ConfigFilter+0x1e>
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d157      	bne.n	80052f6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d12b      	bne.n	80052a6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2b07      	cmp	r3, #7
 8005254:	d10d      	bne.n	8005272 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8005262:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005268:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800526a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	e00e      	b.n	8005290 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800527e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005286:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e025      	b.n	80052f2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	075a      	lsls	r2, r3, #29
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	2b07      	cmp	r3, #7
 80052ba:	d103      	bne.n	80052c4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	e006      	b.n	80052d2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	079a      	lsls	r2, r3, #30
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	4413      	add	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	3304      	adds	r3, #4
 80052ea:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	e008      	b.n	8005308 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052fc:	f043 0202 	orr.w	r2, r3, #2
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
  }
}
 8005308:	4618      	mov	r0, r3
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	d111      	bne.n	800534c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0201 	bic.w	r2, r2, #1
 800533e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	e008      	b.n	800535e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005352:	f043 0204 	orr.w	r2, r3, #4
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
  }
}
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b086      	sub	sp, #24
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d141      	bne.n	8005406 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800538a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005398:	f043 0220 	orr.w	r2, r3, #32
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e038      	b.n	8005418 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80053ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e026      	b.n	8005418 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80053d2:	0c1b      	lsrs	r3, r3, #16
 80053d4:	f003 031f 	and.w	r3, r3, #31
 80053d8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	68b9      	ldr	r1, [r7, #8]
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fe93 	bl	800610c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2101      	movs	r1, #1
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	fa01 f202 	lsl.w	r2, r1, r2
 80053f2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80053f6:	2201      	movs	r2, #1
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	409a      	lsls	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	e008      	b.n	8005418 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800540c:	f043 0208 	orr.w	r2, r3, #8
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
  }
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005420:	b480      	push	{r7}
 8005422:	b08b      	sub	sp, #44	@ 0x2c
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005438:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800543a:	7efb      	ldrb	r3, [r7, #27]
 800543c:	2b02      	cmp	r3, #2
 800543e:	f040 8149 	bne.w	80056d4 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b40      	cmp	r3, #64	@ 0x40
 8005446:	d14c      	bne.n	80054e2 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005450:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d109      	bne.n	800546c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800545e:	f043 0220 	orr.w	r2, r3, #32
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e13c      	b.n	80056e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005478:	2b00      	cmp	r3, #0
 800547a:	d109      	bne.n	8005490 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005482:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e12a      	b.n	80056e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005498:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800549c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054a0:	d10a      	bne.n	80054b8 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054b2:	d101      	bne.n	80054b8 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80054b4:	2301      	movs	r3, #1
 80054b6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054c0:	0a1b      	lsrs	r3, r3, #8
 80054c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	4413      	add	r3, r2
 80054ca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d4:	69f9      	ldr	r1, [r7, #28]
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	627b      	str	r3, [r7, #36]	@ 0x24
 80054e0:	e068      	b.n	80055b4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b41      	cmp	r3, #65	@ 0x41
 80054e6:	d14c      	bne.n	8005582 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0ec      	b.n	80056e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005518:	2b00      	cmp	r3, #0
 800551a:	d109      	bne.n	8005530 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005522:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e0da      	b.n	80056e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800553c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005540:	d10a      	bne.n	8005558 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800554a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800554e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005552:	d101      	bne.n	8005558 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005554:	2301      	movs	r3, #1
 8005556:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005574:	69f9      	ldr	r1, [r7, #28]
 8005576:	fb01 f303 	mul.w	r3, r1, r3
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005580:	e018      	b.n	80055b4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	429a      	cmp	r2, r3
 800558a:	d309      	bcc.n	80055a0 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005592:	f043 0220 	orr.w	r2, r3, #32
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e0a2      	b.n	80056e6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	fb01 f303 	mul.w	r3, r1, r3
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d107      	bne.n	80055d8 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	0c9b      	lsrs	r3, r3, #18
 80055ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	e005      	b.n	80055e4 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80055d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80055e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	3304      	adds	r3, #4
 8005600:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	b29a      	uxth	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	0c1b      	lsrs	r3, r3, #16
 8005612:	f003 020f 	and.w	r2, r3, #15
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	0e1b      	lsrs	r3, r3, #24
 8005638:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	0fda      	lsrs	r2, r3, #31
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	3304      	adds	r3, #4
 800564e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005654:	2300      	movs	r3, #0
 8005656:	623b      	str	r3, [r7, #32]
 8005658:	e00a      	b.n	8005670 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	441a      	add	r2, r3
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	440b      	add	r3, r1
 8005666:	7812      	ldrb	r2, [r2, #0]
 8005668:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	3301      	adds	r3, #1
 800566e:	623b      	str	r3, [r7, #32]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	4a1f      	ldr	r2, [pc, #124]	@ (80056f4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005676:	5cd3      	ldrb	r3, [r2, r3]
 8005678:	461a      	mov	r2, r3
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	4293      	cmp	r3, r2
 800567e:	d3ec      	bcc.n	800565a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b40      	cmp	r3, #64	@ 0x40
 8005684:	d105      	bne.n	8005692 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005690:	e01e      	b.n	80056d0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b41      	cmp	r3, #65	@ 0x41
 8005696:	d105      	bne.n	80056a4 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80056a2:	e015      	b.n	80056d0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b1f      	cmp	r3, #31
 80056a8:	d808      	bhi.n	80056bc <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2101      	movs	r1, #1
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	fa01 f202 	lsl.w	r2, r1, r2
 80056b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80056ba:	e009      	b.n	80056d0 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 021f 	and.w	r2, r3, #31
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2101      	movs	r1, #1
 80056c8:	fa01 f202 	lsl.w	r2, r1, r2
 80056cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e008      	b.n	80056e6 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056da:	f043 0208 	orr.w	r2, r3, #8
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
  }
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	372c      	adds	r7, #44	@ 0x2c
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	0800cccc 	.word	0x0800cccc

080056f8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800570a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800570c:	7dfb      	ldrb	r3, [r7, #23]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d002      	beq.n	8005718 <HAL_FDCAN_ActivateNotification+0x20>
 8005712:	7dfb      	ldrb	r3, [r7, #23]
 8005714:	2b02      	cmp	r3, #2
 8005716:	d155      	bne.n	80057c4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4013      	ands	r3, r2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d108      	bne.n	8005738 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0201 	orr.w	r2, r2, #1
 8005734:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005736:	e014      	b.n	8005762 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	4013      	ands	r3, r2
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	429a      	cmp	r2, r3
 8005746:	d108      	bne.n	800575a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0202 	orr.w	r2, r2, #2
 8005756:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005758:	e003      	b.n	8005762 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2203      	movs	r2, #3
 8005760:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005768:	2b00      	cmp	r3, #0
 800576a:	d009      	beq.n	8005780 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	430a      	orrs	r2, r1
 800577c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	430a      	orrs	r2, r1
 800579a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	4b0f      	ldr	r3, [pc, #60]	@ (80057e4 <HAL_FDCAN_ActivateNotification+0xec>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	6812      	ldr	r2, [r2, #0]
 80057ae:	430b      	orrs	r3, r1
 80057b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80057b2:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <HAL_FDCAN_ActivateNotification+0xf0>)
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	0f9b      	lsrs	r3, r3, #30
 80057ba:	490b      	ldr	r1, [pc, #44]	@ (80057e8 <HAL_FDCAN_ActivateNotification+0xf0>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e008      	b.n	80057d6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057ca:	f043 0202 	orr.w	r2, r3, #2
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
  }
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	3fcfffff 	.word	0x3fcfffff
 80057e8:	4000a800 	.word	0x4000a800

080057ec <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b096      	sub	sp, #88	@ 0x58
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80057f4:	4b9a      	ldr	r3, [pc, #616]	@ (8005a60 <HAL_FDCAN_IRQHandler+0x274>)
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	079b      	lsls	r3, r3, #30
 80057fa:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80057fc:	4b98      	ldr	r3, [pc, #608]	@ (8005a60 <HAL_FDCAN_IRQHandler+0x274>)
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	079b      	lsls	r3, r3, #30
 8005802:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005804:	4013      	ands	r3, r2
 8005806:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005812:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800581c:	4013      	ands	r3, r2
 800581e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005832:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005834:	4013      	ands	r3, r2
 8005836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800583e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005842:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800584c:	4013      	ands	r3, r2
 800584e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005856:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800585a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005862:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005864:	4013      	ands	r3, r2
 8005866:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800586e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8005872:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800587c:	4013      	ands	r3, r2
 800587e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005892:	0a1b      	lsrs	r3, r3, #8
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d010      	beq.n	80058be <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800589c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589e:	0a1b      	lsrs	r3, r3, #8
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80058b2:	4b6b      	ldr	r3, [pc, #428]	@ (8005a60 <HAL_FDCAN_IRQHandler+0x274>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fa54 	bl	8005d66 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80058be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c0:	0a9b      	lsrs	r3, r3, #10
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d01d      	beq.n	8005906 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80058ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058cc:	0a9b      	lsrs	r3, r3, #10
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d017      	beq.n	8005906 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80058de:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058ea:	4013      	ands	r3, r2
 80058ec:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80058f8:	4b59      	ldr	r3, [pc, #356]	@ (8005a60 <HAL_FDCAN_IRQHandler+0x274>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80058fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fa07 	bl	8005d14 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00d      	beq.n	8005928 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005912:	4b54      	ldr	r3, [pc, #336]	@ (8005a64 <HAL_FDCAN_IRQHandler+0x278>)
 8005914:	400b      	ands	r3, r1
 8005916:	6513      	str	r3, [r2, #80]	@ 0x50
 8005918:	4a51      	ldr	r2, [pc, #324]	@ (8005a60 <HAL_FDCAN_IRQHandler+0x274>)
 800591a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800591c:	0f9b      	lsrs	r3, r3, #30
 800591e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005920:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f9c0 	bl	8005ca8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00d      	beq.n	800594a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005934:	4b4b      	ldr	r3, [pc, #300]	@ (8005a64 <HAL_FDCAN_IRQHandler+0x278>)
 8005936:	400b      	ands	r3, r1
 8005938:	6513      	str	r3, [r2, #80]	@ 0x50
 800593a:	4a49      	ldr	r2, [pc, #292]	@ (8005a60 <HAL_FDCAN_IRQHandler+0x274>)
 800593c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800593e:	0f9b      	lsrs	r3, r3, #30
 8005940:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005942:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f9ba 	bl	8005cbe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800594a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00d      	beq.n	800596c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005956:	4b43      	ldr	r3, [pc, #268]	@ (8005a64 <HAL_FDCAN_IRQHandler+0x278>)
 8005958:	400b      	ands	r3, r1
 800595a:	6513      	str	r3, [r2, #80]	@ 0x50
 800595c:	4a40      	ldr	r2, [pc, #256]	@ (8005a60 <HAL_FDCAN_IRQHandler+0x274>)
 800595e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005960:	0f9b      	lsrs	r3, r3, #30
 8005962:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005964:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fc f96c 	bl	8001c44 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800596c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00d      	beq.n	800598e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005978:	4b3a      	ldr	r3, [pc, #232]	@ (8005a64 <HAL_FDCAN_IRQHandler+0x278>)
 800597a:	400b      	ands	r3, r1
 800597c:	6513      	str	r3, [r2, #80]	@ 0x50
 800597e:	4a38      	ldr	r2, [pc, #224]	@ (8005a60 <HAL_FDCAN_IRQHandler+0x274>)
 8005980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005982:	0f9b      	lsrs	r3, r3, #30
 8005984:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005986:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f9a3 	bl	8005cd4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800598e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005990:	0adb      	lsrs	r3, r3, #11
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d010      	beq.n	80059bc <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800599a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599c:	0adb      	lsrs	r3, r3, #11
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80059b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005a60 <HAL_FDCAN_IRQHandler+0x274>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f997 	bl	8005cea <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80059bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059be:	0a5b      	lsrs	r3, r3, #9
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01d      	beq.n	8005a04 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80059c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ca:	0a5b      	lsrs	r3, r3, #9
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d017      	beq.n	8005a04 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80059dc:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e8:	4013      	ands	r3, r2
 80059ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80059f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a60 <HAL_FDCAN_IRQHandler+0x274>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80059fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f97d 	bl	8005cfe <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a06:	0cdb      	lsrs	r3, r3, #19
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d010      	beq.n	8005a32 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a12:	0cdb      	lsrs	r3, r3, #19
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005a24:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a26:	4b0e      	ldr	r3, [pc, #56]	@ (8005a60 <HAL_FDCAN_IRQHandler+0x274>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f97c 	bl	8005d2a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a34:	0c1b      	lsrs	r3, r3, #16
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d016      	beq.n	8005a6c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a40:	0c1b      	lsrs	r3, r3, #16
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d010      	beq.n	8005a6c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005a52:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a54:	4b02      	ldr	r3, [pc, #8]	@ (8005a60 <HAL_FDCAN_IRQHandler+0x274>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	e004      	b.n	8005a68 <HAL_FDCAN_IRQHandler+0x27c>
 8005a5e:	bf00      	nop
 8005a60:	4000a800 	.word	0x4000a800
 8005a64:	3fcfffff 	.word	0x3fcfffff
 8005a68:	f000 f969 	bl	8005d3e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a6e:	0c9b      	lsrs	r3, r3, #18
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d010      	beq.n	8005a9a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7a:	0c9b      	lsrs	r3, r3, #18
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005a8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a8e:	4b83      	ldr	r3, [pc, #524]	@ (8005c9c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f95c 	bl	8005d52 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a9c:	0c5b      	lsrs	r3, r3, #17
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d015      	beq.n	8005ad2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa8:	0c5b      	lsrs	r3, r3, #17
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00f      	beq.n	8005ad2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005aba:	651a      	str	r2, [r3, #80]	@ 0x50
 8005abc:	4b77      	ldr	r3, [pc, #476]	@ (8005c9c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ac8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00d      	beq.n	8005af4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ade:	4b70      	ldr	r3, [pc, #448]	@ (8005ca0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005ae0:	400b      	ands	r3, r1
 8005ae2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ae4:	4a6d      	ldr	r2, [pc, #436]	@ (8005c9c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ae8:	0f9b      	lsrs	r3, r3, #30
 8005aea:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005aec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f94d 	bl	8005d8e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d011      	beq.n	8005b1e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b00:	4b67      	ldr	r3, [pc, #412]	@ (8005ca0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005b02:	400b      	ands	r3, r1
 8005b04:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b06:	4a65      	ldr	r2, [pc, #404]	@ (8005c9c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b0a:	0f9b      	lsrs	r3, r3, #30
 8005b0c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a60      	ldr	r2, [pc, #384]	@ (8005ca4 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	f040 80ac 	bne.w	8005c82 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 80a4 	beq.w	8005c82 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b4e:	4013      	ands	r3, r2
 8005b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b66:	4013      	ands	r3, r2
 8005b68:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b7e:	4013      	ands	r3, r2
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8005b8c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	6a3a      	ldr	r2, [r7, #32]
 8005b96:	4013      	ands	r3, r2
 8005b98:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005ba4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bce:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005bd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f8e6 	bl	8005da4 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005be4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005be6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f8e6 	bl	8005dba <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	099b      	lsrs	r3, r3, #6
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d01a      	beq.n	8005c30 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	099b      	lsrs	r3, r3, #6
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d014      	beq.n	8005c30 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0c:	0c1b      	lsrs	r3, r3, #16
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c1c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2240      	movs	r2, #64	@ 0x40
 8005c24:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	6939      	ldr	r1, [r7, #16]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f8d0 	bl	8005dd0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c3c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005c3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f8d1 	bl	8005de8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00b      	beq.n	8005c64 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	6a3a      	ldr	r2, [r7, #32]
 8005c52:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00b      	beq.n	8005c82 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f874 	bl	8005d7a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005c92:	bf00      	nop
 8005c94:	3758      	adds	r7, #88	@ 0x58
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	4000a800 	.word	0x4000a800
 8005ca0:	3fcfffff 	.word	0x3fcfffff
 8005ca4:	4000a000 	.word	0x4000a000

08005ca8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e0c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005e16:	4ba7      	ldr	r3, [pc, #668]	@ (80060b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	0091      	lsls	r1, r2, #2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	430b      	orrs	r3, r1
 8005e24:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e30:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e38:	041a      	lsls	r2, r3, #16
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005e56:	4b97      	ldr	r3, [pc, #604]	@ (80060b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	0091      	lsls	r1, r2, #2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6812      	ldr	r2, [r2, #0]
 8005e62:	430b      	orrs	r3, r1
 8005e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e70:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e78:	041a      	lsls	r2, r3, #16
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005e98:	4b86      	ldr	r3, [pc, #536]	@ (80060b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	0091      	lsls	r1, r2, #2
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005eb2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	041a      	lsls	r2, r3, #16
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005ece:	fb02 f303 	mul.w	r3, r2, r3
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005ee0:	4b74      	ldr	r3, [pc, #464]	@ (80060b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	0091      	lsls	r1, r2, #2
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	430b      	orrs	r3, r1
 8005eee:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005efa:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f02:	041a      	lsls	r2, r3, #16
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005f28:	4b62      	ldr	r3, [pc, #392]	@ (80060b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	0091      	lsls	r1, r2, #2
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	430b      	orrs	r3, r1
 8005f36:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005f42:	fb02 f303 	mul.w	r3, r2, r3
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	4413      	add	r3, r2
 8005f4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005f54:	4b57      	ldr	r3, [pc, #348]	@ (80060b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	0091      	lsls	r1, r2, #2
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	430b      	orrs	r3, r1
 8005f62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f6e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f76:	041a      	lsls	r2, r3, #16
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005f96:	4b47      	ldr	r3, [pc, #284]	@ (80060b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	0091      	lsls	r1, r2, #2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005fb0:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb8:	041a      	lsls	r2, r3, #16
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005fcc:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd4:	061a      	lsls	r2, r3, #24
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fe4:	4b34      	ldr	r3, [pc, #208]	@ (80060b8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009a      	lsls	r2, r3, #2
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	441a      	add	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	441a      	add	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800601a:	fb01 f303 	mul.w	r3, r1, r3
 800601e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006020:	441a      	add	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8006032:	fb01 f303 	mul.w	r3, r1, r3
 8006036:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006038:	441a      	add	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800604a:	fb01 f303 	mul.w	r3, r1, r3
 800604e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006050:	441a      	add	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	441a      	add	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800607a:	fb01 f303 	mul.w	r3, r1, r3
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006096:	fb01 f303 	mul.w	r3, r1, r3
 800609a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800609c:	441a      	add	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060aa:	4a04      	ldr	r2, [pc, #16]	@ (80060bc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d915      	bls.n	80060dc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80060b0:	e006      	b.n	80060c0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80060b2:	bf00      	nop
 80060b4:	ffff0003 	.word	0xffff0003
 80060b8:	10002b00 	.word	0x10002b00
 80060bc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060c6:	f043 0220 	orr.w	r2, r3, #32
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2203      	movs	r2, #3
 80060d4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e010      	b.n	80060fe <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	e005      	b.n	80060f0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3304      	adds	r3, #4
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d3f3      	bcc.n	80060e4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop

0800610c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800610c:	b480      	push	{r7}
 800610e:	b089      	sub	sp, #36	@ 0x24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800612a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006132:	4313      	orrs	r3, r2
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	e00a      	b.n	800614e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006140:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006146:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006148:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800614c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006158:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800615e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006164:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	fb01 f303 	mul.w	r3, r1, r3
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	3304      	adds	r3, #4
 8006190:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	3304      	adds	r3, #4
 800619c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]
 80061a2:	e020      	b.n	80061e6 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	3303      	adds	r3, #3
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	4413      	add	r3, r2
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	3302      	adds	r3, #2
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	440b      	add	r3, r1
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80061bc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	3301      	adds	r3, #1
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	440b      	add	r3, r1
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80061ca:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	440a      	add	r2, r1
 80061d2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80061d4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	3304      	adds	r3, #4
 80061de:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	3304      	adds	r3, #4
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	4a06      	ldr	r2, [pc, #24]	@ (8006204 <FDCAN_CopyMessageToRAM+0xf8>)
 80061ec:	5cd3      	ldrb	r3, [r2, r3]
 80061ee:	461a      	mov	r2, r3
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d3d6      	bcc.n	80061a4 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	3724      	adds	r7, #36	@ 0x24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	0800cccc 	.word	0x0800cccc

08006208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006208:	b480      	push	{r7}
 800620a:	b089      	sub	sp, #36	@ 0x24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006216:	4b86      	ldr	r3, [pc, #536]	@ (8006430 <HAL_GPIO_Init+0x228>)
 8006218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800621a:	e18c      	b.n	8006536 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	2101      	movs	r1, #1
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	fa01 f303 	lsl.w	r3, r1, r3
 8006228:	4013      	ands	r3, r2
 800622a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 817e 	beq.w	8006530 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	2b01      	cmp	r3, #1
 800623e:	d005      	beq.n	800624c <HAL_GPIO_Init+0x44>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d130      	bne.n	80062ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	2203      	movs	r2, #3
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	43db      	mvns	r3, r3
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	4013      	ands	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	fa02 f303 	lsl.w	r3, r2, r3
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	4313      	orrs	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006282:	2201      	movs	r2, #1
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	43db      	mvns	r3, r3
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	4013      	ands	r3, r2
 8006290:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	091b      	lsrs	r3, r3, #4
 8006298:	f003 0201 	and.w	r2, r3, #1
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d017      	beq.n	80062ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	2203      	movs	r2, #3
 80062c6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ca:	43db      	mvns	r3, r3
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	4013      	ands	r3, r2
 80062d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d123      	bne.n	800633e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	08da      	lsrs	r2, r3, #3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3208      	adds	r2, #8
 80062fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	220f      	movs	r2, #15
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	43db      	mvns	r3, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4013      	ands	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4313      	orrs	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	08da      	lsrs	r2, r3, #3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3208      	adds	r2, #8
 8006338:	69b9      	ldr	r1, [r7, #24]
 800633a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	2203      	movs	r2, #3
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	43db      	mvns	r3, r3
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	4013      	ands	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f003 0203 	and.w	r2, r3, #3
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	4313      	orrs	r3, r2
 800636a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 80d8 	beq.w	8006530 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006380:	4b2c      	ldr	r3, [pc, #176]	@ (8006434 <HAL_GPIO_Init+0x22c>)
 8006382:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006386:	4a2b      	ldr	r2, [pc, #172]	@ (8006434 <HAL_GPIO_Init+0x22c>)
 8006388:	f043 0302 	orr.w	r3, r3, #2
 800638c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006390:	4b28      	ldr	r3, [pc, #160]	@ (8006434 <HAL_GPIO_Init+0x22c>)
 8006392:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800639e:	4a26      	ldr	r2, [pc, #152]	@ (8006438 <HAL_GPIO_Init+0x230>)
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	089b      	lsrs	r3, r3, #2
 80063a4:	3302      	adds	r3, #2
 80063a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	f003 0303 	and.w	r3, r3, #3
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	220f      	movs	r2, #15
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	43db      	mvns	r3, r3
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	4013      	ands	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a1d      	ldr	r2, [pc, #116]	@ (800643c <HAL_GPIO_Init+0x234>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d04a      	beq.n	8006460 <HAL_GPIO_Init+0x258>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006440 <HAL_GPIO_Init+0x238>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d02b      	beq.n	800642a <HAL_GPIO_Init+0x222>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006444 <HAL_GPIO_Init+0x23c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d025      	beq.n	8006426 <HAL_GPIO_Init+0x21e>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006448 <HAL_GPIO_Init+0x240>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01f      	beq.n	8006422 <HAL_GPIO_Init+0x21a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a19      	ldr	r2, [pc, #100]	@ (800644c <HAL_GPIO_Init+0x244>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d019      	beq.n	800641e <HAL_GPIO_Init+0x216>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a18      	ldr	r2, [pc, #96]	@ (8006450 <HAL_GPIO_Init+0x248>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d013      	beq.n	800641a <HAL_GPIO_Init+0x212>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a17      	ldr	r2, [pc, #92]	@ (8006454 <HAL_GPIO_Init+0x24c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00d      	beq.n	8006416 <HAL_GPIO_Init+0x20e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a16      	ldr	r2, [pc, #88]	@ (8006458 <HAL_GPIO_Init+0x250>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d007      	beq.n	8006412 <HAL_GPIO_Init+0x20a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a15      	ldr	r2, [pc, #84]	@ (800645c <HAL_GPIO_Init+0x254>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d101      	bne.n	800640e <HAL_GPIO_Init+0x206>
 800640a:	2309      	movs	r3, #9
 800640c:	e029      	b.n	8006462 <HAL_GPIO_Init+0x25a>
 800640e:	230a      	movs	r3, #10
 8006410:	e027      	b.n	8006462 <HAL_GPIO_Init+0x25a>
 8006412:	2307      	movs	r3, #7
 8006414:	e025      	b.n	8006462 <HAL_GPIO_Init+0x25a>
 8006416:	2306      	movs	r3, #6
 8006418:	e023      	b.n	8006462 <HAL_GPIO_Init+0x25a>
 800641a:	2305      	movs	r3, #5
 800641c:	e021      	b.n	8006462 <HAL_GPIO_Init+0x25a>
 800641e:	2304      	movs	r3, #4
 8006420:	e01f      	b.n	8006462 <HAL_GPIO_Init+0x25a>
 8006422:	2303      	movs	r3, #3
 8006424:	e01d      	b.n	8006462 <HAL_GPIO_Init+0x25a>
 8006426:	2302      	movs	r3, #2
 8006428:	e01b      	b.n	8006462 <HAL_GPIO_Init+0x25a>
 800642a:	2301      	movs	r3, #1
 800642c:	e019      	b.n	8006462 <HAL_GPIO_Init+0x25a>
 800642e:	bf00      	nop
 8006430:	58000080 	.word	0x58000080
 8006434:	58024400 	.word	0x58024400
 8006438:	58000400 	.word	0x58000400
 800643c:	58020000 	.word	0x58020000
 8006440:	58020400 	.word	0x58020400
 8006444:	58020800 	.word	0x58020800
 8006448:	58020c00 	.word	0x58020c00
 800644c:	58021000 	.word	0x58021000
 8006450:	58021400 	.word	0x58021400
 8006454:	58021800 	.word	0x58021800
 8006458:	58021c00 	.word	0x58021c00
 800645c:	58022400 	.word	0x58022400
 8006460:	2300      	movs	r3, #0
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	f002 0203 	and.w	r2, r2, #3
 8006468:	0092      	lsls	r2, r2, #2
 800646a:	4093      	lsls	r3, r2
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4313      	orrs	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006472:	4938      	ldr	r1, [pc, #224]	@ (8006554 <HAL_GPIO_Init+0x34c>)
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	089b      	lsrs	r3, r3, #2
 8006478:	3302      	adds	r3, #2
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	43db      	mvns	r3, r3
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	4013      	ands	r3, r2
 8006490:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80064a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80064ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	43db      	mvns	r3, r3
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	4013      	ands	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80064d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	43db      	mvns	r3, r3
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	4013      	ands	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	43db      	mvns	r3, r3
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4013      	ands	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	3301      	adds	r3, #1
 8006534:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	fa22 f303 	lsr.w	r3, r2, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	f47f ae6b 	bne.w	800621c <HAL_GPIO_Init+0x14>
  }
}
 8006546:	bf00      	nop
 8006548:	bf00      	nop
 800654a:	3724      	adds	r7, #36	@ 0x24
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	58000400 	.word	0x58000400

08006558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	887b      	ldrh	r3, [r7, #2]
 800656a:	4013      	ands	r3, r2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006570:	2301      	movs	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
 8006574:	e001      	b.n	800657a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006576:	2300      	movs	r3, #0
 8006578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	807b      	strh	r3, [r7, #2]
 8006594:	4613      	mov	r3, r2
 8006596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006598:	787b      	ldrb	r3, [r7, #1]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800659e:	887a      	ldrh	r2, [r7, #2]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80065a4:	e003      	b.n	80065ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80065a6:	887b      	ldrh	r3, [r7, #2]
 80065a8:	041a      	lsls	r2, r3, #16
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	619a      	str	r2, [r3, #24]
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80065c4:	4b19      	ldr	r3, [pc, #100]	@ (800662c <HAL_PWREx_ConfigSupply+0x70>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d00a      	beq.n	80065e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80065d0:	4b16      	ldr	r3, [pc, #88]	@ (800662c <HAL_PWREx_ConfigSupply+0x70>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d001      	beq.n	80065e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e01f      	b.n	8006622 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	e01d      	b.n	8006622 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80065e6:	4b11      	ldr	r3, [pc, #68]	@ (800662c <HAL_PWREx_ConfigSupply+0x70>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f023 0207 	bic.w	r2, r3, #7
 80065ee:	490f      	ldr	r1, [pc, #60]	@ (800662c <HAL_PWREx_ConfigSupply+0x70>)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80065f6:	f7fc fb7f 	bl	8002cf8 <HAL_GetTick>
 80065fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80065fc:	e009      	b.n	8006612 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80065fe:	f7fc fb7b 	bl	8002cf8 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800660c:	d901      	bls.n	8006612 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e007      	b.n	8006622 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006612:	4b06      	ldr	r3, [pc, #24]	@ (800662c <HAL_PWREx_ConfigSupply+0x70>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800661a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800661e:	d1ee      	bne.n	80065fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	58024800 	.word	0x58024800

08006630 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08c      	sub	sp, #48	@ 0x30
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e3c8      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8087 	beq.w	800675e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006650:	4b88      	ldr	r3, [pc, #544]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006658:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800665a:	4b86      	ldr	r3, [pc, #536]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 800665c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006662:	2b10      	cmp	r3, #16
 8006664:	d007      	beq.n	8006676 <HAL_RCC_OscConfig+0x46>
 8006666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006668:	2b18      	cmp	r3, #24
 800666a:	d110      	bne.n	800668e <HAL_RCC_OscConfig+0x5e>
 800666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d10b      	bne.n	800668e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006676:	4b7f      	ldr	r3, [pc, #508]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d06c      	beq.n	800675c <HAL_RCC_OscConfig+0x12c>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d168      	bne.n	800675c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e3a2      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006696:	d106      	bne.n	80066a6 <HAL_RCC_OscConfig+0x76>
 8006698:	4b76      	ldr	r3, [pc, #472]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a75      	ldr	r2, [pc, #468]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 800669e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	e02e      	b.n	8006704 <HAL_RCC_OscConfig+0xd4>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10c      	bne.n	80066c8 <HAL_RCC_OscConfig+0x98>
 80066ae:	4b71      	ldr	r3, [pc, #452]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a70      	ldr	r2, [pc, #448]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80066b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	4b6e      	ldr	r3, [pc, #440]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a6d      	ldr	r2, [pc, #436]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80066c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e01d      	b.n	8006704 <HAL_RCC_OscConfig+0xd4>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066d0:	d10c      	bne.n	80066ec <HAL_RCC_OscConfig+0xbc>
 80066d2:	4b68      	ldr	r3, [pc, #416]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a67      	ldr	r2, [pc, #412]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80066d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	4b65      	ldr	r3, [pc, #404]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a64      	ldr	r2, [pc, #400]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80066e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e00b      	b.n	8006704 <HAL_RCC_OscConfig+0xd4>
 80066ec:	4b61      	ldr	r3, [pc, #388]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a60      	ldr	r2, [pc, #384]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80066f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	4b5e      	ldr	r3, [pc, #376]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a5d      	ldr	r2, [pc, #372]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80066fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d013      	beq.n	8006734 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670c:	f7fc faf4 	bl	8002cf8 <HAL_GetTick>
 8006710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006714:	f7fc faf0 	bl	8002cf8 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b64      	cmp	r3, #100	@ 0x64
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e356      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006726:	4b53      	ldr	r3, [pc, #332]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0f0      	beq.n	8006714 <HAL_RCC_OscConfig+0xe4>
 8006732:	e014      	b.n	800675e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006734:	f7fc fae0 	bl	8002cf8 <HAL_GetTick>
 8006738:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800673c:	f7fc fadc 	bl	8002cf8 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b64      	cmp	r3, #100	@ 0x64
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e342      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800674e:	4b49      	ldr	r3, [pc, #292]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x10c>
 800675a:	e000      	b.n	800675e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800675c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 808c 	beq.w	8006884 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800676c:	4b41      	ldr	r3, [pc, #260]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006774:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006776:	4b3f      	ldr	r3, [pc, #252]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <HAL_RCC_OscConfig+0x162>
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	2b18      	cmp	r3, #24
 8006786:	d137      	bne.n	80067f8 <HAL_RCC_OscConfig+0x1c8>
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d132      	bne.n	80067f8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006792:	4b38      	ldr	r3, [pc, #224]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <HAL_RCC_OscConfig+0x17a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e314      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067aa:	4b32      	ldr	r3, [pc, #200]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f023 0219 	bic.w	r2, r3, #25
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	492f      	ldr	r1, [pc, #188]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067bc:	f7fc fa9c 	bl	8002cf8 <HAL_GetTick>
 80067c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067c2:	e008      	b.n	80067d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067c4:	f7fc fa98 	bl	8002cf8 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e2fe      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067d6:	4b27      	ldr	r3, [pc, #156]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0f0      	beq.n	80067c4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e2:	4b24      	ldr	r3, [pc, #144]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	061b      	lsls	r3, r3, #24
 80067f0:	4920      	ldr	r1, [pc, #128]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067f6:	e045      	b.n	8006884 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d026      	beq.n	800684e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006800:	4b1c      	ldr	r3, [pc, #112]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f023 0219 	bic.w	r2, r3, #25
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	4919      	ldr	r1, [pc, #100]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 800680e:	4313      	orrs	r3, r2
 8006810:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006812:	f7fc fa71 	bl	8002cf8 <HAL_GetTick>
 8006816:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006818:	e008      	b.n	800682c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800681a:	f7fc fa6d 	bl	8002cf8 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e2d3      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800682c:	4b11      	ldr	r3, [pc, #68]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0f0      	beq.n	800681a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006838:	4b0e      	ldr	r3, [pc, #56]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	061b      	lsls	r3, r3, #24
 8006846:	490b      	ldr	r1, [pc, #44]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 8006848:	4313      	orrs	r3, r2
 800684a:	604b      	str	r3, [r1, #4]
 800684c:	e01a      	b.n	8006884 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800684e:	4b09      	ldr	r3, [pc, #36]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a08      	ldr	r2, [pc, #32]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685a:	f7fc fa4d 	bl	8002cf8 <HAL_GetTick>
 800685e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006860:	e00a      	b.n	8006878 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006862:	f7fc fa49 	bl	8002cf8 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d903      	bls.n	8006878 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e2af      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
 8006874:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006878:	4b96      	ldr	r3, [pc, #600]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1ee      	bne.n	8006862 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0310 	and.w	r3, r3, #16
 800688c:	2b00      	cmp	r3, #0
 800688e:	d06a      	beq.n	8006966 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006890:	4b90      	ldr	r3, [pc, #576]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006898:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800689a:	4b8e      	ldr	r3, [pc, #568]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d007      	beq.n	80068b6 <HAL_RCC_OscConfig+0x286>
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b18      	cmp	r3, #24
 80068aa:	d11b      	bne.n	80068e4 <HAL_RCC_OscConfig+0x2b4>
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d116      	bne.n	80068e4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068b6:	4b87      	ldr	r3, [pc, #540]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <HAL_RCC_OscConfig+0x29e>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	2b80      	cmp	r3, #128	@ 0x80
 80068c8:	d001      	beq.n	80068ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e282      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068ce:	4b81      	ldr	r3, [pc, #516]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	061b      	lsls	r3, r3, #24
 80068dc:	497d      	ldr	r1, [pc, #500]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068e2:	e040      	b.n	8006966 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d023      	beq.n	8006934 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80068ec:	4b79      	ldr	r3, [pc, #484]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a78      	ldr	r2, [pc, #480]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 80068f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f8:	f7fc f9fe 	bl	8002cf8 <HAL_GetTick>
 80068fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006900:	f7fc f9fa 	bl	8002cf8 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e260      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006912:	4b70      	ldr	r3, [pc, #448]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0f0      	beq.n	8006900 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800691e:	4b6d      	ldr	r3, [pc, #436]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	061b      	lsls	r3, r3, #24
 800692c:	4969      	ldr	r1, [pc, #420]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 800692e:	4313      	orrs	r3, r2
 8006930:	60cb      	str	r3, [r1, #12]
 8006932:	e018      	b.n	8006966 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006934:	4b67      	ldr	r3, [pc, #412]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a66      	ldr	r2, [pc, #408]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 800693a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800693e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006940:	f7fc f9da 	bl	8002cf8 <HAL_GetTick>
 8006944:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006946:	e008      	b.n	800695a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006948:	f7fc f9d6 	bl	8002cf8 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e23c      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800695a:	4b5e      	ldr	r3, [pc, #376]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1f0      	bne.n	8006948 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d036      	beq.n	80069e0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d019      	beq.n	80069ae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800697a:	4b56      	ldr	r3, [pc, #344]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 800697c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800697e:	4a55      	ldr	r2, [pc, #340]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006986:	f7fc f9b7 	bl	8002cf8 <HAL_GetTick>
 800698a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800698c:	e008      	b.n	80069a0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800698e:	f7fc f9b3 	bl	8002cf8 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e219      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069a0:	4b4c      	ldr	r3, [pc, #304]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 80069a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0f0      	beq.n	800698e <HAL_RCC_OscConfig+0x35e>
 80069ac:	e018      	b.n	80069e0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069ae:	4b49      	ldr	r3, [pc, #292]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 80069b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069b2:	4a48      	ldr	r2, [pc, #288]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 80069b4:	f023 0301 	bic.w	r3, r3, #1
 80069b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ba:	f7fc f99d 	bl	8002cf8 <HAL_GetTick>
 80069be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069c0:	e008      	b.n	80069d4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069c2:	f7fc f999 	bl	8002cf8 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e1ff      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069d4:	4b3f      	ldr	r3, [pc, #252]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 80069d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1f0      	bne.n	80069c2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0320 	and.w	r3, r3, #32
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d036      	beq.n	8006a5a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d019      	beq.n	8006a28 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069f4:	4b37      	ldr	r3, [pc, #220]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a36      	ldr	r2, [pc, #216]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 80069fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80069fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a00:	f7fc f97a 	bl	8002cf8 <HAL_GetTick>
 8006a04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a08:	f7fc f976 	bl	8002cf8 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e1dc      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f0      	beq.n	8006a08 <HAL_RCC_OscConfig+0x3d8>
 8006a26:	e018      	b.n	8006a5a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a28:	4b2a      	ldr	r3, [pc, #168]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a29      	ldr	r2, [pc, #164]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006a2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a34:	f7fc f960 	bl	8002cf8 <HAL_GetTick>
 8006a38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a3a:	e008      	b.n	8006a4e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a3c:	f7fc f95c 	bl	8002cf8 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e1c2      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a4e:	4b21      	ldr	r3, [pc, #132]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1f0      	bne.n	8006a3c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 8086 	beq.w	8006b74 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a68:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad8 <HAL_RCC_OscConfig+0x4a8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ad8 <HAL_RCC_OscConfig+0x4a8>)
 8006a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a74:	f7fc f940 	bl	8002cf8 <HAL_GetTick>
 8006a78:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a7c:	f7fc f93c 	bl	8002cf8 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b64      	cmp	r3, #100	@ 0x64
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e1a2      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a8e:	4b12      	ldr	r3, [pc, #72]	@ (8006ad8 <HAL_RCC_OscConfig+0x4a8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0f0      	beq.n	8006a7c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d106      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x480>
 8006aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006aa8:	f043 0301 	orr.w	r3, r3, #1
 8006aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8006aae:	e032      	b.n	8006b16 <HAL_RCC_OscConfig+0x4e6>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d111      	bne.n	8006adc <HAL_RCC_OscConfig+0x4ac>
 8006ab8:	4b06      	ldr	r3, [pc, #24]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006abc:	4a05      	ldr	r2, [pc, #20]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006abe:	f023 0301 	bic.w	r3, r3, #1
 8006ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ac4:	4b03      	ldr	r3, [pc, #12]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac8:	4a02      	ldr	r2, [pc, #8]	@ (8006ad4 <HAL_RCC_OscConfig+0x4a4>)
 8006aca:	f023 0304 	bic.w	r3, r3, #4
 8006ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ad0:	e021      	b.n	8006b16 <HAL_RCC_OscConfig+0x4e6>
 8006ad2:	bf00      	nop
 8006ad4:	58024400 	.word	0x58024400
 8006ad8:	58024800 	.word	0x58024800
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b05      	cmp	r3, #5
 8006ae2:	d10c      	bne.n	8006afe <HAL_RCC_OscConfig+0x4ce>
 8006ae4:	4b83      	ldr	r3, [pc, #524]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae8:	4a82      	ldr	r2, [pc, #520]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006aea:	f043 0304 	orr.w	r3, r3, #4
 8006aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8006af0:	4b80      	ldr	r3, [pc, #512]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af4:	4a7f      	ldr	r2, [pc, #508]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8006afc:	e00b      	b.n	8006b16 <HAL_RCC_OscConfig+0x4e6>
 8006afe:	4b7d      	ldr	r3, [pc, #500]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b02:	4a7c      	ldr	r2, [pc, #496]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006b04:	f023 0301 	bic.w	r3, r3, #1
 8006b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b0a:	4b7a      	ldr	r3, [pc, #488]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b0e:	4a79      	ldr	r2, [pc, #484]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006b10:	f023 0304 	bic.w	r3, r3, #4
 8006b14:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d015      	beq.n	8006b4a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1e:	f7fc f8eb 	bl	8002cf8 <HAL_GetTick>
 8006b22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b24:	e00a      	b.n	8006b3c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b26:	f7fc f8e7 	bl	8002cf8 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e14b      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b3c:	4b6d      	ldr	r3, [pc, #436]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0ee      	beq.n	8006b26 <HAL_RCC_OscConfig+0x4f6>
 8006b48:	e014      	b.n	8006b74 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4a:	f7fc f8d5 	bl	8002cf8 <HAL_GetTick>
 8006b4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b50:	e00a      	b.n	8006b68 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b52:	f7fc f8d1 	bl	8002cf8 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d901      	bls.n	8006b68 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e135      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b68:	4b62      	ldr	r3, [pc, #392]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1ee      	bne.n	8006b52 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 812a 	beq.w	8006dd2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b7e:	4b5d      	ldr	r3, [pc, #372]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b86:	2b18      	cmp	r3, #24
 8006b88:	f000 80ba 	beq.w	8006d00 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	f040 8095 	bne.w	8006cc0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b96:	4b57      	ldr	r3, [pc, #348]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a56      	ldr	r2, [pc, #344]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006b9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba2:	f7fc f8a9 	bl	8002cf8 <HAL_GetTick>
 8006ba6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ba8:	e008      	b.n	8006bbc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006baa:	f7fc f8a5 	bl	8002cf8 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d901      	bls.n	8006bbc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e10b      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bbc:	4b4d      	ldr	r3, [pc, #308]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1f0      	bne.n	8006baa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bc8:	4b4a      	ldr	r3, [pc, #296]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006bca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bcc:	4b4a      	ldr	r3, [pc, #296]	@ (8006cf8 <HAL_RCC_OscConfig+0x6c8>)
 8006bce:	4013      	ands	r3, r2
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006bd8:	0112      	lsls	r2, r2, #4
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	4945      	ldr	r1, [pc, #276]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	628b      	str	r3, [r1, #40]	@ 0x28
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be6:	3b01      	subs	r3, #1
 8006be8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	025b      	lsls	r3, r3, #9
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	041b      	lsls	r3, r3, #16
 8006c00:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	061b      	lsls	r3, r3, #24
 8006c0e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c12:	4938      	ldr	r1, [pc, #224]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006c18:	4b36      	ldr	r3, [pc, #216]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1c:	4a35      	ldr	r2, [pc, #212]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c1e:	f023 0301 	bic.w	r3, r3, #1
 8006c22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c24:	4b33      	ldr	r3, [pc, #204]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c28:	4b34      	ldr	r3, [pc, #208]	@ (8006cfc <HAL_RCC_OscConfig+0x6cc>)
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c30:	00d2      	lsls	r2, r2, #3
 8006c32:	4930      	ldr	r1, [pc, #192]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c38:	4b2e      	ldr	r3, [pc, #184]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3c:	f023 020c 	bic.w	r2, r3, #12
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c44:	492b      	ldr	r1, [pc, #172]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4e:	f023 0202 	bic.w	r2, r3, #2
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c56:	4927      	ldr	r1, [pc, #156]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c5c:	4b25      	ldr	r3, [pc, #148]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c60:	4a24      	ldr	r2, [pc, #144]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c68:	4b22      	ldr	r3, [pc, #136]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6c:	4a21      	ldr	r2, [pc, #132]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c74:	4b1f      	ldr	r3, [pc, #124]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c78:	4a1e      	ldr	r2, [pc, #120]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006c80:	4b1c      	ldr	r3, [pc, #112]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c8c:	4b19      	ldr	r3, [pc, #100]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a18      	ldr	r2, [pc, #96]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c98:	f7fc f82e 	bl	8002cf8 <HAL_GetTick>
 8006c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ca0:	f7fc f82a 	bl	8002cf8 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e090      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cb2:	4b10      	ldr	r3, [pc, #64]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0f0      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x670>
 8006cbe:	e088      	b.n	8006dd2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006cc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ccc:	f7fc f814 	bl	8002cf8 <HAL_GetTick>
 8006cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cd4:	f7fc f810 	bl	8002cf8 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e076      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ce6:	4b03      	ldr	r3, [pc, #12]	@ (8006cf4 <HAL_RCC_OscConfig+0x6c4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f0      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x6a4>
 8006cf2:	e06e      	b.n	8006dd2 <HAL_RCC_OscConfig+0x7a2>
 8006cf4:	58024400 	.word	0x58024400
 8006cf8:	fffffc0c 	.word	0xfffffc0c
 8006cfc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d00:	4b36      	ldr	r3, [pc, #216]	@ (8006ddc <HAL_RCC_OscConfig+0x7ac>)
 8006d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d06:	4b35      	ldr	r3, [pc, #212]	@ (8006ddc <HAL_RCC_OscConfig+0x7ac>)
 8006d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d031      	beq.n	8006d78 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f003 0203 	and.w	r2, r3, #3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d12a      	bne.n	8006d78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	091b      	lsrs	r3, r3, #4
 8006d26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d122      	bne.n	8006d78 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d11a      	bne.n	8006d78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	0a5b      	lsrs	r3, r3, #9
 8006d46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d111      	bne.n	8006d78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d108      	bne.n	8006d78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	0e1b      	lsrs	r3, r3, #24
 8006d6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d001      	beq.n	8006d7c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e02b      	b.n	8006dd4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006d7c:	4b17      	ldr	r3, [pc, #92]	@ (8006ddc <HAL_RCC_OscConfig+0x7ac>)
 8006d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d80:	08db      	lsrs	r3, r3, #3
 8006d82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d01f      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006d92:	4b12      	ldr	r3, [pc, #72]	@ (8006ddc <HAL_RCC_OscConfig+0x7ac>)
 8006d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d96:	4a11      	ldr	r2, [pc, #68]	@ (8006ddc <HAL_RCC_OscConfig+0x7ac>)
 8006d98:	f023 0301 	bic.w	r3, r3, #1
 8006d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d9e:	f7fb ffab 	bl	8002cf8 <HAL_GetTick>
 8006da2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006da4:	bf00      	nop
 8006da6:	f7fb ffa7 	bl	8002cf8 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d0f9      	beq.n	8006da6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006db2:	4b0a      	ldr	r3, [pc, #40]	@ (8006ddc <HAL_RCC_OscConfig+0x7ac>)
 8006db4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006db6:	4b0a      	ldr	r3, [pc, #40]	@ (8006de0 <HAL_RCC_OscConfig+0x7b0>)
 8006db8:	4013      	ands	r3, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006dbe:	00d2      	lsls	r2, r2, #3
 8006dc0:	4906      	ldr	r1, [pc, #24]	@ (8006ddc <HAL_RCC_OscConfig+0x7ac>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006dc6:	4b05      	ldr	r3, [pc, #20]	@ (8006ddc <HAL_RCC_OscConfig+0x7ac>)
 8006dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dca:	4a04      	ldr	r2, [pc, #16]	@ (8006ddc <HAL_RCC_OscConfig+0x7ac>)
 8006dcc:	f043 0301 	orr.w	r3, r3, #1
 8006dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3730      	adds	r7, #48	@ 0x30
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	58024400 	.word	0x58024400
 8006de0:	ffff0007 	.word	0xffff0007

08006de4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e19c      	b.n	8007132 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006df8:	4b8a      	ldr	r3, [pc, #552]	@ (8007024 <HAL_RCC_ClockConfig+0x240>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 030f 	and.w	r3, r3, #15
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d910      	bls.n	8006e28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e06:	4b87      	ldr	r3, [pc, #540]	@ (8007024 <HAL_RCC_ClockConfig+0x240>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f023 020f 	bic.w	r2, r3, #15
 8006e0e:	4985      	ldr	r1, [pc, #532]	@ (8007024 <HAL_RCC_ClockConfig+0x240>)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e16:	4b83      	ldr	r3, [pc, #524]	@ (8007024 <HAL_RCC_ClockConfig+0x240>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d001      	beq.n	8006e28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e184      	b.n	8007132 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d010      	beq.n	8006e56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	4b7b      	ldr	r3, [pc, #492]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d908      	bls.n	8006e56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e44:	4b78      	ldr	r3, [pc, #480]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	4975      	ldr	r1, [pc, #468]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0308 	and.w	r3, r3, #8
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d010      	beq.n	8006e84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	695a      	ldr	r2, [r3, #20]
 8006e66:	4b70      	ldr	r3, [pc, #448]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d908      	bls.n	8006e84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e72:	4b6d      	ldr	r3, [pc, #436]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	496a      	ldr	r1, [pc, #424]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0310 	and.w	r3, r3, #16
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d010      	beq.n	8006eb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	4b64      	ldr	r3, [pc, #400]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d908      	bls.n	8006eb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ea0:	4b61      	ldr	r3, [pc, #388]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	495e      	ldr	r1, [pc, #376]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d010      	beq.n	8006ee0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69da      	ldr	r2, [r3, #28]
 8006ec2:	4b59      	ldr	r3, [pc, #356]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d908      	bls.n	8006ee0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ece:	4b56      	ldr	r3, [pc, #344]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	4953      	ldr	r1, [pc, #332]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d010      	beq.n	8006f0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d908      	bls.n	8006f0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006efc:	4b4a      	ldr	r3, [pc, #296]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	f023 020f 	bic.w	r2, r3, #15
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	4947      	ldr	r1, [pc, #284]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d055      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006f1a:	4b43      	ldr	r3, [pc, #268]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	4940      	ldr	r1, [pc, #256]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d107      	bne.n	8006f44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f34:	4b3c      	ldr	r3, [pc, #240]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d121      	bne.n	8006f84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e0f6      	b.n	8007132 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d107      	bne.n	8006f5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f4c:	4b36      	ldr	r3, [pc, #216]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d115      	bne.n	8006f84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e0ea      	b.n	8007132 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d107      	bne.n	8006f74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f64:	4b30      	ldr	r3, [pc, #192]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d109      	bne.n	8006f84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0de      	b.n	8007132 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f74:	4b2c      	ldr	r3, [pc, #176]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e0d6      	b.n	8007132 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f84:	4b28      	ldr	r3, [pc, #160]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f023 0207 	bic.w	r2, r3, #7
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	4925      	ldr	r1, [pc, #148]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f96:	f7fb feaf 	bl	8002cf8 <HAL_GetTick>
 8006f9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f9c:	e00a      	b.n	8006fb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f9e:	f7fb feab 	bl	8002cf8 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d901      	bls.n	8006fb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e0be      	b.n	8007132 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d1eb      	bne.n	8006f9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d010      	beq.n	8006ff4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	4b14      	ldr	r3, [pc, #80]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d208      	bcs.n	8006ff4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fe2:	4b11      	ldr	r3, [pc, #68]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f023 020f 	bic.w	r2, r3, #15
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	490e      	ldr	r1, [pc, #56]	@ (8007028 <HAL_RCC_ClockConfig+0x244>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8007024 <HAL_RCC_ClockConfig+0x240>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d214      	bcs.n	800702c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007002:	4b08      	ldr	r3, [pc, #32]	@ (8007024 <HAL_RCC_ClockConfig+0x240>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f023 020f 	bic.w	r2, r3, #15
 800700a:	4906      	ldr	r1, [pc, #24]	@ (8007024 <HAL_RCC_ClockConfig+0x240>)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	4313      	orrs	r3, r2
 8007010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007012:	4b04      	ldr	r3, [pc, #16]	@ (8007024 <HAL_RCC_ClockConfig+0x240>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	429a      	cmp	r2, r3
 800701e:	d005      	beq.n	800702c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e086      	b.n	8007132 <HAL_RCC_ClockConfig+0x34e>
 8007024:	52002000 	.word	0x52002000
 8007028:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d010      	beq.n	800705a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691a      	ldr	r2, [r3, #16]
 800703c:	4b3f      	ldr	r3, [pc, #252]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007044:	429a      	cmp	r2, r3
 8007046:	d208      	bcs.n	800705a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007048:	4b3c      	ldr	r3, [pc, #240]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	4939      	ldr	r1, [pc, #228]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 8007056:	4313      	orrs	r3, r2
 8007058:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0308 	and.w	r3, r3, #8
 8007062:	2b00      	cmp	r3, #0
 8007064:	d010      	beq.n	8007088 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	695a      	ldr	r2, [r3, #20]
 800706a:	4b34      	ldr	r3, [pc, #208]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007072:	429a      	cmp	r2, r3
 8007074:	d208      	bcs.n	8007088 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007076:	4b31      	ldr	r3, [pc, #196]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	492e      	ldr	r1, [pc, #184]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 8007084:	4313      	orrs	r3, r2
 8007086:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	d010      	beq.n	80070b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699a      	ldr	r2, [r3, #24]
 8007098:	4b28      	ldr	r3, [pc, #160]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d208      	bcs.n	80070b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070a4:	4b25      	ldr	r3, [pc, #148]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	4922      	ldr	r1, [pc, #136]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d010      	beq.n	80070e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69da      	ldr	r2, [r3, #28]
 80070c6:	4b1d      	ldr	r3, [pc, #116]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d208      	bcs.n	80070e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80070d2:	4b1a      	ldr	r3, [pc, #104]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	4917      	ldr	r1, [pc, #92]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80070e4:	f000 f834 	bl	8007150 <HAL_RCC_GetSysClockFreq>
 80070e8:	4602      	mov	r2, r0
 80070ea:	4b14      	ldr	r3, [pc, #80]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	0a1b      	lsrs	r3, r3, #8
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	4912      	ldr	r1, [pc, #72]	@ (8007140 <HAL_RCC_ClockConfig+0x35c>)
 80070f6:	5ccb      	ldrb	r3, [r1, r3]
 80070f8:	f003 031f 	and.w	r3, r3, #31
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007100:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007102:	4b0e      	ldr	r3, [pc, #56]	@ (800713c <HAL_RCC_ClockConfig+0x358>)
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	4a0d      	ldr	r2, [pc, #52]	@ (8007140 <HAL_RCC_ClockConfig+0x35c>)
 800710c:	5cd3      	ldrb	r3, [r2, r3]
 800710e:	f003 031f 	and.w	r3, r3, #31
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	fa22 f303 	lsr.w	r3, r2, r3
 8007118:	4a0a      	ldr	r2, [pc, #40]	@ (8007144 <HAL_RCC_ClockConfig+0x360>)
 800711a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800711c:	4a0a      	ldr	r2, [pc, #40]	@ (8007148 <HAL_RCC_ClockConfig+0x364>)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007122:	4b0a      	ldr	r3, [pc, #40]	@ (800714c <HAL_RCC_ClockConfig+0x368>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f7fb fd9c 	bl	8002c64 <HAL_InitTick>
 800712c:	4603      	mov	r3, r0
 800712e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007130:	7bfb      	ldrb	r3, [r7, #15]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	58024400 	.word	0x58024400
 8007140:	0800ccbc 	.word	0x0800ccbc
 8007144:	24000010 	.word	0x24000010
 8007148:	2400000c 	.word	0x2400000c
 800714c:	24000014 	.word	0x24000014

08007150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007150:	b480      	push	{r7}
 8007152:	b089      	sub	sp, #36	@ 0x24
 8007154:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007156:	4bb3      	ldr	r3, [pc, #716]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800715e:	2b18      	cmp	r3, #24
 8007160:	f200 8155 	bhi.w	800740e <HAL_RCC_GetSysClockFreq+0x2be>
 8007164:	a201      	add	r2, pc, #4	@ (adr r2, 800716c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716a:	bf00      	nop
 800716c:	080071d1 	.word	0x080071d1
 8007170:	0800740f 	.word	0x0800740f
 8007174:	0800740f 	.word	0x0800740f
 8007178:	0800740f 	.word	0x0800740f
 800717c:	0800740f 	.word	0x0800740f
 8007180:	0800740f 	.word	0x0800740f
 8007184:	0800740f 	.word	0x0800740f
 8007188:	0800740f 	.word	0x0800740f
 800718c:	080071f7 	.word	0x080071f7
 8007190:	0800740f 	.word	0x0800740f
 8007194:	0800740f 	.word	0x0800740f
 8007198:	0800740f 	.word	0x0800740f
 800719c:	0800740f 	.word	0x0800740f
 80071a0:	0800740f 	.word	0x0800740f
 80071a4:	0800740f 	.word	0x0800740f
 80071a8:	0800740f 	.word	0x0800740f
 80071ac:	080071fd 	.word	0x080071fd
 80071b0:	0800740f 	.word	0x0800740f
 80071b4:	0800740f 	.word	0x0800740f
 80071b8:	0800740f 	.word	0x0800740f
 80071bc:	0800740f 	.word	0x0800740f
 80071c0:	0800740f 	.word	0x0800740f
 80071c4:	0800740f 	.word	0x0800740f
 80071c8:	0800740f 	.word	0x0800740f
 80071cc:	08007203 	.word	0x08007203
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071d0:	4b94      	ldr	r3, [pc, #592]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0320 	and.w	r3, r3, #32
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d009      	beq.n	80071f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071dc:	4b91      	ldr	r3, [pc, #580]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	08db      	lsrs	r3, r3, #3
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	4a90      	ldr	r2, [pc, #576]	@ (8007428 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071e8:	fa22 f303 	lsr.w	r3, r2, r3
 80071ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80071ee:	e111      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80071f0:	4b8d      	ldr	r3, [pc, #564]	@ (8007428 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071f2:	61bb      	str	r3, [r7, #24]
      break;
 80071f4:	e10e      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80071f6:	4b8d      	ldr	r3, [pc, #564]	@ (800742c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071f8:	61bb      	str	r3, [r7, #24]
      break;
 80071fa:	e10b      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80071fc:	4b8c      	ldr	r3, [pc, #560]	@ (8007430 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80071fe:	61bb      	str	r3, [r7, #24]
      break;
 8007200:	e108      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007202:	4b88      	ldr	r3, [pc, #544]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007206:	f003 0303 	and.w	r3, r3, #3
 800720a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800720c:	4b85      	ldr	r3, [pc, #532]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800720e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007210:	091b      	lsrs	r3, r3, #4
 8007212:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007216:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007218:	4b82      	ldr	r3, [pc, #520]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800721a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007222:	4b80      	ldr	r3, [pc, #512]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007226:	08db      	lsrs	r3, r3, #3
 8007228:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	fb02 f303 	mul.w	r3, r2, r3
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 80e1 	beq.w	8007408 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b02      	cmp	r3, #2
 800724a:	f000 8083 	beq.w	8007354 <HAL_RCC_GetSysClockFreq+0x204>
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b02      	cmp	r3, #2
 8007252:	f200 80a1 	bhi.w	8007398 <HAL_RCC_GetSysClockFreq+0x248>
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_RCC_GetSysClockFreq+0x114>
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d056      	beq.n	8007310 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007262:	e099      	b.n	8007398 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007264:	4b6f      	ldr	r3, [pc, #444]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b00      	cmp	r3, #0
 800726e:	d02d      	beq.n	80072cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007270:	4b6c      	ldr	r3, [pc, #432]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	08db      	lsrs	r3, r3, #3
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	4a6b      	ldr	r2, [pc, #428]	@ (8007428 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800727c:	fa22 f303 	lsr.w	r3, r2, r3
 8007280:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	ee07 3a90 	vmov	s15, r3
 8007288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729a:	4b62      	ldr	r3, [pc, #392]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800729c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007434 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80072ca:	e087      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007438 <HAL_RCC_GetSysClockFreq+0x2e8>
 80072da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072de:	4b51      	ldr	r3, [pc, #324]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80072f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007434 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800730e:	e065      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800743c <HAL_RCC_GetSysClockFreq+0x2ec>
 800731e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007322:	4b40      	ldr	r3, [pc, #256]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007332:	ed97 6a02 	vldr	s12, [r7, #8]
 8007336:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007434 <HAL_RCC_GetSysClockFreq+0x2e4>
 800733a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007352:	e043      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007440 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007366:	4b2f      	ldr	r3, [pc, #188]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007376:	ed97 6a02 	vldr	s12, [r7, #8]
 800737a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007434 <HAL_RCC_GetSysClockFreq+0x2e4>
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007396:	e021      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800743c <HAL_RCC_GetSysClockFreq+0x2ec>
 80073a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80073be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007434 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80073dc:	4b11      	ldr	r3, [pc, #68]	@ (8007424 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e0:	0a5b      	lsrs	r3, r3, #9
 80073e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073e6:	3301      	adds	r3, #1
 80073e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	ee07 3a90 	vmov	s15, r3
 80073f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80073f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007400:	ee17 3a90 	vmov	r3, s15
 8007404:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007406:	e005      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	61bb      	str	r3, [r7, #24]
      break;
 800740c:	e002      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800740e:	4b07      	ldr	r3, [pc, #28]	@ (800742c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007410:	61bb      	str	r3, [r7, #24]
      break;
 8007412:	bf00      	nop
  }

  return sysclockfreq;
 8007414:	69bb      	ldr	r3, [r7, #24]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3724      	adds	r7, #36	@ 0x24
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	58024400 	.word	0x58024400
 8007428:	03d09000 	.word	0x03d09000
 800742c:	003d0900 	.word	0x003d0900
 8007430:	016e3600 	.word	0x016e3600
 8007434:	46000000 	.word	0x46000000
 8007438:	4c742400 	.word	0x4c742400
 800743c:	4a742400 	.word	0x4a742400
 8007440:	4bb71b00 	.word	0x4bb71b00

08007444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800744a:	f7ff fe81 	bl	8007150 <HAL_RCC_GetSysClockFreq>
 800744e:	4602      	mov	r2, r0
 8007450:	4b10      	ldr	r3, [pc, #64]	@ (8007494 <HAL_RCC_GetHCLKFreq+0x50>)
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	0a1b      	lsrs	r3, r3, #8
 8007456:	f003 030f 	and.w	r3, r3, #15
 800745a:	490f      	ldr	r1, [pc, #60]	@ (8007498 <HAL_RCC_GetHCLKFreq+0x54>)
 800745c:	5ccb      	ldrb	r3, [r1, r3]
 800745e:	f003 031f 	and.w	r3, r3, #31
 8007462:	fa22 f303 	lsr.w	r3, r2, r3
 8007466:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007468:	4b0a      	ldr	r3, [pc, #40]	@ (8007494 <HAL_RCC_GetHCLKFreq+0x50>)
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	4a09      	ldr	r2, [pc, #36]	@ (8007498 <HAL_RCC_GetHCLKFreq+0x54>)
 8007472:	5cd3      	ldrb	r3, [r2, r3]
 8007474:	f003 031f 	and.w	r3, r3, #31
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	fa22 f303 	lsr.w	r3, r2, r3
 800747e:	4a07      	ldr	r2, [pc, #28]	@ (800749c <HAL_RCC_GetHCLKFreq+0x58>)
 8007480:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007482:	4a07      	ldr	r2, [pc, #28]	@ (80074a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007488:	4b04      	ldr	r3, [pc, #16]	@ (800749c <HAL_RCC_GetHCLKFreq+0x58>)
 800748a:	681b      	ldr	r3, [r3, #0]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	58024400 	.word	0x58024400
 8007498:	0800ccbc 	.word	0x0800ccbc
 800749c:	24000010 	.word	0x24000010
 80074a0:	2400000c 	.word	0x2400000c

080074a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80074a8:	f7ff ffcc 	bl	8007444 <HAL_RCC_GetHCLKFreq>
 80074ac:	4602      	mov	r2, r0
 80074ae:	4b06      	ldr	r3, [pc, #24]	@ (80074c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	091b      	lsrs	r3, r3, #4
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	4904      	ldr	r1, [pc, #16]	@ (80074cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80074ba:	5ccb      	ldrb	r3, [r1, r3]
 80074bc:	f003 031f 	and.w	r3, r3, #31
 80074c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	58024400 	.word	0x58024400
 80074cc:	0800ccbc 	.word	0x0800ccbc

080074d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80074d4:	f7ff ffb6 	bl	8007444 <HAL_RCC_GetHCLKFreq>
 80074d8:	4602      	mov	r2, r0
 80074da:	4b06      	ldr	r3, [pc, #24]	@ (80074f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	0a1b      	lsrs	r3, r3, #8
 80074e0:	f003 0307 	and.w	r3, r3, #7
 80074e4:	4904      	ldr	r1, [pc, #16]	@ (80074f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80074e6:	5ccb      	ldrb	r3, [r1, r3]
 80074e8:	f003 031f 	and.w	r3, r3, #31
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	58024400 	.word	0x58024400
 80074f8:	0800ccbc 	.word	0x0800ccbc

080074fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007500:	b0c6      	sub	sp, #280	@ 0x118
 8007502:	af00      	add	r7, sp, #0
 8007504:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007508:	2300      	movs	r3, #0
 800750a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800750e:	2300      	movs	r3, #0
 8007510:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007520:	2500      	movs	r5, #0
 8007522:	ea54 0305 	orrs.w	r3, r4, r5
 8007526:	d049      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800752e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007532:	d02f      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007534:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007538:	d828      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800753a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800753e:	d01a      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007540:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007544:	d822      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800754a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800754e:	d007      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007550:	e01c      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007552:	4bab      	ldr	r3, [pc, #684]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007556:	4aaa      	ldr	r2, [pc, #680]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800755c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800755e:	e01a      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007564:	3308      	adds	r3, #8
 8007566:	2102      	movs	r1, #2
 8007568:	4618      	mov	r0, r3
 800756a:	f002 fa49 	bl	8009a00 <RCCEx_PLL2_Config>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007574:	e00f      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757a:	3328      	adds	r3, #40	@ 0x28
 800757c:	2102      	movs	r1, #2
 800757e:	4618      	mov	r0, r3
 8007580:	f002 faf0 	bl	8009b64 <RCCEx_PLL3_Config>
 8007584:	4603      	mov	r3, r0
 8007586:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800758a:	e004      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007592:	e000      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007596:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800759e:	4b98      	ldr	r3, [pc, #608]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075ac:	4a94      	ldr	r2, [pc, #592]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075ae:	430b      	orrs	r3, r1
 80075b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80075b2:	e003      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80075c8:	f04f 0900 	mov.w	r9, #0
 80075cc:	ea58 0309 	orrs.w	r3, r8, r9
 80075d0:	d047      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80075d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d8:	2b04      	cmp	r3, #4
 80075da:	d82a      	bhi.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80075dc:	a201      	add	r2, pc, #4	@ (adr r2, 80075e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80075de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e2:	bf00      	nop
 80075e4:	080075f9 	.word	0x080075f9
 80075e8:	08007607 	.word	0x08007607
 80075ec:	0800761d 	.word	0x0800761d
 80075f0:	0800763b 	.word	0x0800763b
 80075f4:	0800763b 	.word	0x0800763b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f8:	4b81      	ldr	r3, [pc, #516]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	4a80      	ldr	r2, [pc, #512]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007604:	e01a      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760a:	3308      	adds	r3, #8
 800760c:	2100      	movs	r1, #0
 800760e:	4618      	mov	r0, r3
 8007610:	f002 f9f6 	bl	8009a00 <RCCEx_PLL2_Config>
 8007614:	4603      	mov	r3, r0
 8007616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800761a:	e00f      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800761c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007620:	3328      	adds	r3, #40	@ 0x28
 8007622:	2100      	movs	r1, #0
 8007624:	4618      	mov	r0, r3
 8007626:	f002 fa9d 	bl	8009b64 <RCCEx_PLL3_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007630:	e004      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007638:	e000      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800763a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800763c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007644:	4b6e      	ldr	r3, [pc, #440]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007648:	f023 0107 	bic.w	r1, r3, #7
 800764c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007652:	4a6b      	ldr	r2, [pc, #428]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007654:	430b      	orrs	r3, r1
 8007656:	6513      	str	r3, [r2, #80]	@ 0x50
 8007658:	e003      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800765a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800765e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800766e:	f04f 0b00 	mov.w	fp, #0
 8007672:	ea5a 030b 	orrs.w	r3, sl, fp
 8007676:	d05b      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007680:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007684:	d03b      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007686:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800768a:	d834      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800768c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007690:	d037      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007692:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007696:	d82e      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007698:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800769c:	d033      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800769e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076a2:	d828      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80076a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076a8:	d01a      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80076aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076ae:	d822      	bhi.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80076b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076b8:	d007      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80076ba:	e01c      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076bc:	4b50      	ldr	r3, [pc, #320]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c0:	4a4f      	ldr	r2, [pc, #316]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076c8:	e01e      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ce:	3308      	adds	r3, #8
 80076d0:	2100      	movs	r1, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f002 f994 	bl	8009a00 <RCCEx_PLL2_Config>
 80076d8:	4603      	mov	r3, r0
 80076da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80076de:	e013      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e4:	3328      	adds	r3, #40	@ 0x28
 80076e6:	2100      	movs	r1, #0
 80076e8:	4618      	mov	r0, r3
 80076ea:	f002 fa3b 	bl	8009b64 <RCCEx_PLL3_Config>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076f4:	e008      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076fc:	e004      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80076fe:	bf00      	nop
 8007700:	e002      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007702:	bf00      	nop
 8007704:	e000      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10b      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007710:	4b3b      	ldr	r3, [pc, #236]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007714:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800771c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007720:	4a37      	ldr	r2, [pc, #220]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007722:	430b      	orrs	r3, r1
 8007724:	6593      	str	r3, [r2, #88]	@ 0x58
 8007726:	e003      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007728:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800772c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800773c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007740:	2300      	movs	r3, #0
 8007742:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007746:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800774a:	460b      	mov	r3, r1
 800774c:	4313      	orrs	r3, r2
 800774e:	d05d      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007754:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007758:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800775c:	d03b      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800775e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007762:	d834      	bhi.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007764:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007768:	d037      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800776a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800776e:	d82e      	bhi.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007770:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007774:	d033      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007776:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800777a:	d828      	bhi.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800777c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007780:	d01a      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007782:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007786:	d822      	bhi.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800778c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007790:	d007      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007792:	e01c      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007794:	4b1a      	ldr	r3, [pc, #104]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007798:	4a19      	ldr	r2, [pc, #100]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800779a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800779e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077a0:	e01e      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a6:	3308      	adds	r3, #8
 80077a8:	2100      	movs	r1, #0
 80077aa:	4618      	mov	r0, r3
 80077ac:	f002 f928 	bl	8009a00 <RCCEx_PLL2_Config>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80077b6:	e013      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077bc:	3328      	adds	r3, #40	@ 0x28
 80077be:	2100      	movs	r1, #0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f002 f9cf 	bl	8009b64 <RCCEx_PLL3_Config>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077cc:	e008      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077d4:	e004      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80077d6:	bf00      	nop
 80077d8:	e002      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80077da:	bf00      	nop
 80077dc:	e000      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80077de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10d      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80077e8:	4b05      	ldr	r3, [pc, #20]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80077f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077f8:	4a01      	ldr	r2, [pc, #4]	@ (8007800 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077fa:	430b      	orrs	r3, r1
 80077fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80077fe:	e005      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007800:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007808:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800780c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007818:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800781c:	2300      	movs	r3, #0
 800781e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007822:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007826:	460b      	mov	r3, r1
 8007828:	4313      	orrs	r3, r2
 800782a:	d03a      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800782c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007832:	2b30      	cmp	r3, #48	@ 0x30
 8007834:	d01f      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007836:	2b30      	cmp	r3, #48	@ 0x30
 8007838:	d819      	bhi.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800783a:	2b20      	cmp	r3, #32
 800783c:	d00c      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800783e:	2b20      	cmp	r3, #32
 8007840:	d815      	bhi.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d019      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007846:	2b10      	cmp	r3, #16
 8007848:	d111      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800784a:	4baa      	ldr	r3, [pc, #680]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800784c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784e:	4aa9      	ldr	r2, [pc, #676]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007854:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007856:	e011      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785c:	3308      	adds	r3, #8
 800785e:	2102      	movs	r1, #2
 8007860:	4618      	mov	r0, r3
 8007862:	f002 f8cd 	bl	8009a00 <RCCEx_PLL2_Config>
 8007866:	4603      	mov	r3, r0
 8007868:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800786c:	e006      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007874:	e002      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007876:	bf00      	nop
 8007878:	e000      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800787a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800787c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007884:	4b9b      	ldr	r3, [pc, #620]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007888:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800788c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007892:	4a98      	ldr	r2, [pc, #608]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007894:	430b      	orrs	r3, r1
 8007896:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007898:	e003      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800789e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80078a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80078ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078b2:	2300      	movs	r3, #0
 80078b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80078b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80078bc:	460b      	mov	r3, r1
 80078be:	4313      	orrs	r3, r2
 80078c0:	d051      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80078c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078cc:	d035      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80078ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078d2:	d82e      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80078d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80078d8:	d031      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80078da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80078de:	d828      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80078e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078e4:	d01a      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80078e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078ea:	d822      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d003      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80078f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f4:	d007      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80078f6:	e01c      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078f8:	4b7e      	ldr	r3, [pc, #504]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fc:	4a7d      	ldr	r2, [pc, #500]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007902:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007904:	e01c      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790a:	3308      	adds	r3, #8
 800790c:	2100      	movs	r1, #0
 800790e:	4618      	mov	r0, r3
 8007910:	f002 f876 	bl	8009a00 <RCCEx_PLL2_Config>
 8007914:	4603      	mov	r3, r0
 8007916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800791a:	e011      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800791c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007920:	3328      	adds	r3, #40	@ 0x28
 8007922:	2100      	movs	r1, #0
 8007924:	4618      	mov	r0, r3
 8007926:	f002 f91d 	bl	8009b64 <RCCEx_PLL3_Config>
 800792a:	4603      	mov	r3, r0
 800792c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007930:	e006      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007938:	e002      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800793a:	bf00      	nop
 800793c:	e000      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800793e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10a      	bne.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007948:	4b6a      	ldr	r3, [pc, #424]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800794a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800794c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007956:	4a67      	ldr	r2, [pc, #412]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007958:	430b      	orrs	r3, r1
 800795a:	6513      	str	r3, [r2, #80]	@ 0x50
 800795c:	e003      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007962:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007972:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007976:	2300      	movs	r3, #0
 8007978:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800797c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007980:	460b      	mov	r3, r1
 8007982:	4313      	orrs	r3, r2
 8007984:	d053      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800798c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007990:	d033      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007992:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007996:	d82c      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007998:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800799c:	d02f      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x502>
 800799e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079a2:	d826      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80079a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079a8:	d02b      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80079aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079ae:	d820      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80079b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079b4:	d012      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80079b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079ba:	d81a      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d022      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80079c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079c4:	d115      	bne.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ca:	3308      	adds	r3, #8
 80079cc:	2101      	movs	r1, #1
 80079ce:	4618      	mov	r0, r3
 80079d0:	f002 f816 	bl	8009a00 <RCCEx_PLL2_Config>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80079da:	e015      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e0:	3328      	adds	r3, #40	@ 0x28
 80079e2:	2101      	movs	r1, #1
 80079e4:	4618      	mov	r0, r3
 80079e6:	f002 f8bd 	bl	8009b64 <RCCEx_PLL3_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80079f0:	e00a      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079f8:	e006      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80079fa:	bf00      	nop
 80079fc:	e004      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80079fe:	bf00      	nop
 8007a00:	e002      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a02:	bf00      	nop
 8007a04:	e000      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a10:	4b38      	ldr	r3, [pc, #224]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a14:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a1e:	4a35      	ldr	r2, [pc, #212]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a20:	430b      	orrs	r3, r1
 8007a22:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a24:	e003      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a44:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	d058      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a5a:	d033      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a60:	d82c      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a66:	d02f      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a6c:	d826      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007a6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a72:	d02b      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007a74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a78:	d820      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a7e:	d012      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a84:	d81a      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d022      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007a8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a8e:	d115      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a94:	3308      	adds	r3, #8
 8007a96:	2101      	movs	r1, #1
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f001 ffb1 	bl	8009a00 <RCCEx_PLL2_Config>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007aa4:	e015      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aaa:	3328      	adds	r3, #40	@ 0x28
 8007aac:	2101      	movs	r1, #1
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f002 f858 	bl	8009b64 <RCCEx_PLL3_Config>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007aba:	e00a      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ac2:	e006      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ac4:	bf00      	nop
 8007ac6:	e004      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ac8:	bf00      	nop
 8007aca:	e002      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007acc:	bf00      	nop
 8007ace:	e000      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10e      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ada:	4b06      	ldr	r3, [pc, #24]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ade:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007aea:	4a02      	ldr	r2, [pc, #8]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007aec:	430b      	orrs	r3, r1
 8007aee:	6593      	str	r3, [r2, #88]	@ 0x58
 8007af0:	e006      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007af2:	bf00      	nop
 8007af4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007afc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b10:	2300      	movs	r3, #0
 8007b12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007b16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	d037      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b2a:	d00e      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b30:	d816      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d018      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007b36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b3a:	d111      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b3c:	4bc4      	ldr	r3, [pc, #784]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b40:	4ac3      	ldr	r2, [pc, #780]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b48:	e00f      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b4e:	3308      	adds	r3, #8
 8007b50:	2101      	movs	r1, #1
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 ff54 	bl	8009a00 <RCCEx_PLL2_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b5e:	e004      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b66:	e000      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b72:	4bb7      	ldr	r3, [pc, #732]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b76:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b80:	4ab3      	ldr	r2, [pc, #716]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b82:	430b      	orrs	r3, r1
 8007b84:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b86:	e003      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ba6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007baa:	460b      	mov	r3, r1
 8007bac:	4313      	orrs	r3, r2
 8007bae:	d039      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d81c      	bhi.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007bba:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007bfd 	.word	0x08007bfd
 8007bc4:	08007bd1 	.word	0x08007bd1
 8007bc8:	08007bdf 	.word	0x08007bdf
 8007bcc:	08007bfd 	.word	0x08007bfd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bd0:	4b9f      	ldr	r3, [pc, #636]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd4:	4a9e      	ldr	r2, [pc, #632]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007bdc:	e00f      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be2:	3308      	adds	r3, #8
 8007be4:	2102      	movs	r1, #2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f001 ff0a 	bl	8009a00 <RCCEx_PLL2_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007bf2:	e004      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007bfa:	e000      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c06:	4b92      	ldr	r3, [pc, #584]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c0a:	f023 0103 	bic.w	r1, r3, #3
 8007c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c14:	4a8e      	ldr	r2, [pc, #568]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c16:	430b      	orrs	r3, r1
 8007c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c1a:	e003      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007c30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c34:	2300      	movs	r3, #0
 8007c36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c3a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f000 8099 	beq.w	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c46:	4b83      	ldr	r3, [pc, #524]	@ (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a82      	ldr	r2, [pc, #520]	@ (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c52:	f7fb f851 	bl	8002cf8 <HAL_GetTick>
 8007c56:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c5a:	e00b      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c5c:	f7fb f84c 	bl	8002cf8 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b64      	cmp	r3, #100	@ 0x64
 8007c6a:	d903      	bls.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c72:	e005      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c74:	4b77      	ldr	r3, [pc, #476]	@ (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0ed      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d173      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c88:	4b71      	ldr	r3, [pc, #452]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c94:	4053      	eors	r3, r2
 8007c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d015      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ca6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007caa:	4b69      	ldr	r3, [pc, #420]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cae:	4a68      	ldr	r2, [pc, #416]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cb4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cb6:	4b66      	ldr	r3, [pc, #408]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cba:	4a65      	ldr	r2, [pc, #404]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cc0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007cc2:	4a63      	ldr	r2, [pc, #396]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cc8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cd6:	d118      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd8:	f7fb f80e 	bl	8002cf8 <HAL_GetTick>
 8007cdc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ce0:	e00d      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ce2:	f7fb f809 	bl	8002cf8 <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007cec:	1ad2      	subs	r2, r2, r3
 8007cee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d903      	bls.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007cfc:	e005      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cfe:	4b54      	ldr	r3, [pc, #336]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0eb      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007d0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d129      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d22:	d10e      	bne.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007d24:	4b4a      	ldr	r3, [pc, #296]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d34:	091a      	lsrs	r2, r3, #4
 8007d36:	4b48      	ldr	r3, [pc, #288]	@ (8007e58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	4a45      	ldr	r2, [pc, #276]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d3c:	430b      	orrs	r3, r1
 8007d3e:	6113      	str	r3, [r2, #16]
 8007d40:	e005      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007d42:	4b43      	ldr	r3, [pc, #268]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	4a42      	ldr	r2, [pc, #264]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007d4c:	6113      	str	r3, [r2, #16]
 8007d4e:	4b40      	ldr	r3, [pc, #256]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d50:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d5e:	4a3c      	ldr	r2, [pc, #240]	@ (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d60:	430b      	orrs	r3, r1
 8007d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d64:	e008      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007d6e:	e003      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d80:	f002 0301 	and.w	r3, r2, #1
 8007d84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007d92:	460b      	mov	r3, r1
 8007d94:	4313      	orrs	r3, r2
 8007d96:	f000 808f 	beq.w	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007da0:	2b28      	cmp	r3, #40	@ 0x28
 8007da2:	d871      	bhi.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007da4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007e91 	.word	0x08007e91
 8007db0:	08007e89 	.word	0x08007e89
 8007db4:	08007e89 	.word	0x08007e89
 8007db8:	08007e89 	.word	0x08007e89
 8007dbc:	08007e89 	.word	0x08007e89
 8007dc0:	08007e89 	.word	0x08007e89
 8007dc4:	08007e89 	.word	0x08007e89
 8007dc8:	08007e89 	.word	0x08007e89
 8007dcc:	08007e5d 	.word	0x08007e5d
 8007dd0:	08007e89 	.word	0x08007e89
 8007dd4:	08007e89 	.word	0x08007e89
 8007dd8:	08007e89 	.word	0x08007e89
 8007ddc:	08007e89 	.word	0x08007e89
 8007de0:	08007e89 	.word	0x08007e89
 8007de4:	08007e89 	.word	0x08007e89
 8007de8:	08007e89 	.word	0x08007e89
 8007dec:	08007e73 	.word	0x08007e73
 8007df0:	08007e89 	.word	0x08007e89
 8007df4:	08007e89 	.word	0x08007e89
 8007df8:	08007e89 	.word	0x08007e89
 8007dfc:	08007e89 	.word	0x08007e89
 8007e00:	08007e89 	.word	0x08007e89
 8007e04:	08007e89 	.word	0x08007e89
 8007e08:	08007e89 	.word	0x08007e89
 8007e0c:	08007e91 	.word	0x08007e91
 8007e10:	08007e89 	.word	0x08007e89
 8007e14:	08007e89 	.word	0x08007e89
 8007e18:	08007e89 	.word	0x08007e89
 8007e1c:	08007e89 	.word	0x08007e89
 8007e20:	08007e89 	.word	0x08007e89
 8007e24:	08007e89 	.word	0x08007e89
 8007e28:	08007e89 	.word	0x08007e89
 8007e2c:	08007e91 	.word	0x08007e91
 8007e30:	08007e89 	.word	0x08007e89
 8007e34:	08007e89 	.word	0x08007e89
 8007e38:	08007e89 	.word	0x08007e89
 8007e3c:	08007e89 	.word	0x08007e89
 8007e40:	08007e89 	.word	0x08007e89
 8007e44:	08007e89 	.word	0x08007e89
 8007e48:	08007e89 	.word	0x08007e89
 8007e4c:	08007e91 	.word	0x08007e91
 8007e50:	58024400 	.word	0x58024400
 8007e54:	58024800 	.word	0x58024800
 8007e58:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e60:	3308      	adds	r3, #8
 8007e62:	2101      	movs	r1, #1
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 fdcb 	bl	8009a00 <RCCEx_PLL2_Config>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007e70:	e00f      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e76:	3328      	adds	r3, #40	@ 0x28
 8007e78:	2101      	movs	r1, #1
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f001 fe72 	bl	8009b64 <RCCEx_PLL3_Config>
 8007e80:	4603      	mov	r3, r0
 8007e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007e86:	e004      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e8e:	e000      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007e9a:	4bbf      	ldr	r3, [pc, #764]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e9e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ea8:	4abb      	ldr	r2, [pc, #748]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	6553      	str	r3, [r2, #84]	@ 0x54
 8007eae:	e003      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	f002 0302 	and.w	r3, r2, #2
 8007ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ece:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	d041      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ede:	2b05      	cmp	r3, #5
 8007ee0:	d824      	bhi.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f35 	.word	0x08007f35
 8007eec:	08007f01 	.word	0x08007f01
 8007ef0:	08007f17 	.word	0x08007f17
 8007ef4:	08007f35 	.word	0x08007f35
 8007ef8:	08007f35 	.word	0x08007f35
 8007efc:	08007f35 	.word	0x08007f35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f04:	3308      	adds	r3, #8
 8007f06:	2101      	movs	r1, #1
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 fd79 	bl	8009a00 <RCCEx_PLL2_Config>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f14:	e00f      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f1a:	3328      	adds	r3, #40	@ 0x28
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 fe20 	bl	8009b64 <RCCEx_PLL3_Config>
 8007f24:	4603      	mov	r3, r0
 8007f26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f2a:	e004      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f32:	e000      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f3e:	4b96      	ldr	r3, [pc, #600]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f42:	f023 0107 	bic.w	r1, r3, #7
 8007f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f4c:	4a92      	ldr	r2, [pc, #584]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f4e:	430b      	orrs	r3, r1
 8007f50:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f52:	e003      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f002 0304 	and.w	r3, r2, #4
 8007f68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f72:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f76:	460b      	mov	r3, r1
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	d044      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f84:	2b05      	cmp	r3, #5
 8007f86:	d825      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007f88:	a201      	add	r2, pc, #4	@ (adr r2, 8007f90 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8e:	bf00      	nop
 8007f90:	08007fdd 	.word	0x08007fdd
 8007f94:	08007fa9 	.word	0x08007fa9
 8007f98:	08007fbf 	.word	0x08007fbf
 8007f9c:	08007fdd 	.word	0x08007fdd
 8007fa0:	08007fdd 	.word	0x08007fdd
 8007fa4:	08007fdd 	.word	0x08007fdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fac:	3308      	adds	r3, #8
 8007fae:	2101      	movs	r1, #1
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f001 fd25 	bl	8009a00 <RCCEx_PLL2_Config>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007fbc:	e00f      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc2:	3328      	adds	r3, #40	@ 0x28
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f001 fdcc 	bl	8009b64 <RCCEx_PLL3_Config>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007fd2:	e004      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fda:	e000      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10b      	bne.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007fe6:	4b6c      	ldr	r3, [pc, #432]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fea:	f023 0107 	bic.w	r1, r3, #7
 8007fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ff6:	4a68      	ldr	r2, [pc, #416]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ffc:	e003      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ffe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008002:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	f002 0320 	and.w	r3, r2, #32
 8008012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008016:	2300      	movs	r3, #0
 8008018:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800801c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008020:	460b      	mov	r3, r1
 8008022:	4313      	orrs	r3, r2
 8008024:	d055      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800802e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008032:	d033      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008038:	d82c      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800803a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800803e:	d02f      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008044:	d826      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008046:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800804a:	d02b      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800804c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008050:	d820      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008056:	d012      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800805c:	d81a      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d022      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008066:	d115      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806c:	3308      	adds	r3, #8
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f001 fcc5 	bl	8009a00 <RCCEx_PLL2_Config>
 8008076:	4603      	mov	r3, r0
 8008078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800807c:	e015      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800807e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008082:	3328      	adds	r3, #40	@ 0x28
 8008084:	2102      	movs	r1, #2
 8008086:	4618      	mov	r0, r3
 8008088:	f001 fd6c 	bl	8009b64 <RCCEx_PLL3_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008092:	e00a      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800809a:	e006      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800809c:	bf00      	nop
 800809e:	e004      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80080a0:	bf00      	nop
 80080a2:	e002      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80080a4:	bf00      	nop
 80080a6:	e000      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80080a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10b      	bne.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080b2:	4b39      	ldr	r3, [pc, #228]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80080b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80080ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080c2:	4a35      	ldr	r2, [pc, #212]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80080c4:	430b      	orrs	r3, r1
 80080c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80080c8:	e003      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80080d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080da:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80080de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80080e2:	2300      	movs	r3, #0
 80080e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80080e8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80080ec:	460b      	mov	r3, r1
 80080ee:	4313      	orrs	r3, r2
 80080f0:	d058      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80080f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80080fe:	d033      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008100:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008104:	d82c      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800810a:	d02f      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800810c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008110:	d826      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008112:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008116:	d02b      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008118:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800811c:	d820      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800811e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008122:	d012      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008128:	d81a      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d022      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800812e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008132:	d115      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008138:	3308      	adds	r3, #8
 800813a:	2100      	movs	r1, #0
 800813c:	4618      	mov	r0, r3
 800813e:	f001 fc5f 	bl	8009a00 <RCCEx_PLL2_Config>
 8008142:	4603      	mov	r3, r0
 8008144:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008148:	e015      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800814a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814e:	3328      	adds	r3, #40	@ 0x28
 8008150:	2102      	movs	r1, #2
 8008152:	4618      	mov	r0, r3
 8008154:	f001 fd06 	bl	8009b64 <RCCEx_PLL3_Config>
 8008158:	4603      	mov	r3, r0
 800815a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800815e:	e00a      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008166:	e006      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008168:	bf00      	nop
 800816a:	e004      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800816c:	bf00      	nop
 800816e:	e002      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008170:	bf00      	nop
 8008172:	e000      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008176:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10e      	bne.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800817e:	4b06      	ldr	r3, [pc, #24]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008182:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800818a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800818e:	4a02      	ldr	r2, [pc, #8]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008190:	430b      	orrs	r3, r1
 8008192:	6593      	str	r3, [r2, #88]	@ 0x58
 8008194:	e006      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008196:	bf00      	nop
 8008198:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80081a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80081b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081b4:	2300      	movs	r3, #0
 80081b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80081be:	460b      	mov	r3, r1
 80081c0:	4313      	orrs	r3, r2
 80081c2:	d055      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80081d0:	d033      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80081d2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80081d6:	d82c      	bhi.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80081d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081dc:	d02f      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80081de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081e2:	d826      	bhi.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80081e4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80081e8:	d02b      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80081ea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80081ee:	d820      	bhi.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80081f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081f4:	d012      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80081f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081fa:	d81a      	bhi.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d022      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008204:	d115      	bne.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800820a:	3308      	adds	r3, #8
 800820c:	2100      	movs	r1, #0
 800820e:	4618      	mov	r0, r3
 8008210:	f001 fbf6 	bl	8009a00 <RCCEx_PLL2_Config>
 8008214:	4603      	mov	r3, r0
 8008216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800821a:	e015      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800821c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008220:	3328      	adds	r3, #40	@ 0x28
 8008222:	2102      	movs	r1, #2
 8008224:	4618      	mov	r0, r3
 8008226:	f001 fc9d 	bl	8009b64 <RCCEx_PLL3_Config>
 800822a:	4603      	mov	r3, r0
 800822c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008230:	e00a      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008238:	e006      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800823a:	bf00      	nop
 800823c:	e004      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800823e:	bf00      	nop
 8008240:	e002      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008242:	bf00      	nop
 8008244:	e000      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008248:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10b      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008250:	4ba0      	ldr	r3, [pc, #640]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008254:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800825c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008260:	4a9c      	ldr	r2, [pc, #624]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008262:	430b      	orrs	r3, r1
 8008264:	6593      	str	r3, [r2, #88]	@ 0x58
 8008266:	e003      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008268:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800826c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	f002 0308 	and.w	r3, r2, #8
 800827c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008280:	2300      	movs	r3, #0
 8008282:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008286:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800828a:	460b      	mov	r3, r1
 800828c:	4313      	orrs	r3, r2
 800828e:	d01e      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800829c:	d10c      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800829e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a2:	3328      	adds	r3, #40	@ 0x28
 80082a4:	2102      	movs	r1, #2
 80082a6:	4618      	mov	r0, r3
 80082a8:	f001 fc5c 	bl	8009b64 <RCCEx_PLL3_Config>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80082b8:	4b86      	ldr	r3, [pc, #536]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082bc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c8:	4a82      	ldr	r2, [pc, #520]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082ca:	430b      	orrs	r3, r1
 80082cc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f002 0310 	and.w	r3, r2, #16
 80082da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082de:	2300      	movs	r3, #0
 80082e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082e4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80082e8:	460b      	mov	r3, r1
 80082ea:	4313      	orrs	r3, r2
 80082ec:	d01e      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80082ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082fa:	d10c      	bne.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008300:	3328      	adds	r3, #40	@ 0x28
 8008302:	2102      	movs	r1, #2
 8008304:	4618      	mov	r0, r3
 8008306:	f001 fc2d 	bl	8009b64 <RCCEx_PLL3_Config>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008316:	4b6f      	ldr	r3, [pc, #444]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800831a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800831e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008326:	4a6b      	ldr	r2, [pc, #428]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008328:	430b      	orrs	r3, r1
 800832a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800832c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008338:	67bb      	str	r3, [r7, #120]	@ 0x78
 800833a:	2300      	movs	r3, #0
 800833c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800833e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008342:	460b      	mov	r3, r1
 8008344:	4313      	orrs	r3, r2
 8008346:	d03e      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800834c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008350:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008354:	d022      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008356:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800835a:	d81b      	bhi.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008364:	d00b      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008366:	e015      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800836c:	3308      	adds	r3, #8
 800836e:	2100      	movs	r1, #0
 8008370:	4618      	mov	r0, r3
 8008372:	f001 fb45 	bl	8009a00 <RCCEx_PLL2_Config>
 8008376:	4603      	mov	r3, r0
 8008378:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800837c:	e00f      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800837e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008382:	3328      	adds	r3, #40	@ 0x28
 8008384:	2102      	movs	r1, #2
 8008386:	4618      	mov	r0, r3
 8008388:	f001 fbec 	bl	8009b64 <RCCEx_PLL3_Config>
 800838c:	4603      	mov	r3, r0
 800838e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008392:	e004      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800839a:	e000      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800839c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800839e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10b      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083a6:	4b4b      	ldr	r3, [pc, #300]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80083ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80083b6:	4a47      	ldr	r2, [pc, #284]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083b8:	430b      	orrs	r3, r1
 80083ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80083bc:	e003      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80083d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80083d4:	2300      	movs	r3, #0
 80083d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80083d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80083dc:	460b      	mov	r3, r1
 80083de:	4313      	orrs	r3, r2
 80083e0:	d03b      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80083e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083ee:	d01f      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80083f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083f4:	d818      	bhi.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80083f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083fa:	d003      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80083fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008400:	d007      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008402:	e011      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008404:	4b33      	ldr	r3, [pc, #204]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008408:	4a32      	ldr	r2, [pc, #200]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800840a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800840e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008410:	e00f      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008416:	3328      	adds	r3, #40	@ 0x28
 8008418:	2101      	movs	r1, #1
 800841a:	4618      	mov	r0, r3
 800841c:	f001 fba2 	bl	8009b64 <RCCEx_PLL3_Config>
 8008420:	4603      	mov	r3, r0
 8008422:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008426:	e004      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800842e:	e000      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008432:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10b      	bne.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800843a:	4b26      	ldr	r3, [pc, #152]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800843c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800843e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800844a:	4a22      	ldr	r2, [pc, #136]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800844c:	430b      	orrs	r3, r1
 800844e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008450:	e003      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008452:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008456:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800845a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008462:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008466:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008468:	2300      	movs	r3, #0
 800846a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800846c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008470:	460b      	mov	r3, r1
 8008472:	4313      	orrs	r3, r2
 8008474:	d034      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800847a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008484:	d007      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008486:	e011      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008488:	4b12      	ldr	r3, [pc, #72]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800848a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848c:	4a11      	ldr	r2, [pc, #68]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800848e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008494:	e00e      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800849a:	3308      	adds	r3, #8
 800849c:	2102      	movs	r1, #2
 800849e:	4618      	mov	r0, r3
 80084a0:	f001 faae 	bl	8009a00 <RCCEx_PLL2_Config>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80084aa:	e003      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80084b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10d      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80084bc:	4b05      	ldr	r3, [pc, #20]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ca:	4a02      	ldr	r2, [pc, #8]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084cc:	430b      	orrs	r3, r1
 80084ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80084d0:	e006      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80084d2:	bf00      	nop
 80084d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80084ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80084ee:	2300      	movs	r3, #0
 80084f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80084f2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80084f6:	460b      	mov	r3, r1
 80084f8:	4313      	orrs	r3, r2
 80084fa:	d00c      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80084fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008500:	3328      	adds	r3, #40	@ 0x28
 8008502:	2102      	movs	r1, #2
 8008504:	4618      	mov	r0, r3
 8008506:	f001 fb2d 	bl	8009b64 <RCCEx_PLL3_Config>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008522:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008524:	2300      	movs	r3, #0
 8008526:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008528:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800852c:	460b      	mov	r3, r1
 800852e:	4313      	orrs	r3, r2
 8008530:	d036      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008536:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800853c:	d018      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800853e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008542:	d811      	bhi.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008548:	d014      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800854a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800854e:	d80b      	bhi.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008550:	2b00      	cmp	r3, #0
 8008552:	d011      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008558:	d106      	bne.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800855a:	4bb7      	ldr	r3, [pc, #732]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800855c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855e:	4ab6      	ldr	r2, [pc, #728]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008566:	e008      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800856e:	e004      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008570:	bf00      	nop
 8008572:	e002      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008574:	bf00      	nop
 8008576:	e000      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800857a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10a      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008582:	4bad      	ldr	r3, [pc, #692]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008586:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800858a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008590:	4aa9      	ldr	r2, [pc, #676]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008592:	430b      	orrs	r3, r1
 8008594:	6553      	str	r3, [r2, #84]	@ 0x54
 8008596:	e003      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800859c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80085ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80085ae:	2300      	movs	r3, #0
 80085b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80085b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80085b6:	460b      	mov	r3, r1
 80085b8:	4313      	orrs	r3, r2
 80085ba:	d009      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085bc:	4b9e      	ldr	r3, [pc, #632]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80085c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ca:	4a9b      	ldr	r2, [pc, #620]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085cc:	430b      	orrs	r3, r1
 80085ce:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80085dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085de:	2300      	movs	r3, #0
 80085e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80085e6:	460b      	mov	r3, r1
 80085e8:	4313      	orrs	r3, r2
 80085ea:	d009      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80085ec:	4b92      	ldr	r3, [pc, #584]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085f0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80085f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085fa:	4a8f      	ldr	r2, [pc, #572]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085fc:	430b      	orrs	r3, r1
 80085fe:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800860c:	643b      	str	r3, [r7, #64]	@ 0x40
 800860e:	2300      	movs	r3, #0
 8008610:	647b      	str	r3, [r7, #68]	@ 0x44
 8008612:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008616:	460b      	mov	r3, r1
 8008618:	4313      	orrs	r3, r2
 800861a:	d00e      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800861c:	4b86      	ldr	r3, [pc, #536]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	4a85      	ldr	r2, [pc, #532]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008622:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008626:	6113      	str	r3, [r2, #16]
 8008628:	4b83      	ldr	r3, [pc, #524]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800862a:	6919      	ldr	r1, [r3, #16]
 800862c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008630:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008634:	4a80      	ldr	r2, [pc, #512]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008636:	430b      	orrs	r3, r1
 8008638:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800863a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008646:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008648:	2300      	movs	r3, #0
 800864a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800864c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008650:	460b      	mov	r3, r1
 8008652:	4313      	orrs	r3, r2
 8008654:	d009      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008656:	4b78      	ldr	r3, [pc, #480]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800865a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800865e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008664:	4a74      	ldr	r2, [pc, #464]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008666:	430b      	orrs	r3, r1
 8008668:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800866a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008676:	633b      	str	r3, [r7, #48]	@ 0x30
 8008678:	2300      	movs	r3, #0
 800867a:	637b      	str	r3, [r7, #52]	@ 0x34
 800867c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008680:	460b      	mov	r3, r1
 8008682:	4313      	orrs	r3, r2
 8008684:	d00a      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008686:	4b6c      	ldr	r3, [pc, #432]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800868a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800868e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008696:	4a68      	ldr	r2, [pc, #416]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008698:	430b      	orrs	r3, r1
 800869a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800869c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a4:	2100      	movs	r1, #0
 80086a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086ae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80086b2:	460b      	mov	r3, r1
 80086b4:	4313      	orrs	r3, r2
 80086b6:	d011      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086bc:	3308      	adds	r3, #8
 80086be:	2100      	movs	r1, #0
 80086c0:	4618      	mov	r0, r3
 80086c2:	f001 f99d 	bl	8009a00 <RCCEx_PLL2_Config>
 80086c6:	4603      	mov	r3, r0
 80086c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80086cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d003      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80086dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e4:	2100      	movs	r1, #0
 80086e6:	6239      	str	r1, [r7, #32]
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80086ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80086f2:	460b      	mov	r3, r1
 80086f4:	4313      	orrs	r3, r2
 80086f6:	d011      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086fc:	3308      	adds	r3, #8
 80086fe:	2101      	movs	r1, #1
 8008700:	4618      	mov	r0, r3
 8008702:	f001 f97d 	bl	8009a00 <RCCEx_PLL2_Config>
 8008706:	4603      	mov	r3, r0
 8008708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800870c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008710:	2b00      	cmp	r3, #0
 8008712:	d003      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008714:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008718:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800871c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	2100      	movs	r1, #0
 8008726:	61b9      	str	r1, [r7, #24]
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	61fb      	str	r3, [r7, #28]
 800872e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008732:	460b      	mov	r3, r1
 8008734:	4313      	orrs	r3, r2
 8008736:	d011      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800873c:	3308      	adds	r3, #8
 800873e:	2102      	movs	r1, #2
 8008740:	4618      	mov	r0, r3
 8008742:	f001 f95d 	bl	8009a00 <RCCEx_PLL2_Config>
 8008746:	4603      	mov	r3, r0
 8008748:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800874c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008754:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008758:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800875c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008764:	2100      	movs	r1, #0
 8008766:	6139      	str	r1, [r7, #16]
 8008768:	f003 0308 	and.w	r3, r3, #8
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008772:	460b      	mov	r3, r1
 8008774:	4313      	orrs	r3, r2
 8008776:	d011      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800877c:	3328      	adds	r3, #40	@ 0x28
 800877e:	2100      	movs	r1, #0
 8008780:	4618      	mov	r0, r3
 8008782:	f001 f9ef 	bl	8009b64 <RCCEx_PLL3_Config>
 8008786:	4603      	mov	r3, r0
 8008788:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800878c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008790:	2b00      	cmp	r3, #0
 8008792:	d003      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008794:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008798:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800879c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	2100      	movs	r1, #0
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	f003 0310 	and.w	r3, r3, #16
 80087ac:	60fb      	str	r3, [r7, #12]
 80087ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80087b2:	460b      	mov	r3, r1
 80087b4:	4313      	orrs	r3, r2
 80087b6:	d011      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087bc:	3328      	adds	r3, #40	@ 0x28
 80087be:	2101      	movs	r1, #1
 80087c0:	4618      	mov	r0, r3
 80087c2:	f001 f9cf 	bl	8009b64 <RCCEx_PLL3_Config>
 80087c6:	4603      	mov	r3, r0
 80087c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80087cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80087dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e4:	2100      	movs	r1, #0
 80087e6:	6039      	str	r1, [r7, #0]
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	607b      	str	r3, [r7, #4]
 80087ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80087f2:	460b      	mov	r3, r1
 80087f4:	4313      	orrs	r3, r2
 80087f6:	d011      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087fc:	3328      	adds	r3, #40	@ 0x28
 80087fe:	2102      	movs	r1, #2
 8008800:	4618      	mov	r0, r3
 8008802:	f001 f9af 	bl	8009b64 <RCCEx_PLL3_Config>
 8008806:	4603      	mov	r3, r0
 8008808:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800880c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008814:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008818:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800881c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	e000      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
}
 800882a:	4618      	mov	r0, r3
 800882c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008830:	46bd      	mov	sp, r7
 8008832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008836:	bf00      	nop
 8008838:	58024400 	.word	0x58024400

0800883c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b090      	sub	sp, #64	@ 0x40
 8008840:	af00      	add	r7, sp, #0
 8008842:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800884a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800884e:	430b      	orrs	r3, r1
 8008850:	f040 8094 	bne.w	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008854:	4b9b      	ldr	r3, [pc, #620]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008858:	f003 0307 	and.w	r3, r3, #7
 800885c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	2b04      	cmp	r3, #4
 8008862:	f200 8087 	bhi.w	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008866:	a201      	add	r2, pc, #4	@ (adr r2, 800886c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	08008881 	.word	0x08008881
 8008870:	080088a9 	.word	0x080088a9
 8008874:	080088d1 	.word	0x080088d1
 8008878:	0800896d 	.word	0x0800896d
 800887c:	080088f9 	.word	0x080088f9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008880:	4b90      	ldr	r3, [pc, #576]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008888:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800888c:	d108      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800888e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008892:	4618      	mov	r0, r3
 8008894:	f000 ff62 	bl	800975c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800889c:	f000 bc93 	b.w	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088a4:	f000 bc8f 	b.w	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088a8:	4b86      	ldr	r3, [pc, #536]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088b4:	d108      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088b6:	f107 0318 	add.w	r3, r7, #24
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 fca6 	bl	800920c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088c4:	f000 bc7f 	b.w	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088cc:	f000 bc7b 	b.w	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088d0:	4b7c      	ldr	r3, [pc, #496]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088dc:	d108      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088de:	f107 030c 	add.w	r3, r7, #12
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fde6 	bl	80094b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ec:	f000 bc6b 	b.w	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f4:	f000 bc67 	b.w	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088f8:	4b72      	ldr	r3, [pc, #456]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008900:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008902:	4b70      	ldr	r3, [pc, #448]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0304 	and.w	r3, r3, #4
 800890a:	2b04      	cmp	r3, #4
 800890c:	d10c      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800890e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008910:	2b00      	cmp	r3, #0
 8008912:	d109      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008914:	4b6b      	ldr	r3, [pc, #428]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	08db      	lsrs	r3, r3, #3
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	4a6a      	ldr	r2, [pc, #424]	@ (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008920:	fa22 f303 	lsr.w	r3, r2, r3
 8008924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008926:	e01f      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008928:	4b66      	ldr	r3, [pc, #408]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008934:	d106      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800893c:	d102      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800893e:	4b63      	ldr	r3, [pc, #396]	@ (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008942:	e011      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008944:	4b5f      	ldr	r3, [pc, #380]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800894c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008950:	d106      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008958:	d102      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800895a:	4b5d      	ldr	r3, [pc, #372]	@ (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800895c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800895e:	e003      	b.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008964:	f000 bc2f 	b.w	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008968:	f000 bc2d 	b.w	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800896c:	4b59      	ldr	r3, [pc, #356]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800896e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008970:	f000 bc29 	b.w	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008974:	2300      	movs	r3, #0
 8008976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008978:	f000 bc25 	b.w	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800897c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008980:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008984:	430b      	orrs	r3, r1
 8008986:	f040 80a7 	bne.w	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800898a:	4b4e      	ldr	r3, [pc, #312]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800898c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800898e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008992:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800899a:	d054      	beq.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800899c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80089a2:	f200 808b 	bhi.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80089a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80089ac:	f000 8083 	beq.w	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80089b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80089b6:	f200 8081 	bhi.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089c0:	d02f      	beq.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80089c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089c8:	d878      	bhi.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d004      	beq.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089d6:	d012      	beq.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80089d8:	e070      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089da:	4b3a      	ldr	r3, [pc, #232]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089e6:	d107      	bne.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 feb5 	bl	800975c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089f6:	e3e6      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089fc:	e3e3      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089fe:	4b31      	ldr	r3, [pc, #196]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a0a:	d107      	bne.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a0c:	f107 0318 	add.w	r3, r7, #24
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fbfb 	bl	800920c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a1a:	e3d4      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a20:	e3d1      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a22:	4b28      	ldr	r3, [pc, #160]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a2e:	d107      	bne.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a30:	f107 030c 	add.w	r3, r7, #12
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 fd3d 	bl	80094b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a3e:	e3c2      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a44:	e3bf      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a46:	4b1f      	ldr	r3, [pc, #124]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a4e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a50:	4b1c      	ldr	r3, [pc, #112]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0304 	and.w	r3, r3, #4
 8008a58:	2b04      	cmp	r3, #4
 8008a5a:	d10c      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d109      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a62:	4b18      	ldr	r3, [pc, #96]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	08db      	lsrs	r3, r3, #3
 8008a68:	f003 0303 	and.w	r3, r3, #3
 8008a6c:	4a16      	ldr	r2, [pc, #88]	@ (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a74:	e01e      	b.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a76:	4b13      	ldr	r3, [pc, #76]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a82:	d106      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a8a:	d102      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a90:	e010      	b.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a92:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a9e:	d106      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aa6:	d102      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008aa8:	4b09      	ldr	r3, [pc, #36]	@ (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aac:	e002      	b.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ab2:	e388      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ab4:	e387      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ab6:	4b07      	ldr	r3, [pc, #28]	@ (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aba:	e384      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac0:	e381      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ac2:	bf00      	nop
 8008ac4:	58024400 	.word	0x58024400
 8008ac8:	03d09000 	.word	0x03d09000
 8008acc:	003d0900 	.word	0x003d0900
 8008ad0:	016e3600 	.word	0x016e3600
 8008ad4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008adc:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008ae0:	430b      	orrs	r3, r1
 8008ae2:	f040 809c 	bne.w	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008ae6:	4b9e      	ldr	r3, [pc, #632]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aea:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008aee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008af6:	d054      	beq.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008afe:	f200 808b 	bhi.w	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b08:	f000 8083 	beq.w	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b12:	f200 8081 	bhi.w	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b1c:	d02f      	beq.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b24:	d878      	bhi.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d004      	beq.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b32:	d012      	beq.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008b34:	e070      	b.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b36:	4b8a      	ldr	r3, [pc, #552]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b42:	d107      	bne.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 fe07 	bl	800975c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b52:	e338      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b54:	2300      	movs	r3, #0
 8008b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b58:	e335      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b5a:	4b81      	ldr	r3, [pc, #516]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b66:	d107      	bne.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b68:	f107 0318 	add.w	r3, r7, #24
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 fb4d 	bl	800920c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b76:	e326      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b7c:	e323      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b7e:	4b78      	ldr	r3, [pc, #480]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b8a:	d107      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b8c:	f107 030c 	add.w	r3, r7, #12
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 fc8f 	bl	80094b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b9a:	e314      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba0:	e311      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ba6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008baa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bac:	4b6c      	ldr	r3, [pc, #432]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	d10c      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d109      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bbe:	4b68      	ldr	r3, [pc, #416]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	08db      	lsrs	r3, r3, #3
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	4a66      	ldr	r2, [pc, #408]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008bca:	fa22 f303 	lsr.w	r3, r2, r3
 8008bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bd0:	e01e      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bd2:	4b63      	ldr	r3, [pc, #396]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bde:	d106      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008be6:	d102      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008be8:	4b5f      	ldr	r3, [pc, #380]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bec:	e010      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bee:	4b5c      	ldr	r3, [pc, #368]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bfa:	d106      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c02:	d102      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c04:	4b59      	ldr	r3, [pc, #356]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c08:	e002      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c0e:	e2da      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c10:	e2d9      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c12:	4b57      	ldr	r3, [pc, #348]	@ (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c16:	e2d6      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c1c:	e2d3      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c22:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008c26:	430b      	orrs	r3, r1
 8008c28:	f040 80a7 	bne.w	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c30:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008c34:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c3c:	d055      	beq.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c44:	f200 8096 	bhi.w	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c4e:	f000 8084 	beq.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c58:	f200 808c 	bhi.w	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c62:	d030      	beq.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c6a:	f200 8083 	bhi.w	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d004      	beq.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c7a:	d012      	beq.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008c7c:	e07a      	b.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c7e:	4b38      	ldr	r3, [pc, #224]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c8a:	d107      	bne.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fd63 	bl	800975c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c9a:	e294      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca0:	e291      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008caa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cae:	d107      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cb0:	f107 0318 	add.w	r3, r7, #24
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 faa9 	bl	800920c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cbe:	e282      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cc4:	e27f      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cc6:	4b26      	ldr	r3, [pc, #152]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cd2:	d107      	bne.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cd4:	f107 030c 	add.w	r3, r7, #12
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 fbeb 	bl	80094b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ce2:	e270      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce8:	e26d      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cea:	4b1d      	ldr	r3, [pc, #116]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008cf2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0304 	and.w	r3, r3, #4
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d10c      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d109      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d06:	4b16      	ldr	r3, [pc, #88]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	08db      	lsrs	r3, r3, #3
 8008d0c:	f003 0303 	and.w	r3, r3, #3
 8008d10:	4a14      	ldr	r2, [pc, #80]	@ (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008d12:	fa22 f303 	lsr.w	r3, r2, r3
 8008d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d18:	e01e      	b.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d1a:	4b11      	ldr	r3, [pc, #68]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d26:	d106      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d2e:	d102      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d30:	4b0d      	ldr	r3, [pc, #52]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d34:	e010      	b.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d36:	4b0a      	ldr	r3, [pc, #40]	@ (8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d42:	d106      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d4a:	d102      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d4c:	4b07      	ldr	r3, [pc, #28]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d50:	e002      	b.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d56:	e236      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d58:	e235      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d5a:	4b05      	ldr	r3, [pc, #20]	@ (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d5e:	e232      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d60:	58024400 	.word	0x58024400
 8008d64:	03d09000 	.word	0x03d09000
 8008d68:	003d0900 	.word	0x003d0900
 8008d6c:	016e3600 	.word	0x016e3600
 8008d70:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d78:	e225      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d7e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008d82:	430b      	orrs	r3, r1
 8008d84:	f040 8085 	bne.w	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008d88:	4b9c      	ldr	r3, [pc, #624]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d8c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008d90:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d98:	d06b      	beq.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008da0:	d874      	bhi.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008da8:	d056      	beq.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008db0:	d86c      	bhi.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008db8:	d03b      	beq.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008dc0:	d864      	bhi.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dc8:	d021      	beq.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dd0:	d85c      	bhi.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d004      	beq.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dde:	d004      	beq.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008de0:	e054      	b.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008de2:	f7fe fb5f 	bl	80074a4 <HAL_RCC_GetPCLK1Freq>
 8008de6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008de8:	e1ed      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dea:	4b84      	ldr	r3, [pc, #528]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008df2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008df6:	d107      	bne.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008df8:	f107 0318 	add.w	r3, r7, #24
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 fa05 	bl	800920c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e06:	e1de      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e0c:	e1db      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e0e:	4b7b      	ldr	r3, [pc, #492]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e1a:	d107      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e1c:	f107 030c 	add.w	r3, r7, #12
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fb47 	bl	80094b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e2a:	e1cc      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e30:	e1c9      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e32:	4b72      	ldr	r3, [pc, #456]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0304 	and.w	r3, r3, #4
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d109      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e3e:	4b6f      	ldr	r3, [pc, #444]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	08db      	lsrs	r3, r3, #3
 8008e44:	f003 0303 	and.w	r3, r3, #3
 8008e48:	4a6d      	ldr	r2, [pc, #436]	@ (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e50:	e1b9      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e56:	e1b6      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e58:	4b68      	ldr	r3, [pc, #416]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e64:	d102      	bne.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008e66:	4b67      	ldr	r3, [pc, #412]	@ (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e6a:	e1ac      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e70:	e1a9      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e72:	4b62      	ldr	r3, [pc, #392]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e7e:	d102      	bne.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008e80:	4b61      	ldr	r3, [pc, #388]	@ (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e84:	e19f      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e8a:	e19c      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e90:	e199      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e96:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008e9a:	430b      	orrs	r3, r1
 8008e9c:	d173      	bne.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008e9e:	4b57      	ldr	r3, [pc, #348]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008ea6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eae:	d02f      	beq.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eb6:	d863      	bhi.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ec4:	d012      	beq.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008ec6:	e05b      	b.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ec8:	4b4c      	ldr	r3, [pc, #304]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ed0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ed4:	d107      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ed6:	f107 0318 	add.w	r3, r7, #24
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 f996 	bl	800920c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ee4:	e16f      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eea:	e16c      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008eec:	4b43      	ldr	r3, [pc, #268]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ef8:	d107      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008efa:	f107 030c 	add.w	r3, r7, #12
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fad8 	bl	80094b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f08:	e15d      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f0e:	e15a      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f10:	4b3a      	ldr	r3, [pc, #232]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f18:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f1a:	4b38      	ldr	r3, [pc, #224]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0304 	and.w	r3, r3, #4
 8008f22:	2b04      	cmp	r3, #4
 8008f24:	d10c      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d109      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f2c:	4b33      	ldr	r3, [pc, #204]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	08db      	lsrs	r3, r3, #3
 8008f32:	f003 0303 	and.w	r3, r3, #3
 8008f36:	4a32      	ldr	r2, [pc, #200]	@ (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008f38:	fa22 f303 	lsr.w	r3, r2, r3
 8008f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f3e:	e01e      	b.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f40:	4b2e      	ldr	r3, [pc, #184]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f4c:	d106      	bne.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f54:	d102      	bne.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f56:	4b2b      	ldr	r3, [pc, #172]	@ (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f5a:	e010      	b.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f5c:	4b27      	ldr	r3, [pc, #156]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f68:	d106      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f70:	d102      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f72:	4b25      	ldr	r3, [pc, #148]	@ (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f76:	e002      	b.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f7c:	e123      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f7e:	e122      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f84:	e11f      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f8a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008f8e:	430b      	orrs	r3, r1
 8008f90:	d13c      	bne.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008f92:	4b1a      	ldr	r3, [pc, #104]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f9a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d004      	beq.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fa8:	d012      	beq.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008faa:	e023      	b.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fac:	4b13      	ldr	r3, [pc, #76]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fb8:	d107      	bne.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fbcc 	bl	800975c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fc8:	e0fd      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fce:	e0fa      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fdc:	d107      	bne.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fde:	f107 0318 	add.w	r3, r7, #24
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 f912 	bl	800920c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008fe8:	6a3b      	ldr	r3, [r7, #32]
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fec:	e0eb      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff2:	e0e8      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff8:	e0e5      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ffa:	bf00      	nop
 8008ffc:	58024400 	.word	0x58024400
 8009000:	03d09000 	.word	0x03d09000
 8009004:	003d0900 	.word	0x003d0900
 8009008:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800900c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009010:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009014:	430b      	orrs	r3, r1
 8009016:	f040 8085 	bne.w	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800901a:	4b6d      	ldr	r3, [pc, #436]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800901c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800901e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009022:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800902a:	d06b      	beq.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800902c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009032:	d874      	bhi.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800903a:	d056      	beq.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800903c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009042:	d86c      	bhi.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009046:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800904a:	d03b      	beq.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800904c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009052:	d864      	bhi.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800905a:	d021      	beq.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800905c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009062:	d85c      	bhi.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009066:	2b00      	cmp	r3, #0
 8009068:	d004      	beq.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800906a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009070:	d004      	beq.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009072:	e054      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009074:	f000 f8b4 	bl	80091e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009078:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800907a:	e0a4      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800907c:	4b54      	ldr	r3, [pc, #336]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009084:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009088:	d107      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800908a:	f107 0318 	add.w	r3, r7, #24
 800908e:	4618      	mov	r0, r3
 8009090:	f000 f8bc 	bl	800920c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009098:	e095      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800909e:	e092      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090a0:	4b4b      	ldr	r3, [pc, #300]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090ac:	d107      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ae:	f107 030c 	add.w	r3, r7, #12
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 f9fe 	bl	80094b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090bc:	e083      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090c2:	e080      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090c4:	4b42      	ldr	r3, [pc, #264]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b04      	cmp	r3, #4
 80090ce:	d109      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090d0:	4b3f      	ldr	r3, [pc, #252]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	08db      	lsrs	r3, r3, #3
 80090d6:	f003 0303 	and.w	r3, r3, #3
 80090da:	4a3e      	ldr	r2, [pc, #248]	@ (80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80090dc:	fa22 f303 	lsr.w	r3, r2, r3
 80090e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090e2:	e070      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090e8:	e06d      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80090ea:	4b39      	ldr	r3, [pc, #228]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090f6:	d102      	bne.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80090f8:	4b37      	ldr	r3, [pc, #220]	@ (80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80090fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090fc:	e063      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090fe:	2300      	movs	r3, #0
 8009100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009102:	e060      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009104:	4b32      	ldr	r3, [pc, #200]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800910c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009110:	d102      	bne.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8009112:	4b32      	ldr	r3, [pc, #200]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009116:	e056      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009118:	2300      	movs	r3, #0
 800911a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800911c:	e053      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009122:	e050      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009128:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800912c:	430b      	orrs	r3, r1
 800912e:	d148      	bne.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009130:	4b27      	ldr	r3, [pc, #156]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009134:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009138:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800913a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009140:	d02a      	beq.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009148:	d838      	bhi.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800914a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800914c:	2b00      	cmp	r3, #0
 800914e:	d004      	beq.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009152:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009156:	d00d      	beq.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009158:	e030      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800915a:	4b1d      	ldr	r3, [pc, #116]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009166:	d102      	bne.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8009168:	4b1c      	ldr	r3, [pc, #112]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800916a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800916c:	e02b      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800916e:	2300      	movs	r3, #0
 8009170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009172:	e028      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009174:	4b16      	ldr	r3, [pc, #88]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800917c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009180:	d107      	bne.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009186:	4618      	mov	r0, r3
 8009188:	f000 fae8 	bl	800975c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800918c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800918e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009190:	e019      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009196:	e016      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009198:	4b0d      	ldr	r3, [pc, #52]	@ (80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091a4:	d107      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091a6:	f107 0318 	add.w	r3, r7, #24
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 f82e 	bl	800920c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091b4:	e007      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ba:	e004      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c0:	e001      	b.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80091c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3740      	adds	r7, #64	@ 0x40
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	58024400 	.word	0x58024400
 80091d4:	03d09000 	.word	0x03d09000
 80091d8:	003d0900 	.word	0x003d0900
 80091dc:	016e3600 	.word	0x016e3600

080091e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80091e4:	f7fe f92e 	bl	8007444 <HAL_RCC_GetHCLKFreq>
 80091e8:	4602      	mov	r2, r0
 80091ea:	4b06      	ldr	r3, [pc, #24]	@ (8009204 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	091b      	lsrs	r3, r3, #4
 80091f0:	f003 0307 	and.w	r3, r3, #7
 80091f4:	4904      	ldr	r1, [pc, #16]	@ (8009208 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80091f6:	5ccb      	ldrb	r3, [r1, r3]
 80091f8:	f003 031f 	and.w	r3, r3, #31
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009200:	4618      	mov	r0, r3
 8009202:	bd80      	pop	{r7, pc}
 8009204:	58024400 	.word	0x58024400
 8009208:	0800ccbc 	.word	0x0800ccbc

0800920c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800920c:	b480      	push	{r7}
 800920e:	b089      	sub	sp, #36	@ 0x24
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009214:	4ba1      	ldr	r3, [pc, #644]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009218:	f003 0303 	and.w	r3, r3, #3
 800921c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800921e:	4b9f      	ldr	r3, [pc, #636]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009222:	0b1b      	lsrs	r3, r3, #12
 8009224:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009228:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800922a:	4b9c      	ldr	r3, [pc, #624]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800922c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922e:	091b      	lsrs	r3, r3, #4
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009236:	4b99      	ldr	r3, [pc, #612]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800923a:	08db      	lsrs	r3, r3, #3
 800923c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	fb02 f303 	mul.w	r3, r2, r3
 8009246:	ee07 3a90 	vmov	s15, r3
 800924a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800924e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 8111 	beq.w	800947c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	2b02      	cmp	r3, #2
 800925e:	f000 8083 	beq.w	8009368 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	2b02      	cmp	r3, #2
 8009266:	f200 80a1 	bhi.w	80093ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d003      	beq.n	8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d056      	beq.n	8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009276:	e099      	b.n	80093ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009278:	4b88      	ldr	r3, [pc, #544]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0320 	and.w	r3, r3, #32
 8009280:	2b00      	cmp	r3, #0
 8009282:	d02d      	beq.n	80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009284:	4b85      	ldr	r3, [pc, #532]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	08db      	lsrs	r3, r3, #3
 800928a:	f003 0303 	and.w	r3, r3, #3
 800928e:	4a84      	ldr	r2, [pc, #528]	@ (80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009290:	fa22 f303 	lsr.w	r3, r2, r3
 8009294:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	ee07 3a90 	vmov	s15, r3
 800929c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	ee07 3a90 	vmov	s15, r3
 80092a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ae:	4b7b      	ldr	r3, [pc, #492]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b6:	ee07 3a90 	vmov	s15, r3
 80092ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092be:	ed97 6a03 	vldr	s12, [r7, #12]
 80092c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80092de:	e087      	b.n	80093f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80092ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f2:	4b6a      	ldr	r3, [pc, #424]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fa:	ee07 3a90 	vmov	s15, r3
 80092fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009302:	ed97 6a03 	vldr	s12, [r7, #12]
 8009306:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800930a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800930e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800931a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800931e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009322:	e065      	b.n	80093f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800932e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80094ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009336:	4b59      	ldr	r3, [pc, #356]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009346:	ed97 6a03 	vldr	s12, [r7, #12]
 800934a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800934e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800935a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800935e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009366:	e043      	b.n	80093f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009372:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80094b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800937a:	4b48      	ldr	r3, [pc, #288]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800937c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009382:	ee07 3a90 	vmov	s15, r3
 8009386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938a:	ed97 6a03 	vldr	s12, [r7, #12]
 800938e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800939a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800939e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093aa:	e021      	b.n	80093f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	ee07 3a90 	vmov	s15, r3
 80093b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80094ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093be:	4b37      	ldr	r3, [pc, #220]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c6:	ee07 3a90 	vmov	s15, r3
 80093ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80093d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80093f0:	4b2a      	ldr	r3, [pc, #168]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f4:	0a5b      	lsrs	r3, r3, #9
 80093f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800940a:	edd7 6a07 	vldr	s13, [r7, #28]
 800940e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009416:	ee17 2a90 	vmov	r2, s15
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800941e:	4b1f      	ldr	r3, [pc, #124]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009422:	0c1b      	lsrs	r3, r3, #16
 8009424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009428:	ee07 3a90 	vmov	s15, r3
 800942c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009430:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009434:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009438:	edd7 6a07 	vldr	s13, [r7, #28]
 800943c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009444:	ee17 2a90 	vmov	r2, s15
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800944c:	4b13      	ldr	r3, [pc, #76]	@ (800949c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800944e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009450:	0e1b      	lsrs	r3, r3, #24
 8009452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009462:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009466:	edd7 6a07 	vldr	s13, [r7, #28]
 800946a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800946e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009472:	ee17 2a90 	vmov	r2, s15
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800947a:	e008      	b.n	800948e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	609a      	str	r2, [r3, #8]
}
 800948e:	bf00      	nop
 8009490:	3724      	adds	r7, #36	@ 0x24
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	58024400 	.word	0x58024400
 80094a0:	03d09000 	.word	0x03d09000
 80094a4:	46000000 	.word	0x46000000
 80094a8:	4c742400 	.word	0x4c742400
 80094ac:	4a742400 	.word	0x4a742400
 80094b0:	4bb71b00 	.word	0x4bb71b00

080094b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b089      	sub	sp, #36	@ 0x24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094bc:	4ba1      	ldr	r3, [pc, #644]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c0:	f003 0303 	and.w	r3, r3, #3
 80094c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80094c6:	4b9f      	ldr	r3, [pc, #636]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ca:	0d1b      	lsrs	r3, r3, #20
 80094cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094d2:	4b9c      	ldr	r3, [pc, #624]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d6:	0a1b      	lsrs	r3, r3, #8
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80094de:	4b99      	ldr	r3, [pc, #612]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094e2:	08db      	lsrs	r3, r3, #3
 80094e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	fb02 f303 	mul.w	r3, r2, r3
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 8111 	beq.w	8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	2b02      	cmp	r3, #2
 8009506:	f000 8083 	beq.w	8009610 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	2b02      	cmp	r3, #2
 800950e:	f200 80a1 	bhi.w	8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d056      	beq.n	80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800951e:	e099      	b.n	8009654 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009520:	4b88      	ldr	r3, [pc, #544]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0320 	and.w	r3, r3, #32
 8009528:	2b00      	cmp	r3, #0
 800952a:	d02d      	beq.n	8009588 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800952c:	4b85      	ldr	r3, [pc, #532]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	08db      	lsrs	r3, r3, #3
 8009532:	f003 0303 	and.w	r3, r3, #3
 8009536:	4a84      	ldr	r2, [pc, #528]	@ (8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009538:	fa22 f303 	lsr.w	r3, r2, r3
 800953c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	ee07 3a90 	vmov	s15, r3
 8009544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	ee07 3a90 	vmov	s15, r3
 800954e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009556:	4b7b      	ldr	r3, [pc, #492]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800955a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800955e:	ee07 3a90 	vmov	s15, r3
 8009562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009566:	ed97 6a03 	vldr	s12, [r7, #12]
 800956a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800974c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800956e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800957a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800957e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009582:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009586:	e087      	b.n	8009698 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	ee07 3a90 	vmov	s15, r3
 800958e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009592:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009750 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800959a:	4b6a      	ldr	r3, [pc, #424]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800959c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800959e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a2:	ee07 3a90 	vmov	s15, r3
 80095a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800974c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095ca:	e065      	b.n	8009698 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009754 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095de:	4b59      	ldr	r3, [pc, #356]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80095f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800974c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800960a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800960e:	e043      	b.n	8009698 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	ee07 3a90 	vmov	s15, r3
 8009616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009758 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800961e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009622:	4b48      	ldr	r3, [pc, #288]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009632:	ed97 6a03 	vldr	s12, [r7, #12]
 8009636:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800974c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800963a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800963e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009652:	e021      	b.n	8009698 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009754 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009666:	4b37      	ldr	r3, [pc, #220]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009676:	ed97 6a03 	vldr	s12, [r7, #12]
 800967a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800974c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800967e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800968a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009696:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009698:	4b2a      	ldr	r3, [pc, #168]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800969a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969c:	0a5b      	lsrs	r3, r3, #9
 800969e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096a2:	ee07 3a90 	vmov	s15, r3
 80096a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80096b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096be:	ee17 2a90 	vmov	r2, s15
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80096c6:	4b1f      	ldr	r3, [pc, #124]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ca:	0c1b      	lsrs	r3, r3, #16
 80096cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096d0:	ee07 3a90 	vmov	s15, r3
 80096d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80096e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ec:	ee17 2a90 	vmov	r2, s15
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80096f4:	4b13      	ldr	r3, [pc, #76]	@ (8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f8:	0e1b      	lsrs	r3, r3, #24
 80096fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096fe:	ee07 3a90 	vmov	s15, r3
 8009702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800970a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800970e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800971a:	ee17 2a90 	vmov	r2, s15
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009722:	e008      	b.n	8009736 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	609a      	str	r2, [r3, #8]
}
 8009736:	bf00      	nop
 8009738:	3724      	adds	r7, #36	@ 0x24
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	58024400 	.word	0x58024400
 8009748:	03d09000 	.word	0x03d09000
 800974c:	46000000 	.word	0x46000000
 8009750:	4c742400 	.word	0x4c742400
 8009754:	4a742400 	.word	0x4a742400
 8009758:	4bb71b00 	.word	0x4bb71b00

0800975c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800975c:	b480      	push	{r7}
 800975e:	b089      	sub	sp, #36	@ 0x24
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009764:	4ba0      	ldr	r3, [pc, #640]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009768:	f003 0303 	and.w	r3, r3, #3
 800976c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800976e:	4b9e      	ldr	r3, [pc, #632]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009772:	091b      	lsrs	r3, r3, #4
 8009774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009778:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800977a:	4b9b      	ldr	r3, [pc, #620]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800977c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009784:	4b98      	ldr	r3, [pc, #608]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009788:	08db      	lsrs	r3, r3, #3
 800978a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	fb02 f303 	mul.w	r3, r2, r3
 8009794:	ee07 3a90 	vmov	s15, r3
 8009798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 8111 	beq.w	80099ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	f000 8083 	beq.w	80098b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	f200 80a1 	bhi.w	80098fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d056      	beq.n	8009872 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80097c4:	e099      	b.n	80098fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097c6:	4b88      	ldr	r3, [pc, #544]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 0320 	and.w	r3, r3, #32
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d02d      	beq.n	800982e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097d2:	4b85      	ldr	r3, [pc, #532]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	08db      	lsrs	r3, r3, #3
 80097d8:	f003 0303 	and.w	r3, r3, #3
 80097dc:	4a83      	ldr	r2, [pc, #524]	@ (80099ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80097de:	fa22 f303 	lsr.w	r3, r2, r3
 80097e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	ee07 3a90 	vmov	s15, r3
 80097ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	ee07 3a90 	vmov	s15, r3
 80097f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097fc:	4b7a      	ldr	r3, [pc, #488]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009804:	ee07 3a90 	vmov	s15, r3
 8009808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800980c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009810:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80099f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800981c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009828:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800982c:	e087      	b.n	800993e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	ee07 3a90 	vmov	s15, r3
 8009834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009838:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80099f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800983c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009840:	4b69      	ldr	r3, [pc, #420]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009848:	ee07 3a90 	vmov	s15, r3
 800984c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009850:	ed97 6a03 	vldr	s12, [r7, #12]
 8009854:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80099f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800985c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009860:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800986c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009870:	e065      	b.n	800993e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	ee07 3a90 	vmov	s15, r3
 8009878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80099f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009884:	4b58      	ldr	r3, [pc, #352]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988c:	ee07 3a90 	vmov	s15, r3
 8009890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009894:	ed97 6a03 	vldr	s12, [r7, #12]
 8009898:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80099f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800989c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098b4:	e043      	b.n	800993e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	ee07 3a90 	vmov	s15, r3
 80098bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80099fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80098c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098c8:	4b47      	ldr	r3, [pc, #284]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d0:	ee07 3a90 	vmov	s15, r3
 80098d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80098dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80099f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098f8:	e021      	b.n	800993e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	ee07 3a90 	vmov	s15, r3
 8009900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009904:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80099f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990c:	4b36      	ldr	r3, [pc, #216]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800990e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009914:	ee07 3a90 	vmov	s15, r3
 8009918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009920:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80099f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009938:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800993c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800993e:	4b2a      	ldr	r3, [pc, #168]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009942:	0a5b      	lsrs	r3, r3, #9
 8009944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009948:	ee07 3a90 	vmov	s15, r3
 800994c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009958:	edd7 6a07 	vldr	s13, [r7, #28]
 800995c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009964:	ee17 2a90 	vmov	r2, s15
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800996c:	4b1e      	ldr	r3, [pc, #120]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800996e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009970:	0c1b      	lsrs	r3, r3, #16
 8009972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009986:	edd7 6a07 	vldr	s13, [r7, #28]
 800998a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800998e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009992:	ee17 2a90 	vmov	r2, s15
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800999a:	4b13      	ldr	r3, [pc, #76]	@ (80099e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800999c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800999e:	0e1b      	lsrs	r3, r3, #24
 80099a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099a4:	ee07 3a90 	vmov	s15, r3
 80099a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80099b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099c0:	ee17 2a90 	vmov	r2, s15
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80099c8:	e008      	b.n	80099dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	609a      	str	r2, [r3, #8]
}
 80099dc:	bf00      	nop
 80099de:	3724      	adds	r7, #36	@ 0x24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	58024400 	.word	0x58024400
 80099ec:	03d09000 	.word	0x03d09000
 80099f0:	46000000 	.word	0x46000000
 80099f4:	4c742400 	.word	0x4c742400
 80099f8:	4a742400 	.word	0x4a742400
 80099fc:	4bb71b00 	.word	0x4bb71b00

08009a00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a0e:	4b53      	ldr	r3, [pc, #332]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a12:	f003 0303 	and.w	r3, r3, #3
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	d101      	bne.n	8009a1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e099      	b.n	8009b52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a1e:	4b4f      	ldr	r3, [pc, #316]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a4e      	ldr	r2, [pc, #312]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009a24:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a2a:	f7f9 f965 	bl	8002cf8 <HAL_GetTick>
 8009a2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a30:	e008      	b.n	8009a44 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a32:	f7f9 f961 	bl	8002cf8 <HAL_GetTick>
 8009a36:	4602      	mov	r2, r0
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d901      	bls.n	8009a44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a40:	2303      	movs	r3, #3
 8009a42:	e086      	b.n	8009b52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a44:	4b45      	ldr	r3, [pc, #276]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1f0      	bne.n	8009a32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a50:	4b42      	ldr	r3, [pc, #264]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a54:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	031b      	lsls	r3, r3, #12
 8009a5e:	493f      	ldr	r1, [pc, #252]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009a60:	4313      	orrs	r3, r2
 8009a62:	628b      	str	r3, [r1, #40]	@ 0x28
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	025b      	lsls	r3, r3, #9
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	041b      	lsls	r3, r3, #16
 8009a82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a86:	431a      	orrs	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	061b      	lsls	r3, r3, #24
 8009a90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a94:	4931      	ldr	r1, [pc, #196]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009a9a:	4b30      	ldr	r3, [pc, #192]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	492d      	ldr	r1, [pc, #180]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009aac:	4b2b      	ldr	r3, [pc, #172]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab0:	f023 0220 	bic.w	r2, r3, #32
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	4928      	ldr	r1, [pc, #160]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009abe:	4b27      	ldr	r3, [pc, #156]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac2:	4a26      	ldr	r2, [pc, #152]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009ac4:	f023 0310 	bic.w	r3, r3, #16
 8009ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009aca:	4b24      	ldr	r3, [pc, #144]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009acc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ace:	4b24      	ldr	r3, [pc, #144]	@ (8009b60 <RCCEx_PLL2_Config+0x160>)
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	69d2      	ldr	r2, [r2, #28]
 8009ad6:	00d2      	lsls	r2, r2, #3
 8009ad8:	4920      	ldr	r1, [pc, #128]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009ade:	4b1f      	ldr	r3, [pc, #124]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009ae4:	f043 0310 	orr.w	r3, r3, #16
 8009ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d106      	bne.n	8009afe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009af0:	4b1a      	ldr	r3, [pc, #104]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af4:	4a19      	ldr	r2, [pc, #100]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009af6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009afa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009afc:	e00f      	b.n	8009b1e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d106      	bne.n	8009b12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b04:	4b15      	ldr	r3, [pc, #84]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b08:	4a14      	ldr	r2, [pc, #80]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b10:	e005      	b.n	8009b1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b12:	4b12      	ldr	r3, [pc, #72]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b16:	4a11      	ldr	r2, [pc, #68]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009b18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a0e      	ldr	r2, [pc, #56]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009b24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b2a:	f7f9 f8e5 	bl	8002cf8 <HAL_GetTick>
 8009b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b30:	e008      	b.n	8009b44 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b32:	f7f9 f8e1 	bl	8002cf8 <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d901      	bls.n	8009b44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e006      	b.n	8009b52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b44:	4b05      	ldr	r3, [pc, #20]	@ (8009b5c <RCCEx_PLL2_Config+0x15c>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d0f0      	beq.n	8009b32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	58024400 	.word	0x58024400
 8009b60:	ffff0007 	.word	0xffff0007

08009b64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b72:	4b53      	ldr	r3, [pc, #332]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b76:	f003 0303 	and.w	r3, r3, #3
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d101      	bne.n	8009b82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e099      	b.n	8009cb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b82:	4b4f      	ldr	r3, [pc, #316]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a4e      	ldr	r2, [pc, #312]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b8e:	f7f9 f8b3 	bl	8002cf8 <HAL_GetTick>
 8009b92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b94:	e008      	b.n	8009ba8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b96:	f7f9 f8af 	bl	8002cf8 <HAL_GetTick>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d901      	bls.n	8009ba8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e086      	b.n	8009cb6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ba8:	4b45      	ldr	r3, [pc, #276]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1f0      	bne.n	8009b96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009bb4:	4b42      	ldr	r3, [pc, #264]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	051b      	lsls	r3, r3, #20
 8009bc2:	493f      	ldr	r1, [pc, #252]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	025b      	lsls	r3, r3, #9
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	041b      	lsls	r3, r3, #16
 8009be6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009bea:	431a      	orrs	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	061b      	lsls	r3, r3, #24
 8009bf4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009bf8:	4931      	ldr	r1, [pc, #196]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009bfe:	4b30      	ldr	r3, [pc, #192]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	492d      	ldr	r1, [pc, #180]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c10:	4b2b      	ldr	r3, [pc, #172]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c14:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	4928      	ldr	r1, [pc, #160]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c22:	4b27      	ldr	r3, [pc, #156]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c26:	4a26      	ldr	r2, [pc, #152]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c2e:	4b24      	ldr	r3, [pc, #144]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c32:	4b24      	ldr	r3, [pc, #144]	@ (8009cc4 <RCCEx_PLL3_Config+0x160>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	69d2      	ldr	r2, [r2, #28]
 8009c3a:	00d2      	lsls	r2, r2, #3
 8009c3c:	4920      	ldr	r1, [pc, #128]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c42:	4b1f      	ldr	r3, [pc, #124]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c46:	4a1e      	ldr	r2, [pc, #120]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d106      	bne.n	8009c62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c54:	4b1a      	ldr	r3, [pc, #104]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c58:	4a19      	ldr	r2, [pc, #100]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c60:	e00f      	b.n	8009c82 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d106      	bne.n	8009c76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c68:	4b15      	ldr	r3, [pc, #84]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c6c:	4a14      	ldr	r2, [pc, #80]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009c72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009c74:	e005      	b.n	8009c82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009c76:	4b12      	ldr	r3, [pc, #72]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7a:	4a11      	ldr	r2, [pc, #68]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009c80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c82:	4b0f      	ldr	r3, [pc, #60]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a0e      	ldr	r2, [pc, #56]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c8e:	f7f9 f833 	bl	8002cf8 <HAL_GetTick>
 8009c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c94:	e008      	b.n	8009ca8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c96:	f7f9 f82f 	bl	8002cf8 <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d901      	bls.n	8009ca8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e006      	b.n	8009cb6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ca8:	4b05      	ldr	r3, [pc, #20]	@ (8009cc0 <RCCEx_PLL3_Config+0x15c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d0f0      	beq.n	8009c96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	58024400 	.word	0x58024400
 8009cc4:	ffff0007 	.word	0xffff0007

08009cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e049      	b.n	8009d6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d106      	bne.n	8009cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7f8 fda4 	bl	800283c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3304      	adds	r3, #4
 8009d04:	4619      	mov	r1, r3
 8009d06:	4610      	mov	r0, r2
 8009d08:	f000 fac6 	bl	800a298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b082      	sub	sp, #8
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e049      	b.n	8009e1c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d106      	bne.n	8009da2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f841 	bl	8009e24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2202      	movs	r2, #2
 8009da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4619      	mov	r1, r3
 8009db4:	4610      	mov	r0, r2
 8009db6:	f000 fa6f 	bl	800a298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2201      	movs	r2, #1
 8009de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d109      	bne.n	8009e5c <HAL_TIM_PWM_Start+0x24>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	bf14      	ite	ne
 8009e54:	2301      	movne	r3, #1
 8009e56:	2300      	moveq	r3, #0
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	e03c      	b.n	8009ed6 <HAL_TIM_PWM_Start+0x9e>
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	2b04      	cmp	r3, #4
 8009e60:	d109      	bne.n	8009e76 <HAL_TIM_PWM_Start+0x3e>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	bf14      	ite	ne
 8009e6e:	2301      	movne	r3, #1
 8009e70:	2300      	moveq	r3, #0
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	e02f      	b.n	8009ed6 <HAL_TIM_PWM_Start+0x9e>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b08      	cmp	r3, #8
 8009e7a:	d109      	bne.n	8009e90 <HAL_TIM_PWM_Start+0x58>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	bf14      	ite	ne
 8009e88:	2301      	movne	r3, #1
 8009e8a:	2300      	moveq	r3, #0
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	e022      	b.n	8009ed6 <HAL_TIM_PWM_Start+0x9e>
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	2b0c      	cmp	r3, #12
 8009e94:	d109      	bne.n	8009eaa <HAL_TIM_PWM_Start+0x72>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	bf14      	ite	ne
 8009ea2:	2301      	movne	r3, #1
 8009ea4:	2300      	moveq	r3, #0
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	e015      	b.n	8009ed6 <HAL_TIM_PWM_Start+0x9e>
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b10      	cmp	r3, #16
 8009eae:	d109      	bne.n	8009ec4 <HAL_TIM_PWM_Start+0x8c>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	bf14      	ite	ne
 8009ebc:	2301      	movne	r3, #1
 8009ebe:	2300      	moveq	r3, #0
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	e008      	b.n	8009ed6 <HAL_TIM_PWM_Start+0x9e>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	bf14      	ite	ne
 8009ed0:	2301      	movne	r3, #1
 8009ed2:	2300      	moveq	r3, #0
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	e0ab      	b.n	800a036 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d104      	bne.n	8009eee <HAL_TIM_PWM_Start+0xb6>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2202      	movs	r2, #2
 8009ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009eec:	e023      	b.n	8009f36 <HAL_TIM_PWM_Start+0xfe>
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	2b04      	cmp	r3, #4
 8009ef2:	d104      	bne.n	8009efe <HAL_TIM_PWM_Start+0xc6>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009efc:	e01b      	b.n	8009f36 <HAL_TIM_PWM_Start+0xfe>
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	2b08      	cmp	r3, #8
 8009f02:	d104      	bne.n	8009f0e <HAL_TIM_PWM_Start+0xd6>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2202      	movs	r2, #2
 8009f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f0c:	e013      	b.n	8009f36 <HAL_TIM_PWM_Start+0xfe>
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2b0c      	cmp	r3, #12
 8009f12:	d104      	bne.n	8009f1e <HAL_TIM_PWM_Start+0xe6>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2202      	movs	r2, #2
 8009f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f1c:	e00b      	b.n	8009f36 <HAL_TIM_PWM_Start+0xfe>
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b10      	cmp	r3, #16
 8009f22:	d104      	bne.n	8009f2e <HAL_TIM_PWM_Start+0xf6>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2202      	movs	r2, #2
 8009f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f2c:	e003      	b.n	8009f36 <HAL_TIM_PWM_Start+0xfe>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2202      	movs	r2, #2
 8009f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fd2c 	bl	800a99c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a3d      	ldr	r2, [pc, #244]	@ (800a040 <HAL_TIM_PWM_Start+0x208>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d013      	beq.n	8009f76 <HAL_TIM_PWM_Start+0x13e>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a3c      	ldr	r2, [pc, #240]	@ (800a044 <HAL_TIM_PWM_Start+0x20c>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d00e      	beq.n	8009f76 <HAL_TIM_PWM_Start+0x13e>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a3a      	ldr	r2, [pc, #232]	@ (800a048 <HAL_TIM_PWM_Start+0x210>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d009      	beq.n	8009f76 <HAL_TIM_PWM_Start+0x13e>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a39      	ldr	r2, [pc, #228]	@ (800a04c <HAL_TIM_PWM_Start+0x214>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d004      	beq.n	8009f76 <HAL_TIM_PWM_Start+0x13e>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a37      	ldr	r2, [pc, #220]	@ (800a050 <HAL_TIM_PWM_Start+0x218>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d101      	bne.n	8009f7a <HAL_TIM_PWM_Start+0x142>
 8009f76:	2301      	movs	r3, #1
 8009f78:	e000      	b.n	8009f7c <HAL_TIM_PWM_Start+0x144>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d007      	beq.n	8009f90 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f8e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a2a      	ldr	r2, [pc, #168]	@ (800a040 <HAL_TIM_PWM_Start+0x208>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d02c      	beq.n	8009ff4 <HAL_TIM_PWM_Start+0x1bc>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fa2:	d027      	beq.n	8009ff4 <HAL_TIM_PWM_Start+0x1bc>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a2a      	ldr	r2, [pc, #168]	@ (800a054 <HAL_TIM_PWM_Start+0x21c>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d022      	beq.n	8009ff4 <HAL_TIM_PWM_Start+0x1bc>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a29      	ldr	r2, [pc, #164]	@ (800a058 <HAL_TIM_PWM_Start+0x220>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d01d      	beq.n	8009ff4 <HAL_TIM_PWM_Start+0x1bc>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a27      	ldr	r2, [pc, #156]	@ (800a05c <HAL_TIM_PWM_Start+0x224>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d018      	beq.n	8009ff4 <HAL_TIM_PWM_Start+0x1bc>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a1f      	ldr	r2, [pc, #124]	@ (800a044 <HAL_TIM_PWM_Start+0x20c>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d013      	beq.n	8009ff4 <HAL_TIM_PWM_Start+0x1bc>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a23      	ldr	r2, [pc, #140]	@ (800a060 <HAL_TIM_PWM_Start+0x228>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d00e      	beq.n	8009ff4 <HAL_TIM_PWM_Start+0x1bc>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a1b      	ldr	r2, [pc, #108]	@ (800a048 <HAL_TIM_PWM_Start+0x210>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d009      	beq.n	8009ff4 <HAL_TIM_PWM_Start+0x1bc>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a1f      	ldr	r2, [pc, #124]	@ (800a064 <HAL_TIM_PWM_Start+0x22c>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d004      	beq.n	8009ff4 <HAL_TIM_PWM_Start+0x1bc>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a1e      	ldr	r2, [pc, #120]	@ (800a068 <HAL_TIM_PWM_Start+0x230>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d115      	bne.n	800a020 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689a      	ldr	r2, [r3, #8]
 8009ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800a06c <HAL_TIM_PWM_Start+0x234>)
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b06      	cmp	r3, #6
 800a004:	d015      	beq.n	800a032 <HAL_TIM_PWM_Start+0x1fa>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a00c:	d011      	beq.n	800a032 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f042 0201 	orr.w	r2, r2, #1
 800a01c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a01e:	e008      	b.n	800a032 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f042 0201 	orr.w	r2, r2, #1
 800a02e:	601a      	str	r2, [r3, #0]
 800a030:	e000      	b.n	800a034 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a032:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	40010000 	.word	0x40010000
 800a044:	40010400 	.word	0x40010400
 800a048:	40014000 	.word	0x40014000
 800a04c:	40014400 	.word	0x40014400
 800a050:	40014800 	.word	0x40014800
 800a054:	40000400 	.word	0x40000400
 800a058:	40000800 	.word	0x40000800
 800a05c:	40000c00 	.word	0x40000c00
 800a060:	40001800 	.word	0x40001800
 800a064:	4000e000 	.word	0x4000e000
 800a068:	4000e400 	.word	0x4000e400
 800a06c:	00010007 	.word	0x00010007

0800a070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a086:	2b01      	cmp	r3, #1
 800a088:	d101      	bne.n	800a08e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a08a:	2302      	movs	r3, #2
 800a08c:	e0ff      	b.n	800a28e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b14      	cmp	r3, #20
 800a09a:	f200 80f0 	bhi.w	800a27e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a09e:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a4:	0800a0f9 	.word	0x0800a0f9
 800a0a8:	0800a27f 	.word	0x0800a27f
 800a0ac:	0800a27f 	.word	0x0800a27f
 800a0b0:	0800a27f 	.word	0x0800a27f
 800a0b4:	0800a139 	.word	0x0800a139
 800a0b8:	0800a27f 	.word	0x0800a27f
 800a0bc:	0800a27f 	.word	0x0800a27f
 800a0c0:	0800a27f 	.word	0x0800a27f
 800a0c4:	0800a17b 	.word	0x0800a17b
 800a0c8:	0800a27f 	.word	0x0800a27f
 800a0cc:	0800a27f 	.word	0x0800a27f
 800a0d0:	0800a27f 	.word	0x0800a27f
 800a0d4:	0800a1bb 	.word	0x0800a1bb
 800a0d8:	0800a27f 	.word	0x0800a27f
 800a0dc:	0800a27f 	.word	0x0800a27f
 800a0e0:	0800a27f 	.word	0x0800a27f
 800a0e4:	0800a1fd 	.word	0x0800a1fd
 800a0e8:	0800a27f 	.word	0x0800a27f
 800a0ec:	0800a27f 	.word	0x0800a27f
 800a0f0:	0800a27f 	.word	0x0800a27f
 800a0f4:	0800a23d 	.word	0x0800a23d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68b9      	ldr	r1, [r7, #8]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f000 f976 	bl	800a3f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	699a      	ldr	r2, [r3, #24]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f042 0208 	orr.w	r2, r2, #8
 800a112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	699a      	ldr	r2, [r3, #24]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f022 0204 	bic.w	r2, r2, #4
 800a122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6999      	ldr	r1, [r3, #24]
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	691a      	ldr	r2, [r3, #16]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	619a      	str	r2, [r3, #24]
      break;
 800a136:	e0a5      	b.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68b9      	ldr	r1, [r7, #8]
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 f9e6 	bl	800a510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699a      	ldr	r2, [r3, #24]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	699a      	ldr	r2, [r3, #24]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6999      	ldr	r1, [r3, #24]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	021a      	lsls	r2, r3, #8
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	430a      	orrs	r2, r1
 800a176:	619a      	str	r2, [r3, #24]
      break;
 800a178:	e084      	b.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68b9      	ldr	r1, [r7, #8]
 800a180:	4618      	mov	r0, r3
 800a182:	f000 fa4f 	bl	800a624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	69da      	ldr	r2, [r3, #28]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f042 0208 	orr.w	r2, r2, #8
 800a194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	69da      	ldr	r2, [r3, #28]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f022 0204 	bic.w	r2, r2, #4
 800a1a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	69d9      	ldr	r1, [r3, #28]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	691a      	ldr	r2, [r3, #16]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	61da      	str	r2, [r3, #28]
      break;
 800a1b8:	e064      	b.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68b9      	ldr	r1, [r7, #8]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f000 fab7 	bl	800a734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	69da      	ldr	r2, [r3, #28]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	69da      	ldr	r2, [r3, #28]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	69d9      	ldr	r1, [r3, #28]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	021a      	lsls	r2, r3, #8
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	430a      	orrs	r2, r1
 800a1f8:	61da      	str	r2, [r3, #28]
      break;
 800a1fa:	e043      	b.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68b9      	ldr	r1, [r7, #8]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 fb00 	bl	800a808 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f042 0208 	orr.w	r2, r2, #8
 800a216:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f022 0204 	bic.w	r2, r2, #4
 800a226:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	691a      	ldr	r2, [r3, #16]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	430a      	orrs	r2, r1
 800a238:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a23a:	e023      	b.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68b9      	ldr	r1, [r7, #8]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fb44 	bl	800a8d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a256:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a266:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	021a      	lsls	r2, r3, #8
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a27c:	e002      	b.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	75fb      	strb	r3, [r7, #23]
      break;
 800a282:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3718      	adds	r7, #24
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop

0800a298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a47      	ldr	r2, [pc, #284]	@ (800a3c8 <TIM_Base_SetConfig+0x130>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d013      	beq.n	800a2d8 <TIM_Base_SetConfig+0x40>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2b6:	d00f      	beq.n	800a2d8 <TIM_Base_SetConfig+0x40>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a44      	ldr	r2, [pc, #272]	@ (800a3cc <TIM_Base_SetConfig+0x134>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d00b      	beq.n	800a2d8 <TIM_Base_SetConfig+0x40>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a43      	ldr	r2, [pc, #268]	@ (800a3d0 <TIM_Base_SetConfig+0x138>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d007      	beq.n	800a2d8 <TIM_Base_SetConfig+0x40>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a42      	ldr	r2, [pc, #264]	@ (800a3d4 <TIM_Base_SetConfig+0x13c>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d003      	beq.n	800a2d8 <TIM_Base_SetConfig+0x40>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a41      	ldr	r2, [pc, #260]	@ (800a3d8 <TIM_Base_SetConfig+0x140>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d108      	bne.n	800a2ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a36      	ldr	r2, [pc, #216]	@ (800a3c8 <TIM_Base_SetConfig+0x130>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d027      	beq.n	800a342 <TIM_Base_SetConfig+0xaa>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2f8:	d023      	beq.n	800a342 <TIM_Base_SetConfig+0xaa>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a33      	ldr	r2, [pc, #204]	@ (800a3cc <TIM_Base_SetConfig+0x134>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d01f      	beq.n	800a342 <TIM_Base_SetConfig+0xaa>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a32      	ldr	r2, [pc, #200]	@ (800a3d0 <TIM_Base_SetConfig+0x138>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d01b      	beq.n	800a342 <TIM_Base_SetConfig+0xaa>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a31      	ldr	r2, [pc, #196]	@ (800a3d4 <TIM_Base_SetConfig+0x13c>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d017      	beq.n	800a342 <TIM_Base_SetConfig+0xaa>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a30      	ldr	r2, [pc, #192]	@ (800a3d8 <TIM_Base_SetConfig+0x140>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d013      	beq.n	800a342 <TIM_Base_SetConfig+0xaa>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a2f      	ldr	r2, [pc, #188]	@ (800a3dc <TIM_Base_SetConfig+0x144>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d00f      	beq.n	800a342 <TIM_Base_SetConfig+0xaa>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a2e      	ldr	r2, [pc, #184]	@ (800a3e0 <TIM_Base_SetConfig+0x148>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d00b      	beq.n	800a342 <TIM_Base_SetConfig+0xaa>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a2d      	ldr	r2, [pc, #180]	@ (800a3e4 <TIM_Base_SetConfig+0x14c>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d007      	beq.n	800a342 <TIM_Base_SetConfig+0xaa>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a2c      	ldr	r2, [pc, #176]	@ (800a3e8 <TIM_Base_SetConfig+0x150>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d003      	beq.n	800a342 <TIM_Base_SetConfig+0xaa>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a2b      	ldr	r2, [pc, #172]	@ (800a3ec <TIM_Base_SetConfig+0x154>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d108      	bne.n	800a354 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4313      	orrs	r3, r2
 800a352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	4313      	orrs	r3, r2
 800a360:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	689a      	ldr	r2, [r3, #8]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a14      	ldr	r2, [pc, #80]	@ (800a3c8 <TIM_Base_SetConfig+0x130>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d00f      	beq.n	800a39a <TIM_Base_SetConfig+0x102>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a16      	ldr	r2, [pc, #88]	@ (800a3d8 <TIM_Base_SetConfig+0x140>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d00b      	beq.n	800a39a <TIM_Base_SetConfig+0x102>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a15      	ldr	r2, [pc, #84]	@ (800a3dc <TIM_Base_SetConfig+0x144>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d007      	beq.n	800a39a <TIM_Base_SetConfig+0x102>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a14      	ldr	r2, [pc, #80]	@ (800a3e0 <TIM_Base_SetConfig+0x148>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d003      	beq.n	800a39a <TIM_Base_SetConfig+0x102>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a13      	ldr	r2, [pc, #76]	@ (800a3e4 <TIM_Base_SetConfig+0x14c>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d103      	bne.n	800a3a2 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	691a      	ldr	r2, [r3, #16]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f043 0204 	orr.w	r2, r3, #4
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	601a      	str	r2, [r3, #0]
}
 800a3ba:	bf00      	nop
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	40010000 	.word	0x40010000
 800a3cc:	40000400 	.word	0x40000400
 800a3d0:	40000800 	.word	0x40000800
 800a3d4:	40000c00 	.word	0x40000c00
 800a3d8:	40010400 	.word	0x40010400
 800a3dc:	40014000 	.word	0x40014000
 800a3e0:	40014400 	.word	0x40014400
 800a3e4:	40014800 	.word	0x40014800
 800a3e8:	4000e000 	.word	0x4000e000
 800a3ec:	4000e400 	.word	0x4000e400

0800a3f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a1b      	ldr	r3, [r3, #32]
 800a404:	f023 0201 	bic.w	r2, r3, #1
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	4b37      	ldr	r3, [pc, #220]	@ (800a4f8 <TIM_OC1_SetConfig+0x108>)
 800a41c:	4013      	ands	r3, r2
 800a41e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f023 0303 	bic.w	r3, r3, #3
 800a426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	4313      	orrs	r3, r2
 800a430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	f023 0302 	bic.w	r3, r3, #2
 800a438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	4313      	orrs	r3, r2
 800a442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a2d      	ldr	r2, [pc, #180]	@ (800a4fc <TIM_OC1_SetConfig+0x10c>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d00f      	beq.n	800a46c <TIM_OC1_SetConfig+0x7c>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a2c      	ldr	r2, [pc, #176]	@ (800a500 <TIM_OC1_SetConfig+0x110>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d00b      	beq.n	800a46c <TIM_OC1_SetConfig+0x7c>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a2b      	ldr	r2, [pc, #172]	@ (800a504 <TIM_OC1_SetConfig+0x114>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d007      	beq.n	800a46c <TIM_OC1_SetConfig+0x7c>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a2a      	ldr	r2, [pc, #168]	@ (800a508 <TIM_OC1_SetConfig+0x118>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d003      	beq.n	800a46c <TIM_OC1_SetConfig+0x7c>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a29      	ldr	r2, [pc, #164]	@ (800a50c <TIM_OC1_SetConfig+0x11c>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d10c      	bne.n	800a486 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	f023 0308 	bic.w	r3, r3, #8
 800a472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f023 0304 	bic.w	r3, r3, #4
 800a484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a1c      	ldr	r2, [pc, #112]	@ (800a4fc <TIM_OC1_SetConfig+0x10c>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d00f      	beq.n	800a4ae <TIM_OC1_SetConfig+0xbe>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a1b      	ldr	r2, [pc, #108]	@ (800a500 <TIM_OC1_SetConfig+0x110>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d00b      	beq.n	800a4ae <TIM_OC1_SetConfig+0xbe>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a1a      	ldr	r2, [pc, #104]	@ (800a504 <TIM_OC1_SetConfig+0x114>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d007      	beq.n	800a4ae <TIM_OC1_SetConfig+0xbe>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a19      	ldr	r2, [pc, #100]	@ (800a508 <TIM_OC1_SetConfig+0x118>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d003      	beq.n	800a4ae <TIM_OC1_SetConfig+0xbe>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a18      	ldr	r2, [pc, #96]	@ (800a50c <TIM_OC1_SetConfig+0x11c>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d111      	bne.n	800a4d2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a4bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	695b      	ldr	r3, [r3, #20]
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	621a      	str	r2, [r3, #32]
}
 800a4ec:	bf00      	nop
 800a4ee:	371c      	adds	r7, #28
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	fffeff8f 	.word	0xfffeff8f
 800a4fc:	40010000 	.word	0x40010000
 800a500:	40010400 	.word	0x40010400
 800a504:	40014000 	.word	0x40014000
 800a508:	40014400 	.word	0x40014400
 800a50c:	40014800 	.word	0x40014800

0800a510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a510:	b480      	push	{r7}
 800a512:	b087      	sub	sp, #28
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a1b      	ldr	r3, [r3, #32]
 800a51e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	f023 0210 	bic.w	r2, r3, #16
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	4b34      	ldr	r3, [pc, #208]	@ (800a60c <TIM_OC2_SetConfig+0xfc>)
 800a53c:	4013      	ands	r3, r2
 800a53e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	021b      	lsls	r3, r3, #8
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	4313      	orrs	r3, r2
 800a552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	f023 0320 	bic.w	r3, r3, #32
 800a55a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	011b      	lsls	r3, r3, #4
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	4313      	orrs	r3, r2
 800a566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a29      	ldr	r2, [pc, #164]	@ (800a610 <TIM_OC2_SetConfig+0x100>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d003      	beq.n	800a578 <TIM_OC2_SetConfig+0x68>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a28      	ldr	r2, [pc, #160]	@ (800a614 <TIM_OC2_SetConfig+0x104>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d10d      	bne.n	800a594 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a57e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	011b      	lsls	r3, r3, #4
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	4313      	orrs	r3, r2
 800a58a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a592:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a1e      	ldr	r2, [pc, #120]	@ (800a610 <TIM_OC2_SetConfig+0x100>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d00f      	beq.n	800a5bc <TIM_OC2_SetConfig+0xac>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a1d      	ldr	r2, [pc, #116]	@ (800a614 <TIM_OC2_SetConfig+0x104>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d00b      	beq.n	800a5bc <TIM_OC2_SetConfig+0xac>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a1c      	ldr	r2, [pc, #112]	@ (800a618 <TIM_OC2_SetConfig+0x108>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d007      	beq.n	800a5bc <TIM_OC2_SetConfig+0xac>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a1b      	ldr	r2, [pc, #108]	@ (800a61c <TIM_OC2_SetConfig+0x10c>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d003      	beq.n	800a5bc <TIM_OC2_SetConfig+0xac>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a1a      	ldr	r2, [pc, #104]	@ (800a620 <TIM_OC2_SetConfig+0x110>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d113      	bne.n	800a5e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a5c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a5ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	693a      	ldr	r2, [r7, #16]
 800a5e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	621a      	str	r2, [r3, #32]
}
 800a5fe:	bf00      	nop
 800a600:	371c      	adds	r7, #28
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	feff8fff 	.word	0xfeff8fff
 800a610:	40010000 	.word	0x40010000
 800a614:	40010400 	.word	0x40010400
 800a618:	40014000 	.word	0x40014000
 800a61c:	40014400 	.word	0x40014400
 800a620:	40014800 	.word	0x40014800

0800a624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a624:	b480      	push	{r7}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a1b      	ldr	r3, [r3, #32]
 800a638:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	4b33      	ldr	r3, [pc, #204]	@ (800a71c <TIM_OC3_SetConfig+0xf8>)
 800a650:	4013      	ands	r3, r2
 800a652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f023 0303 	bic.w	r3, r3, #3
 800a65a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	4313      	orrs	r3, r2
 800a664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a66c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	697a      	ldr	r2, [r7, #20]
 800a676:	4313      	orrs	r3, r2
 800a678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a28      	ldr	r2, [pc, #160]	@ (800a720 <TIM_OC3_SetConfig+0xfc>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d003      	beq.n	800a68a <TIM_OC3_SetConfig+0x66>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a27      	ldr	r2, [pc, #156]	@ (800a724 <TIM_OC3_SetConfig+0x100>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d10d      	bne.n	800a6a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	021b      	lsls	r3, r3, #8
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a6a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a720 <TIM_OC3_SetConfig+0xfc>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d00f      	beq.n	800a6ce <TIM_OC3_SetConfig+0xaa>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a1c      	ldr	r2, [pc, #112]	@ (800a724 <TIM_OC3_SetConfig+0x100>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d00b      	beq.n	800a6ce <TIM_OC3_SetConfig+0xaa>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a1b      	ldr	r2, [pc, #108]	@ (800a728 <TIM_OC3_SetConfig+0x104>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d007      	beq.n	800a6ce <TIM_OC3_SetConfig+0xaa>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a1a      	ldr	r2, [pc, #104]	@ (800a72c <TIM_OC3_SetConfig+0x108>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d003      	beq.n	800a6ce <TIM_OC3_SetConfig+0xaa>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a19      	ldr	r2, [pc, #100]	@ (800a730 <TIM_OC3_SetConfig+0x10c>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d113      	bne.n	800a6f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a6dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	011b      	lsls	r3, r3, #4
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	699b      	ldr	r3, [r3, #24]
 800a6ee:	011b      	lsls	r3, r3, #4
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	685a      	ldr	r2, [r3, #4]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	621a      	str	r2, [r3, #32]
}
 800a710:	bf00      	nop
 800a712:	371c      	adds	r7, #28
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	fffeff8f 	.word	0xfffeff8f
 800a720:	40010000 	.word	0x40010000
 800a724:	40010400 	.word	0x40010400
 800a728:	40014000 	.word	0x40014000
 800a72c:	40014400 	.word	0x40014400
 800a730:	40014800 	.word	0x40014800

0800a734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a734:	b480      	push	{r7}
 800a736:	b087      	sub	sp, #28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a1b      	ldr	r3, [r3, #32]
 800a748:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	69db      	ldr	r3, [r3, #28]
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	4b24      	ldr	r3, [pc, #144]	@ (800a7f0 <TIM_OC4_SetConfig+0xbc>)
 800a760:	4013      	ands	r3, r2
 800a762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	021b      	lsls	r3, r3, #8
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	4313      	orrs	r3, r2
 800a776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a77e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	031b      	lsls	r3, r3, #12
 800a786:	693a      	ldr	r2, [r7, #16]
 800a788:	4313      	orrs	r3, r2
 800a78a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a19      	ldr	r2, [pc, #100]	@ (800a7f4 <TIM_OC4_SetConfig+0xc0>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d00f      	beq.n	800a7b4 <TIM_OC4_SetConfig+0x80>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a18      	ldr	r2, [pc, #96]	@ (800a7f8 <TIM_OC4_SetConfig+0xc4>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d00b      	beq.n	800a7b4 <TIM_OC4_SetConfig+0x80>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a17      	ldr	r2, [pc, #92]	@ (800a7fc <TIM_OC4_SetConfig+0xc8>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d007      	beq.n	800a7b4 <TIM_OC4_SetConfig+0x80>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a16      	ldr	r2, [pc, #88]	@ (800a800 <TIM_OC4_SetConfig+0xcc>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d003      	beq.n	800a7b4 <TIM_OC4_SetConfig+0x80>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a15      	ldr	r2, [pc, #84]	@ (800a804 <TIM_OC4_SetConfig+0xd0>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d109      	bne.n	800a7c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a7ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	695b      	ldr	r3, [r3, #20]
 800a7c0:	019b      	lsls	r3, r3, #6
 800a7c2:	697a      	ldr	r2, [r7, #20]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	685a      	ldr	r2, [r3, #4]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	621a      	str	r2, [r3, #32]
}
 800a7e2:	bf00      	nop
 800a7e4:	371c      	adds	r7, #28
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	feff8fff 	.word	0xfeff8fff
 800a7f4:	40010000 	.word	0x40010000
 800a7f8:	40010400 	.word	0x40010400
 800a7fc:	40014000 	.word	0x40014000
 800a800:	40014400 	.word	0x40014400
 800a804:	40014800 	.word	0x40014800

0800a808 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a808:	b480      	push	{r7}
 800a80a:	b087      	sub	sp, #28
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a1b      	ldr	r3, [r3, #32]
 800a81c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	4b21      	ldr	r3, [pc, #132]	@ (800a8b8 <TIM_OC5_SetConfig+0xb0>)
 800a834:	4013      	ands	r3, r2
 800a836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	4313      	orrs	r3, r2
 800a840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a848:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	041b      	lsls	r3, r3, #16
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	4313      	orrs	r3, r2
 800a854:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a18      	ldr	r2, [pc, #96]	@ (800a8bc <TIM_OC5_SetConfig+0xb4>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d00f      	beq.n	800a87e <TIM_OC5_SetConfig+0x76>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a17      	ldr	r2, [pc, #92]	@ (800a8c0 <TIM_OC5_SetConfig+0xb8>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d00b      	beq.n	800a87e <TIM_OC5_SetConfig+0x76>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a16      	ldr	r2, [pc, #88]	@ (800a8c4 <TIM_OC5_SetConfig+0xbc>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d007      	beq.n	800a87e <TIM_OC5_SetConfig+0x76>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a15      	ldr	r2, [pc, #84]	@ (800a8c8 <TIM_OC5_SetConfig+0xc0>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d003      	beq.n	800a87e <TIM_OC5_SetConfig+0x76>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a14      	ldr	r2, [pc, #80]	@ (800a8cc <TIM_OC5_SetConfig+0xc4>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d109      	bne.n	800a892 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a884:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	021b      	lsls	r3, r3, #8
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	4313      	orrs	r3, r2
 800a890:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	697a      	ldr	r2, [r7, #20]
 800a896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	693a      	ldr	r2, [r7, #16]
 800a8aa:	621a      	str	r2, [r3, #32]
}
 800a8ac:	bf00      	nop
 800a8ae:	371c      	adds	r7, #28
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	fffeff8f 	.word	0xfffeff8f
 800a8bc:	40010000 	.word	0x40010000
 800a8c0:	40010400 	.word	0x40010400
 800a8c4:	40014000 	.word	0x40014000
 800a8c8:	40014400 	.word	0x40014400
 800a8cc:	40014800 	.word	0x40014800

0800a8d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b087      	sub	sp, #28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a1b      	ldr	r3, [r3, #32]
 800a8e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	4b22      	ldr	r3, [pc, #136]	@ (800a984 <TIM_OC6_SetConfig+0xb4>)
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	021b      	lsls	r3, r3, #8
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	4313      	orrs	r3, r2
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	051b      	lsls	r3, r3, #20
 800a91a:	693a      	ldr	r2, [r7, #16]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a19      	ldr	r2, [pc, #100]	@ (800a988 <TIM_OC6_SetConfig+0xb8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d00f      	beq.n	800a948 <TIM_OC6_SetConfig+0x78>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a18      	ldr	r2, [pc, #96]	@ (800a98c <TIM_OC6_SetConfig+0xbc>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d00b      	beq.n	800a948 <TIM_OC6_SetConfig+0x78>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a17      	ldr	r2, [pc, #92]	@ (800a990 <TIM_OC6_SetConfig+0xc0>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d007      	beq.n	800a948 <TIM_OC6_SetConfig+0x78>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a16      	ldr	r2, [pc, #88]	@ (800a994 <TIM_OC6_SetConfig+0xc4>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d003      	beq.n	800a948 <TIM_OC6_SetConfig+0x78>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a15      	ldr	r2, [pc, #84]	@ (800a998 <TIM_OC6_SetConfig+0xc8>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d109      	bne.n	800a95c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a94e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	695b      	ldr	r3, [r3, #20]
 800a954:	029b      	lsls	r3, r3, #10
 800a956:	697a      	ldr	r2, [r7, #20]
 800a958:	4313      	orrs	r3, r2
 800a95a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	697a      	ldr	r2, [r7, #20]
 800a960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	621a      	str	r2, [r3, #32]
}
 800a976:	bf00      	nop
 800a978:	371c      	adds	r7, #28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	feff8fff 	.word	0xfeff8fff
 800a988:	40010000 	.word	0x40010000
 800a98c:	40010400 	.word	0x40010400
 800a990:	40014000 	.word	0x40014000
 800a994:	40014400 	.word	0x40014400
 800a998:	40014800 	.word	0x40014800

0800a99c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b087      	sub	sp, #28
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	f003 031f 	and.w	r3, r3, #31
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6a1a      	ldr	r2, [r3, #32]
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	43db      	mvns	r3, r3
 800a9be:	401a      	ands	r2, r3
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6a1a      	ldr	r2, [r3, #32]
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	f003 031f 	and.w	r3, r3, #31
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a9d4:	431a      	orrs	r2, r3
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	621a      	str	r2, [r3, #32]
}
 800a9da:	bf00      	nop
 800a9dc:	371c      	adds	r7, #28
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
	...

0800a9e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d101      	bne.n	800aa04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aa00:	2302      	movs	r3, #2
 800aa02:	e073      	b.n	800aaec <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	695b      	ldr	r3, [r3, #20]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	041b      	lsls	r3, r3, #16
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	69db      	ldr	r3, [r3, #28]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a19      	ldr	r2, [pc, #100]	@ (800aaf8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d004      	beq.n	800aaa0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a18      	ldr	r2, [pc, #96]	@ (800aafc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d11c      	bne.n	800aada <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaaa:	051b      	lsls	r3, r3, #20
 800aaac:	4313      	orrs	r3, r2
 800aaae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac8:	4313      	orrs	r3, r2
 800aaca:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	40010000 	.word	0x40010000
 800aafc:	40010400 	.word	0x40010400

0800ab00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d101      	bne.n	800ab12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e042      	b.n	800ab98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d106      	bne.n	800ab2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7f7 fee7 	bl	80028f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2224      	movs	r2, #36	@ 0x24
 800ab2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f022 0201 	bic.w	r2, r2, #1
 800ab40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 ff38 	bl	800b9c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f8c9 	bl	800ace8 <UART_SetConfig>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e01b      	b.n	800ab98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	685a      	ldr	r2, [r3, #4]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	689a      	ldr	r2, [r3, #8]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f042 0201 	orr.w	r2, r2, #1
 800ab8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 ffb7 	bl	800bb04 <UART_CheckIdleState>
 800ab96:	4603      	mov	r3, r0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b08a      	sub	sp, #40	@ 0x28
 800aba4:	af02      	add	r7, sp, #8
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	603b      	str	r3, [r7, #0]
 800abac:	4613      	mov	r3, r2
 800abae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abb6:	2b20      	cmp	r3, #32
 800abb8:	d17b      	bne.n	800acb2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <HAL_UART_Transmit+0x26>
 800abc0:	88fb      	ldrh	r3, [r7, #6]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d101      	bne.n	800abca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e074      	b.n	800acb4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2221      	movs	r2, #33	@ 0x21
 800abd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abda:	f7f8 f88d 	bl	8002cf8 <HAL_GetTick>
 800abde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	88fa      	ldrh	r2, [r7, #6]
 800abe4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	88fa      	ldrh	r2, [r7, #6]
 800abec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abf8:	d108      	bne.n	800ac0c <HAL_UART_Transmit+0x6c>
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d104      	bne.n	800ac0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ac02:	2300      	movs	r3, #0
 800ac04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	61bb      	str	r3, [r7, #24]
 800ac0a:	e003      	b.n	800ac14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac10:	2300      	movs	r3, #0
 800ac12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ac14:	e030      	b.n	800ac78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	2180      	movs	r1, #128	@ 0x80
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f001 f819 	bl	800bc58 <UART_WaitOnFlagUntilTimeout>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d005      	beq.n	800ac38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2220      	movs	r2, #32
 800ac30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ac34:	2303      	movs	r3, #3
 800ac36:	e03d      	b.n	800acb4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10b      	bne.n	800ac56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	881b      	ldrh	r3, [r3, #0]
 800ac42:	461a      	mov	r2, r3
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	3302      	adds	r3, #2
 800ac52:	61bb      	str	r3, [r7, #24]
 800ac54:	e007      	b.n	800ac66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	781a      	ldrb	r2, [r3, #0]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	3301      	adds	r3, #1
 800ac64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1c8      	bne.n	800ac16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2140      	movs	r1, #64	@ 0x40
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f000 ffe2 	bl	800bc58 <UART_WaitOnFlagUntilTimeout>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d005      	beq.n	800aca6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2220      	movs	r2, #32
 800ac9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800aca2:	2303      	movs	r3, #3
 800aca4:	e006      	b.n	800acb4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2220      	movs	r2, #32
 800acaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800acae:	2300      	movs	r3, #0
 800acb0:	e000      	b.n	800acb4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800acb2:	2302      	movs	r3, #2
  }
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3720      	adds	r7, #32
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acca:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acd2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	4313      	orrs	r3, r2
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
	...

0800ace8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ace8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acec:	b092      	sub	sp, #72	@ 0x48
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	689a      	ldr	r2, [r3, #8]
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	431a      	orrs	r2, r3
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	695b      	ldr	r3, [r3, #20]
 800ad06:	431a      	orrs	r2, r3
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	4bbe      	ldr	r3, [pc, #760]	@ (800b010 <UART_SetConfig+0x328>)
 800ad18:	4013      	ands	r3, r2
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	6812      	ldr	r2, [r2, #0]
 800ad1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ad20:	430b      	orrs	r3, r1
 800ad22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	68da      	ldr	r2, [r3, #12]
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	430a      	orrs	r2, r1
 800ad38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	699b      	ldr	r3, [r3, #24]
 800ad3e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4ab3      	ldr	r2, [pc, #716]	@ (800b014 <UART_SetConfig+0x32c>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d004      	beq.n	800ad54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad50:	4313      	orrs	r3, r2
 800ad52:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	689a      	ldr	r2, [r3, #8]
 800ad5a:	4baf      	ldr	r3, [pc, #700]	@ (800b018 <UART_SetConfig+0x330>)
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	6812      	ldr	r2, [r2, #0]
 800ad62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ad64:	430b      	orrs	r3, r1
 800ad66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6e:	f023 010f 	bic.w	r1, r3, #15
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	430a      	orrs	r2, r1
 800ad7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4aa6      	ldr	r2, [pc, #664]	@ (800b01c <UART_SetConfig+0x334>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d177      	bne.n	800ae78 <UART_SetConfig+0x190>
 800ad88:	4ba5      	ldr	r3, [pc, #660]	@ (800b020 <UART_SetConfig+0x338>)
 800ad8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad90:	2b28      	cmp	r3, #40	@ 0x28
 800ad92:	d86d      	bhi.n	800ae70 <UART_SetConfig+0x188>
 800ad94:	a201      	add	r2, pc, #4	@ (adr r2, 800ad9c <UART_SetConfig+0xb4>)
 800ad96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9a:	bf00      	nop
 800ad9c:	0800ae41 	.word	0x0800ae41
 800ada0:	0800ae71 	.word	0x0800ae71
 800ada4:	0800ae71 	.word	0x0800ae71
 800ada8:	0800ae71 	.word	0x0800ae71
 800adac:	0800ae71 	.word	0x0800ae71
 800adb0:	0800ae71 	.word	0x0800ae71
 800adb4:	0800ae71 	.word	0x0800ae71
 800adb8:	0800ae71 	.word	0x0800ae71
 800adbc:	0800ae49 	.word	0x0800ae49
 800adc0:	0800ae71 	.word	0x0800ae71
 800adc4:	0800ae71 	.word	0x0800ae71
 800adc8:	0800ae71 	.word	0x0800ae71
 800adcc:	0800ae71 	.word	0x0800ae71
 800add0:	0800ae71 	.word	0x0800ae71
 800add4:	0800ae71 	.word	0x0800ae71
 800add8:	0800ae71 	.word	0x0800ae71
 800addc:	0800ae51 	.word	0x0800ae51
 800ade0:	0800ae71 	.word	0x0800ae71
 800ade4:	0800ae71 	.word	0x0800ae71
 800ade8:	0800ae71 	.word	0x0800ae71
 800adec:	0800ae71 	.word	0x0800ae71
 800adf0:	0800ae71 	.word	0x0800ae71
 800adf4:	0800ae71 	.word	0x0800ae71
 800adf8:	0800ae71 	.word	0x0800ae71
 800adfc:	0800ae59 	.word	0x0800ae59
 800ae00:	0800ae71 	.word	0x0800ae71
 800ae04:	0800ae71 	.word	0x0800ae71
 800ae08:	0800ae71 	.word	0x0800ae71
 800ae0c:	0800ae71 	.word	0x0800ae71
 800ae10:	0800ae71 	.word	0x0800ae71
 800ae14:	0800ae71 	.word	0x0800ae71
 800ae18:	0800ae71 	.word	0x0800ae71
 800ae1c:	0800ae61 	.word	0x0800ae61
 800ae20:	0800ae71 	.word	0x0800ae71
 800ae24:	0800ae71 	.word	0x0800ae71
 800ae28:	0800ae71 	.word	0x0800ae71
 800ae2c:	0800ae71 	.word	0x0800ae71
 800ae30:	0800ae71 	.word	0x0800ae71
 800ae34:	0800ae71 	.word	0x0800ae71
 800ae38:	0800ae71 	.word	0x0800ae71
 800ae3c:	0800ae69 	.word	0x0800ae69
 800ae40:	2301      	movs	r3, #1
 800ae42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae46:	e326      	b.n	800b496 <UART_SetConfig+0x7ae>
 800ae48:	2304      	movs	r3, #4
 800ae4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae4e:	e322      	b.n	800b496 <UART_SetConfig+0x7ae>
 800ae50:	2308      	movs	r3, #8
 800ae52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae56:	e31e      	b.n	800b496 <UART_SetConfig+0x7ae>
 800ae58:	2310      	movs	r3, #16
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5e:	e31a      	b.n	800b496 <UART_SetConfig+0x7ae>
 800ae60:	2320      	movs	r3, #32
 800ae62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae66:	e316      	b.n	800b496 <UART_SetConfig+0x7ae>
 800ae68:	2340      	movs	r3, #64	@ 0x40
 800ae6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6e:	e312      	b.n	800b496 <UART_SetConfig+0x7ae>
 800ae70:	2380      	movs	r3, #128	@ 0x80
 800ae72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae76:	e30e      	b.n	800b496 <UART_SetConfig+0x7ae>
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a69      	ldr	r2, [pc, #420]	@ (800b024 <UART_SetConfig+0x33c>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d130      	bne.n	800aee4 <UART_SetConfig+0x1fc>
 800ae82:	4b67      	ldr	r3, [pc, #412]	@ (800b020 <UART_SetConfig+0x338>)
 800ae84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae86:	f003 0307 	and.w	r3, r3, #7
 800ae8a:	2b05      	cmp	r3, #5
 800ae8c:	d826      	bhi.n	800aedc <UART_SetConfig+0x1f4>
 800ae8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae94 <UART_SetConfig+0x1ac>)
 800ae90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae94:	0800aead 	.word	0x0800aead
 800ae98:	0800aeb5 	.word	0x0800aeb5
 800ae9c:	0800aebd 	.word	0x0800aebd
 800aea0:	0800aec5 	.word	0x0800aec5
 800aea4:	0800aecd 	.word	0x0800aecd
 800aea8:	0800aed5 	.word	0x0800aed5
 800aeac:	2300      	movs	r3, #0
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeb2:	e2f0      	b.n	800b496 <UART_SetConfig+0x7ae>
 800aeb4:	2304      	movs	r3, #4
 800aeb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeba:	e2ec      	b.n	800b496 <UART_SetConfig+0x7ae>
 800aebc:	2308      	movs	r3, #8
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aec2:	e2e8      	b.n	800b496 <UART_SetConfig+0x7ae>
 800aec4:	2310      	movs	r3, #16
 800aec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeca:	e2e4      	b.n	800b496 <UART_SetConfig+0x7ae>
 800aecc:	2320      	movs	r3, #32
 800aece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aed2:	e2e0      	b.n	800b496 <UART_SetConfig+0x7ae>
 800aed4:	2340      	movs	r3, #64	@ 0x40
 800aed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeda:	e2dc      	b.n	800b496 <UART_SetConfig+0x7ae>
 800aedc:	2380      	movs	r3, #128	@ 0x80
 800aede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aee2:	e2d8      	b.n	800b496 <UART_SetConfig+0x7ae>
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a4f      	ldr	r2, [pc, #316]	@ (800b028 <UART_SetConfig+0x340>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d130      	bne.n	800af50 <UART_SetConfig+0x268>
 800aeee:	4b4c      	ldr	r3, [pc, #304]	@ (800b020 <UART_SetConfig+0x338>)
 800aef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aef2:	f003 0307 	and.w	r3, r3, #7
 800aef6:	2b05      	cmp	r3, #5
 800aef8:	d826      	bhi.n	800af48 <UART_SetConfig+0x260>
 800aefa:	a201      	add	r2, pc, #4	@ (adr r2, 800af00 <UART_SetConfig+0x218>)
 800aefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af00:	0800af19 	.word	0x0800af19
 800af04:	0800af21 	.word	0x0800af21
 800af08:	0800af29 	.word	0x0800af29
 800af0c:	0800af31 	.word	0x0800af31
 800af10:	0800af39 	.word	0x0800af39
 800af14:	0800af41 	.word	0x0800af41
 800af18:	2300      	movs	r3, #0
 800af1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af1e:	e2ba      	b.n	800b496 <UART_SetConfig+0x7ae>
 800af20:	2304      	movs	r3, #4
 800af22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af26:	e2b6      	b.n	800b496 <UART_SetConfig+0x7ae>
 800af28:	2308      	movs	r3, #8
 800af2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af2e:	e2b2      	b.n	800b496 <UART_SetConfig+0x7ae>
 800af30:	2310      	movs	r3, #16
 800af32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af36:	e2ae      	b.n	800b496 <UART_SetConfig+0x7ae>
 800af38:	2320      	movs	r3, #32
 800af3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af3e:	e2aa      	b.n	800b496 <UART_SetConfig+0x7ae>
 800af40:	2340      	movs	r3, #64	@ 0x40
 800af42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af46:	e2a6      	b.n	800b496 <UART_SetConfig+0x7ae>
 800af48:	2380      	movs	r3, #128	@ 0x80
 800af4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af4e:	e2a2      	b.n	800b496 <UART_SetConfig+0x7ae>
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a35      	ldr	r2, [pc, #212]	@ (800b02c <UART_SetConfig+0x344>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d130      	bne.n	800afbc <UART_SetConfig+0x2d4>
 800af5a:	4b31      	ldr	r3, [pc, #196]	@ (800b020 <UART_SetConfig+0x338>)
 800af5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	2b05      	cmp	r3, #5
 800af64:	d826      	bhi.n	800afb4 <UART_SetConfig+0x2cc>
 800af66:	a201      	add	r2, pc, #4	@ (adr r2, 800af6c <UART_SetConfig+0x284>)
 800af68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6c:	0800af85 	.word	0x0800af85
 800af70:	0800af8d 	.word	0x0800af8d
 800af74:	0800af95 	.word	0x0800af95
 800af78:	0800af9d 	.word	0x0800af9d
 800af7c:	0800afa5 	.word	0x0800afa5
 800af80:	0800afad 	.word	0x0800afad
 800af84:	2300      	movs	r3, #0
 800af86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af8a:	e284      	b.n	800b496 <UART_SetConfig+0x7ae>
 800af8c:	2304      	movs	r3, #4
 800af8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af92:	e280      	b.n	800b496 <UART_SetConfig+0x7ae>
 800af94:	2308      	movs	r3, #8
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9a:	e27c      	b.n	800b496 <UART_SetConfig+0x7ae>
 800af9c:	2310      	movs	r3, #16
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa2:	e278      	b.n	800b496 <UART_SetConfig+0x7ae>
 800afa4:	2320      	movs	r3, #32
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afaa:	e274      	b.n	800b496 <UART_SetConfig+0x7ae>
 800afac:	2340      	movs	r3, #64	@ 0x40
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afb2:	e270      	b.n	800b496 <UART_SetConfig+0x7ae>
 800afb4:	2380      	movs	r3, #128	@ 0x80
 800afb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afba:	e26c      	b.n	800b496 <UART_SetConfig+0x7ae>
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a1b      	ldr	r2, [pc, #108]	@ (800b030 <UART_SetConfig+0x348>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d142      	bne.n	800b04c <UART_SetConfig+0x364>
 800afc6:	4b16      	ldr	r3, [pc, #88]	@ (800b020 <UART_SetConfig+0x338>)
 800afc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afca:	f003 0307 	and.w	r3, r3, #7
 800afce:	2b05      	cmp	r3, #5
 800afd0:	d838      	bhi.n	800b044 <UART_SetConfig+0x35c>
 800afd2:	a201      	add	r2, pc, #4	@ (adr r2, 800afd8 <UART_SetConfig+0x2f0>)
 800afd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd8:	0800aff1 	.word	0x0800aff1
 800afdc:	0800aff9 	.word	0x0800aff9
 800afe0:	0800b001 	.word	0x0800b001
 800afe4:	0800b009 	.word	0x0800b009
 800afe8:	0800b035 	.word	0x0800b035
 800afec:	0800b03d 	.word	0x0800b03d
 800aff0:	2300      	movs	r3, #0
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff6:	e24e      	b.n	800b496 <UART_SetConfig+0x7ae>
 800aff8:	2304      	movs	r3, #4
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affe:	e24a      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b000:	2308      	movs	r3, #8
 800b002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b006:	e246      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b008:	2310      	movs	r3, #16
 800b00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00e:	e242      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b010:	cfff69f3 	.word	0xcfff69f3
 800b014:	58000c00 	.word	0x58000c00
 800b018:	11fff4ff 	.word	0x11fff4ff
 800b01c:	40011000 	.word	0x40011000
 800b020:	58024400 	.word	0x58024400
 800b024:	40004400 	.word	0x40004400
 800b028:	40004800 	.word	0x40004800
 800b02c:	40004c00 	.word	0x40004c00
 800b030:	40005000 	.word	0x40005000
 800b034:	2320      	movs	r3, #32
 800b036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b03a:	e22c      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b03c:	2340      	movs	r3, #64	@ 0x40
 800b03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b042:	e228      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b044:	2380      	movs	r3, #128	@ 0x80
 800b046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b04a:	e224      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4ab1      	ldr	r2, [pc, #708]	@ (800b318 <UART_SetConfig+0x630>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d176      	bne.n	800b144 <UART_SetConfig+0x45c>
 800b056:	4bb1      	ldr	r3, [pc, #708]	@ (800b31c <UART_SetConfig+0x634>)
 800b058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b05a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b05e:	2b28      	cmp	r3, #40	@ 0x28
 800b060:	d86c      	bhi.n	800b13c <UART_SetConfig+0x454>
 800b062:	a201      	add	r2, pc, #4	@ (adr r2, 800b068 <UART_SetConfig+0x380>)
 800b064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b068:	0800b10d 	.word	0x0800b10d
 800b06c:	0800b13d 	.word	0x0800b13d
 800b070:	0800b13d 	.word	0x0800b13d
 800b074:	0800b13d 	.word	0x0800b13d
 800b078:	0800b13d 	.word	0x0800b13d
 800b07c:	0800b13d 	.word	0x0800b13d
 800b080:	0800b13d 	.word	0x0800b13d
 800b084:	0800b13d 	.word	0x0800b13d
 800b088:	0800b115 	.word	0x0800b115
 800b08c:	0800b13d 	.word	0x0800b13d
 800b090:	0800b13d 	.word	0x0800b13d
 800b094:	0800b13d 	.word	0x0800b13d
 800b098:	0800b13d 	.word	0x0800b13d
 800b09c:	0800b13d 	.word	0x0800b13d
 800b0a0:	0800b13d 	.word	0x0800b13d
 800b0a4:	0800b13d 	.word	0x0800b13d
 800b0a8:	0800b11d 	.word	0x0800b11d
 800b0ac:	0800b13d 	.word	0x0800b13d
 800b0b0:	0800b13d 	.word	0x0800b13d
 800b0b4:	0800b13d 	.word	0x0800b13d
 800b0b8:	0800b13d 	.word	0x0800b13d
 800b0bc:	0800b13d 	.word	0x0800b13d
 800b0c0:	0800b13d 	.word	0x0800b13d
 800b0c4:	0800b13d 	.word	0x0800b13d
 800b0c8:	0800b125 	.word	0x0800b125
 800b0cc:	0800b13d 	.word	0x0800b13d
 800b0d0:	0800b13d 	.word	0x0800b13d
 800b0d4:	0800b13d 	.word	0x0800b13d
 800b0d8:	0800b13d 	.word	0x0800b13d
 800b0dc:	0800b13d 	.word	0x0800b13d
 800b0e0:	0800b13d 	.word	0x0800b13d
 800b0e4:	0800b13d 	.word	0x0800b13d
 800b0e8:	0800b12d 	.word	0x0800b12d
 800b0ec:	0800b13d 	.word	0x0800b13d
 800b0f0:	0800b13d 	.word	0x0800b13d
 800b0f4:	0800b13d 	.word	0x0800b13d
 800b0f8:	0800b13d 	.word	0x0800b13d
 800b0fc:	0800b13d 	.word	0x0800b13d
 800b100:	0800b13d 	.word	0x0800b13d
 800b104:	0800b13d 	.word	0x0800b13d
 800b108:	0800b135 	.word	0x0800b135
 800b10c:	2301      	movs	r3, #1
 800b10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b112:	e1c0      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b114:	2304      	movs	r3, #4
 800b116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b11a:	e1bc      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b11c:	2308      	movs	r3, #8
 800b11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b122:	e1b8      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b124:	2310      	movs	r3, #16
 800b126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b12a:	e1b4      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b12c:	2320      	movs	r3, #32
 800b12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b132:	e1b0      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b134:	2340      	movs	r3, #64	@ 0x40
 800b136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b13a:	e1ac      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b13c:	2380      	movs	r3, #128	@ 0x80
 800b13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b142:	e1a8      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a75      	ldr	r2, [pc, #468]	@ (800b320 <UART_SetConfig+0x638>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d130      	bne.n	800b1b0 <UART_SetConfig+0x4c8>
 800b14e:	4b73      	ldr	r3, [pc, #460]	@ (800b31c <UART_SetConfig+0x634>)
 800b150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b152:	f003 0307 	and.w	r3, r3, #7
 800b156:	2b05      	cmp	r3, #5
 800b158:	d826      	bhi.n	800b1a8 <UART_SetConfig+0x4c0>
 800b15a:	a201      	add	r2, pc, #4	@ (adr r2, 800b160 <UART_SetConfig+0x478>)
 800b15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b160:	0800b179 	.word	0x0800b179
 800b164:	0800b181 	.word	0x0800b181
 800b168:	0800b189 	.word	0x0800b189
 800b16c:	0800b191 	.word	0x0800b191
 800b170:	0800b199 	.word	0x0800b199
 800b174:	0800b1a1 	.word	0x0800b1a1
 800b178:	2300      	movs	r3, #0
 800b17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b17e:	e18a      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b180:	2304      	movs	r3, #4
 800b182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b186:	e186      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b188:	2308      	movs	r3, #8
 800b18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b18e:	e182      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b190:	2310      	movs	r3, #16
 800b192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b196:	e17e      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b198:	2320      	movs	r3, #32
 800b19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b19e:	e17a      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b1a0:	2340      	movs	r3, #64	@ 0x40
 800b1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1a6:	e176      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b1a8:	2380      	movs	r3, #128	@ 0x80
 800b1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ae:	e172      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a5b      	ldr	r2, [pc, #364]	@ (800b324 <UART_SetConfig+0x63c>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d130      	bne.n	800b21c <UART_SetConfig+0x534>
 800b1ba:	4b58      	ldr	r3, [pc, #352]	@ (800b31c <UART_SetConfig+0x634>)
 800b1bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1be:	f003 0307 	and.w	r3, r3, #7
 800b1c2:	2b05      	cmp	r3, #5
 800b1c4:	d826      	bhi.n	800b214 <UART_SetConfig+0x52c>
 800b1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1cc <UART_SetConfig+0x4e4>)
 800b1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1cc:	0800b1e5 	.word	0x0800b1e5
 800b1d0:	0800b1ed 	.word	0x0800b1ed
 800b1d4:	0800b1f5 	.word	0x0800b1f5
 800b1d8:	0800b1fd 	.word	0x0800b1fd
 800b1dc:	0800b205 	.word	0x0800b205
 800b1e0:	0800b20d 	.word	0x0800b20d
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ea:	e154      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b1ec:	2304      	movs	r3, #4
 800b1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1f2:	e150      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b1f4:	2308      	movs	r3, #8
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1fa:	e14c      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b1fc:	2310      	movs	r3, #16
 800b1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b202:	e148      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b204:	2320      	movs	r3, #32
 800b206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b20a:	e144      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b20c:	2340      	movs	r3, #64	@ 0x40
 800b20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b212:	e140      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b214:	2380      	movs	r3, #128	@ 0x80
 800b216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b21a:	e13c      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a41      	ldr	r2, [pc, #260]	@ (800b328 <UART_SetConfig+0x640>)
 800b222:	4293      	cmp	r3, r2
 800b224:	f040 8082 	bne.w	800b32c <UART_SetConfig+0x644>
 800b228:	4b3c      	ldr	r3, [pc, #240]	@ (800b31c <UART_SetConfig+0x634>)
 800b22a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b22c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b230:	2b28      	cmp	r3, #40	@ 0x28
 800b232:	d86d      	bhi.n	800b310 <UART_SetConfig+0x628>
 800b234:	a201      	add	r2, pc, #4	@ (adr r2, 800b23c <UART_SetConfig+0x554>)
 800b236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23a:	bf00      	nop
 800b23c:	0800b2e1 	.word	0x0800b2e1
 800b240:	0800b311 	.word	0x0800b311
 800b244:	0800b311 	.word	0x0800b311
 800b248:	0800b311 	.word	0x0800b311
 800b24c:	0800b311 	.word	0x0800b311
 800b250:	0800b311 	.word	0x0800b311
 800b254:	0800b311 	.word	0x0800b311
 800b258:	0800b311 	.word	0x0800b311
 800b25c:	0800b2e9 	.word	0x0800b2e9
 800b260:	0800b311 	.word	0x0800b311
 800b264:	0800b311 	.word	0x0800b311
 800b268:	0800b311 	.word	0x0800b311
 800b26c:	0800b311 	.word	0x0800b311
 800b270:	0800b311 	.word	0x0800b311
 800b274:	0800b311 	.word	0x0800b311
 800b278:	0800b311 	.word	0x0800b311
 800b27c:	0800b2f1 	.word	0x0800b2f1
 800b280:	0800b311 	.word	0x0800b311
 800b284:	0800b311 	.word	0x0800b311
 800b288:	0800b311 	.word	0x0800b311
 800b28c:	0800b311 	.word	0x0800b311
 800b290:	0800b311 	.word	0x0800b311
 800b294:	0800b311 	.word	0x0800b311
 800b298:	0800b311 	.word	0x0800b311
 800b29c:	0800b2f9 	.word	0x0800b2f9
 800b2a0:	0800b311 	.word	0x0800b311
 800b2a4:	0800b311 	.word	0x0800b311
 800b2a8:	0800b311 	.word	0x0800b311
 800b2ac:	0800b311 	.word	0x0800b311
 800b2b0:	0800b311 	.word	0x0800b311
 800b2b4:	0800b311 	.word	0x0800b311
 800b2b8:	0800b311 	.word	0x0800b311
 800b2bc:	0800b301 	.word	0x0800b301
 800b2c0:	0800b311 	.word	0x0800b311
 800b2c4:	0800b311 	.word	0x0800b311
 800b2c8:	0800b311 	.word	0x0800b311
 800b2cc:	0800b311 	.word	0x0800b311
 800b2d0:	0800b311 	.word	0x0800b311
 800b2d4:	0800b311 	.word	0x0800b311
 800b2d8:	0800b311 	.word	0x0800b311
 800b2dc:	0800b309 	.word	0x0800b309
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2e6:	e0d6      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b2e8:	2304      	movs	r3, #4
 800b2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2ee:	e0d2      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b2f0:	2308      	movs	r3, #8
 800b2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2f6:	e0ce      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b2f8:	2310      	movs	r3, #16
 800b2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2fe:	e0ca      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b300:	2320      	movs	r3, #32
 800b302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b306:	e0c6      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b308:	2340      	movs	r3, #64	@ 0x40
 800b30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b30e:	e0c2      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b310:	2380      	movs	r3, #128	@ 0x80
 800b312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b316:	e0be      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b318:	40011400 	.word	0x40011400
 800b31c:	58024400 	.word	0x58024400
 800b320:	40007800 	.word	0x40007800
 800b324:	40007c00 	.word	0x40007c00
 800b328:	40011800 	.word	0x40011800
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4aad      	ldr	r2, [pc, #692]	@ (800b5e8 <UART_SetConfig+0x900>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d176      	bne.n	800b424 <UART_SetConfig+0x73c>
 800b336:	4bad      	ldr	r3, [pc, #692]	@ (800b5ec <UART_SetConfig+0x904>)
 800b338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b33a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b33e:	2b28      	cmp	r3, #40	@ 0x28
 800b340:	d86c      	bhi.n	800b41c <UART_SetConfig+0x734>
 800b342:	a201      	add	r2, pc, #4	@ (adr r2, 800b348 <UART_SetConfig+0x660>)
 800b344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b348:	0800b3ed 	.word	0x0800b3ed
 800b34c:	0800b41d 	.word	0x0800b41d
 800b350:	0800b41d 	.word	0x0800b41d
 800b354:	0800b41d 	.word	0x0800b41d
 800b358:	0800b41d 	.word	0x0800b41d
 800b35c:	0800b41d 	.word	0x0800b41d
 800b360:	0800b41d 	.word	0x0800b41d
 800b364:	0800b41d 	.word	0x0800b41d
 800b368:	0800b3f5 	.word	0x0800b3f5
 800b36c:	0800b41d 	.word	0x0800b41d
 800b370:	0800b41d 	.word	0x0800b41d
 800b374:	0800b41d 	.word	0x0800b41d
 800b378:	0800b41d 	.word	0x0800b41d
 800b37c:	0800b41d 	.word	0x0800b41d
 800b380:	0800b41d 	.word	0x0800b41d
 800b384:	0800b41d 	.word	0x0800b41d
 800b388:	0800b3fd 	.word	0x0800b3fd
 800b38c:	0800b41d 	.word	0x0800b41d
 800b390:	0800b41d 	.word	0x0800b41d
 800b394:	0800b41d 	.word	0x0800b41d
 800b398:	0800b41d 	.word	0x0800b41d
 800b39c:	0800b41d 	.word	0x0800b41d
 800b3a0:	0800b41d 	.word	0x0800b41d
 800b3a4:	0800b41d 	.word	0x0800b41d
 800b3a8:	0800b405 	.word	0x0800b405
 800b3ac:	0800b41d 	.word	0x0800b41d
 800b3b0:	0800b41d 	.word	0x0800b41d
 800b3b4:	0800b41d 	.word	0x0800b41d
 800b3b8:	0800b41d 	.word	0x0800b41d
 800b3bc:	0800b41d 	.word	0x0800b41d
 800b3c0:	0800b41d 	.word	0x0800b41d
 800b3c4:	0800b41d 	.word	0x0800b41d
 800b3c8:	0800b40d 	.word	0x0800b40d
 800b3cc:	0800b41d 	.word	0x0800b41d
 800b3d0:	0800b41d 	.word	0x0800b41d
 800b3d4:	0800b41d 	.word	0x0800b41d
 800b3d8:	0800b41d 	.word	0x0800b41d
 800b3dc:	0800b41d 	.word	0x0800b41d
 800b3e0:	0800b41d 	.word	0x0800b41d
 800b3e4:	0800b41d 	.word	0x0800b41d
 800b3e8:	0800b415 	.word	0x0800b415
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3f2:	e050      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b3f4:	2304      	movs	r3, #4
 800b3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3fa:	e04c      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b3fc:	2308      	movs	r3, #8
 800b3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b402:	e048      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b404:	2310      	movs	r3, #16
 800b406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b40a:	e044      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b40c:	2320      	movs	r3, #32
 800b40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b412:	e040      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b414:	2340      	movs	r3, #64	@ 0x40
 800b416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b41a:	e03c      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b41c:	2380      	movs	r3, #128	@ 0x80
 800b41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b422:	e038      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a71      	ldr	r2, [pc, #452]	@ (800b5f0 <UART_SetConfig+0x908>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d130      	bne.n	800b490 <UART_SetConfig+0x7a8>
 800b42e:	4b6f      	ldr	r3, [pc, #444]	@ (800b5ec <UART_SetConfig+0x904>)
 800b430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b432:	f003 0307 	and.w	r3, r3, #7
 800b436:	2b05      	cmp	r3, #5
 800b438:	d826      	bhi.n	800b488 <UART_SetConfig+0x7a0>
 800b43a:	a201      	add	r2, pc, #4	@ (adr r2, 800b440 <UART_SetConfig+0x758>)
 800b43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b440:	0800b459 	.word	0x0800b459
 800b444:	0800b461 	.word	0x0800b461
 800b448:	0800b469 	.word	0x0800b469
 800b44c:	0800b471 	.word	0x0800b471
 800b450:	0800b479 	.word	0x0800b479
 800b454:	0800b481 	.word	0x0800b481
 800b458:	2302      	movs	r3, #2
 800b45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b45e:	e01a      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b460:	2304      	movs	r3, #4
 800b462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b466:	e016      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b468:	2308      	movs	r3, #8
 800b46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b46e:	e012      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b470:	2310      	movs	r3, #16
 800b472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b476:	e00e      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b478:	2320      	movs	r3, #32
 800b47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b47e:	e00a      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b480:	2340      	movs	r3, #64	@ 0x40
 800b482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b486:	e006      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b488:	2380      	movs	r3, #128	@ 0x80
 800b48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b48e:	e002      	b.n	800b496 <UART_SetConfig+0x7ae>
 800b490:	2380      	movs	r3, #128	@ 0x80
 800b492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a55      	ldr	r2, [pc, #340]	@ (800b5f0 <UART_SetConfig+0x908>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	f040 80f8 	bne.w	800b692 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b4a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b4a6:	2b20      	cmp	r3, #32
 800b4a8:	dc46      	bgt.n	800b538 <UART_SetConfig+0x850>
 800b4aa:	2b02      	cmp	r3, #2
 800b4ac:	db75      	blt.n	800b59a <UART_SetConfig+0x8b2>
 800b4ae:	3b02      	subs	r3, #2
 800b4b0:	2b1e      	cmp	r3, #30
 800b4b2:	d872      	bhi.n	800b59a <UART_SetConfig+0x8b2>
 800b4b4:	a201      	add	r2, pc, #4	@ (adr r2, 800b4bc <UART_SetConfig+0x7d4>)
 800b4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ba:	bf00      	nop
 800b4bc:	0800b53f 	.word	0x0800b53f
 800b4c0:	0800b59b 	.word	0x0800b59b
 800b4c4:	0800b547 	.word	0x0800b547
 800b4c8:	0800b59b 	.word	0x0800b59b
 800b4cc:	0800b59b 	.word	0x0800b59b
 800b4d0:	0800b59b 	.word	0x0800b59b
 800b4d4:	0800b557 	.word	0x0800b557
 800b4d8:	0800b59b 	.word	0x0800b59b
 800b4dc:	0800b59b 	.word	0x0800b59b
 800b4e0:	0800b59b 	.word	0x0800b59b
 800b4e4:	0800b59b 	.word	0x0800b59b
 800b4e8:	0800b59b 	.word	0x0800b59b
 800b4ec:	0800b59b 	.word	0x0800b59b
 800b4f0:	0800b59b 	.word	0x0800b59b
 800b4f4:	0800b567 	.word	0x0800b567
 800b4f8:	0800b59b 	.word	0x0800b59b
 800b4fc:	0800b59b 	.word	0x0800b59b
 800b500:	0800b59b 	.word	0x0800b59b
 800b504:	0800b59b 	.word	0x0800b59b
 800b508:	0800b59b 	.word	0x0800b59b
 800b50c:	0800b59b 	.word	0x0800b59b
 800b510:	0800b59b 	.word	0x0800b59b
 800b514:	0800b59b 	.word	0x0800b59b
 800b518:	0800b59b 	.word	0x0800b59b
 800b51c:	0800b59b 	.word	0x0800b59b
 800b520:	0800b59b 	.word	0x0800b59b
 800b524:	0800b59b 	.word	0x0800b59b
 800b528:	0800b59b 	.word	0x0800b59b
 800b52c:	0800b59b 	.word	0x0800b59b
 800b530:	0800b59b 	.word	0x0800b59b
 800b534:	0800b58d 	.word	0x0800b58d
 800b538:	2b40      	cmp	r3, #64	@ 0x40
 800b53a:	d02a      	beq.n	800b592 <UART_SetConfig+0x8aa>
 800b53c:	e02d      	b.n	800b59a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b53e:	f7fd fe4f 	bl	80091e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b542:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b544:	e02f      	b.n	800b5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fd fe5e 	bl	800920c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b554:	e027      	b.n	800b5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b556:	f107 0318 	add.w	r3, r7, #24
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fd ffaa 	bl	80094b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b564:	e01f      	b.n	800b5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b566:	4b21      	ldr	r3, [pc, #132]	@ (800b5ec <UART_SetConfig+0x904>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f003 0320 	and.w	r3, r3, #32
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d009      	beq.n	800b586 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b572:	4b1e      	ldr	r3, [pc, #120]	@ (800b5ec <UART_SetConfig+0x904>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	08db      	lsrs	r3, r3, #3
 800b578:	f003 0303 	and.w	r3, r3, #3
 800b57c:	4a1d      	ldr	r2, [pc, #116]	@ (800b5f4 <UART_SetConfig+0x90c>)
 800b57e:	fa22 f303 	lsr.w	r3, r2, r3
 800b582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b584:	e00f      	b.n	800b5a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b586:	4b1b      	ldr	r3, [pc, #108]	@ (800b5f4 <UART_SetConfig+0x90c>)
 800b588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b58a:	e00c      	b.n	800b5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b58c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5f8 <UART_SetConfig+0x910>)
 800b58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b590:	e009      	b.n	800b5a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b598:	e005      	b.n	800b5a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b59a:	2300      	movs	r3, #0
 800b59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b5a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 81ee 	beq.w	800b98a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5b2:	4a12      	ldr	r2, [pc, #72]	@ (800b5fc <UART_SetConfig+0x914>)
 800b5b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5c0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	685a      	ldr	r2, [r3, #4]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	005b      	lsls	r3, r3, #1
 800b5ca:	4413      	add	r3, r2
 800b5cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d305      	bcc.n	800b5de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d910      	bls.n	800b600 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b5e4:	e1d1      	b.n	800b98a <UART_SetConfig+0xca2>
 800b5e6:	bf00      	nop
 800b5e8:	40011c00 	.word	0x40011c00
 800b5ec:	58024400 	.word	0x58024400
 800b5f0:	58000c00 	.word	0x58000c00
 800b5f4:	03d09000 	.word	0x03d09000
 800b5f8:	003d0900 	.word	0x003d0900
 800b5fc:	0800ccdc 	.word	0x0800ccdc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b602:	2200      	movs	r2, #0
 800b604:	60bb      	str	r3, [r7, #8]
 800b606:	60fa      	str	r2, [r7, #12]
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b60c:	4ac0      	ldr	r2, [pc, #768]	@ (800b910 <UART_SetConfig+0xc28>)
 800b60e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b612:	b29b      	uxth	r3, r3
 800b614:	2200      	movs	r2, #0
 800b616:	603b      	str	r3, [r7, #0]
 800b618:	607a      	str	r2, [r7, #4]
 800b61a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b61e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b622:	f7f4 fecd 	bl	80003c0 <__aeabi_uldivmod>
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	4610      	mov	r0, r2
 800b62c:	4619      	mov	r1, r3
 800b62e:	f04f 0200 	mov.w	r2, #0
 800b632:	f04f 0300 	mov.w	r3, #0
 800b636:	020b      	lsls	r3, r1, #8
 800b638:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b63c:	0202      	lsls	r2, r0, #8
 800b63e:	6979      	ldr	r1, [r7, #20]
 800b640:	6849      	ldr	r1, [r1, #4]
 800b642:	0849      	lsrs	r1, r1, #1
 800b644:	2000      	movs	r0, #0
 800b646:	460c      	mov	r4, r1
 800b648:	4605      	mov	r5, r0
 800b64a:	eb12 0804 	adds.w	r8, r2, r4
 800b64e:	eb43 0905 	adc.w	r9, r3, r5
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	469a      	mov	sl, r3
 800b65a:	4693      	mov	fp, r2
 800b65c:	4652      	mov	r2, sl
 800b65e:	465b      	mov	r3, fp
 800b660:	4640      	mov	r0, r8
 800b662:	4649      	mov	r1, r9
 800b664:	f7f4 feac 	bl	80003c0 <__aeabi_uldivmod>
 800b668:	4602      	mov	r2, r0
 800b66a:	460b      	mov	r3, r1
 800b66c:	4613      	mov	r3, r2
 800b66e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b672:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b676:	d308      	bcc.n	800b68a <UART_SetConfig+0x9a2>
 800b678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b67e:	d204      	bcs.n	800b68a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b686:	60da      	str	r2, [r3, #12]
 800b688:	e17f      	b.n	800b98a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b690:	e17b      	b.n	800b98a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	69db      	ldr	r3, [r3, #28]
 800b696:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b69a:	f040 80bd 	bne.w	800b818 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b69e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b6a2:	2b20      	cmp	r3, #32
 800b6a4:	dc48      	bgt.n	800b738 <UART_SetConfig+0xa50>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	db7b      	blt.n	800b7a2 <UART_SetConfig+0xaba>
 800b6aa:	2b20      	cmp	r3, #32
 800b6ac:	d879      	bhi.n	800b7a2 <UART_SetConfig+0xaba>
 800b6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b4 <UART_SetConfig+0x9cc>)
 800b6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b4:	0800b73f 	.word	0x0800b73f
 800b6b8:	0800b747 	.word	0x0800b747
 800b6bc:	0800b7a3 	.word	0x0800b7a3
 800b6c0:	0800b7a3 	.word	0x0800b7a3
 800b6c4:	0800b74f 	.word	0x0800b74f
 800b6c8:	0800b7a3 	.word	0x0800b7a3
 800b6cc:	0800b7a3 	.word	0x0800b7a3
 800b6d0:	0800b7a3 	.word	0x0800b7a3
 800b6d4:	0800b75f 	.word	0x0800b75f
 800b6d8:	0800b7a3 	.word	0x0800b7a3
 800b6dc:	0800b7a3 	.word	0x0800b7a3
 800b6e0:	0800b7a3 	.word	0x0800b7a3
 800b6e4:	0800b7a3 	.word	0x0800b7a3
 800b6e8:	0800b7a3 	.word	0x0800b7a3
 800b6ec:	0800b7a3 	.word	0x0800b7a3
 800b6f0:	0800b7a3 	.word	0x0800b7a3
 800b6f4:	0800b76f 	.word	0x0800b76f
 800b6f8:	0800b7a3 	.word	0x0800b7a3
 800b6fc:	0800b7a3 	.word	0x0800b7a3
 800b700:	0800b7a3 	.word	0x0800b7a3
 800b704:	0800b7a3 	.word	0x0800b7a3
 800b708:	0800b7a3 	.word	0x0800b7a3
 800b70c:	0800b7a3 	.word	0x0800b7a3
 800b710:	0800b7a3 	.word	0x0800b7a3
 800b714:	0800b7a3 	.word	0x0800b7a3
 800b718:	0800b7a3 	.word	0x0800b7a3
 800b71c:	0800b7a3 	.word	0x0800b7a3
 800b720:	0800b7a3 	.word	0x0800b7a3
 800b724:	0800b7a3 	.word	0x0800b7a3
 800b728:	0800b7a3 	.word	0x0800b7a3
 800b72c:	0800b7a3 	.word	0x0800b7a3
 800b730:	0800b7a3 	.word	0x0800b7a3
 800b734:	0800b795 	.word	0x0800b795
 800b738:	2b40      	cmp	r3, #64	@ 0x40
 800b73a:	d02e      	beq.n	800b79a <UART_SetConfig+0xab2>
 800b73c:	e031      	b.n	800b7a2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b73e:	f7fb feb1 	bl	80074a4 <HAL_RCC_GetPCLK1Freq>
 800b742:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b744:	e033      	b.n	800b7ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b746:	f7fb fec3 	bl	80074d0 <HAL_RCC_GetPCLK2Freq>
 800b74a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b74c:	e02f      	b.n	800b7ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b74e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b752:	4618      	mov	r0, r3
 800b754:	f7fd fd5a 	bl	800920c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b75c:	e027      	b.n	800b7ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b75e:	f107 0318 	add.w	r3, r7, #24
 800b762:	4618      	mov	r0, r3
 800b764:	f7fd fea6 	bl	80094b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b76c:	e01f      	b.n	800b7ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b76e:	4b69      	ldr	r3, [pc, #420]	@ (800b914 <UART_SetConfig+0xc2c>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f003 0320 	and.w	r3, r3, #32
 800b776:	2b00      	cmp	r3, #0
 800b778:	d009      	beq.n	800b78e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b77a:	4b66      	ldr	r3, [pc, #408]	@ (800b914 <UART_SetConfig+0xc2c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	08db      	lsrs	r3, r3, #3
 800b780:	f003 0303 	and.w	r3, r3, #3
 800b784:	4a64      	ldr	r2, [pc, #400]	@ (800b918 <UART_SetConfig+0xc30>)
 800b786:	fa22 f303 	lsr.w	r3, r2, r3
 800b78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b78c:	e00f      	b.n	800b7ae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b78e:	4b62      	ldr	r3, [pc, #392]	@ (800b918 <UART_SetConfig+0xc30>)
 800b790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b792:	e00c      	b.n	800b7ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b794:	4b61      	ldr	r3, [pc, #388]	@ (800b91c <UART_SetConfig+0xc34>)
 800b796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b798:	e009      	b.n	800b7ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b79a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7a0:	e005      	b.n	800b7ae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b7ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f000 80ea 	beq.w	800b98a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ba:	4a55      	ldr	r2, [pc, #340]	@ (800b910 <UART_SetConfig+0xc28>)
 800b7bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7c8:	005a      	lsls	r2, r3, #1
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	085b      	lsrs	r3, r3, #1
 800b7d0:	441a      	add	r2, r3
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7de:	2b0f      	cmp	r3, #15
 800b7e0:	d916      	bls.n	800b810 <UART_SetConfig+0xb28>
 800b7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7e8:	d212      	bcs.n	800b810 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	f023 030f 	bic.w	r3, r3, #15
 800b7f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f6:	085b      	lsrs	r3, r3, #1
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	f003 0307 	and.w	r3, r3, #7
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b802:	4313      	orrs	r3, r2
 800b804:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b80c:	60da      	str	r2, [r3, #12]
 800b80e:	e0bc      	b.n	800b98a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b816:	e0b8      	b.n	800b98a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b818:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b81c:	2b20      	cmp	r3, #32
 800b81e:	dc4b      	bgt.n	800b8b8 <UART_SetConfig+0xbd0>
 800b820:	2b00      	cmp	r3, #0
 800b822:	f2c0 8087 	blt.w	800b934 <UART_SetConfig+0xc4c>
 800b826:	2b20      	cmp	r3, #32
 800b828:	f200 8084 	bhi.w	800b934 <UART_SetConfig+0xc4c>
 800b82c:	a201      	add	r2, pc, #4	@ (adr r2, 800b834 <UART_SetConfig+0xb4c>)
 800b82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b832:	bf00      	nop
 800b834:	0800b8bf 	.word	0x0800b8bf
 800b838:	0800b8c7 	.word	0x0800b8c7
 800b83c:	0800b935 	.word	0x0800b935
 800b840:	0800b935 	.word	0x0800b935
 800b844:	0800b8cf 	.word	0x0800b8cf
 800b848:	0800b935 	.word	0x0800b935
 800b84c:	0800b935 	.word	0x0800b935
 800b850:	0800b935 	.word	0x0800b935
 800b854:	0800b8df 	.word	0x0800b8df
 800b858:	0800b935 	.word	0x0800b935
 800b85c:	0800b935 	.word	0x0800b935
 800b860:	0800b935 	.word	0x0800b935
 800b864:	0800b935 	.word	0x0800b935
 800b868:	0800b935 	.word	0x0800b935
 800b86c:	0800b935 	.word	0x0800b935
 800b870:	0800b935 	.word	0x0800b935
 800b874:	0800b8ef 	.word	0x0800b8ef
 800b878:	0800b935 	.word	0x0800b935
 800b87c:	0800b935 	.word	0x0800b935
 800b880:	0800b935 	.word	0x0800b935
 800b884:	0800b935 	.word	0x0800b935
 800b888:	0800b935 	.word	0x0800b935
 800b88c:	0800b935 	.word	0x0800b935
 800b890:	0800b935 	.word	0x0800b935
 800b894:	0800b935 	.word	0x0800b935
 800b898:	0800b935 	.word	0x0800b935
 800b89c:	0800b935 	.word	0x0800b935
 800b8a0:	0800b935 	.word	0x0800b935
 800b8a4:	0800b935 	.word	0x0800b935
 800b8a8:	0800b935 	.word	0x0800b935
 800b8ac:	0800b935 	.word	0x0800b935
 800b8b0:	0800b935 	.word	0x0800b935
 800b8b4:	0800b927 	.word	0x0800b927
 800b8b8:	2b40      	cmp	r3, #64	@ 0x40
 800b8ba:	d037      	beq.n	800b92c <UART_SetConfig+0xc44>
 800b8bc:	e03a      	b.n	800b934 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8be:	f7fb fdf1 	bl	80074a4 <HAL_RCC_GetPCLK1Freq>
 800b8c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8c4:	e03c      	b.n	800b940 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8c6:	f7fb fe03 	bl	80074d0 <HAL_RCC_GetPCLK2Freq>
 800b8ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8cc:	e038      	b.n	800b940 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7fd fc9a 	bl	800920c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8dc:	e030      	b.n	800b940 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8de:	f107 0318 	add.w	r3, r7, #24
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fd fde6 	bl	80094b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8ec:	e028      	b.n	800b940 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8ee:	4b09      	ldr	r3, [pc, #36]	@ (800b914 <UART_SetConfig+0xc2c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0320 	and.w	r3, r3, #32
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d012      	beq.n	800b920 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8fa:	4b06      	ldr	r3, [pc, #24]	@ (800b914 <UART_SetConfig+0xc2c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	08db      	lsrs	r3, r3, #3
 800b900:	f003 0303 	and.w	r3, r3, #3
 800b904:	4a04      	ldr	r2, [pc, #16]	@ (800b918 <UART_SetConfig+0xc30>)
 800b906:	fa22 f303 	lsr.w	r3, r2, r3
 800b90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b90c:	e018      	b.n	800b940 <UART_SetConfig+0xc58>
 800b90e:	bf00      	nop
 800b910:	0800ccdc 	.word	0x0800ccdc
 800b914:	58024400 	.word	0x58024400
 800b918:	03d09000 	.word	0x03d09000
 800b91c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b920:	4b24      	ldr	r3, [pc, #144]	@ (800b9b4 <UART_SetConfig+0xccc>)
 800b922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b924:	e00c      	b.n	800b940 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b926:	4b24      	ldr	r3, [pc, #144]	@ (800b9b8 <UART_SetConfig+0xcd0>)
 800b928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b92a:	e009      	b.n	800b940 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b92c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b932:	e005      	b.n	800b940 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b934:	2300      	movs	r3, #0
 800b936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b93e:	bf00      	nop
    }

    if (pclk != 0U)
 800b940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b942:	2b00      	cmp	r3, #0
 800b944:	d021      	beq.n	800b98a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b94a:	4a1c      	ldr	r2, [pc, #112]	@ (800b9bc <UART_SetConfig+0xcd4>)
 800b94c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b950:	461a      	mov	r2, r3
 800b952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b954:	fbb3 f2f2 	udiv	r2, r3, r2
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	085b      	lsrs	r3, r3, #1
 800b95e:	441a      	add	r2, r3
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	fbb2 f3f3 	udiv	r3, r2, r3
 800b968:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96c:	2b0f      	cmp	r3, #15
 800b96e:	d909      	bls.n	800b984 <UART_SetConfig+0xc9c>
 800b970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b976:	d205      	bcs.n	800b984 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	60da      	str	r2, [r3, #12]
 800b982:	e002      	b.n	800b98a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2201      	movs	r2, #1
 800b996:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2200      	movs	r2, #0
 800b99e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b9a6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3748      	adds	r7, #72	@ 0x48
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9b4:	03d09000 	.word	0x03d09000
 800b9b8:	003d0900 	.word	0x003d0900
 800b9bc:	0800ccdc 	.word	0x0800ccdc

0800b9c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9cc:	f003 0308 	and.w	r3, r3, #8
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00a      	beq.n	800b9ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	430a      	orrs	r2, r1
 800b9e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ee:	f003 0301 	and.w	r3, r3, #1
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00a      	beq.n	800ba0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	430a      	orrs	r2, r1
 800ba0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba10:	f003 0302 	and.w	r3, r3, #2
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00a      	beq.n	800ba2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba32:	f003 0304 	and.w	r3, r3, #4
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00a      	beq.n	800ba50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	430a      	orrs	r2, r1
 800ba4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba54:	f003 0310 	and.w	r3, r3, #16
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d00a      	beq.n	800ba72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	430a      	orrs	r2, r1
 800ba70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba76:	f003 0320 	and.w	r3, r3, #32
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00a      	beq.n	800ba94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	430a      	orrs	r2, r1
 800ba92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d01a      	beq.n	800bad6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	430a      	orrs	r2, r1
 800bab4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800babe:	d10a      	bne.n	800bad6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	430a      	orrs	r2, r1
 800bad4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00a      	beq.n	800baf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	430a      	orrs	r2, r1
 800baf6:	605a      	str	r2, [r3, #4]
  }
}
 800baf8:	bf00      	nop
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b098      	sub	sp, #96	@ 0x60
 800bb08:	af02      	add	r7, sp, #8
 800bb0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb14:	f7f7 f8f0 	bl	8002cf8 <HAL_GetTick>
 800bb18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f003 0308 	and.w	r3, r3, #8
 800bb24:	2b08      	cmp	r3, #8
 800bb26:	d12f      	bne.n	800bb88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb30:	2200      	movs	r2, #0
 800bb32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 f88e 	bl	800bc58 <UART_WaitOnFlagUntilTimeout>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d022      	beq.n	800bb88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4a:	e853 3f00 	ldrex	r3, [r3]
 800bb4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb56:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb60:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb68:	e841 2300 	strex	r3, r2, [r1]
 800bb6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1e6      	bne.n	800bb42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2220      	movs	r2, #32
 800bb78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb84:	2303      	movs	r3, #3
 800bb86:	e063      	b.n	800bc50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f003 0304 	and.w	r3, r3, #4
 800bb92:	2b04      	cmp	r3, #4
 800bb94:	d149      	bne.n	800bc2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f857 	bl	800bc58 <UART_WaitOnFlagUntilTimeout>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d03c      	beq.n	800bc2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb8:	e853 3f00 	ldrex	r3, [r3]
 800bbbc:	623b      	str	r3, [r7, #32]
   return(result);
 800bbbe:	6a3b      	ldr	r3, [r7, #32]
 800bbc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbce:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbd6:	e841 2300 	strex	r3, r2, [r1]
 800bbda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1e6      	bne.n	800bbb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	3308      	adds	r3, #8
 800bbe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	e853 3f00 	ldrex	r3, [r3]
 800bbf0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f023 0301 	bic.w	r3, r3, #1
 800bbf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	3308      	adds	r3, #8
 800bc00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc02:	61fa      	str	r2, [r7, #28]
 800bc04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc06:	69b9      	ldr	r1, [r7, #24]
 800bc08:	69fa      	ldr	r2, [r7, #28]
 800bc0a:	e841 2300 	strex	r3, r2, [r1]
 800bc0e:	617b      	str	r3, [r7, #20]
   return(result);
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1e5      	bne.n	800bbe2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2220      	movs	r2, #32
 800bc1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc26:	2303      	movs	r3, #3
 800bc28:	e012      	b.n	800bc50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2220      	movs	r2, #32
 800bc36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3758      	adds	r7, #88	@ 0x58
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	603b      	str	r3, [r7, #0]
 800bc64:	4613      	mov	r3, r2
 800bc66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc68:	e04f      	b.n	800bd0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc70:	d04b      	beq.n	800bd0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc72:	f7f7 f841 	bl	8002cf8 <HAL_GetTick>
 800bc76:	4602      	mov	r2, r0
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	69ba      	ldr	r2, [r7, #24]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d302      	bcc.n	800bc88 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d101      	bne.n	800bc8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	e04e      	b.n	800bd2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f003 0304 	and.w	r3, r3, #4
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d037      	beq.n	800bd0a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	2b80      	cmp	r3, #128	@ 0x80
 800bc9e:	d034      	beq.n	800bd0a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	2b40      	cmp	r3, #64	@ 0x40
 800bca4:	d031      	beq.n	800bd0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	69db      	ldr	r3, [r3, #28]
 800bcac:	f003 0308 	and.w	r3, r3, #8
 800bcb0:	2b08      	cmp	r3, #8
 800bcb2:	d110      	bne.n	800bcd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2208      	movs	r2, #8
 800bcba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f000 f839 	bl	800bd34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2208      	movs	r2, #8
 800bcc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e029      	b.n	800bd2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	69db      	ldr	r3, [r3, #28]
 800bcdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bce4:	d111      	bne.n	800bd0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bcee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f000 f81f 	bl	800bd34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2220      	movs	r2, #32
 800bcfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bd06:	2303      	movs	r3, #3
 800bd08:	e00f      	b.n	800bd2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	69da      	ldr	r2, [r3, #28]
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	4013      	ands	r3, r2
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	bf0c      	ite	eq
 800bd1a:	2301      	moveq	r3, #1
 800bd1c:	2300      	movne	r3, #0
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	461a      	mov	r2, r3
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d0a0      	beq.n	800bc6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
	...

0800bd34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b095      	sub	sp, #84	@ 0x54
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd44:	e853 3f00 	ldrex	r3, [r3]
 800bd48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e6      	bne.n	800bd3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3308      	adds	r3, #8
 800bd74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd76:	6a3b      	ldr	r3, [r7, #32]
 800bd78:	e853 3f00 	ldrex	r3, [r3]
 800bd7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd7e:	69fa      	ldr	r2, [r7, #28]
 800bd80:	4b1e      	ldr	r3, [pc, #120]	@ (800bdfc <UART_EndRxTransfer+0xc8>)
 800bd82:	4013      	ands	r3, r2
 800bd84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3308      	adds	r3, #8
 800bd8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bd90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd96:	e841 2300 	strex	r3, r2, [r1]
 800bd9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1e5      	bne.n	800bd6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d118      	bne.n	800bddc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	e853 3f00 	ldrex	r3, [r3]
 800bdb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	f023 0310 	bic.w	r3, r3, #16
 800bdbe:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdc8:	61bb      	str	r3, [r7, #24]
 800bdca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdcc:	6979      	ldr	r1, [r7, #20]
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	e841 2300 	strex	r3, r2, [r1]
 800bdd4:	613b      	str	r3, [r7, #16]
   return(result);
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1e6      	bne.n	800bdaa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2220      	movs	r2, #32
 800bde0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bdf0:	bf00      	nop
 800bdf2:	3754      	adds	r7, #84	@ 0x54
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	effffffe 	.word	0xeffffffe

0800be00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d101      	bne.n	800be16 <HAL_UARTEx_DisableFifoMode+0x16>
 800be12:	2302      	movs	r3, #2
 800be14:	e027      	b.n	800be66 <HAL_UARTEx_DisableFifoMode+0x66>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2201      	movs	r2, #1
 800be1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2224      	movs	r2, #36	@ 0x24
 800be22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f022 0201 	bic.w	r2, r2, #1
 800be3c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800be44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2220      	movs	r2, #32
 800be58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr

0800be72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b084      	sub	sp, #16
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
 800be7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800be82:	2b01      	cmp	r3, #1
 800be84:	d101      	bne.n	800be8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be86:	2302      	movs	r3, #2
 800be88:	e02d      	b.n	800bee6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2201      	movs	r2, #1
 800be8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2224      	movs	r2, #36	@ 0x24
 800be96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f022 0201 	bic.w	r2, r2, #1
 800beb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f850 	bl	800bf6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2220      	movs	r2, #32
 800bed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b084      	sub	sp, #16
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d101      	bne.n	800bf06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf02:	2302      	movs	r3, #2
 800bf04:	e02d      	b.n	800bf62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2224      	movs	r2, #36	@ 0x24
 800bf12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f022 0201 	bic.w	r2, r2, #1
 800bf2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	683a      	ldr	r2, [r7, #0]
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 f812 	bl	800bf6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2220      	movs	r2, #32
 800bf54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
	...

0800bf6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d108      	bne.n	800bf8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2201      	movs	r2, #1
 800bf88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf8c:	e031      	b.n	800bff2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf8e:	2310      	movs	r3, #16
 800bf90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf92:	2310      	movs	r3, #16
 800bf94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	0e5b      	lsrs	r3, r3, #25
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	f003 0307 	and.w	r3, r3, #7
 800bfa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	0f5b      	lsrs	r3, r3, #29
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	f003 0307 	and.w	r3, r3, #7
 800bfb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfb6:	7bbb      	ldrb	r3, [r7, #14]
 800bfb8:	7b3a      	ldrb	r2, [r7, #12]
 800bfba:	4911      	ldr	r1, [pc, #68]	@ (800c000 <UARTEx_SetNbDataToProcess+0x94>)
 800bfbc:	5c8a      	ldrb	r2, [r1, r2]
 800bfbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bfc2:	7b3a      	ldrb	r2, [r7, #12]
 800bfc4:	490f      	ldr	r1, [pc, #60]	@ (800c004 <UARTEx_SetNbDataToProcess+0x98>)
 800bfc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfc8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfcc:	b29a      	uxth	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bfd4:	7bfb      	ldrb	r3, [r7, #15]
 800bfd6:	7b7a      	ldrb	r2, [r7, #13]
 800bfd8:	4909      	ldr	r1, [pc, #36]	@ (800c000 <UARTEx_SetNbDataToProcess+0x94>)
 800bfda:	5c8a      	ldrb	r2, [r1, r2]
 800bfdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bfe0:	7b7a      	ldrb	r2, [r7, #13]
 800bfe2:	4908      	ldr	r1, [pc, #32]	@ (800c004 <UARTEx_SetNbDataToProcess+0x98>)
 800bfe4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bfe6:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfea:	b29a      	uxth	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bff2:	bf00      	nop
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	0800ccf4 	.word	0x0800ccf4
 800c004:	0800ccfc 	.word	0x0800ccfc

0800c008 <siprintf>:
 800c008:	b40e      	push	{r1, r2, r3}
 800c00a:	b510      	push	{r4, lr}
 800c00c:	b09d      	sub	sp, #116	@ 0x74
 800c00e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c010:	9002      	str	r0, [sp, #8]
 800c012:	9006      	str	r0, [sp, #24]
 800c014:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c018:	480a      	ldr	r0, [pc, #40]	@ (800c044 <siprintf+0x3c>)
 800c01a:	9107      	str	r1, [sp, #28]
 800c01c:	9104      	str	r1, [sp, #16]
 800c01e:	490a      	ldr	r1, [pc, #40]	@ (800c048 <siprintf+0x40>)
 800c020:	f853 2b04 	ldr.w	r2, [r3], #4
 800c024:	9105      	str	r1, [sp, #20]
 800c026:	2400      	movs	r4, #0
 800c028:	a902      	add	r1, sp, #8
 800c02a:	6800      	ldr	r0, [r0, #0]
 800c02c:	9301      	str	r3, [sp, #4]
 800c02e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c030:	f000 f9a2 	bl	800c378 <_svfiprintf_r>
 800c034:	9b02      	ldr	r3, [sp, #8]
 800c036:	701c      	strb	r4, [r3, #0]
 800c038:	b01d      	add	sp, #116	@ 0x74
 800c03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c03e:	b003      	add	sp, #12
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	2400001c 	.word	0x2400001c
 800c048:	ffff0208 	.word	0xffff0208

0800c04c <memset>:
 800c04c:	4402      	add	r2, r0
 800c04e:	4603      	mov	r3, r0
 800c050:	4293      	cmp	r3, r2
 800c052:	d100      	bne.n	800c056 <memset+0xa>
 800c054:	4770      	bx	lr
 800c056:	f803 1b01 	strb.w	r1, [r3], #1
 800c05a:	e7f9      	b.n	800c050 <memset+0x4>

0800c05c <__errno>:
 800c05c:	4b01      	ldr	r3, [pc, #4]	@ (800c064 <__errno+0x8>)
 800c05e:	6818      	ldr	r0, [r3, #0]
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	2400001c 	.word	0x2400001c

0800c068 <__libc_init_array>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	4d0d      	ldr	r5, [pc, #52]	@ (800c0a0 <__libc_init_array+0x38>)
 800c06c:	4c0d      	ldr	r4, [pc, #52]	@ (800c0a4 <__libc_init_array+0x3c>)
 800c06e:	1b64      	subs	r4, r4, r5
 800c070:	10a4      	asrs	r4, r4, #2
 800c072:	2600      	movs	r6, #0
 800c074:	42a6      	cmp	r6, r4
 800c076:	d109      	bne.n	800c08c <__libc_init_array+0x24>
 800c078:	4d0b      	ldr	r5, [pc, #44]	@ (800c0a8 <__libc_init_array+0x40>)
 800c07a:	4c0c      	ldr	r4, [pc, #48]	@ (800c0ac <__libc_init_array+0x44>)
 800c07c:	f000 fc64 	bl	800c948 <_init>
 800c080:	1b64      	subs	r4, r4, r5
 800c082:	10a4      	asrs	r4, r4, #2
 800c084:	2600      	movs	r6, #0
 800c086:	42a6      	cmp	r6, r4
 800c088:	d105      	bne.n	800c096 <__libc_init_array+0x2e>
 800c08a:	bd70      	pop	{r4, r5, r6, pc}
 800c08c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c090:	4798      	blx	r3
 800c092:	3601      	adds	r6, #1
 800c094:	e7ee      	b.n	800c074 <__libc_init_array+0xc>
 800c096:	f855 3b04 	ldr.w	r3, [r5], #4
 800c09a:	4798      	blx	r3
 800c09c:	3601      	adds	r6, #1
 800c09e:	e7f2      	b.n	800c086 <__libc_init_array+0x1e>
 800c0a0:	0800cd40 	.word	0x0800cd40
 800c0a4:	0800cd40 	.word	0x0800cd40
 800c0a8:	0800cd40 	.word	0x0800cd40
 800c0ac:	0800cd48 	.word	0x0800cd48

0800c0b0 <__retarget_lock_acquire_recursive>:
 800c0b0:	4770      	bx	lr

0800c0b2 <__retarget_lock_release_recursive>:
 800c0b2:	4770      	bx	lr

0800c0b4 <memcpy>:
 800c0b4:	440a      	add	r2, r1
 800c0b6:	4291      	cmp	r1, r2
 800c0b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0bc:	d100      	bne.n	800c0c0 <memcpy+0xc>
 800c0be:	4770      	bx	lr
 800c0c0:	b510      	push	{r4, lr}
 800c0c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0ca:	4291      	cmp	r1, r2
 800c0cc:	d1f9      	bne.n	800c0c2 <memcpy+0xe>
 800c0ce:	bd10      	pop	{r4, pc}

0800c0d0 <_free_r>:
 800c0d0:	b538      	push	{r3, r4, r5, lr}
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	2900      	cmp	r1, #0
 800c0d6:	d041      	beq.n	800c15c <_free_r+0x8c>
 800c0d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0dc:	1f0c      	subs	r4, r1, #4
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	bfb8      	it	lt
 800c0e2:	18e4      	addlt	r4, r4, r3
 800c0e4:	f000 f8e0 	bl	800c2a8 <__malloc_lock>
 800c0e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c160 <_free_r+0x90>)
 800c0ea:	6813      	ldr	r3, [r2, #0]
 800c0ec:	b933      	cbnz	r3, 800c0fc <_free_r+0x2c>
 800c0ee:	6063      	str	r3, [r4, #4]
 800c0f0:	6014      	str	r4, [r2, #0]
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0f8:	f000 b8dc 	b.w	800c2b4 <__malloc_unlock>
 800c0fc:	42a3      	cmp	r3, r4
 800c0fe:	d908      	bls.n	800c112 <_free_r+0x42>
 800c100:	6820      	ldr	r0, [r4, #0]
 800c102:	1821      	adds	r1, r4, r0
 800c104:	428b      	cmp	r3, r1
 800c106:	bf01      	itttt	eq
 800c108:	6819      	ldreq	r1, [r3, #0]
 800c10a:	685b      	ldreq	r3, [r3, #4]
 800c10c:	1809      	addeq	r1, r1, r0
 800c10e:	6021      	streq	r1, [r4, #0]
 800c110:	e7ed      	b.n	800c0ee <_free_r+0x1e>
 800c112:	461a      	mov	r2, r3
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	b10b      	cbz	r3, 800c11c <_free_r+0x4c>
 800c118:	42a3      	cmp	r3, r4
 800c11a:	d9fa      	bls.n	800c112 <_free_r+0x42>
 800c11c:	6811      	ldr	r1, [r2, #0]
 800c11e:	1850      	adds	r0, r2, r1
 800c120:	42a0      	cmp	r0, r4
 800c122:	d10b      	bne.n	800c13c <_free_r+0x6c>
 800c124:	6820      	ldr	r0, [r4, #0]
 800c126:	4401      	add	r1, r0
 800c128:	1850      	adds	r0, r2, r1
 800c12a:	4283      	cmp	r3, r0
 800c12c:	6011      	str	r1, [r2, #0]
 800c12e:	d1e0      	bne.n	800c0f2 <_free_r+0x22>
 800c130:	6818      	ldr	r0, [r3, #0]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	6053      	str	r3, [r2, #4]
 800c136:	4408      	add	r0, r1
 800c138:	6010      	str	r0, [r2, #0]
 800c13a:	e7da      	b.n	800c0f2 <_free_r+0x22>
 800c13c:	d902      	bls.n	800c144 <_free_r+0x74>
 800c13e:	230c      	movs	r3, #12
 800c140:	602b      	str	r3, [r5, #0]
 800c142:	e7d6      	b.n	800c0f2 <_free_r+0x22>
 800c144:	6820      	ldr	r0, [r4, #0]
 800c146:	1821      	adds	r1, r4, r0
 800c148:	428b      	cmp	r3, r1
 800c14a:	bf04      	itt	eq
 800c14c:	6819      	ldreq	r1, [r3, #0]
 800c14e:	685b      	ldreq	r3, [r3, #4]
 800c150:	6063      	str	r3, [r4, #4]
 800c152:	bf04      	itt	eq
 800c154:	1809      	addeq	r1, r1, r0
 800c156:	6021      	streq	r1, [r4, #0]
 800c158:	6054      	str	r4, [r2, #4]
 800c15a:	e7ca      	b.n	800c0f2 <_free_r+0x22>
 800c15c:	bd38      	pop	{r3, r4, r5, pc}
 800c15e:	bf00      	nop
 800c160:	24000e98 	.word	0x24000e98

0800c164 <sbrk_aligned>:
 800c164:	b570      	push	{r4, r5, r6, lr}
 800c166:	4e0f      	ldr	r6, [pc, #60]	@ (800c1a4 <sbrk_aligned+0x40>)
 800c168:	460c      	mov	r4, r1
 800c16a:	6831      	ldr	r1, [r6, #0]
 800c16c:	4605      	mov	r5, r0
 800c16e:	b911      	cbnz	r1, 800c176 <sbrk_aligned+0x12>
 800c170:	f000 fba4 	bl	800c8bc <_sbrk_r>
 800c174:	6030      	str	r0, [r6, #0]
 800c176:	4621      	mov	r1, r4
 800c178:	4628      	mov	r0, r5
 800c17a:	f000 fb9f 	bl	800c8bc <_sbrk_r>
 800c17e:	1c43      	adds	r3, r0, #1
 800c180:	d103      	bne.n	800c18a <sbrk_aligned+0x26>
 800c182:	f04f 34ff 	mov.w	r4, #4294967295
 800c186:	4620      	mov	r0, r4
 800c188:	bd70      	pop	{r4, r5, r6, pc}
 800c18a:	1cc4      	adds	r4, r0, #3
 800c18c:	f024 0403 	bic.w	r4, r4, #3
 800c190:	42a0      	cmp	r0, r4
 800c192:	d0f8      	beq.n	800c186 <sbrk_aligned+0x22>
 800c194:	1a21      	subs	r1, r4, r0
 800c196:	4628      	mov	r0, r5
 800c198:	f000 fb90 	bl	800c8bc <_sbrk_r>
 800c19c:	3001      	adds	r0, #1
 800c19e:	d1f2      	bne.n	800c186 <sbrk_aligned+0x22>
 800c1a0:	e7ef      	b.n	800c182 <sbrk_aligned+0x1e>
 800c1a2:	bf00      	nop
 800c1a4:	24000e94 	.word	0x24000e94

0800c1a8 <_malloc_r>:
 800c1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1ac:	1ccd      	adds	r5, r1, #3
 800c1ae:	f025 0503 	bic.w	r5, r5, #3
 800c1b2:	3508      	adds	r5, #8
 800c1b4:	2d0c      	cmp	r5, #12
 800c1b6:	bf38      	it	cc
 800c1b8:	250c      	movcc	r5, #12
 800c1ba:	2d00      	cmp	r5, #0
 800c1bc:	4606      	mov	r6, r0
 800c1be:	db01      	blt.n	800c1c4 <_malloc_r+0x1c>
 800c1c0:	42a9      	cmp	r1, r5
 800c1c2:	d904      	bls.n	800c1ce <_malloc_r+0x26>
 800c1c4:	230c      	movs	r3, #12
 800c1c6:	6033      	str	r3, [r6, #0]
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c2a4 <_malloc_r+0xfc>
 800c1d2:	f000 f869 	bl	800c2a8 <__malloc_lock>
 800c1d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c1da:	461c      	mov	r4, r3
 800c1dc:	bb44      	cbnz	r4, 800c230 <_malloc_r+0x88>
 800c1de:	4629      	mov	r1, r5
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	f7ff ffbf 	bl	800c164 <sbrk_aligned>
 800c1e6:	1c43      	adds	r3, r0, #1
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	d158      	bne.n	800c29e <_malloc_r+0xf6>
 800c1ec:	f8d8 4000 	ldr.w	r4, [r8]
 800c1f0:	4627      	mov	r7, r4
 800c1f2:	2f00      	cmp	r7, #0
 800c1f4:	d143      	bne.n	800c27e <_malloc_r+0xd6>
 800c1f6:	2c00      	cmp	r4, #0
 800c1f8:	d04b      	beq.n	800c292 <_malloc_r+0xea>
 800c1fa:	6823      	ldr	r3, [r4, #0]
 800c1fc:	4639      	mov	r1, r7
 800c1fe:	4630      	mov	r0, r6
 800c200:	eb04 0903 	add.w	r9, r4, r3
 800c204:	f000 fb5a 	bl	800c8bc <_sbrk_r>
 800c208:	4581      	cmp	r9, r0
 800c20a:	d142      	bne.n	800c292 <_malloc_r+0xea>
 800c20c:	6821      	ldr	r1, [r4, #0]
 800c20e:	1a6d      	subs	r5, r5, r1
 800c210:	4629      	mov	r1, r5
 800c212:	4630      	mov	r0, r6
 800c214:	f7ff ffa6 	bl	800c164 <sbrk_aligned>
 800c218:	3001      	adds	r0, #1
 800c21a:	d03a      	beq.n	800c292 <_malloc_r+0xea>
 800c21c:	6823      	ldr	r3, [r4, #0]
 800c21e:	442b      	add	r3, r5
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	f8d8 3000 	ldr.w	r3, [r8]
 800c226:	685a      	ldr	r2, [r3, #4]
 800c228:	bb62      	cbnz	r2, 800c284 <_malloc_r+0xdc>
 800c22a:	f8c8 7000 	str.w	r7, [r8]
 800c22e:	e00f      	b.n	800c250 <_malloc_r+0xa8>
 800c230:	6822      	ldr	r2, [r4, #0]
 800c232:	1b52      	subs	r2, r2, r5
 800c234:	d420      	bmi.n	800c278 <_malloc_r+0xd0>
 800c236:	2a0b      	cmp	r2, #11
 800c238:	d917      	bls.n	800c26a <_malloc_r+0xc2>
 800c23a:	1961      	adds	r1, r4, r5
 800c23c:	42a3      	cmp	r3, r4
 800c23e:	6025      	str	r5, [r4, #0]
 800c240:	bf18      	it	ne
 800c242:	6059      	strne	r1, [r3, #4]
 800c244:	6863      	ldr	r3, [r4, #4]
 800c246:	bf08      	it	eq
 800c248:	f8c8 1000 	streq.w	r1, [r8]
 800c24c:	5162      	str	r2, [r4, r5]
 800c24e:	604b      	str	r3, [r1, #4]
 800c250:	4630      	mov	r0, r6
 800c252:	f000 f82f 	bl	800c2b4 <__malloc_unlock>
 800c256:	f104 000b 	add.w	r0, r4, #11
 800c25a:	1d23      	adds	r3, r4, #4
 800c25c:	f020 0007 	bic.w	r0, r0, #7
 800c260:	1ac2      	subs	r2, r0, r3
 800c262:	bf1c      	itt	ne
 800c264:	1a1b      	subne	r3, r3, r0
 800c266:	50a3      	strne	r3, [r4, r2]
 800c268:	e7af      	b.n	800c1ca <_malloc_r+0x22>
 800c26a:	6862      	ldr	r2, [r4, #4]
 800c26c:	42a3      	cmp	r3, r4
 800c26e:	bf0c      	ite	eq
 800c270:	f8c8 2000 	streq.w	r2, [r8]
 800c274:	605a      	strne	r2, [r3, #4]
 800c276:	e7eb      	b.n	800c250 <_malloc_r+0xa8>
 800c278:	4623      	mov	r3, r4
 800c27a:	6864      	ldr	r4, [r4, #4]
 800c27c:	e7ae      	b.n	800c1dc <_malloc_r+0x34>
 800c27e:	463c      	mov	r4, r7
 800c280:	687f      	ldr	r7, [r7, #4]
 800c282:	e7b6      	b.n	800c1f2 <_malloc_r+0x4a>
 800c284:	461a      	mov	r2, r3
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	42a3      	cmp	r3, r4
 800c28a:	d1fb      	bne.n	800c284 <_malloc_r+0xdc>
 800c28c:	2300      	movs	r3, #0
 800c28e:	6053      	str	r3, [r2, #4]
 800c290:	e7de      	b.n	800c250 <_malloc_r+0xa8>
 800c292:	230c      	movs	r3, #12
 800c294:	6033      	str	r3, [r6, #0]
 800c296:	4630      	mov	r0, r6
 800c298:	f000 f80c 	bl	800c2b4 <__malloc_unlock>
 800c29c:	e794      	b.n	800c1c8 <_malloc_r+0x20>
 800c29e:	6005      	str	r5, [r0, #0]
 800c2a0:	e7d6      	b.n	800c250 <_malloc_r+0xa8>
 800c2a2:	bf00      	nop
 800c2a4:	24000e98 	.word	0x24000e98

0800c2a8 <__malloc_lock>:
 800c2a8:	4801      	ldr	r0, [pc, #4]	@ (800c2b0 <__malloc_lock+0x8>)
 800c2aa:	f7ff bf01 	b.w	800c0b0 <__retarget_lock_acquire_recursive>
 800c2ae:	bf00      	nop
 800c2b0:	24000e90 	.word	0x24000e90

0800c2b4 <__malloc_unlock>:
 800c2b4:	4801      	ldr	r0, [pc, #4]	@ (800c2bc <__malloc_unlock+0x8>)
 800c2b6:	f7ff befc 	b.w	800c0b2 <__retarget_lock_release_recursive>
 800c2ba:	bf00      	nop
 800c2bc:	24000e90 	.word	0x24000e90

0800c2c0 <__ssputs_r>:
 800c2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2c4:	688e      	ldr	r6, [r1, #8]
 800c2c6:	461f      	mov	r7, r3
 800c2c8:	42be      	cmp	r6, r7
 800c2ca:	680b      	ldr	r3, [r1, #0]
 800c2cc:	4682      	mov	sl, r0
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	4690      	mov	r8, r2
 800c2d2:	d82d      	bhi.n	800c330 <__ssputs_r+0x70>
 800c2d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c2dc:	d026      	beq.n	800c32c <__ssputs_r+0x6c>
 800c2de:	6965      	ldr	r5, [r4, #20]
 800c2e0:	6909      	ldr	r1, [r1, #16]
 800c2e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2e6:	eba3 0901 	sub.w	r9, r3, r1
 800c2ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2ee:	1c7b      	adds	r3, r7, #1
 800c2f0:	444b      	add	r3, r9
 800c2f2:	106d      	asrs	r5, r5, #1
 800c2f4:	429d      	cmp	r5, r3
 800c2f6:	bf38      	it	cc
 800c2f8:	461d      	movcc	r5, r3
 800c2fa:	0553      	lsls	r3, r2, #21
 800c2fc:	d527      	bpl.n	800c34e <__ssputs_r+0x8e>
 800c2fe:	4629      	mov	r1, r5
 800c300:	f7ff ff52 	bl	800c1a8 <_malloc_r>
 800c304:	4606      	mov	r6, r0
 800c306:	b360      	cbz	r0, 800c362 <__ssputs_r+0xa2>
 800c308:	6921      	ldr	r1, [r4, #16]
 800c30a:	464a      	mov	r2, r9
 800c30c:	f7ff fed2 	bl	800c0b4 <memcpy>
 800c310:	89a3      	ldrh	r3, [r4, #12]
 800c312:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c31a:	81a3      	strh	r3, [r4, #12]
 800c31c:	6126      	str	r6, [r4, #16]
 800c31e:	6165      	str	r5, [r4, #20]
 800c320:	444e      	add	r6, r9
 800c322:	eba5 0509 	sub.w	r5, r5, r9
 800c326:	6026      	str	r6, [r4, #0]
 800c328:	60a5      	str	r5, [r4, #8]
 800c32a:	463e      	mov	r6, r7
 800c32c:	42be      	cmp	r6, r7
 800c32e:	d900      	bls.n	800c332 <__ssputs_r+0x72>
 800c330:	463e      	mov	r6, r7
 800c332:	6820      	ldr	r0, [r4, #0]
 800c334:	4632      	mov	r2, r6
 800c336:	4641      	mov	r1, r8
 800c338:	f000 faa6 	bl	800c888 <memmove>
 800c33c:	68a3      	ldr	r3, [r4, #8]
 800c33e:	1b9b      	subs	r3, r3, r6
 800c340:	60a3      	str	r3, [r4, #8]
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	4433      	add	r3, r6
 800c346:	6023      	str	r3, [r4, #0]
 800c348:	2000      	movs	r0, #0
 800c34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c34e:	462a      	mov	r2, r5
 800c350:	f000 fac4 	bl	800c8dc <_realloc_r>
 800c354:	4606      	mov	r6, r0
 800c356:	2800      	cmp	r0, #0
 800c358:	d1e0      	bne.n	800c31c <__ssputs_r+0x5c>
 800c35a:	6921      	ldr	r1, [r4, #16]
 800c35c:	4650      	mov	r0, sl
 800c35e:	f7ff feb7 	bl	800c0d0 <_free_r>
 800c362:	230c      	movs	r3, #12
 800c364:	f8ca 3000 	str.w	r3, [sl]
 800c368:	89a3      	ldrh	r3, [r4, #12]
 800c36a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c36e:	81a3      	strh	r3, [r4, #12]
 800c370:	f04f 30ff 	mov.w	r0, #4294967295
 800c374:	e7e9      	b.n	800c34a <__ssputs_r+0x8a>
	...

0800c378 <_svfiprintf_r>:
 800c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37c:	4698      	mov	r8, r3
 800c37e:	898b      	ldrh	r3, [r1, #12]
 800c380:	061b      	lsls	r3, r3, #24
 800c382:	b09d      	sub	sp, #116	@ 0x74
 800c384:	4607      	mov	r7, r0
 800c386:	460d      	mov	r5, r1
 800c388:	4614      	mov	r4, r2
 800c38a:	d510      	bpl.n	800c3ae <_svfiprintf_r+0x36>
 800c38c:	690b      	ldr	r3, [r1, #16]
 800c38e:	b973      	cbnz	r3, 800c3ae <_svfiprintf_r+0x36>
 800c390:	2140      	movs	r1, #64	@ 0x40
 800c392:	f7ff ff09 	bl	800c1a8 <_malloc_r>
 800c396:	6028      	str	r0, [r5, #0]
 800c398:	6128      	str	r0, [r5, #16]
 800c39a:	b930      	cbnz	r0, 800c3aa <_svfiprintf_r+0x32>
 800c39c:	230c      	movs	r3, #12
 800c39e:	603b      	str	r3, [r7, #0]
 800c3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a4:	b01d      	add	sp, #116	@ 0x74
 800c3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3aa:	2340      	movs	r3, #64	@ 0x40
 800c3ac:	616b      	str	r3, [r5, #20]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3b2:	2320      	movs	r3, #32
 800c3b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3bc:	2330      	movs	r3, #48	@ 0x30
 800c3be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c55c <_svfiprintf_r+0x1e4>
 800c3c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3c6:	f04f 0901 	mov.w	r9, #1
 800c3ca:	4623      	mov	r3, r4
 800c3cc:	469a      	mov	sl, r3
 800c3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3d2:	b10a      	cbz	r2, 800c3d8 <_svfiprintf_r+0x60>
 800c3d4:	2a25      	cmp	r2, #37	@ 0x25
 800c3d6:	d1f9      	bne.n	800c3cc <_svfiprintf_r+0x54>
 800c3d8:	ebba 0b04 	subs.w	fp, sl, r4
 800c3dc:	d00b      	beq.n	800c3f6 <_svfiprintf_r+0x7e>
 800c3de:	465b      	mov	r3, fp
 800c3e0:	4622      	mov	r2, r4
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	f7ff ff6b 	bl	800c2c0 <__ssputs_r>
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	f000 80a7 	beq.w	800c53e <_svfiprintf_r+0x1c6>
 800c3f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3f2:	445a      	add	r2, fp
 800c3f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f000 809f 	beq.w	800c53e <_svfiprintf_r+0x1c6>
 800c400:	2300      	movs	r3, #0
 800c402:	f04f 32ff 	mov.w	r2, #4294967295
 800c406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c40a:	f10a 0a01 	add.w	sl, sl, #1
 800c40e:	9304      	str	r3, [sp, #16]
 800c410:	9307      	str	r3, [sp, #28]
 800c412:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c416:	931a      	str	r3, [sp, #104]	@ 0x68
 800c418:	4654      	mov	r4, sl
 800c41a:	2205      	movs	r2, #5
 800c41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c420:	484e      	ldr	r0, [pc, #312]	@ (800c55c <_svfiprintf_r+0x1e4>)
 800c422:	f7f3 ff7d 	bl	8000320 <memchr>
 800c426:	9a04      	ldr	r2, [sp, #16]
 800c428:	b9d8      	cbnz	r0, 800c462 <_svfiprintf_r+0xea>
 800c42a:	06d0      	lsls	r0, r2, #27
 800c42c:	bf44      	itt	mi
 800c42e:	2320      	movmi	r3, #32
 800c430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c434:	0711      	lsls	r1, r2, #28
 800c436:	bf44      	itt	mi
 800c438:	232b      	movmi	r3, #43	@ 0x2b
 800c43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c43e:	f89a 3000 	ldrb.w	r3, [sl]
 800c442:	2b2a      	cmp	r3, #42	@ 0x2a
 800c444:	d015      	beq.n	800c472 <_svfiprintf_r+0xfa>
 800c446:	9a07      	ldr	r2, [sp, #28]
 800c448:	4654      	mov	r4, sl
 800c44a:	2000      	movs	r0, #0
 800c44c:	f04f 0c0a 	mov.w	ip, #10
 800c450:	4621      	mov	r1, r4
 800c452:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c456:	3b30      	subs	r3, #48	@ 0x30
 800c458:	2b09      	cmp	r3, #9
 800c45a:	d94b      	bls.n	800c4f4 <_svfiprintf_r+0x17c>
 800c45c:	b1b0      	cbz	r0, 800c48c <_svfiprintf_r+0x114>
 800c45e:	9207      	str	r2, [sp, #28]
 800c460:	e014      	b.n	800c48c <_svfiprintf_r+0x114>
 800c462:	eba0 0308 	sub.w	r3, r0, r8
 800c466:	fa09 f303 	lsl.w	r3, r9, r3
 800c46a:	4313      	orrs	r3, r2
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	46a2      	mov	sl, r4
 800c470:	e7d2      	b.n	800c418 <_svfiprintf_r+0xa0>
 800c472:	9b03      	ldr	r3, [sp, #12]
 800c474:	1d19      	adds	r1, r3, #4
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	9103      	str	r1, [sp, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	bfbb      	ittet	lt
 800c47e:	425b      	neglt	r3, r3
 800c480:	f042 0202 	orrlt.w	r2, r2, #2
 800c484:	9307      	strge	r3, [sp, #28]
 800c486:	9307      	strlt	r3, [sp, #28]
 800c488:	bfb8      	it	lt
 800c48a:	9204      	strlt	r2, [sp, #16]
 800c48c:	7823      	ldrb	r3, [r4, #0]
 800c48e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c490:	d10a      	bne.n	800c4a8 <_svfiprintf_r+0x130>
 800c492:	7863      	ldrb	r3, [r4, #1]
 800c494:	2b2a      	cmp	r3, #42	@ 0x2a
 800c496:	d132      	bne.n	800c4fe <_svfiprintf_r+0x186>
 800c498:	9b03      	ldr	r3, [sp, #12]
 800c49a:	1d1a      	adds	r2, r3, #4
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	9203      	str	r2, [sp, #12]
 800c4a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4a4:	3402      	adds	r4, #2
 800c4a6:	9305      	str	r3, [sp, #20]
 800c4a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c56c <_svfiprintf_r+0x1f4>
 800c4ac:	7821      	ldrb	r1, [r4, #0]
 800c4ae:	2203      	movs	r2, #3
 800c4b0:	4650      	mov	r0, sl
 800c4b2:	f7f3 ff35 	bl	8000320 <memchr>
 800c4b6:	b138      	cbz	r0, 800c4c8 <_svfiprintf_r+0x150>
 800c4b8:	9b04      	ldr	r3, [sp, #16]
 800c4ba:	eba0 000a 	sub.w	r0, r0, sl
 800c4be:	2240      	movs	r2, #64	@ 0x40
 800c4c0:	4082      	lsls	r2, r0
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	3401      	adds	r4, #1
 800c4c6:	9304      	str	r3, [sp, #16]
 800c4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4cc:	4824      	ldr	r0, [pc, #144]	@ (800c560 <_svfiprintf_r+0x1e8>)
 800c4ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4d2:	2206      	movs	r2, #6
 800c4d4:	f7f3 ff24 	bl	8000320 <memchr>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d036      	beq.n	800c54a <_svfiprintf_r+0x1d2>
 800c4dc:	4b21      	ldr	r3, [pc, #132]	@ (800c564 <_svfiprintf_r+0x1ec>)
 800c4de:	bb1b      	cbnz	r3, 800c528 <_svfiprintf_r+0x1b0>
 800c4e0:	9b03      	ldr	r3, [sp, #12]
 800c4e2:	3307      	adds	r3, #7
 800c4e4:	f023 0307 	bic.w	r3, r3, #7
 800c4e8:	3308      	adds	r3, #8
 800c4ea:	9303      	str	r3, [sp, #12]
 800c4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ee:	4433      	add	r3, r6
 800c4f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4f2:	e76a      	b.n	800c3ca <_svfiprintf_r+0x52>
 800c4f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4f8:	460c      	mov	r4, r1
 800c4fa:	2001      	movs	r0, #1
 800c4fc:	e7a8      	b.n	800c450 <_svfiprintf_r+0xd8>
 800c4fe:	2300      	movs	r3, #0
 800c500:	3401      	adds	r4, #1
 800c502:	9305      	str	r3, [sp, #20]
 800c504:	4619      	mov	r1, r3
 800c506:	f04f 0c0a 	mov.w	ip, #10
 800c50a:	4620      	mov	r0, r4
 800c50c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c510:	3a30      	subs	r2, #48	@ 0x30
 800c512:	2a09      	cmp	r2, #9
 800c514:	d903      	bls.n	800c51e <_svfiprintf_r+0x1a6>
 800c516:	2b00      	cmp	r3, #0
 800c518:	d0c6      	beq.n	800c4a8 <_svfiprintf_r+0x130>
 800c51a:	9105      	str	r1, [sp, #20]
 800c51c:	e7c4      	b.n	800c4a8 <_svfiprintf_r+0x130>
 800c51e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c522:	4604      	mov	r4, r0
 800c524:	2301      	movs	r3, #1
 800c526:	e7f0      	b.n	800c50a <_svfiprintf_r+0x192>
 800c528:	ab03      	add	r3, sp, #12
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	462a      	mov	r2, r5
 800c52e:	4b0e      	ldr	r3, [pc, #56]	@ (800c568 <_svfiprintf_r+0x1f0>)
 800c530:	a904      	add	r1, sp, #16
 800c532:	4638      	mov	r0, r7
 800c534:	f3af 8000 	nop.w
 800c538:	1c42      	adds	r2, r0, #1
 800c53a:	4606      	mov	r6, r0
 800c53c:	d1d6      	bne.n	800c4ec <_svfiprintf_r+0x174>
 800c53e:	89ab      	ldrh	r3, [r5, #12]
 800c540:	065b      	lsls	r3, r3, #25
 800c542:	f53f af2d 	bmi.w	800c3a0 <_svfiprintf_r+0x28>
 800c546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c548:	e72c      	b.n	800c3a4 <_svfiprintf_r+0x2c>
 800c54a:	ab03      	add	r3, sp, #12
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	462a      	mov	r2, r5
 800c550:	4b05      	ldr	r3, [pc, #20]	@ (800c568 <_svfiprintf_r+0x1f0>)
 800c552:	a904      	add	r1, sp, #16
 800c554:	4638      	mov	r0, r7
 800c556:	f000 f879 	bl	800c64c <_printf_i>
 800c55a:	e7ed      	b.n	800c538 <_svfiprintf_r+0x1c0>
 800c55c:	0800cd04 	.word	0x0800cd04
 800c560:	0800cd0e 	.word	0x0800cd0e
 800c564:	00000000 	.word	0x00000000
 800c568:	0800c2c1 	.word	0x0800c2c1
 800c56c:	0800cd0a 	.word	0x0800cd0a

0800c570 <_printf_common>:
 800c570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c574:	4616      	mov	r6, r2
 800c576:	4698      	mov	r8, r3
 800c578:	688a      	ldr	r2, [r1, #8]
 800c57a:	690b      	ldr	r3, [r1, #16]
 800c57c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c580:	4293      	cmp	r3, r2
 800c582:	bfb8      	it	lt
 800c584:	4613      	movlt	r3, r2
 800c586:	6033      	str	r3, [r6, #0]
 800c588:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c58c:	4607      	mov	r7, r0
 800c58e:	460c      	mov	r4, r1
 800c590:	b10a      	cbz	r2, 800c596 <_printf_common+0x26>
 800c592:	3301      	adds	r3, #1
 800c594:	6033      	str	r3, [r6, #0]
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	0699      	lsls	r1, r3, #26
 800c59a:	bf42      	ittt	mi
 800c59c:	6833      	ldrmi	r3, [r6, #0]
 800c59e:	3302      	addmi	r3, #2
 800c5a0:	6033      	strmi	r3, [r6, #0]
 800c5a2:	6825      	ldr	r5, [r4, #0]
 800c5a4:	f015 0506 	ands.w	r5, r5, #6
 800c5a8:	d106      	bne.n	800c5b8 <_printf_common+0x48>
 800c5aa:	f104 0a19 	add.w	sl, r4, #25
 800c5ae:	68e3      	ldr	r3, [r4, #12]
 800c5b0:	6832      	ldr	r2, [r6, #0]
 800c5b2:	1a9b      	subs	r3, r3, r2
 800c5b4:	42ab      	cmp	r3, r5
 800c5b6:	dc26      	bgt.n	800c606 <_printf_common+0x96>
 800c5b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c5bc:	6822      	ldr	r2, [r4, #0]
 800c5be:	3b00      	subs	r3, #0
 800c5c0:	bf18      	it	ne
 800c5c2:	2301      	movne	r3, #1
 800c5c4:	0692      	lsls	r2, r2, #26
 800c5c6:	d42b      	bmi.n	800c620 <_printf_common+0xb0>
 800c5c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c5cc:	4641      	mov	r1, r8
 800c5ce:	4638      	mov	r0, r7
 800c5d0:	47c8      	blx	r9
 800c5d2:	3001      	adds	r0, #1
 800c5d4:	d01e      	beq.n	800c614 <_printf_common+0xa4>
 800c5d6:	6823      	ldr	r3, [r4, #0]
 800c5d8:	6922      	ldr	r2, [r4, #16]
 800c5da:	f003 0306 	and.w	r3, r3, #6
 800c5de:	2b04      	cmp	r3, #4
 800c5e0:	bf02      	ittt	eq
 800c5e2:	68e5      	ldreq	r5, [r4, #12]
 800c5e4:	6833      	ldreq	r3, [r6, #0]
 800c5e6:	1aed      	subeq	r5, r5, r3
 800c5e8:	68a3      	ldr	r3, [r4, #8]
 800c5ea:	bf0c      	ite	eq
 800c5ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5f0:	2500      	movne	r5, #0
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	bfc4      	itt	gt
 800c5f6:	1a9b      	subgt	r3, r3, r2
 800c5f8:	18ed      	addgt	r5, r5, r3
 800c5fa:	2600      	movs	r6, #0
 800c5fc:	341a      	adds	r4, #26
 800c5fe:	42b5      	cmp	r5, r6
 800c600:	d11a      	bne.n	800c638 <_printf_common+0xc8>
 800c602:	2000      	movs	r0, #0
 800c604:	e008      	b.n	800c618 <_printf_common+0xa8>
 800c606:	2301      	movs	r3, #1
 800c608:	4652      	mov	r2, sl
 800c60a:	4641      	mov	r1, r8
 800c60c:	4638      	mov	r0, r7
 800c60e:	47c8      	blx	r9
 800c610:	3001      	adds	r0, #1
 800c612:	d103      	bne.n	800c61c <_printf_common+0xac>
 800c614:	f04f 30ff 	mov.w	r0, #4294967295
 800c618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c61c:	3501      	adds	r5, #1
 800c61e:	e7c6      	b.n	800c5ae <_printf_common+0x3e>
 800c620:	18e1      	adds	r1, r4, r3
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	2030      	movs	r0, #48	@ 0x30
 800c626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c62a:	4422      	add	r2, r4
 800c62c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c634:	3302      	adds	r3, #2
 800c636:	e7c7      	b.n	800c5c8 <_printf_common+0x58>
 800c638:	2301      	movs	r3, #1
 800c63a:	4622      	mov	r2, r4
 800c63c:	4641      	mov	r1, r8
 800c63e:	4638      	mov	r0, r7
 800c640:	47c8      	blx	r9
 800c642:	3001      	adds	r0, #1
 800c644:	d0e6      	beq.n	800c614 <_printf_common+0xa4>
 800c646:	3601      	adds	r6, #1
 800c648:	e7d9      	b.n	800c5fe <_printf_common+0x8e>
	...

0800c64c <_printf_i>:
 800c64c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c650:	7e0f      	ldrb	r7, [r1, #24]
 800c652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c654:	2f78      	cmp	r7, #120	@ 0x78
 800c656:	4691      	mov	r9, r2
 800c658:	4680      	mov	r8, r0
 800c65a:	460c      	mov	r4, r1
 800c65c:	469a      	mov	sl, r3
 800c65e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c662:	d807      	bhi.n	800c674 <_printf_i+0x28>
 800c664:	2f62      	cmp	r7, #98	@ 0x62
 800c666:	d80a      	bhi.n	800c67e <_printf_i+0x32>
 800c668:	2f00      	cmp	r7, #0
 800c66a:	f000 80d1 	beq.w	800c810 <_printf_i+0x1c4>
 800c66e:	2f58      	cmp	r7, #88	@ 0x58
 800c670:	f000 80b8 	beq.w	800c7e4 <_printf_i+0x198>
 800c674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c67c:	e03a      	b.n	800c6f4 <_printf_i+0xa8>
 800c67e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c682:	2b15      	cmp	r3, #21
 800c684:	d8f6      	bhi.n	800c674 <_printf_i+0x28>
 800c686:	a101      	add	r1, pc, #4	@ (adr r1, 800c68c <_printf_i+0x40>)
 800c688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c68c:	0800c6e5 	.word	0x0800c6e5
 800c690:	0800c6f9 	.word	0x0800c6f9
 800c694:	0800c675 	.word	0x0800c675
 800c698:	0800c675 	.word	0x0800c675
 800c69c:	0800c675 	.word	0x0800c675
 800c6a0:	0800c675 	.word	0x0800c675
 800c6a4:	0800c6f9 	.word	0x0800c6f9
 800c6a8:	0800c675 	.word	0x0800c675
 800c6ac:	0800c675 	.word	0x0800c675
 800c6b0:	0800c675 	.word	0x0800c675
 800c6b4:	0800c675 	.word	0x0800c675
 800c6b8:	0800c7f7 	.word	0x0800c7f7
 800c6bc:	0800c723 	.word	0x0800c723
 800c6c0:	0800c7b1 	.word	0x0800c7b1
 800c6c4:	0800c675 	.word	0x0800c675
 800c6c8:	0800c675 	.word	0x0800c675
 800c6cc:	0800c819 	.word	0x0800c819
 800c6d0:	0800c675 	.word	0x0800c675
 800c6d4:	0800c723 	.word	0x0800c723
 800c6d8:	0800c675 	.word	0x0800c675
 800c6dc:	0800c675 	.word	0x0800c675
 800c6e0:	0800c7b9 	.word	0x0800c7b9
 800c6e4:	6833      	ldr	r3, [r6, #0]
 800c6e6:	1d1a      	adds	r2, r3, #4
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	6032      	str	r2, [r6, #0]
 800c6ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e09c      	b.n	800c832 <_printf_i+0x1e6>
 800c6f8:	6833      	ldr	r3, [r6, #0]
 800c6fa:	6820      	ldr	r0, [r4, #0]
 800c6fc:	1d19      	adds	r1, r3, #4
 800c6fe:	6031      	str	r1, [r6, #0]
 800c700:	0606      	lsls	r6, r0, #24
 800c702:	d501      	bpl.n	800c708 <_printf_i+0xbc>
 800c704:	681d      	ldr	r5, [r3, #0]
 800c706:	e003      	b.n	800c710 <_printf_i+0xc4>
 800c708:	0645      	lsls	r5, r0, #25
 800c70a:	d5fb      	bpl.n	800c704 <_printf_i+0xb8>
 800c70c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c710:	2d00      	cmp	r5, #0
 800c712:	da03      	bge.n	800c71c <_printf_i+0xd0>
 800c714:	232d      	movs	r3, #45	@ 0x2d
 800c716:	426d      	negs	r5, r5
 800c718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c71c:	4858      	ldr	r0, [pc, #352]	@ (800c880 <_printf_i+0x234>)
 800c71e:	230a      	movs	r3, #10
 800c720:	e011      	b.n	800c746 <_printf_i+0xfa>
 800c722:	6821      	ldr	r1, [r4, #0]
 800c724:	6833      	ldr	r3, [r6, #0]
 800c726:	0608      	lsls	r0, r1, #24
 800c728:	f853 5b04 	ldr.w	r5, [r3], #4
 800c72c:	d402      	bmi.n	800c734 <_printf_i+0xe8>
 800c72e:	0649      	lsls	r1, r1, #25
 800c730:	bf48      	it	mi
 800c732:	b2ad      	uxthmi	r5, r5
 800c734:	2f6f      	cmp	r7, #111	@ 0x6f
 800c736:	4852      	ldr	r0, [pc, #328]	@ (800c880 <_printf_i+0x234>)
 800c738:	6033      	str	r3, [r6, #0]
 800c73a:	bf14      	ite	ne
 800c73c:	230a      	movne	r3, #10
 800c73e:	2308      	moveq	r3, #8
 800c740:	2100      	movs	r1, #0
 800c742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c746:	6866      	ldr	r6, [r4, #4]
 800c748:	60a6      	str	r6, [r4, #8]
 800c74a:	2e00      	cmp	r6, #0
 800c74c:	db05      	blt.n	800c75a <_printf_i+0x10e>
 800c74e:	6821      	ldr	r1, [r4, #0]
 800c750:	432e      	orrs	r6, r5
 800c752:	f021 0104 	bic.w	r1, r1, #4
 800c756:	6021      	str	r1, [r4, #0]
 800c758:	d04b      	beq.n	800c7f2 <_printf_i+0x1a6>
 800c75a:	4616      	mov	r6, r2
 800c75c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c760:	fb03 5711 	mls	r7, r3, r1, r5
 800c764:	5dc7      	ldrb	r7, [r0, r7]
 800c766:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c76a:	462f      	mov	r7, r5
 800c76c:	42bb      	cmp	r3, r7
 800c76e:	460d      	mov	r5, r1
 800c770:	d9f4      	bls.n	800c75c <_printf_i+0x110>
 800c772:	2b08      	cmp	r3, #8
 800c774:	d10b      	bne.n	800c78e <_printf_i+0x142>
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	07df      	lsls	r7, r3, #31
 800c77a:	d508      	bpl.n	800c78e <_printf_i+0x142>
 800c77c:	6923      	ldr	r3, [r4, #16]
 800c77e:	6861      	ldr	r1, [r4, #4]
 800c780:	4299      	cmp	r1, r3
 800c782:	bfde      	ittt	le
 800c784:	2330      	movle	r3, #48	@ 0x30
 800c786:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c78a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c78e:	1b92      	subs	r2, r2, r6
 800c790:	6122      	str	r2, [r4, #16]
 800c792:	f8cd a000 	str.w	sl, [sp]
 800c796:	464b      	mov	r3, r9
 800c798:	aa03      	add	r2, sp, #12
 800c79a:	4621      	mov	r1, r4
 800c79c:	4640      	mov	r0, r8
 800c79e:	f7ff fee7 	bl	800c570 <_printf_common>
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	d14a      	bne.n	800c83c <_printf_i+0x1f0>
 800c7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7aa:	b004      	add	sp, #16
 800c7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b0:	6823      	ldr	r3, [r4, #0]
 800c7b2:	f043 0320 	orr.w	r3, r3, #32
 800c7b6:	6023      	str	r3, [r4, #0]
 800c7b8:	4832      	ldr	r0, [pc, #200]	@ (800c884 <_printf_i+0x238>)
 800c7ba:	2778      	movs	r7, #120	@ 0x78
 800c7bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c7c0:	6823      	ldr	r3, [r4, #0]
 800c7c2:	6831      	ldr	r1, [r6, #0]
 800c7c4:	061f      	lsls	r7, r3, #24
 800c7c6:	f851 5b04 	ldr.w	r5, [r1], #4
 800c7ca:	d402      	bmi.n	800c7d2 <_printf_i+0x186>
 800c7cc:	065f      	lsls	r7, r3, #25
 800c7ce:	bf48      	it	mi
 800c7d0:	b2ad      	uxthmi	r5, r5
 800c7d2:	6031      	str	r1, [r6, #0]
 800c7d4:	07d9      	lsls	r1, r3, #31
 800c7d6:	bf44      	itt	mi
 800c7d8:	f043 0320 	orrmi.w	r3, r3, #32
 800c7dc:	6023      	strmi	r3, [r4, #0]
 800c7de:	b11d      	cbz	r5, 800c7e8 <_printf_i+0x19c>
 800c7e0:	2310      	movs	r3, #16
 800c7e2:	e7ad      	b.n	800c740 <_printf_i+0xf4>
 800c7e4:	4826      	ldr	r0, [pc, #152]	@ (800c880 <_printf_i+0x234>)
 800c7e6:	e7e9      	b.n	800c7bc <_printf_i+0x170>
 800c7e8:	6823      	ldr	r3, [r4, #0]
 800c7ea:	f023 0320 	bic.w	r3, r3, #32
 800c7ee:	6023      	str	r3, [r4, #0]
 800c7f0:	e7f6      	b.n	800c7e0 <_printf_i+0x194>
 800c7f2:	4616      	mov	r6, r2
 800c7f4:	e7bd      	b.n	800c772 <_printf_i+0x126>
 800c7f6:	6833      	ldr	r3, [r6, #0]
 800c7f8:	6825      	ldr	r5, [r4, #0]
 800c7fa:	6961      	ldr	r1, [r4, #20]
 800c7fc:	1d18      	adds	r0, r3, #4
 800c7fe:	6030      	str	r0, [r6, #0]
 800c800:	062e      	lsls	r6, r5, #24
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	d501      	bpl.n	800c80a <_printf_i+0x1be>
 800c806:	6019      	str	r1, [r3, #0]
 800c808:	e002      	b.n	800c810 <_printf_i+0x1c4>
 800c80a:	0668      	lsls	r0, r5, #25
 800c80c:	d5fb      	bpl.n	800c806 <_printf_i+0x1ba>
 800c80e:	8019      	strh	r1, [r3, #0]
 800c810:	2300      	movs	r3, #0
 800c812:	6123      	str	r3, [r4, #16]
 800c814:	4616      	mov	r6, r2
 800c816:	e7bc      	b.n	800c792 <_printf_i+0x146>
 800c818:	6833      	ldr	r3, [r6, #0]
 800c81a:	1d1a      	adds	r2, r3, #4
 800c81c:	6032      	str	r2, [r6, #0]
 800c81e:	681e      	ldr	r6, [r3, #0]
 800c820:	6862      	ldr	r2, [r4, #4]
 800c822:	2100      	movs	r1, #0
 800c824:	4630      	mov	r0, r6
 800c826:	f7f3 fd7b 	bl	8000320 <memchr>
 800c82a:	b108      	cbz	r0, 800c830 <_printf_i+0x1e4>
 800c82c:	1b80      	subs	r0, r0, r6
 800c82e:	6060      	str	r0, [r4, #4]
 800c830:	6863      	ldr	r3, [r4, #4]
 800c832:	6123      	str	r3, [r4, #16]
 800c834:	2300      	movs	r3, #0
 800c836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c83a:	e7aa      	b.n	800c792 <_printf_i+0x146>
 800c83c:	6923      	ldr	r3, [r4, #16]
 800c83e:	4632      	mov	r2, r6
 800c840:	4649      	mov	r1, r9
 800c842:	4640      	mov	r0, r8
 800c844:	47d0      	blx	sl
 800c846:	3001      	adds	r0, #1
 800c848:	d0ad      	beq.n	800c7a6 <_printf_i+0x15a>
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	079b      	lsls	r3, r3, #30
 800c84e:	d413      	bmi.n	800c878 <_printf_i+0x22c>
 800c850:	68e0      	ldr	r0, [r4, #12]
 800c852:	9b03      	ldr	r3, [sp, #12]
 800c854:	4298      	cmp	r0, r3
 800c856:	bfb8      	it	lt
 800c858:	4618      	movlt	r0, r3
 800c85a:	e7a6      	b.n	800c7aa <_printf_i+0x15e>
 800c85c:	2301      	movs	r3, #1
 800c85e:	4632      	mov	r2, r6
 800c860:	4649      	mov	r1, r9
 800c862:	4640      	mov	r0, r8
 800c864:	47d0      	blx	sl
 800c866:	3001      	adds	r0, #1
 800c868:	d09d      	beq.n	800c7a6 <_printf_i+0x15a>
 800c86a:	3501      	adds	r5, #1
 800c86c:	68e3      	ldr	r3, [r4, #12]
 800c86e:	9903      	ldr	r1, [sp, #12]
 800c870:	1a5b      	subs	r3, r3, r1
 800c872:	42ab      	cmp	r3, r5
 800c874:	dcf2      	bgt.n	800c85c <_printf_i+0x210>
 800c876:	e7eb      	b.n	800c850 <_printf_i+0x204>
 800c878:	2500      	movs	r5, #0
 800c87a:	f104 0619 	add.w	r6, r4, #25
 800c87e:	e7f5      	b.n	800c86c <_printf_i+0x220>
 800c880:	0800cd15 	.word	0x0800cd15
 800c884:	0800cd26 	.word	0x0800cd26

0800c888 <memmove>:
 800c888:	4288      	cmp	r0, r1
 800c88a:	b510      	push	{r4, lr}
 800c88c:	eb01 0402 	add.w	r4, r1, r2
 800c890:	d902      	bls.n	800c898 <memmove+0x10>
 800c892:	4284      	cmp	r4, r0
 800c894:	4623      	mov	r3, r4
 800c896:	d807      	bhi.n	800c8a8 <memmove+0x20>
 800c898:	1e43      	subs	r3, r0, #1
 800c89a:	42a1      	cmp	r1, r4
 800c89c:	d008      	beq.n	800c8b0 <memmove+0x28>
 800c89e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8a6:	e7f8      	b.n	800c89a <memmove+0x12>
 800c8a8:	4402      	add	r2, r0
 800c8aa:	4601      	mov	r1, r0
 800c8ac:	428a      	cmp	r2, r1
 800c8ae:	d100      	bne.n	800c8b2 <memmove+0x2a>
 800c8b0:	bd10      	pop	{r4, pc}
 800c8b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8ba:	e7f7      	b.n	800c8ac <memmove+0x24>

0800c8bc <_sbrk_r>:
 800c8bc:	b538      	push	{r3, r4, r5, lr}
 800c8be:	4d06      	ldr	r5, [pc, #24]	@ (800c8d8 <_sbrk_r+0x1c>)
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	4608      	mov	r0, r1
 800c8c6:	602b      	str	r3, [r5, #0]
 800c8c8:	f7f6 f8b8 	bl	8002a3c <_sbrk>
 800c8cc:	1c43      	adds	r3, r0, #1
 800c8ce:	d102      	bne.n	800c8d6 <_sbrk_r+0x1a>
 800c8d0:	682b      	ldr	r3, [r5, #0]
 800c8d2:	b103      	cbz	r3, 800c8d6 <_sbrk_r+0x1a>
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	24000e8c 	.word	0x24000e8c

0800c8dc <_realloc_r>:
 800c8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e0:	4607      	mov	r7, r0
 800c8e2:	4614      	mov	r4, r2
 800c8e4:	460d      	mov	r5, r1
 800c8e6:	b921      	cbnz	r1, 800c8f2 <_realloc_r+0x16>
 800c8e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	f7ff bc5b 	b.w	800c1a8 <_malloc_r>
 800c8f2:	b92a      	cbnz	r2, 800c900 <_realloc_r+0x24>
 800c8f4:	f7ff fbec 	bl	800c0d0 <_free_r>
 800c8f8:	4625      	mov	r5, r4
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c900:	f000 f81a 	bl	800c938 <_malloc_usable_size_r>
 800c904:	4284      	cmp	r4, r0
 800c906:	4606      	mov	r6, r0
 800c908:	d802      	bhi.n	800c910 <_realloc_r+0x34>
 800c90a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c90e:	d8f4      	bhi.n	800c8fa <_realloc_r+0x1e>
 800c910:	4621      	mov	r1, r4
 800c912:	4638      	mov	r0, r7
 800c914:	f7ff fc48 	bl	800c1a8 <_malloc_r>
 800c918:	4680      	mov	r8, r0
 800c91a:	b908      	cbnz	r0, 800c920 <_realloc_r+0x44>
 800c91c:	4645      	mov	r5, r8
 800c91e:	e7ec      	b.n	800c8fa <_realloc_r+0x1e>
 800c920:	42b4      	cmp	r4, r6
 800c922:	4622      	mov	r2, r4
 800c924:	4629      	mov	r1, r5
 800c926:	bf28      	it	cs
 800c928:	4632      	movcs	r2, r6
 800c92a:	f7ff fbc3 	bl	800c0b4 <memcpy>
 800c92e:	4629      	mov	r1, r5
 800c930:	4638      	mov	r0, r7
 800c932:	f7ff fbcd 	bl	800c0d0 <_free_r>
 800c936:	e7f1      	b.n	800c91c <_realloc_r+0x40>

0800c938 <_malloc_usable_size_r>:
 800c938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c93c:	1f18      	subs	r0, r3, #4
 800c93e:	2b00      	cmp	r3, #0
 800c940:	bfbc      	itt	lt
 800c942:	580b      	ldrlt	r3, [r1, r0]
 800c944:	18c0      	addlt	r0, r0, r3
 800c946:	4770      	bx	lr

0800c948 <_init>:
 800c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94a:	bf00      	nop
 800c94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c94e:	bc08      	pop	{r3}
 800c950:	469e      	mov	lr, r3
 800c952:	4770      	bx	lr

0800c954 <_fini>:
 800c954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c956:	bf00      	nop
 800c958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c95a:	bc08      	pop	{r3}
 800c95c:	469e      	mov	lr, r3
 800c95e:	4770      	bx	lr
