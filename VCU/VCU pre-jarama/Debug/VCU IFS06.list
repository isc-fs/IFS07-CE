
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014864  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  08014b34  08014b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801548c  0801548c  0001648c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015494  08015494  00016494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015498  08015498  00016498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0801549c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001b44  2400006c  08015508  0001706c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001bb0  08015508  00017bb0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001706c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028ad1  00000000  00000000  0001709a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000042d9  00000000  00000000  0003fb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020a8  00000000  00000000  00043e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001974  00000000  00000000  00045ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ad27  00000000  00000000  00047864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c08e  00000000  00000000  0008258b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a64d  00000000  00000000  000ae619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00228c66  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009338  00000000  00000000  00228cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  00231fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014b1c 	.word	0x08014b1c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	08014b1c 	.word	0x08014b1c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <LPF_EMA_Init>:
 *      Author: RMG
 */

#include "LPF.h"

void LPF_EMA_Init(LPF_EMA *filt, float alpha){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	ed87 0a00 	vstr	s0, [r7]

	//Set filter coefficient

	LPF_EMA_SetAlpha(filt, alpha);
 80006f8:	ed97 0a00 	vldr	s0, [r7]
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f808 	bl	8000712 <LPF_EMA_SetAlpha>

	//Clear filter output

	filt->output = 0.0f;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f04f 0200 	mov.w	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <LPF_EMA_SetAlpha>:

void LPF_EMA_SetAlpha(LPF_EMA *filt, float alpha){
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
 800071a:	ed87 0a00 	vstr	s0, [r7]

	//Correct filter

	if(alpha > 1.0f){
 800071e:	edd7 7a00 	vldr	s15, [r7]
 8000722:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800072a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072e:	dd03      	ble.n	8000738 <LPF_EMA_SetAlpha+0x26>
		alpha = 1.0f;
 8000730:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	e009      	b.n	800074c <LPF_EMA_SetAlpha+0x3a>

	}else if (alpha < 0.0f){
 8000738:	edd7 7a00 	vldr	s15, [r7]
 800073c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000744:	d502      	bpl.n	800074c <LPF_EMA_SetAlpha+0x3a>
		alpha = 0.0f;
 8000746:	f04f 0300 	mov.w	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
	}

	//Set filter coefficient

	filt->alpha = alpha;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <LPF_EMA_Update>:

float LPF_EMA_Update(LPF_EMA *filt, float in){
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	ed87 0a00 	vstr	s0, [r7]

	filt->output = filt->alpha*in + (1-filt->alpha)*filt->output;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	ed93 7a00 	vldr	s14, [r3]
 8000770:	edd7 7a00 	vldr	s15, [r7]
 8000774:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	edd3 7a00 	vldr	s15, [r3]
 800077e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000782:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	edd3 7a01 	vldr	s15, [r3, #4]
 800078c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	edc3 7a01 	vstr	s15, [r3, #4]

	return filt->output;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	ee07 3a90 	vmov	s15, r3
}
 80007a2:	eeb0 0a67 	vmov.f32	s0, s15
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007b4:	f002 f974 	bl	8002aa0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007b8:	f000 f98e 	bl	8000ad8 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80007bc:	f000 f9fa 	bl	8000bb4 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007c0:	f000 fde0 	bl	8001384 <MX_GPIO_Init>
	MX_DMA_Init();
 80007c4:	f000 fdbe 	bl	8001344 <MX_DMA_Init>
	MX_ADC1_Init();
 80007c8:	f000 fa26 	bl	8000c18 <MX_ADC1_Init>
	MX_ADC2_Init();
 80007cc:	f000 fac0 	bl	8000d50 <MX_ADC2_Init>
	MX_FDCAN1_Init();
 80007d0:	f000 fb26 	bl	8000e20 <MX_FDCAN1_Init>
	MX_FDCAN2_Init();
 80007d4:	f000 fba2 	bl	8000f1c <MX_FDCAN2_Init>
	MX_TIM1_Init();
 80007d8:	f000 fc3c 	bl	8001054 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 80007dc:	f000 fd66 	bl	80012ac <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80007e0:	f000 fcf0 	bl	80011c4 <MX_TIM16_Init>
	MX_USART1_UART_Init();
 80007e4:	f000 fd16 	bl	8001214 <MX_USART1_UART_Init>
	MX_SDMMC1_SD_Init();
 80007e8:	f000 fc16 	bl	8001018 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 80007ec:	f010 fa90 	bl	8010d10 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	// Inicializar tarjeta microSD
	SDCard_start();
 80007f0:	f001 fa7e 	bl	8001cf0 <SDCard_start>
	HAL_Delay(2000);
 80007f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007f8:	f002 f9e4 	bl	8002bc4 <HAL_Delay>

	//sprintf(buffer, "%u,test,test1,test2\n", (unsigned)time(NULL));

	//print(buffer);
	//SDCard_write("data.csv", buffer, 1);
	SDCard_write("data.csv", "test,test1,test2\n", 1); // el modo 1 crea un archivo nuevo (importante añadir \n al final)
 80007fc:	2201      	movs	r2, #1
 80007fe:	4988      	ldr	r1, [pc, #544]	@ (8000a20 <main+0x270>)
 8000800:	4888      	ldr	r0, [pc, #544]	@ (8000a24 <main+0x274>)
 8000802:	f001 fb01 	bl	8001e08 <SDCard_write>
	//print(buffer);						 // Mostrar el buffer por USART
	// fprintf(timestamp, "%u\n", (unsigned)time(NULL));
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
 8000806:	2200      	movs	r2, #0
 8000808:	4987      	ldr	r1, [pc, #540]	@ (8000a28 <main+0x278>)
 800080a:	4886      	ldr	r0, [pc, #536]	@ (8000a24 <main+0x274>)
 800080c:	f001 fafc 	bl	8001e08 <SDCard_write>
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000810:	2203      	movs	r2, #3
 8000812:	4986      	ldr	r1, [pc, #536]	@ (8000a2c <main+0x27c>)
 8000814:	4886      	ldr	r0, [pc, #536]	@ (8000a30 <main+0x280>)
 8000816:	f002 feed 	bl	80035f4 <HAL_ADC_Start_DMA>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d004      	beq.n	800082a <main+0x7a>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000820:	4884      	ldr	r0, [pc, #528]	@ (8000a34 <main+0x284>)
 8000822:	f000 fe93 	bl	800154c <print>
#endif
		Error_Handler();
 8000826:	f001 fbe9 	bl	8001ffc <Error_Handler>
	}
	// Inicializacion filtro paso bajo
	LPF_EMA_Init(&s1_filt, 0.2f);
 800082a:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 8000a38 <main+0x288>
 800082e:	4883      	ldr	r0, [pc, #524]	@ (8000a3c <main+0x28c>)
 8000830:	f7ff ff5c 	bl	80006ec <LPF_EMA_Init>
	LPF_EMA_Init(&s2_filt, 0.2f);
 8000834:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 8000a38 <main+0x288>
 8000838:	4881      	ldr	r0, [pc, #516]	@ (8000a40 <main+0x290>)
 800083a:	f7ff ff57 	bl	80006ec <LPF_EMA_Init>

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800083e:	4881      	ldr	r0, [pc, #516]	@ (8000a44 <main+0x294>)
 8000840:	f006 feba 	bl	80075b8 <HAL_FDCAN_Start>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d004      	beq.n	8000854 <main+0xa4>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 800084a:	487f      	ldr	r0, [pc, #508]	@ (8000a48 <main+0x298>)
 800084c:	f000 fe7e 	bl	800154c <print>
#endif
		Error_Handler();
 8000850:	f001 fbd4 	bl	8001ffc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000854:	2200      	movs	r2, #0
 8000856:	2101      	movs	r1, #1
 8000858:	487a      	ldr	r0, [pc, #488]	@ (8000a44 <main+0x294>)
 800085a:	f007 f8ef 	bl	8007a3c <HAL_FDCAN_ActivateNotification>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d004      	beq.n	800086e <main+0xbe>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000864:	4879      	ldr	r0, [pc, #484]	@ (8000a4c <main+0x29c>)
 8000866:	f000 fe71 	bl	800154c <print>
#endif
		Error_Handler();
 800086a:	f001 fbc7 	bl	8001ffc <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800086e:	4878      	ldr	r0, [pc, #480]	@ (8000a50 <main+0x2a0>)
 8000870:	f006 fea2 	bl	80075b8 <HAL_FDCAN_Start>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d004      	beq.n	8000884 <main+0xd4>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 800087a:	4876      	ldr	r0, [pc, #472]	@ (8000a54 <main+0x2a4>)
 800087c:	f000 fe66 	bl	800154c <print>

#endif
		Error_Handler();
 8000880:	f001 fbbc 	bl	8001ffc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000884:	2200      	movs	r2, #0
 8000886:	2101      	movs	r1, #1
 8000888:	4871      	ldr	r0, [pc, #452]	@ (8000a50 <main+0x2a0>)
 800088a:	f007 f8d7 	bl	8007a3c <HAL_FDCAN_ActivateNotification>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d004      	beq.n	800089e <main+0xee>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 8000894:	4870      	ldr	r0, [pc, #448]	@ (8000a58 <main+0x2a8>)
 8000896:	f000 fe59 	bl	800154c <print>
#endif
		Error_Handler();
 800089a:	f001 fbaf 	bl	8001ffc <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 800089e:	486f      	ldr	r0, [pc, #444]	@ (8000a5c <main+0x2ac>)
 80008a0:	f000 fe54 	bl	800154c <print>
#endif
	// Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0)
 80008a4:	e006      	b.n	80008b4 <main+0x104>
	{

		if (config_inv_lectura_v == 1)
 80008a6:	4b6e      	ldr	r3, [pc, #440]	@ (8000a60 <main+0x2b0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d102      	bne.n	80008b4 <main+0x104>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 80008ae:	486d      	ldr	r0, [pc, #436]	@ (8000a64 <main+0x2b4>)
 80008b0:	f000 fe4c 	bl	800154c <print>
	while (config_inv_lectura_v == 0)
 80008b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000a60 <main+0x2b0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0f4      	beq.n	80008a6 <main+0xf6>
	}

#if !CALIBRATION

	// Estado STAND BY inversor
	while (state != 3)
 80008bc:	e006      	b.n	80008cc <main+0x11c>
	{

		if (state == 3)
 80008be:	4b6a      	ldr	r3, [pc, #424]	@ (8000a68 <main+0x2b8>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	d102      	bne.n	80008cc <main+0x11c>
		{
#if DEBUG
			print("Precarga");
 80008c6:	4869      	ldr	r0, [pc, #420]	@ (8000a6c <main+0x2bc>)
 80008c8:	f000 fe40 	bl	800154c <print>
	while (state != 3)
 80008cc:	4b66      	ldr	r3, [pc, #408]	@ (8000a68 <main+0x2b8>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d1f4      	bne.n	80008be <main+0x10e>
#endif
		}
	}
	// PRE-CHARGE
	while (precarga_inv == 0)
 80008d4:	e037      	b.n	8000946 <main+0x196>
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 80008d6:	4b66      	ldr	r3, [pc, #408]	@ (8000a70 <main+0x2c0>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	4965      	ldr	r1, [pc, #404]	@ (8000a74 <main+0x2c4>)
 80008de:	4866      	ldr	r0, [pc, #408]	@ (8000a78 <main+0x2c8>)
 80008e0:	f013 fc7c 	bl	80141dc <siprintf>
		print(TxBuffer);
 80008e4:	4864      	ldr	r0, [pc, #400]	@ (8000a78 <main+0x2c8>)
 80008e6:	f000 fe31 	bl	800154c <print>
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 80008ea:	4b64      	ldr	r3, [pc, #400]	@ (8000a7c <main+0x2cc>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a64      	ldr	r2, [pc, #400]	@ (8000a80 <main+0x2d0>)
 80008f0:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 80008f2:	4b63      	ldr	r3, [pc, #396]	@ (8000a80 <main+0x2d0>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80008f8:	4b61      	ldr	r3, [pc, #388]	@ (8000a80 <main+0x2d0>)
 80008fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008fe:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000900:	4b5f      	ldr	r3, [pc, #380]	@ (8000a80 <main+0x2d0>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000906:	4b5e      	ldr	r3, [pc, #376]	@ (8000a80 <main+0x2d0>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 800090c:	4b58      	ldr	r3, [pc, #352]	@ (8000a70 <main+0x2c0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b5c      	ldr	r3, [pc, #368]	@ (8000a84 <main+0x2d4>)
 8000914:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000916:	4b56      	ldr	r3, [pc, #344]	@ (8000a70 <main+0x2c0>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	121b      	asrs	r3, r3, #8
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b59      	ldr	r3, [pc, #356]	@ (8000a84 <main+0x2d4>)
 8000920:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000922:	4a58      	ldr	r2, [pc, #352]	@ (8000a84 <main+0x2d4>)
 8000924:	4956      	ldr	r1, [pc, #344]	@ (8000a80 <main+0x2d0>)
 8000926:	484a      	ldr	r0, [pc, #296]	@ (8000a50 <main+0x2a0>)
 8000928:	f006 fe71 	bl	800760e <HAL_FDCAN_AddMessageToTxFifoQ>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d102      	bne.n	8000938 <main+0x188>
		{
#if DEBUG
			print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
 8000932:	4855      	ldr	r0, [pc, #340]	@ (8000a88 <main+0x2d8>)
 8000934:	f000 fe0a 	bl	800154c <print>
#endif
		}

		if (precarga_inv == 1)
 8000938:	4b54      	ldr	r3, [pc, #336]	@ (8000a8c <main+0x2dc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d102      	bne.n	8000946 <main+0x196>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 8000940:	4853      	ldr	r0, [pc, #332]	@ (8000a90 <main+0x2e0>)
 8000942:	f000 fe03 	bl	800154c <print>
	while (precarga_inv == 0)
 8000946:	4b51      	ldr	r3, [pc, #324]	@ (8000a8c <main+0x2dc>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0c3      	beq.n	80008d6 <main+0x126>
#endif
		}
	}

#if DEBUG
	print("state : stand by");
 800094e:	4851      	ldr	r0, [pc, #324]	@ (8000a94 <main+0x2e4>)
 8000950:	f000 fdfc 	bl	800154c <print>
#endif
	// Estado READY inversor
	TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000954:	4b50      	ldr	r3, [pc, #320]	@ (8000a98 <main+0x2e8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a50      	ldr	r2, [pc, #320]	@ (8000a9c <main+0x2ec>)
 800095a:	6013      	str	r3, [r2, #0]
	TxHeader_Inv.DataLength = 3;
 800095c:	4b4f      	ldr	r3, [pc, #316]	@ (8000a9c <main+0x2ec>)
 800095e:	2203      	movs	r2, #3
 8000960:	60da      	str	r2, [r3, #12]
	TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000962:	4b4e      	ldr	r3, [pc, #312]	@ (8000a9c <main+0x2ec>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]

	TxData_Inv[0] = 0x0;
 8000968:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa0 <main+0x2f0>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
	TxData_Inv[1] = 0x0;
 800096e:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa0 <main+0x2f0>)
 8000970:	2200      	movs	r2, #0
 8000972:	705a      	strb	r2, [r3, #1]
	TxData_Inv[2] = 0x4;
 8000974:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa0 <main+0x2f0>)
 8000976:	2204      	movs	r2, #4
 8000978:	709a      	strb	r2, [r3, #2]
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800097a:	4a49      	ldr	r2, [pc, #292]	@ (8000aa0 <main+0x2f0>)
 800097c:	4947      	ldr	r1, [pc, #284]	@ (8000a9c <main+0x2ec>)
 800097e:	4831      	ldr	r0, [pc, #196]	@ (8000a44 <main+0x294>)
 8000980:	f006 fe45 	bl	800760e <HAL_FDCAN_AddMessageToTxFifoQ>

	while (state != 4)
 8000984:	bf00      	nop
 8000986:	4b38      	ldr	r3, [pc, #224]	@ (8000a68 <main+0x2b8>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b04      	cmp	r3, #4
 800098c:	d1fb      	bne.n	8000986 <main+0x1d6>
	{
	}

#if DEBUG
	print("state: ready");
 800098e:	4845      	ldr	r0, [pc, #276]	@ (8000aa4 <main+0x2f4>)
 8000990:	f000 fddc 	bl	800154c <print>

#endif

#if !CALIBRATION
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0)
 8000994:	e027      	b.n	80009e6 <main+0x236>
	{

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000996:	2180      	movs	r1, #128	@ 0x80
 8000998:	4843      	ldr	r0, [pc, #268]	@ (8000aa8 <main+0x2f8>)
 800099a:	f007 ff7f 	bl	800889c <HAL_GPIO_ReadPin>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b42      	ldr	r3, [pc, #264]	@ (8000aac <main+0x2fc>)
 80009a4:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (start_button_act == 1 && start_button_ant == 0)
 80009a6:	4b41      	ldr	r3, [pc, #260]	@ (8000aac <main+0x2fc>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d11b      	bne.n	80009e6 <main+0x236>
 80009ae:	4b40      	ldr	r3, [pc, #256]	@ (8000ab0 <main+0x300>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d117      	bne.n	80009e6 <main+0x236>
		{

#if DEBUG
			print("Botón Start + Freno:");
 80009b6:	483f      	ldr	r0, [pc, #252]	@ (8000ab4 <main+0x304>)
 80009b8:	f000 fdc8 	bl	800154c <print>
			printValue(s_freno);
 80009bc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab8 <main+0x308>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fde1 	bl	8001588 <printValue>
#endif
			if (s_freno > UMBRAL_FRENO)
 80009c6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ab8 <main+0x308>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80009ce:	4293      	cmp	r3, r2
 80009d0:	dd06      	ble.n	80009e0 <main+0x230>
			{
				boton_arranque = 1;
 80009d2:	4b3a      	ldr	r3, [pc, #232]	@ (8000abc <main+0x30c>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 80009d8:	4839      	ldr	r0, [pc, #228]	@ (8000ac0 <main+0x310>)
 80009da:	f000 fdb7 	bl	800154c <print>
 80009de:	e002      	b.n	80009e6 <main+0x236>
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 80009e0:	4838      	ldr	r0, [pc, #224]	@ (8000ac4 <main+0x314>)
 80009e2:	f000 fdb3 	bl	800154c <print>
	while (boton_arranque == 0)
 80009e6:	4b35      	ldr	r3, [pc, #212]	@ (8000abc <main+0x30c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d0d3      	beq.n	8000996 <main+0x1e6>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 80009ee:	4836      	ldr	r0, [pc, #216]	@ (8000ac8 <main+0x318>)
 80009f0:	f000 fdac 	bl	800154c <print>
#endif
#if !CALIBRATION

	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 80009f4:	2201      	movs	r2, #1
 80009f6:	2102      	movs	r1, #2
 80009f8:	4834      	ldr	r0, [pc, #208]	@ (8000acc <main+0x31c>)
 80009fa:	f007 ff67 	bl	80088cc <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80009fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a02:	f002 f8df 	bl	8002bc4 <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 8000a06:	2200      	movs	r2, #0
 8000a08:	2102      	movs	r1, #2
 8000a0a:	4830      	ldr	r0, [pc, #192]	@ (8000acc <main+0x31c>)
 8000a0c:	f007 ff5e 	bl	80088cc <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 8000a10:	482f      	ldr	r0, [pc, #188]	@ (8000ad0 <main+0x320>)
 8000a12:	f000 fd9b 	bl	800154c <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * prescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 8000a16:	482f      	ldr	r0, [pc, #188]	@ (8000ad4 <main+0x324>)
 8000a18:	f00c ffb4 	bl	800d984 <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <main+0x26c>
 8000a20:	08014b34 	.word	0x08014b34
 8000a24:	08014b48 	.word	0x08014b48
 8000a28:	08014b54 	.word	0x08014b54
 8000a2c:	2400166c 	.word	0x2400166c
 8000a30:	24000094 	.word	0x24000094
 8000a34:	08014b6c 	.word	0x08014b6c
 8000a38:	3e4ccccd 	.word	0x3e4ccccd
 8000a3c:	24001684 	.word	0x24001684
 8000a40:	2400168c 	.word	0x2400168c
 8000a44:	240001ec 	.word	0x240001ec
 8000a48:	08014b8c 	.word	0x08014b8c
 8000a4c:	08014bac 	.word	0x08014bac
 8000a50:	2400028c 	.word	0x2400028c
 8000a54:	08014bd4 	.word	0x08014bd4
 8000a58:	08014bf4 	.word	0x08014bf4
 8000a5c:	08014c1c 	.word	0x08014c1c
 8000a60:	2400008c 	.word	0x2400008c
 8000a64:	08014c38 	.word	0x08014c38
 8000a68:	240016a2 	.word	0x240016a2
 8000a6c:	08014c6c 	.word	0x08014c6c
 8000a70:	24001660 	.word	0x24001660
 8000a74:	08014c78 	.word	0x08014c78
 8000a78:	24001714 	.word	0x24001714
 8000a7c:	24000004 	.word	0x24000004
 8000a80:	240005b4 	.word	0x240005b4
 8000a84:	24000610 	.word	0x24000610
 8000a88:	08014c90 	.word	0x08014c90
 8000a8c:	24000088 	.word	0x24000088
 8000a90:	08014cb8 	.word	0x08014cb8
 8000a94:	08014cd4 	.word	0x08014cd4
 8000a98:	24000000 	.word	0x24000000
 8000a9c:	24000568 	.word	0x24000568
 8000aa0:	24000600 	.word	0x24000600
 8000aa4:	08014ce8 	.word	0x08014ce8
 8000aa8:	58021800 	.word	0x58021800
 8000aac:	24001658 	.word	0x24001658
 8000ab0:	2400165c 	.word	0x2400165c
 8000ab4:	08014cf8 	.word	0x08014cf8
 8000ab8:	24001694 	.word	0x24001694
 8000abc:	24000090 	.word	0x24000090
 8000ac0:	08014d10 	.word	0x08014d10
 8000ac4:	08014d30 	.word	0x08014d30
 8000ac8:	08014d4c 	.word	0x08014d4c
 8000acc:	58020800 	.word	0x58020800
 8000ad0:	08014d5c 	.word	0x08014d5c
 8000ad4:	240003f4 	.word	0x240003f4

08000ad8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09c      	sub	sp, #112	@ 0x70
 8000adc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	224c      	movs	r2, #76	@ 0x4c
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f013 fb9a 	bl	8014220 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2220      	movs	r2, #32
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f013 fb94 	bl	8014220 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000af8:	2002      	movs	r0, #2
 8000afa:	f007 ff01 	bl	8008900 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb0 <SystemClock_Config+0xd8>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	4a2a      	ldr	r2, [pc, #168]	@ (8000bb0 <SystemClock_Config+0xd8>)
 8000b08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b0c:	6193      	str	r3, [r2, #24]
 8000b0e:	4b28      	ldr	r3, [pc, #160]	@ (8000bb0 <SystemClock_Config+0xd8>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000b1a:	bf00      	nop
 8000b1c:	4b24      	ldr	r3, [pc, #144]	@ (8000bb0 <SystemClock_Config+0xd8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b28:	d1f8      	bne.n	8000b1c <SystemClock_Config+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b34:	2302      	movs	r3, #2
 8000b36:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 44;
 8000b40:	232c      	movs	r3, #44	@ 0x2c
 8000b42:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b50:	230c      	movs	r3, #12
 8000b52:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b60:	4618      	mov	r0, r3
 8000b62:	f007 ff07 	bl	8008974 <HAL_RCC_OscConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000b6c:	f001 fa46 	bl	8001ffc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000b70:	233f      	movs	r3, #63	@ 0x3f
 8000b72:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b74:	2303      	movs	r3, #3
 8000b76:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b80:	2340      	movs	r3, #64	@ 0x40
 8000b82:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b84:	2340      	movs	r3, #64	@ 0x40
 8000b86:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b8c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b8e:	2340      	movs	r3, #64	@ 0x40
 8000b90:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2103      	movs	r1, #3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f008 fac6 	bl	8009128 <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xce>
	{
		Error_Handler();
 8000ba2:	f001 fa2b 	bl	8001ffc <Error_Handler>
	}
}
 8000ba6:	bf00      	nop
 8000ba8:	3770      	adds	r7, #112	@ 0x70
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	58024800 	.word	0x58024800

08000bb4 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0ae      	sub	sp, #184	@ 0xb8
 8000bb8:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bba:	463b      	mov	r3, r7
 8000bbc:	22b8      	movs	r2, #184	@ 0xb8
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f013 fb2d 	bl	8014220 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_SDMMC;
 8000bc6:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000bca:	f04f 0300 	mov.w	r3, #0
 8000bce:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000be6:	23c0      	movs	r3, #192	@ 0xc0
 8000be8:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000bf2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bf6:	653b      	str	r3, [r7, #80]	@ 0x50
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4618      	mov	r0, r3
 8000c02:	f008 fe1d 	bl	8009840 <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <PeriphCommonClock_Config+0x5c>
	{
		Error_Handler();
 8000c0c:	f001 f9f6 	bl	8001ffc <Error_Handler>
	}
}
 8000c10:	bf00      	nop
 8000c12:	37b8      	adds	r7, #184	@ 0xb8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08c      	sub	sp, #48	@ 0x30
 8000c1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8000c1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	2224      	movs	r2, #36	@ 0x24
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f013 faf5 	bl	8014220 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000c36:	4b41      	ldr	r3, [pc, #260]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c38:	4a41      	ldr	r2, [pc, #260]	@ (8000d40 <MX_ADC1_Init+0x128>)
 8000c3a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c3e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c42:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c44:	4b3d      	ldr	r3, [pc, #244]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c46:	2208      	movs	r2, #8
 8000c48:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c50:	4b3a      	ldr	r3, [pc, #232]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c52:	2208      	movs	r2, #8
 8000c54:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c56:	4b39      	ldr	r3, [pc, #228]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000c5c:	4b37      	ldr	r3, [pc, #220]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 3;
 8000c62:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c64:	2203      	movs	r2, #3
 8000c66:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c68:	4b34      	ldr	r3, [pc, #208]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c70:	4b32      	ldr	r3, [pc, #200]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c76:	4b31      	ldr	r3, [pc, #196]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c7e:	2203      	movs	r2, #3
 8000c80:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c82:	4b2e      	ldr	r3, [pc, #184]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c88:	4b2c      	ldr	r3, [pc, #176]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.Ratio = 1;
 8000c96:	4b29      	ldr	r3, [pc, #164]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c9c:	4827      	ldr	r0, [pc, #156]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000c9e:	f002 faa1 	bl	80031e4 <HAL_ADC_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_ADC1_Init+0x94>
	{
		Error_Handler();
 8000ca8:	f001 f9a8 	bl	8001ffc <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4821      	ldr	r0, [pc, #132]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000cb8:	f003 ff64 	bl	8004b84 <HAL_ADCEx_MultiModeConfigChannel>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_ADC1_Init+0xae>
	{
		Error_Handler();
 8000cc2:	f001 f99b 	bl	8001ffc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <MX_ADC1_Init+0x12c>)
 8000cc8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000cce:	2305      	movs	r3, #5
 8000cd0:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cd2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cd6:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4814      	ldr	r0, [pc, #80]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000cec:	f002 ffb6 	bl	8003c5c <HAL_ADC_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC1_Init+0xe2>
	{
		Error_Handler();
 8000cf6:	f001 f981 	bl	8001ffc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <MX_ADC1_Init+0x130>)
 8000cfc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	4619      	mov	r1, r3
 8000d06:	480d      	ldr	r0, [pc, #52]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000d08:	f002 ffa8 	bl	8003c5c <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0xfe>
	{
		Error_Handler();
 8000d12:	f001 f973 	bl	8001ffc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000d16:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <MX_ADC1_Init+0x134>)
 8000d18:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d1a:	2312      	movs	r3, #18
 8000d1c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1e:	463b      	mov	r3, r7
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	@ (8000d3c <MX_ADC1_Init+0x124>)
 8000d24:	f002 ff9a 	bl	8003c5c <HAL_ADC_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_ADC1_Init+0x11a>
	{
		Error_Handler();
 8000d2e:	f001 f965 	bl	8001ffc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 8000d32:	bf00      	nop
 8000d34:	3730      	adds	r7, #48	@ 0x30
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000094 	.word	0x24000094
 8000d40:	40022000 	.word	0x40022000
 8000d44:	10c00010 	.word	0x10c00010
 8000d48:	14f00020 	.word	0x14f00020
 8000d4c:	08600004 	.word	0x08600004

08000d50 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2224      	movs	r2, #36	@ 0x24
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f013 fa5f 	bl	8014220 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8000d62:	4b2c      	ldr	r3, [pc, #176]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000d64:	4a2c      	ldr	r2, [pc, #176]	@ (8000e18 <MX_ADC2_Init+0xc8>)
 8000d66:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d68:	4b2a      	ldr	r3, [pc, #168]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000d6a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d6e:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d70:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d76:	4b27      	ldr	r3, [pc, #156]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7c:	4b25      	ldr	r3, [pc, #148]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000d7e:	2204      	movs	r2, #4
 8000d80:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d82:	4b24      	ldr	r3, [pc, #144]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000d88:	4b22      	ldr	r3, [pc, #136]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 1;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000db4:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc2.Init.OversamplingMode = DISABLE;
 8000dba:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc2.Init.Oversampling.Ratio = 1;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dc8:	4812      	ldr	r0, [pc, #72]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000dca:	f002 fa0b 	bl	80031e4 <HAL_ADC_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC2_Init+0x88>
	{
		Error_Handler();
 8000dd4:	f001 f912 	bl	8001ffc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <MX_ADC2_Init+0xcc>)
 8000dda:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ddc:	2306      	movs	r3, #6
 8000dde:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000de8:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dea:	2304      	movs	r3, #4
 8000dec:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_ADC2_Init+0xc4>)
 8000dfe:	f002 ff2d 	bl	8003c5c <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC2_Init+0xbc>
	{
		Error_Handler();
 8000e08:	f001 f8f8 	bl	8001ffc <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */
}
 8000e0c:	bf00      	nop
 8000e0e:	3728      	adds	r7, #40	@ 0x28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	24000104 	.word	0x24000104
 8000e18:	40022100 	.word	0x40022100
 8000e1c:	25b00200 	.word	0x25b00200

08000e20 <MX_FDCAN1_Init>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8000e26:	4b3b      	ldr	r3, [pc, #236]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e28:	4a3b      	ldr	r2, [pc, #236]	@ (8000f18 <MX_FDCAN1_Init+0xf8>)
 8000e2a:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e2c:	4b39      	ldr	r3, [pc, #228]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e32:	4b38      	ldr	r3, [pc, #224]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = ENABLE;
 8000e38:	4b36      	ldr	r3, [pc, #216]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000e3e:	4b35      	ldr	r3, [pc, #212]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000e44:	4b33      	ldr	r3, [pc, #204]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 6;
 8000e4a:	4b32      	ldr	r3, [pc, #200]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e4c:	2206      	movs	r2, #6
 8000e4e:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e50:	4b30      	ldr	r3, [pc, #192]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e56:	4b2f      	ldr	r3, [pc, #188]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e5e:	2205      	movs	r2, #5
 8000e60:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8000e62:	4b2c      	ldr	r3, [pc, #176]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e68:	4b2a      	ldr	r3, [pc, #168]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 8000e6e:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 8000e74:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 8000e7a:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan1.Init.StdFiltersNbr = 1;
 8000e80:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan1.Init.ExtFiltersNbr = 1;
 8000e86:	4b23      	ldr	r3, [pc, #140]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e8c:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e8e:	2220      	movs	r2, #32
 8000e90:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e92:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e94:	2204      	movs	r2, #4
 8000e96:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e98:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ece:	4811      	ldr	r0, [pc, #68]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000ed0:	f006 f91e 	bl	8007110 <HAL_FDCAN_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_FDCAN1_Init+0xbe>
	{
		Error_Handler();
 8000eda:	f001 f88f 	bl	8001ffc <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000eea:	2301      	movs	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <MX_FDCAN1_Init+0xf4>)
 8000efc:	f006 fae6 	bl	80074cc <HAL_FDCAN_ConfigFilter>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8000f06:	f001 f879 	bl	8001ffc <Error_Handler>
	}
	/* USER CODE END FDCAN1_Init 2 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3720      	adds	r7, #32
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	240001ec 	.word	0x240001ec
 8000f18:	4000a000 	.word	0x4000a000

08000f1c <MX_FDCAN2_Init>:
 * @brief FDCAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN2_Init 0 */

	/* USER CODE BEGIN FDCAN2_Init 1 */

	/* USER CODE END FDCAN2_Init 1 */
	hfdcan2.Instance = FDCAN2;
 8000f22:	4b3b      	ldr	r3, [pc, #236]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f24:	4a3b      	ldr	r2, [pc, #236]	@ (8001014 <MX_FDCAN2_Init+0xf8>)
 8000f26:	601a      	str	r2, [r3, #0]
	hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f28:	4b39      	ldr	r3, [pc, #228]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
	hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f2e:	4b38      	ldr	r3, [pc, #224]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
	hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f34:	4b36      	ldr	r3, [pc, #216]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	741a      	strb	r2, [r3, #16]
	hfdcan2.Init.TransmitPause = DISABLE;
 8000f3a:	4b35      	ldr	r3, [pc, #212]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	745a      	strb	r2, [r3, #17]
	hfdcan2.Init.ProtocolException = DISABLE;
 8000f40:	4b33      	ldr	r3, [pc, #204]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	749a      	strb	r2, [r3, #18]
	hfdcan2.Init.NominalPrescaler = 6;
 8000f46:	4b32      	ldr	r3, [pc, #200]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f48:	2206      	movs	r2, #6
 8000f4a:	615a      	str	r2, [r3, #20]
	hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f4c:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	619a      	str	r2, [r3, #24]
	hfdcan2.Init.NominalTimeSeg1 = 10;
 8000f52:	4b2f      	ldr	r3, [pc, #188]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f54:	220a      	movs	r2, #10
 8000f56:	61da      	str	r2, [r3, #28]
	hfdcan2.Init.NominalTimeSeg2 = 5;
 8000f58:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f5a:	2205      	movs	r2, #5
 8000f5c:	621a      	str	r2, [r3, #32]
	hfdcan2.Init.DataPrescaler = 1;
 8000f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	625a      	str	r2, [r3, #36]	@ 0x24
	hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f64:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	629a      	str	r2, [r3, #40]	@ 0x28
	hfdcan2.Init.DataTimeSeg1 = 1;
 8000f6a:	4b29      	ldr	r3, [pc, #164]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hfdcan2.Init.DataTimeSeg2 = 1;
 8000f70:	4b27      	ldr	r3, [pc, #156]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	631a      	str	r2, [r3, #48]	@ 0x30
	hfdcan2.Init.MessageRAMOffset = 0;
 8000f76:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	635a      	str	r2, [r3, #52]	@ 0x34
	hfdcan2.Init.StdFiltersNbr = 1;
 8000f7c:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	639a      	str	r2, [r3, #56]	@ 0x38
	hfdcan2.Init.ExtFiltersNbr = 1;
 8000f82:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	63da      	str	r2, [r3, #60]	@ 0x3c
	hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000f88:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f8e:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	645a      	str	r2, [r3, #68]	@ 0x44
	hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000f94:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f96:	2210      	movs	r2, #16
 8000f98:	649a      	str	r2, [r3, #72]	@ 0x48
	hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	64da      	str	r2, [r3, #76]	@ 0x4c
	hfdcan2.Init.RxBuffersNbr = 0;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	651a      	str	r2, [r3, #80]	@ 0x50
	hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000fa8:	2204      	movs	r2, #4
 8000faa:	655a      	str	r2, [r3, #84]	@ 0x54
	hfdcan2.Init.TxEventsNbr = 0;
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	659a      	str	r2, [r3, #88]	@ 0x58
	hfdcan2.Init.TxBuffersNbr = 0;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	65da      	str	r2, [r3, #92]	@ 0x5c
	hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000fba:	2210      	movs	r2, #16
 8000fbc:	661a      	str	r2, [r3, #96]	@ 0x60
	hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	665a      	str	r2, [r3, #100]	@ 0x64
	hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	669a      	str	r2, [r3, #104]	@ 0x68
	if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000fca:	4811      	ldr	r0, [pc, #68]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000fcc:	f006 f8a0 	bl	8007110 <HAL_FDCAN_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_FDCAN2_Init+0xbe>
	{
		Error_Handler();
 8000fd6:	f001 f811 	bl	8001ffc <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000fda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fde:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_FDCAN2_Init+0xf4>)
 8000ffa:	f006 fa67 	bl	80074cc <HAL_FDCAN_ConfigFilter>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8001004:	f000 fffa 	bl	8001ffc <Error_Handler>
	}
	/* USER CODE END FDCAN2_Init 2 */
}
 8001008:	bf00      	nop
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2400028c 	.word	0x2400028c
 8001014:	4000a400 	.word	0x4000a400

08001018 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <MX_SDMMC1_SD_Init+0x34>)
 800101e:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <MX_SDMMC1_SD_Init+0x38>)
 8001020:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <MX_SDMMC1_SD_Init+0x34>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <MX_SDMMC1_SD_Init+0x34>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <MX_SDMMC1_SD_Init+0x34>)
 8001030:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001034:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001036:	4b05      	ldr	r3, [pc, #20]	@ (800104c <MX_SDMMC1_SD_Init+0x34>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 2;
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <MX_SDMMC1_SD_Init+0x34>)
 800103e:	2202      	movs	r2, #2
 8001040:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	2400032c 	.word	0x2400032c
 8001050:	52007000 	.word	0x52007000

08001054 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09c      	sub	sp, #112	@ 0x70
 8001058:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001074:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
 8001084:	615a      	str	r2, [r3, #20]
 8001086:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2234      	movs	r2, #52	@ 0x34
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f013 f8c6 	bl	8014220 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001094:	4b49      	ldr	r3, [pc, #292]	@ (80011bc <MX_TIM1_Init+0x168>)
 8001096:	4a4a      	ldr	r2, [pc, #296]	@ (80011c0 <MX_TIM1_Init+0x16c>)
 8001098:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800109a:	4b48      	ldr	r3, [pc, #288]	@ (80011bc <MX_TIM1_Init+0x168>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b46      	ldr	r3, [pc, #280]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80010a6:	4b45      	ldr	r3, [pc, #276]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010ac:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ae:	4b43      	ldr	r3, [pc, #268]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80010b4:	4b41      	ldr	r3, [pc, #260]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ba:	4b40      	ldr	r3, [pc, #256]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010bc:	2280      	movs	r2, #128	@ 0x80
 80010be:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010c0:	483e      	ldr	r0, [pc, #248]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010c2:	f00c fc07 	bl	800d8d4 <HAL_TIM_Base_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 80010cc:	f000 ff96 	bl	8001ffc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d4:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010da:	4619      	mov	r1, r3
 80010dc:	4837      	ldr	r0, [pc, #220]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010de:	f00c ff53 	bl	800df88 <HAL_TIM_ConfigClockSource>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 80010e8:	f000 ff88 	bl	8001ffc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010ec:	4833      	ldr	r0, [pc, #204]	@ (80011bc <MX_TIM1_Init+0x168>)
 80010ee:	f00c fccf 	bl	800da90 <HAL_TIM_PWM_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 80010f8:	f000 ff80 	bl	8001ffc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	657b      	str	r3, [r7, #84]	@ 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	65bb      	str	r3, [r7, #88]	@ 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	65fb      	str	r3, [r7, #92]	@ 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001108:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800110c:	4619      	mov	r1, r3
 800110e:	482b      	ldr	r0, [pc, #172]	@ (80011bc <MX_TIM1_Init+0x168>)
 8001110:	f00d fc80 	bl	800ea14 <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 800111a:	f000 ff6f 	bl	8001ffc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111e:	2360      	movs	r3, #96	@ 0x60
 8001120:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.Pulse = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001126:	2300      	movs	r3, #0
 8001128:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800112a:	2300      	movs	r3, #0
 800112c:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	653b      	str	r3, [r7, #80]	@ 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	481e      	ldr	r0, [pc, #120]	@ (80011bc <MX_TIM1_Init+0x168>)
 8001144:	f00c fe0c 	bl	800dd60 <HAL_TIM_PWM_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 800114e:	f000 ff55 	bl	8001ffc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001152:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001156:	2204      	movs	r2, #4
 8001158:	4619      	mov	r1, r3
 800115a:	4818      	ldr	r0, [pc, #96]	@ (80011bc <MX_TIM1_Init+0x168>)
 800115c:	f00c fe00 	bl	800dd60 <HAL_TIM_PWM_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0x116>
	{
		Error_Handler();
 8001166:	f000 ff49 	bl	8001ffc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800117e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001182:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800118c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4619      	mov	r1, r3
 800119e:	4807      	ldr	r0, [pc, #28]	@ (80011bc <MX_TIM1_Init+0x168>)
 80011a0:	f00d fcd4 	bl	800eb4c <HAL_TIMEx_ConfigBreakDeadTime>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM1_Init+0x15a>
	{
		Error_Handler();
 80011aa:	f000 ff27 	bl	8001ffc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80011ae:	4803      	ldr	r0, [pc, #12]	@ (80011bc <MX_TIM1_Init+0x168>)
 80011b0:	f001 fa3a 	bl	8002628 <HAL_TIM_MspPostInit>
}
 80011b4:	bf00      	nop
 80011b6:	3770      	adds	r7, #112	@ 0x70
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	240003a8 	.word	0x240003a8
 80011c0:	40010000 	.word	0x40010000

080011c4 <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80011c8:	4b10      	ldr	r3, [pc, #64]	@ (800120c <MX_TIM16_Init+0x48>)
 80011ca:	4a11      	ldr	r2, [pc, #68]	@ (8001210 <MX_TIM16_Init+0x4c>)
 80011cc:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 528;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_TIM16_Init+0x48>)
 80011d0:	f44f 7204 	mov.w	r2, #528	@ 0x210
 80011d4:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <MX_TIM16_Init+0x48>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 10000 - 1;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_TIM16_Init+0x48>)
 80011de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011e2:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_TIM16_Init+0x48>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_TIM16_Init+0x48>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_TIM16_Init+0x48>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_TIM16_Init+0x48>)
 80011f8:	f00c fb6c 	bl	800d8d4 <HAL_TIM_Base_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM16_Init+0x42>
	{
		Error_Handler();
 8001202:	f000 fefb 	bl	8001ffc <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	240003f4 	.word	0x240003f4
 8001210:	40014400 	.word	0x40014400

08001214 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001218:	4b22      	ldr	r3, [pc, #136]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 800121a:	4a23      	ldr	r2, [pc, #140]	@ (80012a8 <MX_USART1_UART_Init+0x94>)
 800121c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800121e:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001220:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001224:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124a:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800125c:	4811      	ldr	r0, [pc, #68]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 800125e:	f00d fd1f 	bl	800eca0 <HAL_UART_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001268:	f000 fec8 	bl	8001ffc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	480d      	ldr	r0, [pc, #52]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001270:	f00e feb9 	bl	800ffe6 <HAL_UARTEx_SetTxFifoThreshold>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 800127a:	f000 febf 	bl	8001ffc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800127e:	2100      	movs	r1, #0
 8001280:	4808      	ldr	r0, [pc, #32]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001282:	f00e feee 	bl	8010062 <HAL_UARTEx_SetRxFifoThreshold>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 800128c:	f000 feb6 	bl	8001ffc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	@ (80012a4 <MX_USART1_UART_Init+0x90>)
 8001292:	f00e fe6f 	bl	800ff74 <HAL_UARTEx_DisableFifoMode>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 800129c:	f000 feae 	bl	8001ffc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	24000440 	.word	0x24000440
 80012a8:	40011000 	.word	0x40011000

080012ac <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012b0:	4b22      	ldr	r3, [pc, #136]	@ (800133c <MX_USART2_UART_Init+0x90>)
 80012b2:	4a23      	ldr	r2, [pc, #140]	@ (8001340 <MX_USART2_UART_Init+0x94>)
 80012b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012b6:	4b21      	ldr	r3, [pc, #132]	@ (800133c <MX_USART2_UART_Init+0x90>)
 80012b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <MX_USART2_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <MX_USART2_UART_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <MX_USART2_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <MX_USART2_UART_Init+0x90>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b19      	ldr	r3, [pc, #100]	@ (800133c <MX_USART2_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b17      	ldr	r3, [pc, #92]	@ (800133c <MX_USART2_UART_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e2:	4b16      	ldr	r3, [pc, #88]	@ (800133c <MX_USART2_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012e8:	4b14      	ldr	r3, [pc, #80]	@ (800133c <MX_USART2_UART_Init+0x90>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ee:	4b13      	ldr	r3, [pc, #76]	@ (800133c <MX_USART2_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f4:	4811      	ldr	r0, [pc, #68]	@ (800133c <MX_USART2_UART_Init+0x90>)
 80012f6:	f00d fcd3 	bl	800eca0 <HAL_UART_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8001300:	f000 fe7c 	bl	8001ffc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001304:	2100      	movs	r1, #0
 8001306:	480d      	ldr	r0, [pc, #52]	@ (800133c <MX_USART2_UART_Init+0x90>)
 8001308:	f00e fe6d 	bl	800ffe6 <HAL_UARTEx_SetTxFifoThreshold>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8001312:	f000 fe73 	bl	8001ffc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001316:	2100      	movs	r1, #0
 8001318:	4808      	ldr	r0, [pc, #32]	@ (800133c <MX_USART2_UART_Init+0x90>)
 800131a:	f00e fea2 	bl	8010062 <HAL_UARTEx_SetRxFifoThreshold>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8001324:	f000 fe6a 	bl	8001ffc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	@ (800133c <MX_USART2_UART_Init+0x90>)
 800132a:	f00e fe23 	bl	800ff74 <HAL_UARTEx_DisableFifoMode>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8001334:	f000 fe62 	bl	8001ffc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	240004d4 	.word	0x240004d4
 8001340:	40004400 	.word	0x40004400

08001344 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <MX_DMA_Init+0x3c>)
 800134c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001350:	4a0b      	ldr	r2, [pc, #44]	@ (8001380 <MX_DMA_Init+0x3c>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_DMA_Init+0x3c>)
 800135c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	200b      	movs	r0, #11
 800136e:	f003 fdc6 	bl	8004efe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001372:	200b      	movs	r0, #11
 8001374:	f003 fddd 	bl	8004f32 <HAL_NVIC_EnableIRQ>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	58024400 	.word	0x58024400

08001384 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08e      	sub	sp, #56	@ 0x38
 8001388:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800139a:	4b67      	ldr	r3, [pc, #412]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a0:	4a65      	ldr	r2, [pc, #404]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 80013a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013aa:	4b63      	ldr	r3, [pc, #396]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013b4:	623b      	str	r3, [r7, #32]
 80013b6:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013be:	4a5e      	ldr	r2, [pc, #376]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b58      	ldr	r3, [pc, #352]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	4a56      	ldr	r2, [pc, #344]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e6:	4b54      	ldr	r3, [pc, #336]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	4b50      	ldr	r3, [pc, #320]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	4a4f      	ldr	r2, [pc, #316]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001404:	4b4c      	ldr	r3, [pc, #304]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001412:	4b49      	ldr	r3, [pc, #292]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001418:	4a47      	ldr	r2, [pc, #284]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 800141a:	f043 0320 	orr.w	r3, r3, #32
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001422:	4b45      	ldr	r3, [pc, #276]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001430:	4b41      	ldr	r3, [pc, #260]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001436:	4a40      	ldr	r2, [pc, #256]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001440:	4b3d      	ldr	r3, [pc, #244]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800144e:	4b3a      	ldr	r3, [pc, #232]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001454:	4a38      	ldr	r2, [pc, #224]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 8001456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800145a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800145e:	4b36      	ldr	r3, [pc, #216]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800146c:	4b32      	ldr	r3, [pc, #200]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001472:	4a31      	ldr	r2, [pc, #196]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800147c:	4b2e      	ldr	r3, [pc, #184]	@ (8001538 <MX_GPIO_Init+0x1b4>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin | RTDS_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2103      	movs	r1, #3
 800148e:	482b      	ldr	r0, [pc, #172]	@ (800153c <MX_GPIO_Init+0x1b8>)
 8001490:	f007 fa1c 	bl	80088cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800149a:	4829      	ldr	r0, [pc, #164]	@ (8001540 <MX_GPIO_Init+0x1bc>)
 800149c:	f007 fa16 	bl	80088cc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
	GPIO_InitStruct.Pin = START_BUTTON_LED_Pin | RTDS_Pin;
 80014a0:	2303      	movs	r3, #3
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b4:	4619      	mov	r1, r3
 80014b6:	4821      	ldr	r0, [pc, #132]	@ (800153c <MX_GPIO_Init+0x1b8>)
 80014b8:	f007 f848 	bl	800854c <HAL_GPIO_Init>

	/*Configure GPIO pin : MICROSD_DET_Pin */
	GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 80014bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ce:	4619      	mov	r1, r3
 80014d0:	481c      	ldr	r0, [pc, #112]	@ (8001544 <MX_GPIO_Init+0x1c0>)
 80014d2:	f007 f83b 	bl	800854c <HAL_GPIO_Init>

	/*Configure GPIO pin : DS18B20_Data_Pin */
	GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 80014d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	4814      	ldr	r0, [pc, #80]	@ (8001540 <MX_GPIO_Init+0x1bc>)
 80014f0:	f007 f82c 	bl	800854c <HAL_GPIO_Init>

	/*Configure GPIO pin : START_BUTTON_Pin */
	GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80014f4:	2380      	movs	r3, #128	@ 0x80
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001504:	4619      	mov	r1, r3
 8001506:	4810      	ldr	r0, [pc, #64]	@ (8001548 <MX_GPIO_Init+0x1c4>)
 8001508:	f007 f820 	bl	800854c <HAL_GPIO_Init>

	/*Configure GPIO pins : PG9 PG10 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 800150c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 800151e:	2302      	movs	r3, #2
 8001520:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	4807      	ldr	r0, [pc, #28]	@ (8001548 <MX_GPIO_Init+0x1c4>)
 800152a:	f007 f80f 	bl	800854c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800152e:	bf00      	nop
 8001530:	3738      	adds	r7, #56	@ 0x38
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	58024400 	.word	0x58024400
 800153c:	58020800 	.word	0x58020800
 8001540:	58021000 	.word	0x58021000
 8001544:	58021400 	.word	0x58021400
 8001548:	58021800 	.word	0x58021800

0800154c <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4909      	ldr	r1, [pc, #36]	@ (800157c <print+0x30>)
 8001558:	4809      	ldr	r0, [pc, #36]	@ (8001580 <print+0x34>)
 800155a:	f012 fe3f 	bl	80141dc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 800155e:	4808      	ldr	r0, [pc, #32]	@ (8001580 <print+0x34>)
 8001560:	f7fe fed6 	bl	8000310 <strlen>
 8001564:	4603      	mov	r3, r0
 8001566:	b29a      	uxth	r2, r3
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	4904      	ldr	r1, [pc, #16]	@ (8001580 <print+0x34>)
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <print+0x38>)
 8001570:	f00d fbe6 	bl	800ed40 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	08014d6c 	.word	0x08014d6c
 8001580:	240016b0 	.word	0x240016b0
 8001584:	240004d4 	.word	0x240004d4

08001588 <printValue>:

void printValue(int value)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4909      	ldr	r1, [pc, #36]	@ (80015b8 <printValue+0x30>)
 8001594:	4809      	ldr	r0, [pc, #36]	@ (80015bc <printValue+0x34>)
 8001596:	f012 fe21 	bl	80141dc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 800159a:	4808      	ldr	r0, [pc, #32]	@ (80015bc <printValue+0x34>)
 800159c:	f7fe feb8 	bl	8000310 <strlen>
 80015a0:	4603      	mov	r3, r0
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	4904      	ldr	r1, [pc, #16]	@ (80015bc <printValue+0x34>)
 80015aa:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <printValue+0x38>)
 80015ac:	f00d fbc8 	bl	800ed40 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	08014d74 	.word	0x08014d74
 80015bc:	240016b0 	.word	0x240016b0
 80015c0:	240004d4 	.word	0x240004d4

080015c4 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	s1_aceleracion = buffer_adc[0];
 80015cc:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_ADC_ConvCpltCallback+0x34>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_ADC_ConvCpltCallback+0x38>)
 80015d4:	601a      	str	r2, [r3, #0]
	s2_aceleracion = buffer_adc[1];
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <HAL_ADC_ConvCpltCallback+0x34>)
 80015d8:	885b      	ldrh	r3, [r3, #2]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <HAL_ADC_ConvCpltCallback+0x3c>)
 80015de:	601a      	str	r2, [r3, #0]
	s_freno = buffer_adc[2];
 80015e0:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <HAL_ADC_ConvCpltCallback+0x34>)
 80015e2:	889b      	ldrh	r3, [r3, #4]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <HAL_ADC_ConvCpltCallback+0x40>)
 80015e8:	601a      	str	r2, [r3, #0]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	2400166c 	.word	0x2400166c
 80015fc:	24001674 	.word	0x24001674
 8001600:	24001678 	.word	0x24001678
 8001604:	24001694 	.word	0x24001694

08001608 <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80ba 	beq.w	8001792 <HAL_FDCAN_RxFifo0Callback+0x18a>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a5e      	ldr	r2, [pc, #376]	@ (800179c <HAL_FDCAN_RxFifo0Callback+0x194>)
 8001624:	4293      	cmp	r3, r2
 8001626:	f040 8081 	bne.w	800172c <HAL_FDCAN_RxFifo0Callback+0x124>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 800162a:	4b5d      	ldr	r3, [pc, #372]	@ (80017a0 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800162c:	4a5d      	ldr	r2, [pc, #372]	@ (80017a4 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 800162e:	2140      	movs	r1, #64	@ 0x40
 8001630:	485d      	ldr	r0, [pc, #372]	@ (80017a8 <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 8001632:	f006 f847 	bl	80076c4 <HAL_FDCAN_GetRxMessage>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	f040 80aa 	bne.w	8001792 <HAL_FDCAN_RxFifo0Callback+0x18a>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 800163e:	4b59      	ldr	r3, [pc, #356]	@ (80017a4 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f240 4266 	movw	r2, #1126	@ 0x466
 8001646:	4293      	cmp	r3, r2
 8001648:	d037      	beq.n	80016ba <HAL_FDCAN_RxFifo0Callback+0xb2>
 800164a:	f240 4266 	movw	r2, #1126	@ 0x466
 800164e:	4293      	cmp	r3, r2
 8001650:	f200 809f 	bhi.w	8001792 <HAL_FDCAN_RxFifo0Callback+0x18a>
 8001654:	f240 4262 	movw	r2, #1122	@ 0x462
 8001658:	4293      	cmp	r3, r2
 800165a:	d004      	beq.n	8001666 <HAL_FDCAN_RxFifo0Callback+0x5e>
 800165c:	f240 4263 	movw	r2, #1123	@ 0x463
 8001660:	4293      	cmp	r3, r2
 8001662:	d010      	beq.n	8001686 <HAL_FDCAN_RxFifo0Callback+0x7e>
					break;
				}
			}
		}
	}
}
 8001664:	e095      	b.n	8001792 <HAL_FDCAN_RxFifo0Callback+0x18a>
					state = RxData_Inv[2] >> 0x1;
 8001666:	4b4e      	ldr	r3, [pc, #312]	@ (80017a0 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001668:	789b      	ldrb	r3, [r3, #2]
 800166a:	085b      	lsrs	r3, r3, #1
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4b4f      	ldr	r3, [pc, #316]	@ (80017ac <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8001670:	701a      	strb	r2, [r3, #0]
					if (state == 10)
 8001672:	4b4e      	ldr	r3, [pc, #312]	@ (80017ac <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b0a      	cmp	r3, #10
 8001678:	f040 8084 	bne.w	8001784 <HAL_FDCAN_RxFifo0Callback+0x17c>
						error = RxData_Inv[0];
 800167c:	4b48      	ldr	r3, [pc, #288]	@ (80017a0 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	4b4b      	ldr	r3, [pc, #300]	@ (80017b0 <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8001682:	701a      	strb	r2, [r3, #0]
					break;
 8001684:	e07e      	b.n	8001784 <HAL_FDCAN_RxFifo0Callback+0x17c>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 8001686:	4b46      	ldr	r3, [pc, #280]	@ (80017a0 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001688:	79db      	ldrb	r3, [r3, #7]
 800168a:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 800168e:	4b44      	ldr	r3, [pc, #272]	@ (80017a0 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001690:	7a1b      	ldrb	r3, [r3, #8]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	4313      	orrs	r3, r2
 8001696:	4a42      	ldr	r2, [pc, #264]	@ (80017a0 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001698:	7952      	ldrb	r2, [r2, #5]
 800169a:	4313      	orrs	r3, r2
 800169c:	4a45      	ldr	r2, [pc, #276]	@ (80017b4 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 800169e:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 80016a0:	4b44      	ldr	r3, [pc, #272]	@ (80017b4 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d06d      	beq.n	8001788 <HAL_FDCAN_RxFifo0Callback+0x180>
						e_machine_rpm |= 0xFFF0000;
 80016ac:	4b41      	ldr	r3, [pc, #260]	@ (80017b4 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b41      	ldr	r3, [pc, #260]	@ (80017b8 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	4a3f      	ldr	r2, [pc, #252]	@ (80017b4 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 80016b6:	6013      	str	r3, [r2, #0]
					break;
 80016b8:	e066      	b.n	8001788 <HAL_FDCAN_RxFifo0Callback+0x180>
					if (RxHeader_Inv.DataLength == 6)
 80016ba:	4b3a      	ldr	r3, [pc, #232]	@ (80017a4 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d164      	bne.n	800178c <HAL_FDCAN_RxFifo0Callback+0x184>
						if (config_inv_lectura_v == 0)
 80016c2:	4b3e      	ldr	r3, [pc, #248]	@ (80017bc <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d103      	bne.n	80016d2 <HAL_FDCAN_RxFifo0Callback+0xca>
							config_inv_lectura_v = 1;
 80016ca:	4b3c      	ldr	r3, [pc, #240]	@ (80017bc <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
					break;
 80016d0:	e05c      	b.n	800178c <HAL_FDCAN_RxFifo0Callback+0x184>
						else if (config_inv_lectura_v == 1)
 80016d2:	4b3a      	ldr	r3, [pc, #232]	@ (80017bc <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d158      	bne.n	800178c <HAL_FDCAN_RxFifo0Callback+0x184>
							inv_dc_bus_voltage = (int)RxData_Inv[1] << 8 | (int)RxData_Inv[0];
 80016da:	4b31      	ldr	r3, [pc, #196]	@ (80017a0 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80016dc:	785b      	ldrb	r3, [r3, #1]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	4a2f      	ldr	r2, [pc, #188]	@ (80017a0 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80016e2:	7812      	ldrb	r2, [r2, #0]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	4a36      	ldr	r2, [pc, #216]	@ (80017c0 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80016e8:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = (int)RxData_Inv[2] << 8 | (int)RxData_Inv[1];
 80016ea:	4b2d      	ldr	r3, [pc, #180]	@ (80017a0 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80016ec:	789b      	ldrb	r3, [r3, #2]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	4a2b      	ldr	r2, [pc, #172]	@ (80017a0 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80016f2:	7852      	ldrb	r2, [r2, #1]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	4a33      	ldr	r2, [pc, #204]	@ (80017c4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016f8:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power >> 2; // Bits 10 to 16
 80016fa:	4b32      	ldr	r3, [pc, #200]	@ (80017c4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	109b      	asrs	r3, r3, #2
 8001700:	4a30      	ldr	r2, [pc, #192]	@ (80017c4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001702:	6013      	str	r3, [r2, #0]
							if (inv_dc_bus_power & 0x2000)
 8001704:	4b2f      	ldr	r3, [pc, #188]	@ (80017c4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_FDCAN_RxFifo0Callback+0x114>
								inv_dc_bus_power |= 0xC000;
 8001710:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001718:	4a2a      	ldr	r2, [pc, #168]	@ (80017c4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800171a:	6013      	str	r3, [r2, #0]
							inv_dc_bus_power = inv_dc_bus_power * 32767; // Scale factor
 800171c:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4613      	mov	r3, r2
 8001722:	03db      	lsls	r3, r3, #15
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	4a27      	ldr	r2, [pc, #156]	@ (80017c4 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001728:	6013      	str	r3, [r2, #0]
					break;
 800172a:	e02f      	b.n	800178c <HAL_FDCAN_RxFifo0Callback+0x184>
		else if (hfdcan->Instance == FDCAN2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a25      	ldr	r2, [pc, #148]	@ (80017c8 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12d      	bne.n	8001792 <HAL_FDCAN_RxFifo0Callback+0x18a>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 8001736:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001738:	4a25      	ldr	r2, [pc, #148]	@ (80017d0 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800173a:	2140      	movs	r1, #64	@ 0x40
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f005 ffc1 	bl	80076c4 <HAL_FDCAN_GetRxMessage>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d124      	bne.n	8001792 <HAL_FDCAN_RxFifo0Callback+0x18a>
				switch (RxHeader_Acu.Identifier)
 8001748:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b20      	cmp	r3, #32
 800174e:	d003      	beq.n	8001758 <HAL_FDCAN_RxFifo0Callback+0x150>
 8001750:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001754:	d008      	beq.n	8001768 <HAL_FDCAN_RxFifo0Callback+0x160>
}
 8001756:	e01c      	b.n	8001792 <HAL_FDCAN_RxFifo0Callback+0x18a>
					if (RxData_Acu[0] == 0)
 8001758:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d117      	bne.n	8001790 <HAL_FDCAN_RxFifo0Callback+0x188>
						precarga_inv = 1;
 8001760:	4b1c      	ldr	r3, [pc, #112]	@ (80017d4 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
					break;
 8001766:	e013      	b.n	8001790 <HAL_FDCAN_RxFifo0Callback+0x188>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 8001768:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	4a17      	ldr	r2, [pc, #92]	@ (80017cc <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001770:	7852      	ldrb	r2, [r2, #1]
 8001772:	4313      	orrs	r3, r2
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177c:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800177e:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001782:	e006      	b.n	8001792 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 8001784:	bf00      	nop
 8001786:	e004      	b.n	8001792 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 8001788:	bf00      	nop
 800178a:	e002      	b.n	8001792 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 800178c:	bf00      	nop
 800178e:	e000      	b.n	8001792 <HAL_FDCAN_RxFifo0Callback+0x18a>
					break;
 8001790:	bf00      	nop
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	4000a000 	.word	0x4000a000
 80017a0:	24000608 	.word	0x24000608
 80017a4:	2400058c 	.word	0x2400058c
 80017a8:	240001ec 	.word	0x240001ec
 80017ac:	240016a2 	.word	0x240016a2
 80017b0:	2400180e 	.word	0x2400180e
 80017b4:	24001668 	.word	0x24001668
 80017b8:	0fff0000 	.word	0x0fff0000
 80017bc:	2400008c 	.word	0x2400008c
 80017c0:	24001660 	.word	0x24001660
 80017c4:	24001664 	.word	0x24001664
 80017c8:	4000a400 	.word	0x4000a400
 80017cc:	24000618 	.word	0x24000618
 80017d0:	240005d8 	.word	0x240005d8
 80017d4:	24000088 	.word	0x24000088
 80017d8:	24000008 	.word	0x24000008
 80017dc:	00000000 	.word	0x00000000

080017e0 <setTorque>:
	}
	return sum / N_LECTURAS;
}

uint16_t setTorque()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
	// Leemos sensores de posición del pedal de acelaración

	int s1_aceleracion_filtr = LPF_EMA_Update(&s1_filt, s1_aceleracion);
 80017e6:	4ba6      	ldr	r3, [pc, #664]	@ (8001a80 <setTorque+0x2a0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f2:	eeb0 0a67 	vmov.f32	s0, s15
 80017f6:	48a3      	ldr	r0, [pc, #652]	@ (8001a84 <setTorque+0x2a4>)
 80017f8:	f7fe ffb1 	bl	800075e <LPF_EMA_Update>
 80017fc:	eef0 7a40 	vmov.f32	s15, s0
 8001800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001804:	ee17 3a90 	vmov	r3, s15
 8001808:	60fb      	str	r3, [r7, #12]
	int s2_aceleracion_filtr = LPF_EMA_Update(&s2_filt, s2_aceleracion);
 800180a:	4b9f      	ldr	r3, [pc, #636]	@ (8001a88 <setTorque+0x2a8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001816:	eeb0 0a67 	vmov.f32	s0, s15
 800181a:	489c      	ldr	r0, [pc, #624]	@ (8001a8c <setTorque+0x2ac>)
 800181c:	f7fe ff9f 	bl	800075e <LPF_EMA_Update>
 8001820:	eef0 7a40 	vmov.f32	s15, s0
 8001824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001828:	ee17 3a90 	vmov	r3, s15
 800182c:	60bb      	str	r3, [r7, #8]
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion_filtr - 1886) / (29.4 - 18.86);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f2a3 735e 	subw	r3, r3, #1886	@ 0x75e
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800183c:	ed9f 5b84 	vldr	d5, [pc, #528]	@ 8001a50 <setTorque+0x270>
 8001840:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001844:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001848:	ee17 2a90 	vmov	r2, s15
 800184c:	4b90      	ldr	r3, [pc, #576]	@ (8001a90 <setTorque+0x2b0>)
 800184e:	601a      	str	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
 8001850:	4b8f      	ldr	r3, [pc, #572]	@ (8001a90 <setTorque+0x2b0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	da03      	bge.n	8001860 <setTorque+0x80>
	{
		s1_aceleracion_aux = 0;
 8001858:	4b8d      	ldr	r3, [pc, #564]	@ (8001a90 <setTorque+0x2b0>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e006      	b.n	800186e <setTorque+0x8e>
	}
	else if (s1_aceleracion_aux > 100)
 8001860:	4b8b      	ldr	r3, [pc, #556]	@ (8001a90 <setTorque+0x2b0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b64      	cmp	r3, #100	@ 0x64
 8001866:	dd02      	ble.n	800186e <setTorque+0x8e>
	{
		s1_aceleracion_aux = 100;
 8001868:	4b89      	ldr	r3, [pc, #548]	@ (8001a90 <setTorque+0x2b0>)
 800186a:	2264      	movs	r2, #100	@ 0x64
 800186c:	601a      	str	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion_filtr - 1780) / (25.27 - 17.8);
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f2a3 63f4 	subw	r3, r3, #1780	@ 0x6f4
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800187c:	ed9f 5b76 	vldr	d5, [pc, #472]	@ 8001a58 <setTorque+0x278>
 8001880:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001884:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001888:	ee17 2a90 	vmov	r2, s15
 800188c:	4b81      	ldr	r3, [pc, #516]	@ (8001a94 <setTorque+0x2b4>)
 800188e:	601a      	str	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
 8001890:	4b80      	ldr	r3, [pc, #512]	@ (8001a94 <setTorque+0x2b4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	da03      	bge.n	80018a0 <setTorque+0xc0>
	{
		s2_aceleracion_aux = 0;
 8001898:	4b7e      	ldr	r3, [pc, #504]	@ (8001a94 <setTorque+0x2b4>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e006      	b.n	80018ae <setTorque+0xce>
	}
	else if (s2_aceleracion_aux > 100)
 80018a0:	4b7c      	ldr	r3, [pc, #496]	@ (8001a94 <setTorque+0x2b4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b64      	cmp	r3, #100	@ 0x64
 80018a6:	dd02      	ble.n	80018ae <setTorque+0xce>
	{
		s2_aceleracion_aux = 100;
 80018a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001a94 <setTorque+0x2b4>)
 80018aa:	2264      	movs	r2, #100	@ 0x64
 80018ac:	601a      	str	r2, [r3, #0]
	printValue(s2_aceleracion_aux);
	print("");
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 80018ae:	4b78      	ldr	r3, [pc, #480]	@ (8001a90 <setTorque+0x2b0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	dd10      	ble.n	80018d8 <setTorque+0xf8>
 80018b6:	4b77      	ldr	r3, [pc, #476]	@ (8001a94 <setTorque+0x2b4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	dd0c      	ble.n	80018d8 <setTorque+0xf8>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 80018be:	4b74      	ldr	r3, [pc, #464]	@ (8001a90 <setTorque+0x2b0>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b74      	ldr	r3, [pc, #464]	@ (8001a94 <setTorque+0x2b4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da00      	bge.n	80018ce <setTorque+0xee>
 80018cc:	3301      	adds	r3, #1
 80018ce:	105b      	asrs	r3, r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b71      	ldr	r3, [pc, #452]	@ (8001a98 <setTorque+0x2b8>)
 80018d4:	801a      	strh	r2, [r3, #0]
 80018d6:	e002      	b.n	80018de <setTorque+0xfe>
	}
	else
	{
		torque_total = 0;
 80018d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001a98 <setTorque+0x2b8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 80018de:	4b6e      	ldr	r3, [pc, #440]	@ (8001a98 <setTorque+0x2b8>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	2b09      	cmp	r3, #9
 80018e4:	d803      	bhi.n	80018ee <setTorque+0x10e>
	{
		torque_total = 0;
 80018e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001a98 <setTorque+0x2b8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	801a      	strh	r2, [r3, #0]
 80018ec:	e006      	b.n	80018fc <setTorque+0x11c>
	}
	else if (torque_total > 90)
 80018ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001a98 <setTorque+0x2b8>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	2b5a      	cmp	r3, #90	@ 0x5a
 80018f4:	d902      	bls.n	80018fc <setTorque+0x11c>
	{
		torque_total = 100;
 80018f6:	4b68      	ldr	r3, [pc, #416]	@ (8001a98 <setTorque+0x2b8>)
 80018f8:	2264      	movs	r2, #100	@ 0x64
 80018fa:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 80018fc:	4b67      	ldr	r3, [pc, #412]	@ (8001a9c <setTorque+0x2bc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001904:	4293      	cmp	r3, r2
 8001906:	dd0a      	ble.n	800191e <setTorque+0x13e>
 8001908:	4b63      	ldr	r3, [pc, #396]	@ (8001a98 <setTorque+0x2b8>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	2b19      	cmp	r3, #25
 800190e:	d906      	bls.n	800191e <setTorque+0x13e>
	{
		print("EV_2_3");
 8001910:	4863      	ldr	r0, [pc, #396]	@ (8001aa0 <setTorque+0x2c0>)
 8001912:	f7ff fe1b 	bl	800154c <print>
		flag_EV_2_3 = 1;
 8001916:	4b63      	ldr	r3, [pc, #396]	@ (8001aa4 <setTorque+0x2c4>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	e00c      	b.n	8001938 <setTorque+0x158>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 800191e:	4b5f      	ldr	r3, [pc, #380]	@ (8001a9c <setTorque+0x2bc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001926:	4293      	cmp	r3, r2
 8001928:	dc06      	bgt.n	8001938 <setTorque+0x158>
 800192a:	4b5b      	ldr	r3, [pc, #364]	@ (8001a98 <setTorque+0x2b8>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	2b04      	cmp	r3, #4
 8001930:	d802      	bhi.n	8001938 <setTorque+0x158>
	{
		flag_EV_2_3 = 0;
 8001932:	4b5c      	ldr	r3, [pc, #368]	@ (8001aa4 <setTorque+0x2c4>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 8001938:	4b55      	ldr	r3, [pc, #340]	@ (8001a90 <setTorque+0x2b0>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b55      	ldr	r3, [pc, #340]	@ (8001a94 <setTorque+0x2b4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	bfb8      	it	lt
 8001946:	425b      	neglt	r3, r3
 8001948:	2b0a      	cmp	r3, #10
 800194a:	dd06      	ble.n	800195a <setTorque+0x17a>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 800194c:	4856      	ldr	r0, [pc, #344]	@ (8001aa8 <setTorque+0x2c8>)
 800194e:	f7ff fdfd 	bl	800154c <print>
		flag_T11_8_9 = 1;
 8001952:	4b56      	ldr	r3, [pc, #344]	@ (8001aac <setTorque+0x2cc>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e007      	b.n	800196a <setTorque+0x18a>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 800195a:	f001 f927 	bl	8002bac <HAL_GetTick>
 800195e:	4603      	mov	r3, r0
 8001960:	4a53      	ldr	r2, [pc, #332]	@ (8001ab0 <setTorque+0x2d0>)
 8001962:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001964:	4b51      	ldr	r3, [pc, #324]	@ (8001aac <setTorque+0x2cc>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 800196a:	4b4e      	ldr	r3, [pc, #312]	@ (8001aa4 <setTorque+0x2c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 8001970:	4b50      	ldr	r3, [pc, #320]	@ (8001ab4 <setTorque+0x2d4>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001ab8 <setTorque+0x2d8>
 800197a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d53a      	bpl.n	80019fa <setTorque+0x21a>
	{
		if (v_celda_min > 2800)
 8001984:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab4 <setTorque+0x2d4>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001abc <setTorque+0x2dc>
 800198e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	dd1f      	ble.n	80019d8 <setTorque+0x1f8>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8001998:	4b3f      	ldr	r3, [pc, #252]	@ (8001a98 <setTorque+0x2b8>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019a4:	4b43      	ldr	r3, [pc, #268]	@ (8001ab4 <setTorque+0x2d4>)
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019ae:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8001a60 <setTorque+0x280>
 80019b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019b6:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8001a68 <setTorque+0x288>
 80019ba:	ee37 7b45 	vsub.f64	d7, d7, d5
 80019be:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019c2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8001a70 <setTorque+0x290>
 80019c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019ca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019ce:	ee17 2a90 	vmov	r2, s15
 80019d2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac0 <setTorque+0x2e0>)
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e015      	b.n	8001a04 <setTorque+0x224>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 80019d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a98 <setTorque+0x2b8>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019e4:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001a78 <setTorque+0x298>
 80019e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019f0:	ee17 2a90 	vmov	r2, s15
 80019f4:	4b32      	ldr	r3, [pc, #200]	@ (8001ac0 <setTorque+0x2e0>)
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e004      	b.n	8001a04 <setTorque+0x224>
		}
	}
	else
	{
		torque_limitado = torque_total;
 80019fa:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <setTorque+0x2b8>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac0 <setTorque+0x2e0>)
 8001a02:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8001a04:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <setTorque+0x2b8>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	2b09      	cmp	r3, #9
 8001a0a:	d912      	bls.n	8001a32 <setTorque+0x252>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8001a0c:	4b22      	ldr	r3, [pc, #136]	@ (8001a98 <setTorque+0x2b8>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4613      	mov	r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac4 <setTorque+0x2e4>)
 8001a1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a20:	441a      	add	r2, r3
 8001a22:	1192      	asrs	r2, r2, #6
 8001a24:	17db      	asrs	r3, r3, #31
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3b1a      	subs	r3, #26
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <setTorque+0x2b8>)
 8001a30:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001a32:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <setTorque+0x2b8>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001a40:	88bb      	ldrh	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	f3af 8000 	nop.w
 8001a50:	e147ae14 	.word	0xe147ae14
 8001a54:	4025147a 	.word	0x4025147a
 8001a58:	ae147ae0 	.word	0xae147ae0
 8001a5c:	401de147 	.word	0x401de147
 8001a60:	a1cac083 	.word	0xa1cac083
 8001a64:	3ff5b645 	.word	0x3ff5b645
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40ad4c00 	.word	0x40ad4c00
 8001a70:	00000000 	.word	0x00000000
 8001a74:	408f4000 	.word	0x408f4000
 8001a78:	9999999a 	.word	0x9999999a
 8001a7c:	3fa99999 	.word	0x3fa99999
 8001a80:	24001674 	.word	0x24001674
 8001a84:	24001684 	.word	0x24001684
 8001a88:	24001678 	.word	0x24001678
 8001a8c:	2400168c 	.word	0x2400168c
 8001a90:	2400167c 	.word	0x2400167c
 8001a94:	24001680 	.word	0x24001680
 8001a98:	24001698 	.word	0x24001698
 8001a9c:	24001694 	.word	0x24001694
 8001aa0:	08014d88 	.word	0x08014d88
 8001aa4:	240016a8 	.word	0x240016a8
 8001aa8:	08014d90 	.word	0x08014d90
 8001aac:	240016ac 	.word	0x240016ac
 8001ab0:	240016a4 	.word	0x240016a4
 8001ab4:	24000008 	.word	0x24000008
 8001ab8:	455ac000 	.word	0x455ac000
 8001abc:	452f0000 	.word	0x452f0000
 8001ac0:	2400169c 	.word	0x2400169c
 8001ac4:	b60b60b7 	.word	0xb60b60b7

08001ac8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a78      	ldr	r2, [pc, #480]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	f040 80e9 	bne.w	8001cac <HAL_TIM_PeriodElapsedCallback+0x1e4>
#if !CALIBRATION

		// ---------- CONTROL DEL INVERSOR ----------

		// Estado TORQUE
		if (flag_react == 0)
 8001ada:	4b77      	ldr	r3, [pc, #476]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d117      	bne.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001ae2:	4b76      	ldr	r3, [pc, #472]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a76      	ldr	r2, [pc, #472]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001ae8:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001aea:	4b75      	ldr	r3, [pc, #468]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001aec:	2203      	movs	r2, #3
 8001aee:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001af0:	4b73      	ldr	r3, [pc, #460]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001af6:	4b73      	ldr	r3, [pc, #460]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001afc:	4b71      	ldr	r3, [pc, #452]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001b02:	4b70      	ldr	r3, [pc, #448]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b04:	2206      	movs	r2, #6
 8001b06:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b08:	4a6e      	ldr	r2, [pc, #440]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b0a:	496d      	ldr	r1, [pc, #436]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b0c:	486e      	ldr	r0, [pc, #440]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001b0e:	f005 fd7e 	bl	800760e <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		switch (state)
 8001b12:	4b6e      	ldr	r3, [pc, #440]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	3b03      	subs	r3, #3
 8001b18:	2b07      	cmp	r3, #7
 8001b1a:	f200 80c7 	bhi.w	8001cac <HAL_TIM_PeriodElapsedCallback+0x1e4>
 8001b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b24 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001b45 	.word	0x08001b45
 8001b28:	08001b7b 	.word	0x08001b7b
 8001b2c:	08001cad 	.word	0x08001cad
 8001b30:	08001bc3 	.word	0x08001bc3
 8001b34:	08001cad 	.word	0x08001cad
 8001b38:	08001cad 	.word	0x08001cad
 8001b3c:	08001cad 	.word	0x08001cad
 8001b40:	08001c23 	.word	0x08001c23
		{
		case 3:
#if DEBUG
			print("state: standby");
 8001b44:	4862      	ldr	r0, [pc, #392]	@ (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001b46:	f7ff fd01 	bl	800154c <print>
#endif
			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a5c      	ldr	r2, [pc, #368]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b50:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001b52:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b54:	2203      	movs	r2, #3
 8001b56:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001b58:	4b59      	ldr	r3, [pc, #356]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001b5e:	4b59      	ldr	r3, [pc, #356]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001b64:	4b57      	ldr	r3, [pc, #348]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x4;
 8001b6a:	4b56      	ldr	r3, [pc, #344]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b70:	4a54      	ldr	r2, [pc, #336]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b72:	4953      	ldr	r1, [pc, #332]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b74:	4854      	ldr	r0, [pc, #336]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001b76:	f005 fd4a 	bl	800760e <HAL_FDCAN_AddMessageToTxFifoQ>
			//}

		case 4:

#if DEBUG
			print("state: ready");
 8001b7a:	4856      	ldr	r0, [pc, #344]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001b7c:	f7ff fce6 	bl	800154c <print>
#endif
			TxHeader_Inv.Identifier = 0x362;
 8001b80:	4b4f      	ldr	r3, [pc, #316]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b82:	f240 3262 	movw	r2, #866	@ 0x362
 8001b86:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001b88:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	60da      	str	r2, [r3, #12]

			real_torque = 0;
 8001b8e:	4b52      	ldr	r3, [pc, #328]	@ (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	801a      	strh	r2, [r3, #0]

			TxData_Inv[0] = 0x0;
 8001b94:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = real_torque;
 8001ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b47      	ldr	r3, [pc, #284]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001ba8:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0x0;
 8001baa:	4b46      	ldr	r3, [pc, #280]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001bb0:	4a44      	ldr	r2, [pc, #272]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001bb2:	4943      	ldr	r1, [pc, #268]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001bb4:	4844      	ldr	r0, [pc, #272]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001bb6:	f005 fd2a 	bl	800760e <HAL_FDCAN_AddMessageToTxFifoQ>
			flag_react = 0; // Reactivado
 8001bba:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]

			break;
 8001bc0:	e074      	b.n	8001cac <HAL_TIM_PeriodElapsedCallback+0x1e4>

			// Request TORQUE inversor

			// flag_react = 1;

			real_torque = setTorque();
 8001bc2:	f7ff fe0d 	bl	80017e0 <setTorque>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b43      	ldr	r3, [pc, #268]	@ (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001bcc:	801a      	strh	r2, [r3, #0]

			TxHeader_Inv.Identifier = 0x362;
 8001bce:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001bd0:	f240 3262 	movw	r2, #866	@ 0x362
 8001bd4:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001bd8:	2204      	movs	r2, #4
 8001bda:	60da      	str	r2, [r3, #12]

			// real_torque = 0;
			byte_torque_1 = real_torque & 0xFF;
 8001bdc:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b3e      	ldr	r3, [pc, #248]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001be4:	701a      	strb	r2, [r3, #0]
			byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001be6:	4b3c      	ldr	r3, [pc, #240]	@ (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001bf2:	701a      	strb	r2, [r3, #0]
			TxData_Inv[0] = 0x00;
 8001bf4:	4b33      	ldr	r3, [pc, #204]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x00;
 8001bfa:	4b32      	ldr	r3, [pc, #200]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	705a      	strb	r2, [r3, #1]
				if(frena > 500){
					acelera = 1;
					frena = 0;
				}
			}*/
			TxData_Inv[2] = byte_torque_1;
 8001c00:	4b36      	ldr	r3, [pc, #216]	@ (8001cdc <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c06:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = byte_torque_2;
 8001c08:	4b35      	ldr	r3, [pc, #212]	@ (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c0e:	70da      	strb	r2, [r3, #3]
			// TxData_Inv[2] = 0xFE;
			// TxData_Inv[3] = 0xFF;
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c10:	4a2c      	ldr	r2, [pc, #176]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c12:	492b      	ldr	r1, [pc, #172]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c14:	482c      	ldr	r0, [pc, #176]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c16:	f005 fcfa 	bl	800760e <HAL_FDCAN_AddMessageToTxFifoQ>
			CAN_bus_off_check_reset(&hfdcan1);
 8001c1a:	482b      	ldr	r0, [pc, #172]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c1c:	f000 f8da 	bl	8001dd4 <CAN_bus_off_check_reset>

			break;
 8001c20:	e044      	b.n	8001cac <HAL_TIM_PeriodElapsedCallback+0x1e4>

		case 10:
			print("state: soft fault");
 8001c22:	4830      	ldr	r0, [pc, #192]	@ (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001c24:	f7ff fc92 	bl	800154c <print>
			printValue(error);
 8001c28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fcab 	bl	8001588 <printValue>

			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c32:	4b22      	ldr	r3, [pc, #136]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a22      	ldr	r2, [pc, #136]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c38:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c40:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001c46:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x3;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c54:	2203      	movs	r2, #3
 8001c56:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c58:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c5a:	4919      	ldr	r1, [pc, #100]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c5c:	481a      	ldr	r0, [pc, #104]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c5e:	f005 fcd6 	bl	800760e <HAL_FDCAN_AddMessageToTxFifoQ>
			case 3:
				print("Error: Overtemperature");
				break;
			}*/

			if (inv_dc_bus_voltage < 60)
 8001c62:	4b22      	ldr	r3, [pc, #136]	@ (8001cec <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c68:	dc1f      	bgt.n	8001caa <HAL_TIM_PeriodElapsedCallback+0x1e2>
			{

				// Estado STAND BY inversor
				while (state != 3)
 8001c6a:	e01a      	b.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0x1da>
				{

					flag_react = 1;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]

					TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c72:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a12      	ldr	r2, [pc, #72]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c78:	6013      	str	r3, [r2, #0]
					TxHeader_Inv.DataLength = 3;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	60da      	str	r2, [r3, #12]
					TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	605a      	str	r2, [r3, #4]

					TxData_Inv[0] = 0x0;
 8001c86:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = 0x3;
 8001c92:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c94:	2203      	movs	r2, #3
 8001c96:	709a      	strb	r2, [r3, #2]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001c9a:	4909      	ldr	r1, [pc, #36]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001c9c:	480a      	ldr	r0, [pc, #40]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c9e:	f005 fcb6 	bl	800760e <HAL_FDCAN_AddMessageToTxFifoQ>
				while (state != 3)
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d1e0      	bne.n	8001c6c <HAL_TIM_PeriodElapsedCallback+0x1a4>
												  TxData_Inv);
				}
			}

			break;
 8001caa:	bf00      	nop
		}
#endif
	}
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	240003f4 	.word	0x240003f4
 8001cb8:	2400180f 	.word	0x2400180f
 8001cbc:	24000000 	.word	0x24000000
 8001cc0:	24000568 	.word	0x24000568
 8001cc4:	24000600 	.word	0x24000600
 8001cc8:	240001ec 	.word	0x240001ec
 8001ccc:	240016a2 	.word	0x240016a2
 8001cd0:	08014d98 	.word	0x08014d98
 8001cd4:	08014ce8 	.word	0x08014ce8
 8001cd8:	240016a0 	.word	0x240016a0
 8001cdc:	2400169a 	.word	0x2400169a
 8001ce0:	2400169b 	.word	0x2400169b
 8001ce4:	08014da8 	.word	0x08014da8
 8001ce8:	2400180e 	.word	0x2400180e
 8001cec:	24001660 	.word	0x24001660

08001cf0 <SDCard_start>:

void SDCard_start(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
	DWORD FreeClusters;
	uint32_t TotalSize, FreeSpace;
	do
	{
		//------------------[ Mount The SD Card ]--------------------
		FR_Status = f_mount(&FatFs, SDPath, 1);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	492e      	ldr	r1, [pc, #184]	@ (8001db4 <SDCard_start+0xc4>)
 8001cfa:	482f      	ldr	r0, [pc, #188]	@ (8001db8 <SDCard_start+0xc8>)
 8001cfc:	f011 fc4c 	bl	8013598 <f_mount>
 8001d00:	4603      	mov	r3, r0
 8001d02:	75fb      	strb	r3, [r7, #23]
		if (FR_Status != FR_OK)
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d009      	beq.n	8001d1e <SDCard_start+0x2e>
		{
			sprintf(TxBuffer, "Error! Error Code: (%i)\r\n", FR_Status);
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	492b      	ldr	r1, [pc, #172]	@ (8001dbc <SDCard_start+0xcc>)
 8001d10:	482b      	ldr	r0, [pc, #172]	@ (8001dc0 <SDCard_start+0xd0>)
 8001d12:	f012 fa63 	bl	80141dc <siprintf>
			print(TxBuffer);
 8001d16:	482a      	ldr	r0, [pc, #168]	@ (8001dc0 <SDCard_start+0xd0>)
 8001d18:	f7ff fc18 	bl	800154c <print>
			break;
 8001d1c:	e045      	b.n	8001daa <SDCard_start+0xba>
		}
		sprintf(TxBuffer, "SD montada correctamente \r\n\n");
 8001d1e:	4929      	ldr	r1, [pc, #164]	@ (8001dc4 <SDCard_start+0xd4>)
 8001d20:	4827      	ldr	r0, [pc, #156]	@ (8001dc0 <SDCard_start+0xd0>)
 8001d22:	f012 fa5b 	bl	80141dc <siprintf>
		print(TxBuffer);
 8001d26:	4826      	ldr	r0, [pc, #152]	@ (8001dc0 <SDCard_start+0xd0>)
 8001d28:	f7ff fc10 	bl	800154c <print>
		//------------------[ Get & Print The SD Card Size & Free Space ]--------------------
		f_getfree("", &FreeClusters, &FS_Ptr);
 8001d2c:	f107 0208 	add.w	r2, r7, #8
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	4619      	mov	r1, r3
 8001d34:	4824      	ldr	r0, [pc, #144]	@ (8001dc8 <SDCard_start+0xd8>)
 8001d36:	f012 f879 	bl	8013e2c <f_getfree>
		TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	3b02      	subs	r3, #2
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	8952      	ldrh	r2, [r2, #10]
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	ee07 3a90 	vmov	s15, r3
 8001d4c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d50:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001d54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d5c:	ee17 3a90 	vmov	r3, s15
 8001d60:	613b      	str	r3, [r7, #16]
		FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	895b      	ldrh	r3, [r3, #10]
 8001d66:	461a      	mov	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d76:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001d7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d7e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d82:	ee17 3a90 	vmov	r3, s15
 8001d86:	60fb      	str	r3, [r7, #12]
		sprintf(TxBuffer, "Espacio total: %lu Bytes\r\n", TotalSize);
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4910      	ldr	r1, [pc, #64]	@ (8001dcc <SDCard_start+0xdc>)
 8001d8c:	480c      	ldr	r0, [pc, #48]	@ (8001dc0 <SDCard_start+0xd0>)
 8001d8e:	f012 fa25 	bl	80141dc <siprintf>
		print(TxBuffer);
 8001d92:	480b      	ldr	r0, [pc, #44]	@ (8001dc0 <SDCard_start+0xd0>)
 8001d94:	f7ff fbda 	bl	800154c <print>
		sprintf(TxBuffer, "Espacio libre: %lu Bytes\r\n\n", FreeSpace);
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	490d      	ldr	r1, [pc, #52]	@ (8001dd0 <SDCard_start+0xe0>)
 8001d9c:	4808      	ldr	r0, [pc, #32]	@ (8001dc0 <SDCard_start+0xd0>)
 8001d9e:	f012 fa1d 	bl	80141dc <siprintf>
		print(TxBuffer);
 8001da2:	4807      	ldr	r0, [pc, #28]	@ (8001dc0 <SDCard_start+0xd0>)
 8001da4:	f7ff fbd2 	bl	800154c <print>
	} while (0);
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	24001824 	.word	0x24001824
 8001db8:	24000620 	.word	0x24000620
 8001dbc:	08014dbc 	.word	0x08014dbc
 8001dc0:	24001714 	.word	0x24001714
 8001dc4:	08014dd8 	.word	0x08014dd8
 8001dc8:	08014df8 	.word	0x08014df8
 8001dcc:	08014dfc 	.word	0x08014dfc
 8001dd0:	08014e18 	.word	0x08014e18

08001dd4 <CAN_bus_off_check_reset>:

void CAN_bus_off_check_reset(FDCAN_HandleTypeDef *hfdcan)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08e      	sub	sp, #56	@ 0x38
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	FDCAN_ProtocolStatusTypeDef protocolStatus;
	HAL_FDCAN_GetProtocolStatus(hfdcan, &protocolStatus);
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	4619      	mov	r1, r3
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f005 fdda 	bl	800799c <HAL_FDCAN_GetProtocolStatus>
	if (protocolStatus.BusOff)
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <CAN_bus_off_check_reset+0x2a>
	{
		CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699a      	ldr	r2, [r3, #24]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	619a      	str	r2, [r3, #24]
	}
}
 8001dfe:	bf00      	nop
 8001e00:	3738      	adds	r7, #56	@ 0x38
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <SDCard_write>:
		logBufferToSD(); // Write the data to the SD card
	}
}

void SDCard_write(char *filename, char *data, int newFile)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e16:	f843 0c3c 	str.w	r0, [r3, #-60]
 8001e1a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e1e:	f843 1c40 	str.w	r1, [r3, #-64]
 8001e22:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e26:	f843 2c44 	str.w	r2, [r3, #-68]
	FRESULT fr; // FATFS function common result code
	UINT bw;	// Bytes written

	//------------------[ Open or Create a File ]--------------------

	if (newFile == 1)
 8001e2a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d129      	bne.n	8001e8a <SDCard_write+0x82>
	{
		fr = f_open(&file, filename, FA_WRITE | FA_CREATE_ALWAYS); // este modo crea un archivo y sobreescribe los anteriores
 8001e36:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4b67      	ldr	r3, [pc, #412]	@ (8001fdc <SDCard_write+0x1d4>)
 8001e3e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001e42:	f103 0308 	add.w	r3, r3, #8
 8001e46:	443b      	add	r3, r7
 8001e48:	220a      	movs	r2, #10
 8001e4a:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f011 fbe8 	bl	8013624 <f_open>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f241 0247 	movw	r2, #4167	@ 0x1047
 8001e5a:	443a      	add	r2, r7
 8001e5c:	7013      	strb	r3, [r2, #0]
		if (fr != FR_OK)
 8001e5e:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001e62:	443b      	add	r3, r7
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d039      	beq.n	8001ede <SDCard_write+0xd6>
		{
			sprintf(TxBuffer,
 8001e6a:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001e6e:	443b      	add	r3, r7
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001e76:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001e7a:	4959      	ldr	r1, [pc, #356]	@ (8001fe0 <SDCard_write+0x1d8>)
 8001e7c:	4859      	ldr	r0, [pc, #356]	@ (8001fe4 <SDCard_write+0x1dc>)
 8001e7e:	f012 f9ad 	bl	80141dc <siprintf>
					"Error opening/creating file: %s. Error Code: (%i)\r\n",
					filename, fr);
			print(TxBuffer);
 8001e82:	4858      	ldr	r0, [pc, #352]	@ (8001fe4 <SDCard_write+0x1dc>)
 8001e84:	f7ff fb62 	bl	800154c <print>
			return;
 8001e88:	e0a2      	b.n	8001fd0 <SDCard_write+0x1c8>
		}
	}
	else
	{
		fr = f_open(&file, filename, FA_WRITE | FA_OPEN_APPEND); // este modo añade datos sin sobreescribir
 8001e8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4b52      	ldr	r3, [pc, #328]	@ (8001fdc <SDCard_write+0x1d4>)
 8001e92:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001e96:	f103 0308 	add.w	r3, r3, #8
 8001e9a:	443b      	add	r3, r7
 8001e9c:	2232      	movs	r2, #50	@ 0x32
 8001e9e:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f011 fbbe 	bl	8013624 <f_open>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f241 0247 	movw	r2, #4167	@ 0x1047
 8001eae:	443a      	add	r2, r7
 8001eb0:	7013      	strb	r3, [r2, #0]
		if (fr != FR_OK)
 8001eb2:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001eb6:	443b      	add	r3, r7
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00f      	beq.n	8001ede <SDCard_write+0xd6>
		{
			sprintf(TxBuffer,
 8001ebe:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001ec2:	443b      	add	r3, r7
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001eca:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001ece:	4946      	ldr	r1, [pc, #280]	@ (8001fe8 <SDCard_write+0x1e0>)
 8001ed0:	4844      	ldr	r0, [pc, #272]	@ (8001fe4 <SDCard_write+0x1dc>)
 8001ed2:	f012 f983 	bl	80141dc <siprintf>
					"Error opening file: %s. Error Code: (%i)\r\n",
					filename, fr);
			print(TxBuffer);
 8001ed6:	4843      	ldr	r0, [pc, #268]	@ (8001fe4 <SDCard_write+0x1dc>)
 8001ed8:	f7ff fb38 	bl	800154c <print>
			return;
 8001edc:	e078      	b.n	8001fd0 <SDCard_write+0x1c8>
		}
	}

	//------------------[ Write Data to the File ]--------------------
	fr = f_write(&file, data, strlen(data), &bw);
 8001ede:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ee2:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001ee6:	f7fe fa13 	bl	8000310 <strlen>
 8001eea:	4602      	mov	r2, r0
 8001eec:	4b3f      	ldr	r3, [pc, #252]	@ (8001fec <SDCard_write+0x1e4>)
 8001eee:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001ef2:	f103 0308 	add.w	r3, r3, #8
 8001ef6:	443b      	add	r3, r7
 8001ef8:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001efc:	4837      	ldr	r0, [pc, #220]	@ (8001fdc <SDCard_write+0x1d4>)
 8001efe:	f500 5082 	add.w	r0, r0, #4160	@ 0x1040
 8001f02:	f100 0008 	add.w	r0, r0, #8
 8001f06:	4438      	add	r0, r7
 8001f08:	f851 1c40 	ldr.w	r1, [r1, #-64]
 8001f0c:	f011 fd52 	bl	80139b4 <f_write>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f241 0247 	movw	r2, #4167	@ 0x1047
 8001f16:	443a      	add	r2, r7
 8001f18:	7013      	strb	r3, [r2, #0]
	if (fr != FR_OK || bw < strlen(data))
 8001f1a:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001f1e:	443b      	add	r3, r7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10c      	bne.n	8001f40 <SDCard_write+0x138>
 8001f26:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f2a:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001f2e:	f7fe f9ef 	bl	8000310 <strlen>
 8001f32:	4602      	mov	r2, r0
 8001f34:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f38:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d918      	bls.n	8001f72 <SDCard_write+0x16a>
	{
		sprintf(TxBuffer, "Error writing to file: %s. Error Code: (%i)\r\n",
 8001f40:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001f44:	443b      	add	r3, r7
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001f4c:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001f50:	4927      	ldr	r1, [pc, #156]	@ (8001ff0 <SDCard_write+0x1e8>)
 8001f52:	4824      	ldr	r0, [pc, #144]	@ (8001fe4 <SDCard_write+0x1dc>)
 8001f54:	f012 f942 	bl	80141dc <siprintf>
				filename, fr);
		print(TxBuffer);
 8001f58:	4822      	ldr	r0, [pc, #136]	@ (8001fe4 <SDCard_write+0x1dc>)
 8001f5a:	f7ff faf7 	bl	800154c <print>
		f_close(&file);
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <SDCard_write+0x1d4>)
 8001f60:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001f64:	f103 0308 	add.w	r3, r3, #8
 8001f68:	443b      	add	r3, r7
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f011 ff34 	bl	8013dd8 <f_close>
		return;
 8001f70:	e02e      	b.n	8001fd0 <SDCard_write+0x1c8>
	}

	//------------------[ Close the File ]--------------------
	fr = f_close(&file);
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <SDCard_write+0x1d4>)
 8001f74:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8001f78:	f103 0308 	add.w	r3, r3, #8
 8001f7c:	443b      	add	r3, r7
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f011 ff2a 	bl	8013dd8 <f_close>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f241 0247 	movw	r2, #4167	@ 0x1047
 8001f8a:	443a      	add	r2, r7
 8001f8c:	7013      	strb	r3, [r2, #0]
	if (fr != FR_OK)
 8001f8e:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001f92:	443b      	add	r3, r7
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00f      	beq.n	8001fba <SDCard_write+0x1b2>
	{
		sprintf(TxBuffer, "Error closing file: %s. Error Code: (%i)\r\n",
 8001f9a:	f241 0347 	movw	r3, #4167	@ 0x1047
 8001f9e:	443b      	add	r3, r7
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001fa6:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001faa:	4912      	ldr	r1, [pc, #72]	@ (8001ff4 <SDCard_write+0x1ec>)
 8001fac:	480d      	ldr	r0, [pc, #52]	@ (8001fe4 <SDCard_write+0x1dc>)
 8001fae:	f012 f915 	bl	80141dc <siprintf>
				filename, fr);
		print(TxBuffer);
 8001fb2:	480c      	ldr	r0, [pc, #48]	@ (8001fe4 <SDCard_write+0x1dc>)
 8001fb4:	f7ff faca 	bl	800154c <print>
		return;
 8001fb8:	e00a      	b.n	8001fd0 <SDCard_write+0x1c8>
	}

	//------------------[ Success Message ]--------------------
	sprintf(TxBuffer, "Data written successfully to file: %s\r\n", filename);
 8001fba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fbe:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8001fc2:	490d      	ldr	r1, [pc, #52]	@ (8001ff8 <SDCard_write+0x1f0>)
 8001fc4:	4807      	ldr	r0, [pc, #28]	@ (8001fe4 <SDCard_write+0x1dc>)
 8001fc6:	f012 f909 	bl	80141dc <siprintf>
	print(TxBuffer);
 8001fca:	4806      	ldr	r0, [pc, #24]	@ (8001fe4 <SDCard_write+0x1dc>)
 8001fcc:	f7ff fabe 	bl	800154c <print>
}
 8001fd0:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	ffffefcc 	.word	0xffffefcc
 8001fe0:	08014e3c 	.word	0x08014e3c
 8001fe4:	24001714 	.word	0x24001714
 8001fe8:	08014e70 	.word	0x08014e70
 8001fec:	ffffefc8 	.word	0xffffefc8
 8001ff0:	08014e9c 	.word	0x08014e9c
 8001ff4:	08014ecc 	.word	0x08014ecc
 8001ff8:	08014ef8 	.word	0x08014ef8

08001ffc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <Error_Handler+0x8>

08002008 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <HAL_MspInit+0x30>)
 8002010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002014:	4a08      	ldr	r2, [pc, #32]	@ (8002038 <HAL_MspInit+0x30>)
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_MspInit+0x30>)
 8002020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	58024400 	.word	0x58024400

0800203c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b090      	sub	sp, #64	@ 0x40
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a90      	ldr	r2, [pc, #576]	@ (800229c <HAL_ADC_MspInit+0x260>)
 800205a:	4293      	cmp	r3, r2
 800205c:	f040 80a3 	bne.w	80021a6 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002060:	4b8f      	ldr	r3, [pc, #572]	@ (80022a0 <HAL_ADC_MspInit+0x264>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	4a8e      	ldr	r2, [pc, #568]	@ (80022a0 <HAL_ADC_MspInit+0x264>)
 8002068:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800206a:	4b8d      	ldr	r3, [pc, #564]	@ (80022a0 <HAL_ADC_MspInit+0x264>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d10e      	bne.n	8002090 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002072:	4b8c      	ldr	r3, [pc, #560]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 8002074:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002078:	4a8a      	ldr	r2, [pc, #552]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 800207a:	f043 0320 	orr.w	r3, r3, #32
 800207e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002082:	4b88      	ldr	r3, [pc, #544]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 8002084:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800208e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002090:	4b84      	ldr	r3, [pc, #528]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 8002092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002096:	4a83      	ldr	r2, [pc, #524]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020a0:	4b80      	ldr	r3, [pc, #512]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 80020a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	4b7d      	ldr	r3, [pc, #500]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 80020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b4:	4a7b      	ldr	r2, [pc, #492]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 80020b6:	f043 0302 	orr.w	r3, r3, #2
 80020ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020be:	4b79      	ldr	r3, [pc, #484]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	623b      	str	r3, [r7, #32]
 80020ca:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020cc:	4b75      	ldr	r3, [pc, #468]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 80020ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d2:	4a74      	ldr	r2, [pc, #464]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 80020d4:	f043 0320 	orr.w	r3, r3, #32
 80020d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020dc:	4b71      	ldr	r3, [pc, #452]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 80020ea:	2330      	movs	r3, #48	@ 0x30
 80020ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ee:	2303      	movs	r3, #3
 80020f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020fa:	4619      	mov	r1, r3
 80020fc:	486a      	ldr	r0, [pc, #424]	@ (80022a8 <HAL_ADC_MspInit+0x26c>)
 80020fe:	f006 fa25 	bl	800854c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8002102:	2303      	movs	r3, #3
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002106:	2303      	movs	r3, #3
 8002108:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002112:	4619      	mov	r1, r3
 8002114:	4865      	ldr	r0, [pc, #404]	@ (80022ac <HAL_ADC_MspInit+0x270>)
 8002116:	f006 fa19 	bl	800854c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 800211a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002120:	2303      	movs	r3, #3
 8002122:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8002128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800212c:	4619      	mov	r1, r3
 800212e:	4860      	ldr	r0, [pc, #384]	@ (80022b0 <HAL_ADC_MspInit+0x274>)
 8002130:	f006 fa0c 	bl	800854c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002134:	4b5f      	ldr	r3, [pc, #380]	@ (80022b4 <HAL_ADC_MspInit+0x278>)
 8002136:	4a60      	ldr	r2, [pc, #384]	@ (80022b8 <HAL_ADC_MspInit+0x27c>)
 8002138:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800213a:	4b5e      	ldr	r3, [pc, #376]	@ (80022b4 <HAL_ADC_MspInit+0x278>)
 800213c:	2209      	movs	r2, #9
 800213e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002140:	4b5c      	ldr	r3, [pc, #368]	@ (80022b4 <HAL_ADC_MspInit+0x278>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002146:	4b5b      	ldr	r3, [pc, #364]	@ (80022b4 <HAL_ADC_MspInit+0x278>)
 8002148:	2200      	movs	r2, #0
 800214a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800214c:	4b59      	ldr	r3, [pc, #356]	@ (80022b4 <HAL_ADC_MspInit+0x278>)
 800214e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002152:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002154:	4b57      	ldr	r3, [pc, #348]	@ (80022b4 <HAL_ADC_MspInit+0x278>)
 8002156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800215a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800215c:	4b55      	ldr	r3, [pc, #340]	@ (80022b4 <HAL_ADC_MspInit+0x278>)
 800215e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002162:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002164:	4b53      	ldr	r3, [pc, #332]	@ (80022b4 <HAL_ADC_MspInit+0x278>)
 8002166:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800216a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800216c:	4b51      	ldr	r3, [pc, #324]	@ (80022b4 <HAL_ADC_MspInit+0x278>)
 800216e:	2200      	movs	r2, #0
 8002170:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002172:	4b50      	ldr	r3, [pc, #320]	@ (80022b4 <HAL_ADC_MspInit+0x278>)
 8002174:	2200      	movs	r2, #0
 8002176:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002178:	484e      	ldr	r0, [pc, #312]	@ (80022b4 <HAL_ADC_MspInit+0x278>)
 800217a:	f002 fef5 	bl	8004f68 <HAL_DMA_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8002184:	f7ff ff3a 	bl	8001ffc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a4a      	ldr	r2, [pc, #296]	@ (80022b4 <HAL_ADC_MspInit+0x278>)
 800218c:	659a      	str	r2, [r3, #88]	@ 0x58
 800218e:	4a49      	ldr	r2, [pc, #292]	@ (80022b4 <HAL_ADC_MspInit+0x278>)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	2012      	movs	r0, #18
 800219a:	f002 feb0 	bl	8004efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800219e:	2012      	movs	r0, #18
 80021a0:	f002 fec7 	bl	8004f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80021a4:	e076      	b.n	8002294 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a44      	ldr	r2, [pc, #272]	@ (80022bc <HAL_ADC_MspInit+0x280>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d171      	bne.n	8002294 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80021b0:	4b3b      	ldr	r3, [pc, #236]	@ (80022a0 <HAL_ADC_MspInit+0x264>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	3301      	adds	r3, #1
 80021b6:	4a3a      	ldr	r2, [pc, #232]	@ (80022a0 <HAL_ADC_MspInit+0x264>)
 80021b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80021ba:	4b39      	ldr	r3, [pc, #228]	@ (80022a0 <HAL_ADC_MspInit+0x264>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10e      	bne.n	80021e0 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80021c2:	4b38      	ldr	r3, [pc, #224]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 80021c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021c8:	4a36      	ldr	r2, [pc, #216]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 80021ca:	f043 0320 	orr.w	r3, r3, #32
 80021ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80021d2:	4b34      	ldr	r3, [pc, #208]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 80021d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e0:	4b30      	ldr	r3, [pc, #192]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 80021e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e6:	4a2f      	ldr	r2, [pc, #188]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021f0:	4b2c      	ldr	r3, [pc, #176]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 80021f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	4b29      	ldr	r3, [pc, #164]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 8002200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002204:	4a27      	ldr	r2, [pc, #156]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 8002206:	f043 0302 	orr.w	r3, r3, #2
 800220a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800220e:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 8002210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800221c:	4b21      	ldr	r3, [pc, #132]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 800221e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002222:	4a20      	ldr	r2, [pc, #128]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 8002224:	f043 0320 	orr.w	r3, r3, #32
 8002228:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800222c:	4b1d      	ldr	r3, [pc, #116]	@ (80022a4 <HAL_ADC_MspInit+0x268>)
 800222e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 800223a:	2320      	movs	r3, #32
 800223c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800223e:	2303      	movs	r3, #3
 8002240:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8002246:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800224a:	4619      	mov	r1, r3
 800224c:	4816      	ldr	r0, [pc, #88]	@ (80022a8 <HAL_ADC_MspInit+0x26c>)
 800224e:	f006 f97d 	bl	800854c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8002252:	2301      	movs	r3, #1
 8002254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002256:	2303      	movs	r3, #3
 8002258:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 800225e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002262:	4619      	mov	r1, r3
 8002264:	4811      	ldr	r0, [pc, #68]	@ (80022ac <HAL_ADC_MspInit+0x270>)
 8002266:	f006 f971 	bl	800854c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 800226a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800226e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002270:	2303      	movs	r3, #3
 8002272:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002278:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800227c:	4619      	mov	r1, r3
 800227e:	480c      	ldr	r0, [pc, #48]	@ (80022b0 <HAL_ADC_MspInit+0x274>)
 8002280:	f006 f964 	bl	800854c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002284:	2200      	movs	r2, #0
 8002286:	2100      	movs	r1, #0
 8002288:	2012      	movs	r0, #18
 800228a:	f002 fe38 	bl	8004efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800228e:	2012      	movs	r0, #18
 8002290:	f002 fe4f 	bl	8004f32 <HAL_NVIC_EnableIRQ>
}
 8002294:	bf00      	nop
 8002296:	3740      	adds	r7, #64	@ 0x40
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40022000 	.word	0x40022000
 80022a0:	24001810 	.word	0x24001810
 80022a4:	58024400 	.word	0x58024400
 80022a8:	58020800 	.word	0x58020800
 80022ac:	58020400 	.word	0x58020400
 80022b0:	58021400 	.word	0x58021400
 80022b4:	24000174 	.word	0x24000174
 80022b8:	40020010 	.word	0x40020010
 80022bc:	40022100 	.word	0x40022100

080022c0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0ba      	sub	sp, #232	@ 0xe8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022d8:	f107 0318 	add.w	r3, r7, #24
 80022dc:	22b8      	movs	r2, #184	@ 0xb8
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f011 ff9d 	bl	8014220 <memset>
  if(hfdcan->Instance==FDCAN1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002464 <HAL_FDCAN_MspInit+0x1a4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d157      	bne.n	80023a0 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80022f0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002302:	f107 0318 	add.w	r3, r7, #24
 8002306:	4618      	mov	r0, r3
 8002308:	f007 fa9a 	bl	8009840 <HAL_RCCEx_PeriphCLKConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002312:	f7ff fe73 	bl	8001ffc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002316:	4b54      	ldr	r3, [pc, #336]	@ (8002468 <HAL_FDCAN_MspInit+0x1a8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3301      	adds	r3, #1
 800231c:	4a52      	ldr	r2, [pc, #328]	@ (8002468 <HAL_FDCAN_MspInit+0x1a8>)
 800231e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002320:	4b51      	ldr	r3, [pc, #324]	@ (8002468 <HAL_FDCAN_MspInit+0x1a8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d10e      	bne.n	8002346 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002328:	4b50      	ldr	r3, [pc, #320]	@ (800246c <HAL_FDCAN_MspInit+0x1ac>)
 800232a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800232e:	4a4f      	ldr	r2, [pc, #316]	@ (800246c <HAL_FDCAN_MspInit+0x1ac>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002334:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002338:	4b4c      	ldr	r3, [pc, #304]	@ (800246c <HAL_FDCAN_MspInit+0x1ac>)
 800233a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800233e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002346:	4b49      	ldr	r3, [pc, #292]	@ (800246c <HAL_FDCAN_MspInit+0x1ac>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234c:	4a47      	ldr	r2, [pc, #284]	@ (800246c <HAL_FDCAN_MspInit+0x1ac>)
 800234e:	f043 0308 	orr.w	r3, r3, #8
 8002352:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002356:	4b45      	ldr	r3, [pc, #276]	@ (800246c <HAL_FDCAN_MspInit+0x1ac>)
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002364:	2303      	movs	r3, #3
 8002366:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800237c:	2309      	movs	r3, #9
 800237e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002382:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002386:	4619      	mov	r1, r3
 8002388:	4839      	ldr	r0, [pc, #228]	@ (8002470 <HAL_FDCAN_MspInit+0x1b0>)
 800238a:	f006 f8df 	bl	800854c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2101      	movs	r1, #1
 8002392:	2013      	movs	r0, #19
 8002394:	f002 fdb3 	bl	8004efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002398:	2013      	movs	r0, #19
 800239a:	f002 fdca 	bl	8004f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800239e:	e05c      	b.n	800245a <HAL_FDCAN_MspInit+0x19a>
  else if(hfdcan->Instance==FDCAN2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a33      	ldr	r2, [pc, #204]	@ (8002474 <HAL_FDCAN_MspInit+0x1b4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d157      	bne.n	800245a <HAL_FDCAN_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80023aa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023bc:	f107 0318 	add.w	r3, r7, #24
 80023c0:	4618      	mov	r0, r3
 80023c2:	f007 fa3d 	bl	8009840 <HAL_RCCEx_PeriphCLKConfig>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 80023cc:	f7ff fe16 	bl	8001ffc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80023d0:	4b25      	ldr	r3, [pc, #148]	@ (8002468 <HAL_FDCAN_MspInit+0x1a8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	4a24      	ldr	r2, [pc, #144]	@ (8002468 <HAL_FDCAN_MspInit+0x1a8>)
 80023d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80023da:	4b23      	ldr	r3, [pc, #140]	@ (8002468 <HAL_FDCAN_MspInit+0x1a8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10e      	bne.n	8002400 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80023e2:	4b22      	ldr	r3, [pc, #136]	@ (800246c <HAL_FDCAN_MspInit+0x1ac>)
 80023e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80023e8:	4a20      	ldr	r2, [pc, #128]	@ (800246c <HAL_FDCAN_MspInit+0x1ac>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ee:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80023f2:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <HAL_FDCAN_MspInit+0x1ac>)
 80023f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80023f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002400:	4b1a      	ldr	r3, [pc, #104]	@ (800246c <HAL_FDCAN_MspInit+0x1ac>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002406:	4a19      	ldr	r2, [pc, #100]	@ (800246c <HAL_FDCAN_MspInit+0x1ac>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002410:	4b16      	ldr	r3, [pc, #88]	@ (800246c <HAL_FDCAN_MspInit+0x1ac>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800241e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002422:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002438:	2309      	movs	r3, #9
 800243a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002442:	4619      	mov	r1, r3
 8002444:	480c      	ldr	r0, [pc, #48]	@ (8002478 <HAL_FDCAN_MspInit+0x1b8>)
 8002446:	f006 f881 	bl	800854c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2102      	movs	r1, #2
 800244e:	2014      	movs	r0, #20
 8002450:	f002 fd55 	bl	8004efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002454:	2014      	movs	r0, #20
 8002456:	f002 fd6c 	bl	8004f32 <HAL_NVIC_EnableIRQ>
}
 800245a:	bf00      	nop
 800245c:	37e8      	adds	r7, #232	@ 0xe8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	4000a000 	.word	0x4000a000
 8002468:	24001814 	.word	0x24001814
 800246c:	58024400 	.word	0x58024400
 8002470:	58020c00 	.word	0x58020c00
 8002474:	4000a400 	.word	0x4000a400
 8002478:	58020400 	.word	0x58020400

0800247c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08c      	sub	sp, #48	@ 0x30
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 031c 	add.w	r3, r7, #28
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a3e      	ldr	r2, [pc, #248]	@ (8002594 <HAL_SD_MspInit+0x118>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d175      	bne.n	800258a <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800249e:	4b3e      	ldr	r3, [pc, #248]	@ (8002598 <HAL_SD_MspInit+0x11c>)
 80024a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024a4:	4a3c      	ldr	r2, [pc, #240]	@ (8002598 <HAL_SD_MspInit+0x11c>)
 80024a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024aa:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80024ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002598 <HAL_SD_MspInit+0x11c>)
 80024b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024bc:	4b36      	ldr	r3, [pc, #216]	@ (8002598 <HAL_SD_MspInit+0x11c>)
 80024be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c2:	4a35      	ldr	r2, [pc, #212]	@ (8002598 <HAL_SD_MspInit+0x11c>)
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024cc:	4b32      	ldr	r3, [pc, #200]	@ (8002598 <HAL_SD_MspInit+0x11c>)
 80024ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024da:	4b2f      	ldr	r3, [pc, #188]	@ (8002598 <HAL_SD_MspInit+0x11c>)
 80024dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002598 <HAL_SD_MspInit+0x11c>)
 80024e2:	f043 0308 	orr.w	r3, r3, #8
 80024e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <HAL_SD_MspInit+0x11c>)
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f8:	4b27      	ldr	r3, [pc, #156]	@ (8002598 <HAL_SD_MspInit+0x11c>)
 80024fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024fe:	4a26      	ldr	r2, [pc, #152]	@ (8002598 <HAL_SD_MspInit+0x11c>)
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002508:	4b23      	ldr	r3, [pc, #140]	@ (8002598 <HAL_SD_MspInit+0x11c>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002516:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800251a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251c:	2302      	movs	r3, #2
 800251e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002524:	2303      	movs	r3, #3
 8002526:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002528:	230c      	movs	r3, #12
 800252a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	4619      	mov	r1, r3
 8002532:	481a      	ldr	r0, [pc, #104]	@ (800259c <HAL_SD_MspInit+0x120>)
 8002534:	f006 f80a 	bl	800854c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002538:	2304      	movs	r3, #4
 800253a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002548:	230c      	movs	r3, #12
 800254a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	4619      	mov	r1, r3
 8002552:	4813      	ldr	r0, [pc, #76]	@ (80025a0 <HAL_SD_MspInit+0x124>)
 8002554:	f005 fffa 	bl	800854c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002558:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 800256a:	2307      	movs	r3, #7
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4619      	mov	r1, r3
 8002574:	480b      	ldr	r0, [pc, #44]	@ (80025a4 <HAL_SD_MspInit+0x128>)
 8002576:	f005 ffe9 	bl	800854c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2031      	movs	r0, #49	@ 0x31
 8002580:	f002 fcbd 	bl	8004efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002584:	2031      	movs	r0, #49	@ 0x31
 8002586:	f002 fcd4 	bl	8004f32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800258a:	bf00      	nop
 800258c:	3730      	adds	r7, #48	@ 0x30
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	52007000 	.word	0x52007000
 8002598:	58024400 	.word	0x58024400
 800259c:	58020800 	.word	0x58020800
 80025a0:	58020c00 	.word	0x58020c00
 80025a4:	58020400 	.word	0x58020400

080025a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a19      	ldr	r2, [pc, #100]	@ (800261c <HAL_TIM_Base_MspInit+0x74>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10f      	bne.n	80025da <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ba:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_TIM_Base_MspInit+0x78>)
 80025bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025c0:	4a17      	ldr	r2, [pc, #92]	@ (8002620 <HAL_TIM_Base_MspInit+0x78>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025ca:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <HAL_TIM_Base_MspInit+0x78>)
 80025cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80025d8:	e01b      	b.n	8002612 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a11      	ldr	r2, [pc, #68]	@ (8002624 <HAL_TIM_Base_MspInit+0x7c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d116      	bne.n	8002612 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80025e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <HAL_TIM_Base_MspInit+0x78>)
 80025e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002620 <HAL_TIM_Base_MspInit+0x78>)
 80025ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <HAL_TIM_Base_MspInit+0x78>)
 80025f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	2075      	movs	r0, #117	@ 0x75
 8002608:	f002 fc79 	bl	8004efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800260c:	2075      	movs	r0, #117	@ 0x75
 800260e:	f002 fc90 	bl	8004f32 <HAL_NVIC_EnableIRQ>
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40010000 	.word	0x40010000
 8002620:	58024400 	.word	0x58024400
 8002624:	40014400 	.word	0x40014400

08002628 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a13      	ldr	r2, [pc, #76]	@ (8002694 <HAL_TIM_MspPostInit+0x6c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d11f      	bne.n	800268a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800264a:	4b13      	ldr	r3, [pc, #76]	@ (8002698 <HAL_TIM_MspPostInit+0x70>)
 800264c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002650:	4a11      	ldr	r2, [pc, #68]	@ (8002698 <HAL_TIM_MspPostInit+0x70>)
 8002652:	f043 0310 	orr.w	r3, r3, #16
 8002656:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800265a:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <HAL_TIM_MspPostInit+0x70>)
 800265c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 8002668:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800266c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800267a:	2301      	movs	r3, #1
 800267c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800267e:	f107 030c 	add.w	r3, r7, #12
 8002682:	4619      	mov	r1, r3
 8002684:	4805      	ldr	r0, [pc, #20]	@ (800269c <HAL_TIM_MspPostInit+0x74>)
 8002686:	f005 ff61 	bl	800854c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800268a:	bf00      	nop
 800268c:	3720      	adds	r7, #32
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40010000 	.word	0x40010000
 8002698:	58024400 	.word	0x58024400
 800269c:	58021000 	.word	0x58021000

080026a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b0ba      	sub	sp, #232	@ 0xe8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b8:	f107 0318 	add.w	r3, r7, #24
 80026bc:	22b8      	movs	r2, #184	@ 0xb8
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f011 fdad 	bl	8014220 <memset>
  if(huart->Instance==USART1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a4d      	ldr	r2, [pc, #308]	@ (8002800 <HAL_UART_MspInit+0x160>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d147      	bne.n	8002760 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026d0:	f04f 0201 	mov.w	r2, #1
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026e2:	f107 0318 	add.w	r3, r7, #24
 80026e6:	4618      	mov	r0, r3
 80026e8:	f007 f8aa 	bl	8009840 <HAL_RCCEx_PeriphCLKConfig>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80026f2:	f7ff fc83 	bl	8001ffc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026f6:	4b43      	ldr	r3, [pc, #268]	@ (8002804 <HAL_UART_MspInit+0x164>)
 80026f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026fc:	4a41      	ldr	r2, [pc, #260]	@ (8002804 <HAL_UART_MspInit+0x164>)
 80026fe:	f043 0310 	orr.w	r3, r3, #16
 8002702:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002706:	4b3f      	ldr	r3, [pc, #252]	@ (8002804 <HAL_UART_MspInit+0x164>)
 8002708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002714:	4b3b      	ldr	r3, [pc, #236]	@ (8002804 <HAL_UART_MspInit+0x164>)
 8002716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800271a:	4a3a      	ldr	r2, [pc, #232]	@ (8002804 <HAL_UART_MspInit+0x164>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002724:	4b37      	ldr	r3, [pc, #220]	@ (8002804 <HAL_UART_MspInit+0x164>)
 8002726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 8002732:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002736:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800274c:	2307      	movs	r3, #7
 800274e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002752:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002756:	4619      	mov	r1, r3
 8002758:	482b      	ldr	r0, [pc, #172]	@ (8002808 <HAL_UART_MspInit+0x168>)
 800275a:	f005 fef7 	bl	800854c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800275e:	e04a      	b.n	80027f6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a29      	ldr	r2, [pc, #164]	@ (800280c <HAL_UART_MspInit+0x16c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d145      	bne.n	80027f6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800276a:	f04f 0202 	mov.w	r2, #2
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800277c:	f107 0318 	add.w	r3, r7, #24
 8002780:	4618      	mov	r0, r3
 8002782:	f007 f85d 	bl	8009840 <HAL_RCCEx_PeriphCLKConfig>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800278c:	f7ff fc36 	bl	8001ffc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002790:	4b1c      	ldr	r3, [pc, #112]	@ (8002804 <HAL_UART_MspInit+0x164>)
 8002792:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002796:	4a1b      	ldr	r2, [pc, #108]	@ (8002804 <HAL_UART_MspInit+0x164>)
 8002798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800279c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027a0:	4b18      	ldr	r3, [pc, #96]	@ (8002804 <HAL_UART_MspInit+0x164>)
 80027a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <HAL_UART_MspInit+0x164>)
 80027b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b4:	4a13      	ldr	r2, [pc, #76]	@ (8002804 <HAL_UART_MspInit+0x164>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027be:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <HAL_UART_MspInit+0x164>)
 80027c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027cc:	230c      	movs	r3, #12
 80027ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	2302      	movs	r3, #2
 80027d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027e4:	2307      	movs	r3, #7
 80027e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027ee:	4619      	mov	r1, r3
 80027f0:	4805      	ldr	r0, [pc, #20]	@ (8002808 <HAL_UART_MspInit+0x168>)
 80027f2:	f005 feab 	bl	800854c <HAL_GPIO_Init>
}
 80027f6:	bf00      	nop
 80027f8:	37e8      	adds	r7, #232	@ 0xe8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40011000 	.word	0x40011000
 8002804:	58024400 	.word	0x58024400
 8002808:	58020000 	.word	0x58020000
 800280c:	40004400 	.word	0x40004400

08002810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <NMI_Handler+0x4>

08002818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <HardFault_Handler+0x4>

08002820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002824:	bf00      	nop
 8002826:	e7fd      	b.n	8002824 <MemManage_Handler+0x4>

08002828 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <BusFault_Handler+0x4>

08002830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002834:	bf00      	nop
 8002836:	e7fd      	b.n	8002834 <UsageFault_Handler+0x4>

08002838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002866:	f000 f98d 	bl	8002b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002874:	4802      	ldr	r0, [pc, #8]	@ (8002880 <DMA1_Stream0_IRQHandler+0x10>)
 8002876:	f003 f939 	bl	8005aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	24000174 	.word	0x24000174

08002884 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002888:	4803      	ldr	r0, [pc, #12]	@ (8002898 <ADC_IRQHandler+0x14>)
 800288a:	f000 ff8f 	bl	80037ac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800288e:	4803      	ldr	r0, [pc, #12]	@ (800289c <ADC_IRQHandler+0x18>)
 8002890:	f000 ff8c 	bl	80037ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	24000094 	.word	0x24000094
 800289c:	24000104 	.word	0x24000104

080028a0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80028a4:	4802      	ldr	r0, [pc, #8]	@ (80028b0 <FDCAN1_IT0_IRQHandler+0x10>)
 80028a6:	f005 f943 	bl	8007b30 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	240001ec 	.word	0x240001ec

080028b4 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80028b8:	4802      	ldr	r0, [pc, #8]	@ (80028c4 <FDCAN2_IT0_IRQHandler+0x10>)
 80028ba:	f005 f939 	bl	8007b30 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2400028c 	.word	0x2400028c

080028c8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80028cc:	4802      	ldr	r0, [pc, #8]	@ (80028d8 <SDMMC1_IRQHandler+0x10>)
 80028ce:	f009 fe0d 	bl	800c4ec <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2400032c 	.word	0x2400032c

080028dc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80028e0:	4802      	ldr	r0, [pc, #8]	@ (80028ec <TIM16_IRQHandler+0x10>)
 80028e2:	f00b f936 	bl	800db52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	240003f4 	.word	0x240003f4

080028f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f8:	4a14      	ldr	r2, [pc, #80]	@ (800294c <_sbrk+0x5c>)
 80028fa:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <_sbrk+0x60>)
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002904:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800290c:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <_sbrk+0x64>)
 800290e:	4a12      	ldr	r2, [pc, #72]	@ (8002958 <_sbrk+0x68>)
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002912:	4b10      	ldr	r3, [pc, #64]	@ (8002954 <_sbrk+0x64>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d207      	bcs.n	8002930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002920:	f011 fc86 	bl	8014230 <__errno>
 8002924:	4603      	mov	r3, r0
 8002926:	220c      	movs	r2, #12
 8002928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	e009      	b.n	8002944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002930:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002936:	4b07      	ldr	r3, [pc, #28]	@ (8002954 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	4a05      	ldr	r2, [pc, #20]	@ (8002954 <_sbrk+0x64>)
 8002940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	24050000 	.word	0x24050000
 8002950:	00000400 	.word	0x00000400
 8002954:	24001818 	.word	0x24001818
 8002958:	24001bb0 	.word	0x24001bb0

0800295c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002960:	4b32      	ldr	r3, [pc, #200]	@ (8002a2c <SystemInit+0xd0>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002966:	4a31      	ldr	r2, [pc, #196]	@ (8002a2c <SystemInit+0xd0>)
 8002968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800296c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002970:	4b2f      	ldr	r3, [pc, #188]	@ (8002a30 <SystemInit+0xd4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	2b06      	cmp	r3, #6
 800297a:	d807      	bhi.n	800298c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800297c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a30 <SystemInit+0xd4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f023 030f 	bic.w	r3, r3, #15
 8002984:	4a2a      	ldr	r2, [pc, #168]	@ (8002a30 <SystemInit+0xd4>)
 8002986:	f043 0307 	orr.w	r3, r3, #7
 800298a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800298c:	4b29      	ldr	r3, [pc, #164]	@ (8002a34 <SystemInit+0xd8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a28      	ldr	r2, [pc, #160]	@ (8002a34 <SystemInit+0xd8>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002998:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <SystemInit+0xd8>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800299e:	4b25      	ldr	r3, [pc, #148]	@ (8002a34 <SystemInit+0xd8>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	4924      	ldr	r1, [pc, #144]	@ (8002a34 <SystemInit+0xd8>)
 80029a4:	4b24      	ldr	r3, [pc, #144]	@ (8002a38 <SystemInit+0xdc>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029aa:	4b21      	ldr	r3, [pc, #132]	@ (8002a30 <SystemInit+0xd4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a30 <SystemInit+0xd4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 030f 	bic.w	r3, r3, #15
 80029be:	4a1c      	ldr	r2, [pc, #112]	@ (8002a30 <SystemInit+0xd4>)
 80029c0:	f043 0307 	orr.w	r3, r3, #7
 80029c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80029c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <SystemInit+0xd8>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <SystemInit+0xd8>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80029d2:	4b18      	ldr	r3, [pc, #96]	@ (8002a34 <SystemInit+0xd8>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80029d8:	4b16      	ldr	r3, [pc, #88]	@ (8002a34 <SystemInit+0xd8>)
 80029da:	4a18      	ldr	r2, [pc, #96]	@ (8002a3c <SystemInit+0xe0>)
 80029dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80029de:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <SystemInit+0xd8>)
 80029e0:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <SystemInit+0xe4>)
 80029e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80029e4:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <SystemInit+0xd8>)
 80029e6:	4a17      	ldr	r2, [pc, #92]	@ (8002a44 <SystemInit+0xe8>)
 80029e8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029ea:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <SystemInit+0xd8>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80029f0:	4b10      	ldr	r3, [pc, #64]	@ (8002a34 <SystemInit+0xd8>)
 80029f2:	4a14      	ldr	r2, [pc, #80]	@ (8002a44 <SystemInit+0xe8>)
 80029f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a34 <SystemInit+0xd8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a34 <SystemInit+0xd8>)
 80029fe:	4a11      	ldr	r2, [pc, #68]	@ (8002a44 <SystemInit+0xe8>)
 8002a00:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a02:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <SystemInit+0xd8>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a08:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <SystemInit+0xd8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a09      	ldr	r2, [pc, #36]	@ (8002a34 <SystemInit+0xd8>)
 8002a0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a14:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <SystemInit+0xd8>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <SystemInit+0xec>)
 8002a1c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002a20:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00
 8002a30:	52002000 	.word	0x52002000
 8002a34:	58024400 	.word	0x58024400
 8002a38:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a3c:	02020200 	.word	0x02020200
 8002a40:	01ff0000 	.word	0x01ff0000
 8002a44:	01010280 	.word	0x01010280
 8002a48:	52004000 	.word	0x52004000

08002a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a50:	f7ff ff84 	bl	800295c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a54:	480c      	ldr	r0, [pc, #48]	@ (8002a88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a56:	490d      	ldr	r1, [pc, #52]	@ (8002a8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a58:	4a0d      	ldr	r2, [pc, #52]	@ (8002a90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a5c:	e002      	b.n	8002a64 <LoopCopyDataInit>

08002a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a62:	3304      	adds	r3, #4

08002a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a68:	d3f9      	bcc.n	8002a5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a70:	e001      	b.n	8002a76 <LoopFillZerobss>

08002a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a74:	3204      	adds	r2, #4

08002a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a78:	d3fb      	bcc.n	8002a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a7a:	f011 fbdf 	bl	801423c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a7e:	f7fd fe97 	bl	80007b0 <main>
  bx  lr
 8002a82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a84:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002a88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a8c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002a90:	0801549c 	.word	0x0801549c
  ldr r2, =_sbss
 8002a94:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002a98:	24001bb0 	.word	0x24001bb0

08002a9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a9c:	e7fe      	b.n	8002a9c <ADC3_IRQHandler>
	...

08002aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa6:	2003      	movs	r0, #3
 8002aa8:	f002 fa1e 	bl	8004ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002aac:	f006 fcf2 	bl	8009494 <HAL_RCC_GetSysClockFreq>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <HAL_Init+0x68>)
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	4913      	ldr	r1, [pc, #76]	@ (8002b0c <HAL_Init+0x6c>)
 8002abe:	5ccb      	ldrb	r3, [r1, r3]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002aca:	4b0f      	ldr	r3, [pc, #60]	@ (8002b08 <HAL_Init+0x68>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8002b0c <HAL_Init+0x6c>)
 8002ad4:	5cd3      	ldrb	r3, [r2, r3]
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8002b10 <HAL_Init+0x70>)
 8002ae2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ae4:	4a0b      	ldr	r2, [pc, #44]	@ (8002b14 <HAL_Init+0x74>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aea:	200f      	movs	r0, #15
 8002aec:	f000 f814 	bl	8002b18 <HAL_InitTick>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e002      	b.n	8002b00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002afa:	f7ff fa85 	bl	8002008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	58024400 	.word	0x58024400
 8002b0c:	08014fb4 	.word	0x08014fb4
 8002b10:	24000010 	.word	0x24000010
 8002b14:	2400000c 	.word	0x2400000c

08002b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b20:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <HAL_InitTick+0x60>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e021      	b.n	8002b70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b2c:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <HAL_InitTick+0x64>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <HAL_InitTick+0x60>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	4619      	mov	r1, r3
 8002b36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b42:	4618      	mov	r0, r3
 8002b44:	f002 fa03 	bl	8004f4e <HAL_SYSTICK_Config>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e00e      	b.n	8002b70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b0f      	cmp	r3, #15
 8002b56:	d80a      	bhi.n	8002b6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	f002 f9cd 	bl	8004efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b64:	4a06      	ldr	r2, [pc, #24]	@ (8002b80 <HAL_InitTick+0x68>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e000      	b.n	8002b70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	24000018 	.word	0x24000018
 8002b7c:	2400000c 	.word	0x2400000c
 8002b80:	24000014 	.word	0x24000014

08002b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b88:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <HAL_IncTick+0x20>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <HAL_IncTick+0x24>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	4a04      	ldr	r2, [pc, #16]	@ (8002ba8 <HAL_IncTick+0x24>)
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	24000018 	.word	0x24000018
 8002ba8:	2400181c 	.word	0x2400181c

08002bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	@ (8002bc0 <HAL_GetTick+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	2400181c 	.word	0x2400181c

08002bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bcc:	f7ff ffee 	bl	8002bac <HAL_GetTick>
 8002bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d005      	beq.n	8002bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bde:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <HAL_Delay+0x44>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4413      	add	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bea:	bf00      	nop
 8002bec:	f7ff ffde 	bl	8002bac <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d8f7      	bhi.n	8002bec <HAL_Delay+0x28>
  {
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	24000018 	.word	0x24000018

08002c0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	609a      	str	r2, [r3, #8]
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3360      	adds	r3, #96	@ 0x60
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4a10      	ldr	r2, [pc, #64]	@ (8002cd4 <LL_ADC_SetOffset+0x60>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d10b      	bne.n	8002cb0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002cae:	e00b      	b.n	8002cc8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	601a      	str	r2, [r3, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	371c      	adds	r7, #28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	58026000 	.word	0x58026000

08002cd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3360      	adds	r3, #96	@ 0x60
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	431a      	orrs	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	611a      	str	r2, [r3, #16]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4a0c      	ldr	r2, [pc, #48]	@ (8002d78 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00e      	beq.n	8002d6a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3360      	adds	r3, #96	@ 0x60
 8002d50:	461a      	mov	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	601a      	str	r2, [r3, #0]
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	58026000 	.word	0x58026000

08002d7c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002dbc <LL_ADC_SetOffsetSaturation+0x40>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d10e      	bne.n	8002dae <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	3360      	adds	r3, #96	@ 0x60
 8002d94:	461a      	mov	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002dae:	bf00      	nop
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	58026000 	.word	0x58026000

08002dc0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a0c      	ldr	r2, [pc, #48]	@ (8002e00 <LL_ADC_SetOffsetSign+0x40>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10e      	bne.n	8002df2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3360      	adds	r3, #96	@ 0x60
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	58026000 	.word	0x58026000

08002e04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3360      	adds	r3, #96	@ 0x60
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a0c      	ldr	r2, [pc, #48]	@ (8002e54 <LL_ADC_SetOffsetState+0x50>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d108      	bne.n	8002e38 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002e36:	e007      	b.n	8002e48 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	601a      	str	r2, [r3, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	58026000 	.word	0x58026000

08002e58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b087      	sub	sp, #28
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3330      	adds	r3, #48	@ 0x30
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	4413      	add	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	211f      	movs	r1, #31
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	0e9b      	lsrs	r3, r3, #26
 8002eb6:	f003 011f 	and.w	r1, r3, #31
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f023 0203 	bic.w	r2, r3, #3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	60da      	str	r2, [r3, #12]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	60da      	str	r2, [r3, #12]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a08      	ldr	r2, [pc, #32]	@ (8002f4c <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d107      	bne.n	8002f3e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f023 0203 	bic.w	r2, r3, #3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60da      	str	r2, [r3, #12]
  }
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	58026000 	.word	0x58026000

08002f50 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b087      	sub	sp, #28
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3314      	adds	r3, #20
 8002f86:	461a      	mov	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	0e5b      	lsrs	r3, r3, #25
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	4413      	add	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	0d1b      	lsrs	r3, r3, #20
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	2107      	movs	r1, #7
 8002fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	401a      	ands	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	0d1b      	lsrs	r3, r3, #20
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fc0:	bf00      	nop
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4a1a      	ldr	r2, [pc, #104]	@ (8003044 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d115      	bne.n	800300c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fec:	43db      	mvns	r3, r3
 8002fee:	401a      	ands	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0318 	and.w	r3, r3, #24
 8002ff6:	4914      	ldr	r1, [pc, #80]	@ (8003048 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ff8:	40d9      	lsrs	r1, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	400b      	ands	r3, r1
 8002ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003002:	431a      	orrs	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800300a:	e014      	b.n	8003036 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003018:	43db      	mvns	r3, r3
 800301a:	401a      	ands	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f003 0318 	and.w	r3, r3, #24
 8003022:	4909      	ldr	r1, [pc, #36]	@ (8003048 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003024:	40d9      	lsrs	r1, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	400b      	ands	r3, r1
 800302a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800302e:	431a      	orrs	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	58026000 	.word	0x58026000
 8003048:	000fffff 	.word	0x000fffff

0800304c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 031f 	and.w	r3, r3, #31
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	4b04      	ldr	r3, [pc, #16]	@ (80030a4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003092:	4013      	ands	r3, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6093      	str	r3, [r2, #8]
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	5fffffc0 	.word	0x5fffffc0

080030a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030bc:	d101      	bne.n	80030c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80030de:	4013      	ands	r3, r2
 80030e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	6fffffc0 	.word	0x6fffffc0

080030f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003108:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800310c:	d101      	bne.n	8003112 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <LL_ADC_Enable+0x24>)
 800312e:	4013      	ands	r3, r2
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	7fffffc0 	.word	0x7fffffc0

08003148 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <LL_ADC_IsEnabled+0x18>
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <LL_ADC_IsEnabled+0x1a>
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <LL_ADC_REG_StartConversion+0x24>)
 800317e:	4013      	ands	r3, r2
 8003180:	f043 0204 	orr.w	r2, r3, #4
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	7fffffc0 	.word	0x7fffffc0

08003198 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d101      	bne.n	80031b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d101      	bne.n	80031d6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b089      	sub	sp, #36	@ 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e1ee      	b.n	80035dc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7fe ff15 	bl	800203c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff3f 	bl	80030a8 <LL_ADC_IsDeepPowerDownEnabled>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d004      	beq.n	800323a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff25 	bl	8003084 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff ff5a 	bl	80030f8 <LL_ADC_IsInternalRegulatorEnabled>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d114      	bne.n	8003274 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff3e 	bl	80030d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003254:	4b8e      	ldr	r3, [pc, #568]	@ (8003490 <HAL_ADC_Init+0x2ac>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	099b      	lsrs	r3, r3, #6
 800325a:	4a8e      	ldr	r2, [pc, #568]	@ (8003494 <HAL_ADC_Init+0x2b0>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	099b      	lsrs	r3, r3, #6
 8003262:	3301      	adds	r3, #1
 8003264:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003266:	e002      	b.n	800326e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	3b01      	subs	r3, #1
 800326c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f9      	bne.n	8003268 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff3d 	bl	80030f8 <LL_ADC_IsInternalRegulatorEnabled>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10d      	bne.n	80032a0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003288:	f043 0210 	orr.w	r2, r3, #16
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff77 	bl	8003198 <LL_ADC_REG_IsConversionOngoing>
 80032aa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f040 8188 	bne.w	80035ca <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f040 8184 	bne.w	80035ca <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80032ca:	f043 0202 	orr.w	r2, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff ff36 	bl	8003148 <LL_ADC_IsEnabled>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d136      	bne.n	8003350 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6c      	ldr	r2, [pc, #432]	@ (8003498 <HAL_ADC_Init+0x2b4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_ADC_Init+0x112>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a6a      	ldr	r2, [pc, #424]	@ (800349c <HAL_ADC_Init+0x2b8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d10e      	bne.n	8003314 <HAL_ADC_Init+0x130>
 80032f6:	4868      	ldr	r0, [pc, #416]	@ (8003498 <HAL_ADC_Init+0x2b4>)
 80032f8:	f7ff ff26 	bl	8003148 <LL_ADC_IsEnabled>
 80032fc:	4604      	mov	r4, r0
 80032fe:	4867      	ldr	r0, [pc, #412]	@ (800349c <HAL_ADC_Init+0x2b8>)
 8003300:	f7ff ff22 	bl	8003148 <LL_ADC_IsEnabled>
 8003304:	4603      	mov	r3, r0
 8003306:	4323      	orrs	r3, r4
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf0c      	ite	eq
 800330c:	2301      	moveq	r3, #1
 800330e:	2300      	movne	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e008      	b.n	8003326 <HAL_ADC_Init+0x142>
 8003314:	4862      	ldr	r0, [pc, #392]	@ (80034a0 <HAL_ADC_Init+0x2bc>)
 8003316:	f7ff ff17 	bl	8003148 <LL_ADC_IsEnabled>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	bf0c      	ite	eq
 8003320:	2301      	moveq	r3, #1
 8003322:	2300      	movne	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d012      	beq.n	8003350 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a5a      	ldr	r2, [pc, #360]	@ (8003498 <HAL_ADC_Init+0x2b4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <HAL_ADC_Init+0x15a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a58      	ldr	r2, [pc, #352]	@ (800349c <HAL_ADC_Init+0x2b8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_ADC_Init+0x15e>
 800333e:	4a59      	ldr	r2, [pc, #356]	@ (80034a4 <HAL_ADC_Init+0x2c0>)
 8003340:	e000      	b.n	8003344 <HAL_ADC_Init+0x160>
 8003342:	4a59      	ldr	r2, [pc, #356]	@ (80034a8 <HAL_ADC_Init+0x2c4>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f7ff fc5e 	bl	8002c0c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a52      	ldr	r2, [pc, #328]	@ (80034a0 <HAL_ADC_Init+0x2bc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d129      	bne.n	80033ae <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7e5b      	ldrb	r3, [r3, #25]
 800335e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003364:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800336a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d013      	beq.n	800339c <HAL_ADC_Init+0x1b8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	d00d      	beq.n	8003398 <HAL_ADC_Init+0x1b4>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b1c      	cmp	r3, #28
 8003382:	d007      	beq.n	8003394 <HAL_ADC_Init+0x1b0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b18      	cmp	r3, #24
 800338a:	d101      	bne.n	8003390 <HAL_ADC_Init+0x1ac>
 800338c:	2318      	movs	r3, #24
 800338e:	e006      	b.n	800339e <HAL_ADC_Init+0x1ba>
 8003390:	2300      	movs	r3, #0
 8003392:	e004      	b.n	800339e <HAL_ADC_Init+0x1ba>
 8003394:	2310      	movs	r3, #16
 8003396:	e002      	b.n	800339e <HAL_ADC_Init+0x1ba>
 8003398:	2308      	movs	r3, #8
 800339a:	e000      	b.n	800339e <HAL_ADC_Init+0x1ba>
 800339c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800339e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	e00e      	b.n	80033cc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	7e5b      	ldrb	r3, [r3, #25]
 80033b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80033be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d106      	bne.n	80033e4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	3b01      	subs	r3, #1
 80033dc:	045b      	lsls	r3, r3, #17
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d009      	beq.n	8003400 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a26      	ldr	r2, [pc, #152]	@ (80034a0 <HAL_ADC_Init+0x2bc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d115      	bne.n	8003436 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	4b26      	ldr	r3, [pc, #152]	@ (80034ac <HAL_ADC_Init+0x2c8>)
 8003412:	4013      	ands	r3, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	69b9      	ldr	r1, [r7, #24]
 800341a:	430b      	orrs	r3, r1
 800341c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	611a      	str	r2, [r3, #16]
 8003434:	e009      	b.n	800344a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	4b1c      	ldr	r3, [pc, #112]	@ (80034b0 <HAL_ADC_Init+0x2cc>)
 800343e:	4013      	ands	r3, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	69b9      	ldr	r1, [r7, #24]
 8003446:	430b      	orrs	r3, r1
 8003448:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fea2 	bl	8003198 <LL_ADC_REG_IsConversionOngoing>
 8003454:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff feaf 	bl	80031be <LL_ADC_INJ_IsConversionOngoing>
 8003460:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f040 808e 	bne.w	8003586 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f040 808a 	bne.w	8003586 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a0a      	ldr	r2, [pc, #40]	@ (80034a0 <HAL_ADC_Init+0x2bc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d11b      	bne.n	80034b4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	7e1b      	ldrb	r3, [r3, #24]
 8003480:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003488:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	e018      	b.n	80034c2 <HAL_ADC_Init+0x2de>
 8003490:	2400000c 	.word	0x2400000c
 8003494:	053e2d63 	.word	0x053e2d63
 8003498:	40022000 	.word	0x40022000
 800349c:	40022100 	.word	0x40022100
 80034a0:	58026000 	.word	0x58026000
 80034a4:	40022300 	.word	0x40022300
 80034a8:	58026300 	.word	0x58026300
 80034ac:	fff04007 	.word	0xfff04007
 80034b0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	7e1b      	ldrb	r3, [r3, #24]
 80034b8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	4b46      	ldr	r3, [pc, #280]	@ (80035e4 <HAL_ADC_Init+0x400>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	69b9      	ldr	r1, [r7, #24]
 80034d2:	430b      	orrs	r3, r1
 80034d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d137      	bne.n	8003550 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a3f      	ldr	r2, [pc, #252]	@ (80035e8 <HAL_ADC_Init+0x404>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d116      	bne.n	800351e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	4b3d      	ldr	r3, [pc, #244]	@ (80035ec <HAL_ADC_Init+0x408>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003502:	4311      	orrs	r1, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003508:	4311      	orrs	r1, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800350e:	430a      	orrs	r2, r1
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	611a      	str	r2, [r3, #16]
 800351c:	e020      	b.n	8003560 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	4b32      	ldr	r3, [pc, #200]	@ (80035f0 <HAL_ADC_Init+0x40c>)
 8003526:	4013      	ands	r3, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800352c:	3a01      	subs	r2, #1
 800352e:	0411      	lsls	r1, r2, #16
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003534:	4311      	orrs	r1, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800353a:	4311      	orrs	r1, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003540:	430a      	orrs	r2, r1
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	611a      	str	r2, [r3, #16]
 800354e:	e007      	b.n	8003560 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1b      	ldr	r2, [pc, #108]	@ (80035e8 <HAL_ADC_Init+0x404>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d002      	beq.n	8003586 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f001 f9b9 	bl	80048f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d10c      	bne.n	80035a8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003594:	f023 010f 	bic.w	r1, r3, #15
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	1e5a      	subs	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80035a6:	e007      	b.n	80035b8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 020f 	bic.w	r2, r2, #15
 80035b6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035bc:	f023 0303 	bic.w	r3, r3, #3
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	661a      	str	r2, [r3, #96]	@ 0x60
 80035c8:	e007      	b.n	80035da <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ce:	f043 0210 	orr.w	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035da:	7ffb      	ldrb	r3, [r7, #31]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3724      	adds	r7, #36	@ 0x24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd90      	pop	{r4, r7, pc}
 80035e4:	ffffbffc 	.word	0xffffbffc
 80035e8:	58026000 	.word	0x58026000
 80035ec:	fc00f81f 	.word	0xfc00f81f
 80035f0:	fc00f81e 	.word	0xfc00f81e

080035f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a60      	ldr	r2, [pc, #384]	@ (8003788 <HAL_ADC_Start_DMA+0x194>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d004      	beq.n	8003614 <HAL_ADC_Start_DMA+0x20>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a5f      	ldr	r2, [pc, #380]	@ (800378c <HAL_ADC_Start_DMA+0x198>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d101      	bne.n	8003618 <HAL_ADC_Start_DMA+0x24>
 8003614:	4b5e      	ldr	r3, [pc, #376]	@ (8003790 <HAL_ADC_Start_DMA+0x19c>)
 8003616:	e000      	b.n	800361a <HAL_ADC_Start_DMA+0x26>
 8003618:	4b5e      	ldr	r3, [pc, #376]	@ (8003794 <HAL_ADC_Start_DMA+0x1a0>)
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fd16 	bl	800304c <LL_ADC_GetMultimode>
 8003620:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fdb6 	bl	8003198 <LL_ADC_REG_IsConversionOngoing>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	f040 80a2 	bne.w	8003778 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_ADC_Start_DMA+0x4e>
 800363e:	2302      	movs	r3, #2
 8003640:	e09d      	b.n	800377e <HAL_ADC_Start_DMA+0x18a>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d006      	beq.n	800365e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	2b05      	cmp	r3, #5
 8003654:	d003      	beq.n	800365e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b09      	cmp	r3, #9
 800365a:	f040 8086 	bne.w	800376a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f001 f82c 	bl	80046bc <ADC_Enable>
 8003664:	4603      	mov	r3, r0
 8003666:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d178      	bne.n	8003760 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003672:	4b49      	ldr	r3, [pc, #292]	@ (8003798 <HAL_ADC_Start_DMA+0x1a4>)
 8003674:	4013      	ands	r3, r2
 8003676:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a42      	ldr	r2, [pc, #264]	@ (800378c <HAL_ADC_Start_DMA+0x198>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d002      	beq.n	800368e <HAL_ADC_Start_DMA+0x9a>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	e000      	b.n	8003690 <HAL_ADC_Start_DMA+0x9c>
 800368e:	4b3e      	ldr	r3, [pc, #248]	@ (8003788 <HAL_ADC_Start_DMA+0x194>)
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	4293      	cmp	r3, r2
 8003696:	d002      	beq.n	800369e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d006      	beq.n	80036c4 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036ba:	f023 0206 	bic.w	r2, r3, #6
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	665a      	str	r2, [r3, #100]	@ 0x64
 80036c2:	e002      	b.n	80036ca <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ce:	4a33      	ldr	r2, [pc, #204]	@ (800379c <HAL_ADC_Start_DMA+0x1a8>)
 80036d0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d6:	4a32      	ldr	r2, [pc, #200]	@ (80037a0 <HAL_ADC_Start_DMA+0x1ac>)
 80036d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036de:	4a31      	ldr	r2, [pc, #196]	@ (80037a4 <HAL_ADC_Start_DMA+0x1b0>)
 80036e0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	221c      	movs	r2, #28
 80036e8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0210 	orr.w	r2, r2, #16
 8003700:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a28      	ldr	r2, [pc, #160]	@ (80037a8 <HAL_ADC_Start_DMA+0x1b4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d10f      	bne.n	800372c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f7ff fbfe 	bl	8002f1c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fbe9 	bl	8002efc <LL_ADC_EnableDMAReq>
 800372a:	e007      	b.n	800373c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003734:	4619      	mov	r1, r3
 8003736:	4610      	mov	r0, r2
 8003738:	f7ff fbcd 	bl	8002ed6 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3340      	adds	r3, #64	@ 0x40
 8003746:	4619      	mov	r1, r3
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f001 ff64 	bl	8005618 <HAL_DMA_Start_IT>
 8003750:	4603      	mov	r3, r0
 8003752:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fd09 	bl	8003170 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800375e:	e00d      	b.n	800377c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003768:	e008      	b.n	800377c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003776:	e001      	b.n	800377c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003778:	2302      	movs	r3, #2
 800377a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800377c:	7dfb      	ldrb	r3, [r7, #23]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40022000 	.word	0x40022000
 800378c:	40022100 	.word	0x40022100
 8003790:	40022300 	.word	0x40022300
 8003794:	58026300 	.word	0x58026300
 8003798:	fffff0fe 	.word	0xfffff0fe
 800379c:	080047d1 	.word	0x080047d1
 80037a0:	080048a9 	.word	0x080048a9
 80037a4:	080048c5 	.word	0x080048c5
 80037a8:	58026000 	.word	0x58026000

080037ac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	@ 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a87      	ldr	r2, [pc, #540]	@ (80039ec <HAL_ADC_IRQHandler+0x240>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d004      	beq.n	80037dc <HAL_ADC_IRQHandler+0x30>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a86      	ldr	r2, [pc, #536]	@ (80039f0 <HAL_ADC_IRQHandler+0x244>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d101      	bne.n	80037e0 <HAL_ADC_IRQHandler+0x34>
 80037dc:	4b85      	ldr	r3, [pc, #532]	@ (80039f4 <HAL_ADC_IRQHandler+0x248>)
 80037de:	e000      	b.n	80037e2 <HAL_ADC_IRQHandler+0x36>
 80037e0:	4b85      	ldr	r3, [pc, #532]	@ (80039f8 <HAL_ADC_IRQHandler+0x24c>)
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fc32 	bl	800304c <LL_ADC_GetMultimode>
 80037e8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d017      	beq.n	8003824 <HAL_ADC_IRQHandler+0x78>
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d012      	beq.n	8003824 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f001 f9aa 	bl	8004b70 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2202      	movs	r2, #2
 8003822:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <HAL_ADC_IRQHandler+0x8c>
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8083 	beq.w	800394a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d07d      	beq.n	800394a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff faf4 	bl	8002e58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d062      	beq.n	800393c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a5d      	ldr	r2, [pc, #372]	@ (80039f0 <HAL_ADC_IRQHandler+0x244>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d002      	beq.n	8003886 <HAL_ADC_IRQHandler+0xda>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	e000      	b.n	8003888 <HAL_ADC_IRQHandler+0xdc>
 8003886:	4b59      	ldr	r3, [pc, #356]	@ (80039ec <HAL_ADC_IRQHandler+0x240>)
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	4293      	cmp	r3, r2
 800388e:	d008      	beq.n	80038a2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b05      	cmp	r3, #5
 800389a:	d002      	beq.n	80038a2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b09      	cmp	r3, #9
 80038a0:	d104      	bne.n	80038ac <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	623b      	str	r3, [r7, #32]
 80038aa:	e00c      	b.n	80038c6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a4f      	ldr	r2, [pc, #316]	@ (80039f0 <HAL_ADC_IRQHandler+0x244>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d002      	beq.n	80038bc <HAL_ADC_IRQHandler+0x110>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	e000      	b.n	80038be <HAL_ADC_IRQHandler+0x112>
 80038bc:	4b4b      	ldr	r3, [pc, #300]	@ (80039ec <HAL_ADC_IRQHandler+0x240>)
 80038be:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d135      	bne.n	800393c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d12e      	bne.n	800393c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fc58 	bl	8003198 <LL_ADC_REG_IsConversionOngoing>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d11a      	bne.n	8003924 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 020c 	bic.w	r2, r2, #12
 80038fc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003902:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d112      	bne.n	800393c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	661a      	str	r2, [r3, #96]	@ 0x60
 8003922:	e00b      	b.n	800393c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003928:	f043 0210 	orr.w	r2, r3, #16
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fd fe41 	bl	80015c4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	220c      	movs	r2, #12
 8003948:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_ADC_IRQHandler+0x1b2>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80a0 	beq.w	8003aaa <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 809a 	beq.w	8003aaa <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	2b00      	cmp	r3, #0
 8003980:	d105      	bne.n	800398e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003986:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fadc 	bl	8002f50 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003998:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fa5a 	bl	8002e58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039a4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a11      	ldr	r2, [pc, #68]	@ (80039f0 <HAL_ADC_IRQHandler+0x244>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d002      	beq.n	80039b6 <HAL_ADC_IRQHandler+0x20a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	e000      	b.n	80039b8 <HAL_ADC_IRQHandler+0x20c>
 80039b6:	4b0d      	ldr	r3, [pc, #52]	@ (80039ec <HAL_ADC_IRQHandler+0x240>)
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	4293      	cmp	r3, r2
 80039be:	d008      	beq.n	80039d2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b06      	cmp	r3, #6
 80039ca:	d002      	beq.n	80039d2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2b07      	cmp	r3, #7
 80039d0:	d104      	bne.n	80039dc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	623b      	str	r3, [r7, #32]
 80039da:	e014      	b.n	8003a06 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a03      	ldr	r2, [pc, #12]	@ (80039f0 <HAL_ADC_IRQHandler+0x244>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00a      	beq.n	80039fc <HAL_ADC_IRQHandler+0x250>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	e008      	b.n	80039fe <HAL_ADC_IRQHandler+0x252>
 80039ec:	40022000 	.word	0x40022000
 80039f0:	40022100 	.word	0x40022100
 80039f4:	40022300 	.word	0x40022300
 80039f8:	58026300 	.word	0x58026300
 80039fc:	4b84      	ldr	r3, [pc, #528]	@ (8003c10 <HAL_ADC_IRQHandler+0x464>)
 80039fe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d047      	beq.n	8003a9c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <HAL_ADC_IRQHandler+0x27a>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d03f      	beq.n	8003a9c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d13a      	bne.n	8003a9c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a30:	2b40      	cmp	r3, #64	@ 0x40
 8003a32:	d133      	bne.n	8003a9c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d12e      	bne.n	8003a9c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fbbb 	bl	80031be <LL_ADC_INJ_IsConversionOngoing>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d11a      	bne.n	8003a84 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a5c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d112      	bne.n	8003a9c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7a:	f043 0201 	orr.w	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a82:	e00b      	b.n	8003a9c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a88:	f043 0210 	orr.w	r2, r3, #16
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a94:	f043 0201 	orr.w	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f001 f83f 	bl	8004b20 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2260      	movs	r2, #96	@ 0x60
 8003aa8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d011      	beq.n	8003ad8 <HAL_ADC_IRQHandler+0x32c>
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00c      	beq.n	8003ad8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8b2 	bl	8003c34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2280      	movs	r2, #128	@ 0x80
 8003ad6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d012      	beq.n	8003b08 <HAL_ADC_IRQHandler+0x35c>
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00d      	beq.n	8003b08 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f001 f825 	bl	8004b48 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d012      	beq.n	8003b38 <HAL_ADC_IRQHandler+0x38c>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f001 f817 	bl	8004b5c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0310 	and.w	r3, r3, #16
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d043      	beq.n	8003bca <HAL_ADC_IRQHandler+0x41e>
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d03e      	beq.n	8003bca <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003b54:	2301      	movs	r3, #1
 8003b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b58:	e021      	b.n	8003b9e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d015      	beq.n	8003b8c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a2a      	ldr	r2, [pc, #168]	@ (8003c10 <HAL_ADC_IRQHandler+0x464>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d004      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x3c8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a29      	ldr	r2, [pc, #164]	@ (8003c14 <HAL_ADC_IRQHandler+0x468>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d101      	bne.n	8003b78 <HAL_ADC_IRQHandler+0x3cc>
 8003b74:	4b28      	ldr	r3, [pc, #160]	@ (8003c18 <HAL_ADC_IRQHandler+0x46c>)
 8003b76:	e000      	b.n	8003b7a <HAL_ADC_IRQHandler+0x3ce>
 8003b78:	4b28      	ldr	r3, [pc, #160]	@ (8003c1c <HAL_ADC_IRQHandler+0x470>)
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fa74 	bl	8003068 <LL_ADC_GetMultiDMATransfer>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003b86:	2301      	movs	r3, #1
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b8a:	e008      	b.n	8003b9e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bb4:	f043 0202 	orr.w	r2, r3, #2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f843 	bl	8003c48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2210      	movs	r2, #16
 8003bc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d018      	beq.n	8003c06 <HAL_ADC_IRQHandler+0x45a>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d013      	beq.n	8003c06 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bee:	f043 0208 	orr.w	r2, r3, #8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bfe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 ff97 	bl	8004b34 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c06:	bf00      	nop
 8003c08:	3728      	adds	r7, #40	@ 0x28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40022000 	.word	0x40022000
 8003c14:	40022100 	.word	0x40022100
 8003c18:	40022300 	.word	0x40022300
 8003c1c:	58026300 	.word	0x58026300

08003c20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b0b9      	sub	sp, #228	@ 0xe4
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c76:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4aab      	ldr	r2, [pc, #684]	@ (8003f2c <HAL_ADC_ConfigChannel+0x2d0>)
 8003c7e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d102      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x34>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	f000 bcfe 	b.w	800468c <HAL_ADC_ConfigChannel+0xa30>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fa7b 	bl	8003198 <LL_ADC_REG_IsConversionOngoing>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f040 84e2 	bne.w	800466e <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	db38      	blt.n	8003d24 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a9e      	ldr	r2, [pc, #632]	@ (8003f30 <HAL_ADC_ConfigChannel+0x2d4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d033      	beq.n	8003d24 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d108      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x7e>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	0e9b      	lsrs	r3, r3, #26
 8003cce:	f003 031f 	and.w	r3, r3, #31
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	e01d      	b.n	8003d16 <HAL_ADC_ConfigChannel+0xba>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cf2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003cf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003cfe:	2320      	movs	r3, #32
 8003d00:	e004      	b.n	8003d0c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003d02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2201      	movs	r2, #1
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	69d1      	ldr	r1, [r2, #28]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	f7ff f8a4 	bl	8002e7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff fa2c 	bl	8003198 <LL_ADC_REG_IsConversionOngoing>
 8003d40:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fa38 	bl	80031be <LL_ADC_INJ_IsConversionOngoing>
 8003d4e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 8270 	bne.w	800423c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f040 826b 	bne.w	800423c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6819      	ldr	r1, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	461a      	mov	r2, r3
 8003d74:	f7ff f8ff 	bl	8002f76 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a6c      	ldr	r2, [pc, #432]	@ (8003f30 <HAL_ADC_ConfigChannel+0x2d4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d10d      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	08db      	lsrs	r3, r3, #3
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d9c:	e032      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d9e:	4b65      	ldr	r3, [pc, #404]	@ (8003f34 <HAL_ADC_ConfigChannel+0x2d8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003daa:	d10b      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x168>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	089b      	lsrs	r3, r3, #2
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	e01d      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x1a4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x18e>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	e00a      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x1a4>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	089b      	lsrs	r3, r3, #2
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d048      	beq.n	8003e9e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	6919      	ldr	r1, [r3, #16]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e1c:	f7fe ff2a 	bl	8002c74 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a42      	ldr	r2, [pc, #264]	@ (8003f30 <HAL_ADC_ConfigChannel+0x2d4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d119      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6919      	ldr	r1, [r3, #16]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f7fe ffc2 	bl	8002dc0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6919      	ldr	r1, [r3, #16]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d102      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x1f8>
 8003e4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e52:	e000      	b.n	8003e56 <HAL_ADC_ConfigChannel+0x1fa>
 8003e54:	2300      	movs	r3, #0
 8003e56:	461a      	mov	r2, r3
 8003e58:	f7fe ff90 	bl	8002d7c <LL_ADC_SetOffsetSaturation>
 8003e5c:	e1ee      	b.n	800423c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6919      	ldr	r1, [r3, #16]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d102      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x21a>
 8003e70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003e74:	e000      	b.n	8003e78 <HAL_ADC_ConfigChannel+0x21c>
 8003e76:	2300      	movs	r3, #0
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f7fe ff5d 	bl	8002d38 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6919      	ldr	r1, [r3, #16]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	7e1b      	ldrb	r3, [r3, #24]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d102      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x238>
 8003e8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e92:	e000      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x23a>
 8003e94:	2300      	movs	r3, #0
 8003e96:	461a      	mov	r2, r3
 8003e98:	f7fe ff34 	bl	8002d04 <LL_ADC_SetDataRightShift>
 8003e9c:	e1ce      	b.n	800423c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a23      	ldr	r2, [pc, #140]	@ (8003f30 <HAL_ADC_ConfigChannel+0x2d4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	f040 8181 	bne.w	80041ac <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe ff11 	bl	8002cd8 <LL_ADC_GetOffsetChannel>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10a      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x27a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe ff06 	bl	8002cd8 <LL_ADC_GetOffsetChannel>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	0e9b      	lsrs	r3, r3, #26
 8003ed0:	f003 021f 	and.w	r2, r3, #31
 8003ed4:	e01e      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x2b8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fe fefb 	bl	8002cd8 <LL_ADC_GetOffsetChannel>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003ef4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8003efc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003f04:	2320      	movs	r3, #32
 8003f06:	e004      	b.n	8003f12 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003f08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f0c:	fab3 f383 	clz	r3, r3
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10b      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x2dc>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	0e9b      	lsrs	r3, r3, #26
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	e01e      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x30e>
 8003f2c:	47ff0000 	.word	0x47ff0000
 8003f30:	58026000 	.word	0x58026000
 8003f34:	5c001000 	.word	0x5c001000
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003f4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003f54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003f5c:	2320      	movs	r3, #32
 8003f5e:	e004      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003f60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d106      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe ff44 	bl	8002e04 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2101      	movs	r1, #1
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fea8 	bl	8002cd8 <LL_ADC_GetOffsetChannel>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x34c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2101      	movs	r1, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe fe9d 	bl	8002cd8 <LL_ADC_GetOffsetChannel>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	0e9b      	lsrs	r3, r3, #26
 8003fa2:	f003 021f 	and.w	r2, r3, #31
 8003fa6:	e01e      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x38a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2101      	movs	r1, #1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fe92 	bl	8002cd8 <LL_ADC_GetOffsetChannel>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003fc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003fd6:	2320      	movs	r3, #32
 8003fd8:	e004      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003fda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003fde:	fab3 f383 	clz	r3, r3
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d105      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x3a2>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	0e9b      	lsrs	r3, r3, #26
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	e018      	b.n	8004030 <HAL_ADC_ConfigChannel+0x3d4>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004012:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004016:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800401a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8004022:	2320      	movs	r3, #32
 8004024:	e004      	b.n	8004030 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8004026:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	429a      	cmp	r2, r3
 8004032:	d106      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2200      	movs	r2, #0
 800403a:	2101      	movs	r1, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fee1 	bl	8002e04 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2102      	movs	r1, #2
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fe45 	bl	8002cd8 <LL_ADC_GetOffsetChannel>
 800404e:	4603      	mov	r3, r0
 8004050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <HAL_ADC_ConfigChannel+0x412>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2102      	movs	r1, #2
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe fe3a 	bl	8002cd8 <LL_ADC_GetOffsetChannel>
 8004064:	4603      	mov	r3, r0
 8004066:	0e9b      	lsrs	r3, r3, #26
 8004068:	f003 021f 	and.w	r2, r3, #31
 800406c:	e01e      	b.n	80040ac <HAL_ADC_ConfigChannel+0x450>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2102      	movs	r1, #2
 8004074:	4618      	mov	r0, r3
 8004076:	f7fe fe2f 	bl	8002cd8 <LL_ADC_GetOffsetChannel>
 800407a:	4603      	mov	r3, r0
 800407c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004084:	fa93 f3a3 	rbit	r3, r3
 8004088:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800408c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004090:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 800409c:	2320      	movs	r3, #32
 800409e:	e004      	b.n	80040aa <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80040a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040a4:	fab3 f383 	clz	r3, r3
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x468>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	0e9b      	lsrs	r3, r3, #26
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	e014      	b.n	80040ee <HAL_ADC_ConfigChannel+0x492>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040cc:	fa93 f3a3 	rbit	r3, r3
 80040d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80040d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80040d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80040e0:	2320      	movs	r3, #32
 80040e2:	e004      	b.n	80040ee <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80040e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040e8:	fab3 f383 	clz	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d106      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2200      	movs	r2, #0
 80040f8:	2102      	movs	r1, #2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe fe82 	bl	8002e04 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2103      	movs	r1, #3
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe fde6 	bl	8002cd8 <LL_ADC_GetOffsetChannel>
 800410c:	4603      	mov	r3, r0
 800410e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <HAL_ADC_ConfigChannel+0x4d0>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2103      	movs	r1, #3
 800411c:	4618      	mov	r0, r3
 800411e:	f7fe fddb 	bl	8002cd8 <LL_ADC_GetOffsetChannel>
 8004122:	4603      	mov	r3, r0
 8004124:	0e9b      	lsrs	r3, r3, #26
 8004126:	f003 021f 	and.w	r2, r3, #31
 800412a:	e017      	b.n	800415c <HAL_ADC_ConfigChannel+0x500>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2103      	movs	r1, #3
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe fdd0 	bl	8002cd8 <LL_ADC_GetOffsetChannel>
 8004138:	4603      	mov	r3, r0
 800413a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800413e:	fa93 f3a3 	rbit	r3, r3
 8004142:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004144:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004146:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004148:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800414e:	2320      	movs	r3, #32
 8004150:	e003      	b.n	800415a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8004152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004154:	fab3 f383 	clz	r3, r3
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x518>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	0e9b      	lsrs	r3, r3, #26
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	e011      	b.n	8004198 <HAL_ADC_ConfigChannel+0x53c>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800417c:	fa93 f3a3 	rbit	r3, r3
 8004180:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004184:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004186:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 800418c:	2320      	movs	r3, #32
 800418e:	e003      	b.n	8004198 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004192:	fab3 f383 	clz	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	429a      	cmp	r2, r3
 800419a:	d14f      	bne.n	800423c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2200      	movs	r2, #0
 80041a2:	2103      	movs	r1, #3
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe fe2d 	bl	8002e04 <LL_ADC_SetOffsetState>
 80041aa:	e047      	b.n	800423c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	069b      	lsls	r3, r3, #26
 80041bc:	429a      	cmp	r2, r3
 80041be:	d107      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041ce:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	069b      	lsls	r3, r3, #26
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d107      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041f2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	069b      	lsls	r3, r3, #26
 8004204:	429a      	cmp	r2, r3
 8004206:	d107      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004216:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800421e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	069b      	lsls	r3, r3, #26
 8004228:	429a      	cmp	r2, r3
 800422a:	d107      	bne.n	800423c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800423a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe ff81 	bl	8003148 <LL_ADC_IsEnabled>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 8219 	bne.w	8004680 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6819      	ldr	r1, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	461a      	mov	r2, r3
 800425c:	f7fe feb6 	bl	8002fcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4aa1      	ldr	r2, [pc, #644]	@ (80044ec <HAL_ADC_ConfigChannel+0x890>)
 8004266:	4293      	cmp	r3, r2
 8004268:	f040 812e 	bne.w	80044c8 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10b      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x638>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	0e9b      	lsrs	r3, r3, #26
 8004282:	3301      	adds	r3, #1
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2b09      	cmp	r3, #9
 800428a:	bf94      	ite	ls
 800428c:	2301      	movls	r3, #1
 800428e:	2300      	movhi	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	e019      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x66c>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80042a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80042a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80042ac:	2320      	movs	r3, #32
 80042ae:	e003      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80042b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	3301      	adds	r3, #1
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2b09      	cmp	r3, #9
 80042c0:	bf94      	ite	ls
 80042c2:	2301      	movls	r3, #1
 80042c4:	2300      	movhi	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d079      	beq.n	80043c0 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x68c>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0e9b      	lsrs	r3, r3, #26
 80042de:	3301      	adds	r3, #1
 80042e0:	069b      	lsls	r3, r3, #26
 80042e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042e6:	e015      	b.n	8004314 <HAL_ADC_ConfigChannel+0x6b8>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042f0:	fa93 f3a3 	rbit	r3, r3
 80042f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80042f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042f8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80042fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004300:	2320      	movs	r3, #32
 8004302:	e003      	b.n	800430c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	3301      	adds	r3, #1
 800430e:	069b      	lsls	r3, r3, #26
 8004310:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x6d8>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0e9b      	lsrs	r3, r3, #26
 8004326:	3301      	adds	r3, #1
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	2101      	movs	r1, #1
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	e017      	b.n	8004364 <HAL_ADC_ConfigChannel+0x708>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800433c:	fa93 f3a3 	rbit	r3, r3
 8004340:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004344:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 800434c:	2320      	movs	r3, #32
 800434e:	e003      	b.n	8004358 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	3301      	adds	r3, #1
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	2101      	movs	r1, #1
 8004360:	fa01 f303 	lsl.w	r3, r1, r3
 8004364:	ea42 0103 	orr.w	r1, r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <HAL_ADC_ConfigChannel+0x72e>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	0e9b      	lsrs	r3, r3, #26
 800437a:	3301      	adds	r3, #1
 800437c:	f003 021f 	and.w	r2, r3, #31
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	051b      	lsls	r3, r3, #20
 8004388:	e018      	b.n	80043bc <HAL_ADC_ConfigChannel+0x760>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800439c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80043a2:	2320      	movs	r3, #32
 80043a4:	e003      	b.n	80043ae <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80043a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a8:	fab3 f383 	clz	r3, r3
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	f003 021f 	and.w	r2, r3, #31
 80043b4:	4613      	mov	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043bc:	430b      	orrs	r3, r1
 80043be:	e07e      	b.n	80044be <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x780>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0e9b      	lsrs	r3, r3, #26
 80043d2:	3301      	adds	r3, #1
 80043d4:	069b      	lsls	r3, r3, #26
 80043d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043da:	e015      	b.n	8004408 <HAL_ADC_ConfigChannel+0x7ac>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e4:	fa93 f3a3 	rbit	r3, r3
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80043ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80043f4:	2320      	movs	r3, #32
 80043f6:	e003      	b.n	8004400 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80043f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	3301      	adds	r3, #1
 8004402:	069b      	lsls	r3, r3, #26
 8004404:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x7cc>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0e9b      	lsrs	r3, r3, #26
 800441a:	3301      	adds	r3, #1
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2101      	movs	r1, #1
 8004422:	fa01 f303 	lsl.w	r3, r1, r3
 8004426:	e017      	b.n	8004458 <HAL_ADC_ConfigChannel+0x7fc>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	61bb      	str	r3, [r7, #24]
  return result;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004440:	2320      	movs	r3, #32
 8004442:	e003      	b.n	800444c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	3301      	adds	r3, #1
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2101      	movs	r1, #1
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	ea42 0103 	orr.w	r1, r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x828>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	0e9b      	lsrs	r3, r3, #26
 800446e:	3301      	adds	r3, #1
 8004470:	f003 021f 	and.w	r2, r3, #31
 8004474:	4613      	mov	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4413      	add	r3, r2
 800447a:	3b1e      	subs	r3, #30
 800447c:	051b      	lsls	r3, r3, #20
 800447e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004482:	e01b      	b.n	80044bc <HAL_ADC_ConfigChannel+0x860>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	fa93 f3a3 	rbit	r3, r3
 8004490:	60fb      	str	r3, [r7, #12]
  return result;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 800449c:	2320      	movs	r3, #32
 800449e:	e003      	b.n	80044a8 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	fab3 f383 	clz	r3, r3
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	3301      	adds	r3, #1
 80044aa:	f003 021f 	and.w	r2, r3, #31
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	3b1e      	subs	r3, #30
 80044b6:	051b      	lsls	r3, r3, #20
 80044b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044bc:	430b      	orrs	r3, r1
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	6892      	ldr	r2, [r2, #8]
 80044c2:	4619      	mov	r1, r3
 80044c4:	f7fe fd57 	bl	8002f76 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f280 80d7 	bge.w	8004680 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a06      	ldr	r2, [pc, #24]	@ (80044f0 <HAL_ADC_ConfigChannel+0x894>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_ADC_ConfigChannel+0x88a>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a04      	ldr	r2, [pc, #16]	@ (80044f4 <HAL_ADC_ConfigChannel+0x898>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d10a      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x8a0>
 80044e6:	4b04      	ldr	r3, [pc, #16]	@ (80044f8 <HAL_ADC_ConfigChannel+0x89c>)
 80044e8:	e009      	b.n	80044fe <HAL_ADC_ConfigChannel+0x8a2>
 80044ea:	bf00      	nop
 80044ec:	47ff0000 	.word	0x47ff0000
 80044f0:	40022000 	.word	0x40022000
 80044f4:	40022100 	.word	0x40022100
 80044f8:	40022300 	.word	0x40022300
 80044fc:	4b65      	ldr	r3, [pc, #404]	@ (8004694 <HAL_ADC_ConfigChannel+0xa38>)
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fbaa 	bl	8002c58 <LL_ADC_GetCommonPathInternalCh>
 8004504:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a62      	ldr	r2, [pc, #392]	@ (8004698 <HAL_ADC_ConfigChannel+0xa3c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_ADC_ConfigChannel+0x8c0>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a61      	ldr	r2, [pc, #388]	@ (800469c <HAL_ADC_ConfigChannel+0xa40>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d10e      	bne.n	800453a <HAL_ADC_ConfigChannel+0x8de>
 800451c:	485e      	ldr	r0, [pc, #376]	@ (8004698 <HAL_ADC_ConfigChannel+0xa3c>)
 800451e:	f7fe fe13 	bl	8003148 <LL_ADC_IsEnabled>
 8004522:	4604      	mov	r4, r0
 8004524:	485d      	ldr	r0, [pc, #372]	@ (800469c <HAL_ADC_ConfigChannel+0xa40>)
 8004526:	f7fe fe0f 	bl	8003148 <LL_ADC_IsEnabled>
 800452a:	4603      	mov	r3, r0
 800452c:	4323      	orrs	r3, r4
 800452e:	2b00      	cmp	r3, #0
 8004530:	bf0c      	ite	eq
 8004532:	2301      	moveq	r3, #1
 8004534:	2300      	movne	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	e008      	b.n	800454c <HAL_ADC_ConfigChannel+0x8f0>
 800453a:	4859      	ldr	r0, [pc, #356]	@ (80046a0 <HAL_ADC_ConfigChannel+0xa44>)
 800453c:	f7fe fe04 	bl	8003148 <LL_ADC_IsEnabled>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	bf0c      	ite	eq
 8004546:	2301      	moveq	r3, #1
 8004548:	2300      	movne	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8084 	beq.w	800465a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a53      	ldr	r2, [pc, #332]	@ (80046a4 <HAL_ADC_ConfigChannel+0xa48>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d132      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x966>
 800455c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d12c      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a4c      	ldr	r2, [pc, #304]	@ (80046a0 <HAL_ADC_ConfigChannel+0xa44>)
 800456e:	4293      	cmp	r3, r2
 8004570:	f040 8086 	bne.w	8004680 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a47      	ldr	r2, [pc, #284]	@ (8004698 <HAL_ADC_ConfigChannel+0xa3c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_ADC_ConfigChannel+0x92c>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a46      	ldr	r2, [pc, #280]	@ (800469c <HAL_ADC_ConfigChannel+0xa40>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d101      	bne.n	800458c <HAL_ADC_ConfigChannel+0x930>
 8004588:	4a47      	ldr	r2, [pc, #284]	@ (80046a8 <HAL_ADC_ConfigChannel+0xa4c>)
 800458a:	e000      	b.n	800458e <HAL_ADC_ConfigChannel+0x932>
 800458c:	4a41      	ldr	r2, [pc, #260]	@ (8004694 <HAL_ADC_ConfigChannel+0xa38>)
 800458e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004592:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004596:	4619      	mov	r1, r3
 8004598:	4610      	mov	r0, r2
 800459a:	f7fe fb4a 	bl	8002c32 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800459e:	4b43      	ldr	r3, [pc, #268]	@ (80046ac <HAL_ADC_ConfigChannel+0xa50>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	099b      	lsrs	r3, r3, #6
 80045a4:	4a42      	ldr	r2, [pc, #264]	@ (80046b0 <HAL_ADC_ConfigChannel+0xa54>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	099b      	lsrs	r3, r3, #6
 80045ac:	3301      	adds	r3, #1
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045b2:	e002      	b.n	80045ba <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f9      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045c0:	e05e      	b.n	8004680 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a3b      	ldr	r2, [pc, #236]	@ (80046b4 <HAL_ADC_ConfigChannel+0xa58>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d120      	bne.n	800460e <HAL_ADC_ConfigChannel+0x9b2>
 80045cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d11a      	bne.n	800460e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a30      	ldr	r2, [pc, #192]	@ (80046a0 <HAL_ADC_ConfigChannel+0xa44>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d14e      	bne.n	8004680 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004698 <HAL_ADC_ConfigChannel+0xa3c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_ADC_ConfigChannel+0x99a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a2a      	ldr	r2, [pc, #168]	@ (800469c <HAL_ADC_ConfigChannel+0xa40>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d101      	bne.n	80045fa <HAL_ADC_ConfigChannel+0x99e>
 80045f6:	4a2c      	ldr	r2, [pc, #176]	@ (80046a8 <HAL_ADC_ConfigChannel+0xa4c>)
 80045f8:	e000      	b.n	80045fc <HAL_ADC_ConfigChannel+0x9a0>
 80045fa:	4a26      	ldr	r2, [pc, #152]	@ (8004694 <HAL_ADC_ConfigChannel+0xa38>)
 80045fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004600:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f7fe fb13 	bl	8002c32 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800460c:	e038      	b.n	8004680 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a29      	ldr	r2, [pc, #164]	@ (80046b8 <HAL_ADC_ConfigChannel+0xa5c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d133      	bne.n	8004680 <HAL_ADC_ConfigChannel+0xa24>
 8004618:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800461c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d12d      	bne.n	8004680 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1d      	ldr	r2, [pc, #116]	@ (80046a0 <HAL_ADC_ConfigChannel+0xa44>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d128      	bne.n	8004680 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a19      	ldr	r2, [pc, #100]	@ (8004698 <HAL_ADC_ConfigChannel+0xa3c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_ADC_ConfigChannel+0x9e6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a17      	ldr	r2, [pc, #92]	@ (800469c <HAL_ADC_ConfigChannel+0xa40>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d101      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x9ea>
 8004642:	4a19      	ldr	r2, [pc, #100]	@ (80046a8 <HAL_ADC_ConfigChannel+0xa4c>)
 8004644:	e000      	b.n	8004648 <HAL_ADC_ConfigChannel+0x9ec>
 8004646:	4a13      	ldr	r2, [pc, #76]	@ (8004694 <HAL_ADC_ConfigChannel+0xa38>)
 8004648:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800464c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f7fe faed 	bl	8002c32 <LL_ADC_SetCommonPathInternalCh>
 8004658:	e012      	b.n	8004680 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465e:	f043 0220 	orr.w	r2, r3, #32
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800466c:	e008      	b.n	8004680 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004672:	f043 0220 	orr.w	r2, r3, #32
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004688:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800468c:	4618      	mov	r0, r3
 800468e:	37e4      	adds	r7, #228	@ 0xe4
 8004690:	46bd      	mov	sp, r7
 8004692:	bd90      	pop	{r4, r7, pc}
 8004694:	58026300 	.word	0x58026300
 8004698:	40022000 	.word	0x40022000
 800469c:	40022100 	.word	0x40022100
 80046a0:	58026000 	.word	0x58026000
 80046a4:	c7520000 	.word	0xc7520000
 80046a8:	40022300 	.word	0x40022300
 80046ac:	2400000c 	.word	0x2400000c
 80046b0:	053e2d63 	.word	0x053e2d63
 80046b4:	c3210000 	.word	0xc3210000
 80046b8:	cb840000 	.word	0xcb840000

080046bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe fd3d 	bl	8003148 <LL_ADC_IsEnabled>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d16e      	bne.n	80047b2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	4b38      	ldr	r3, [pc, #224]	@ (80047bc <ADC_Enable+0x100>)
 80046dc:	4013      	ands	r3, r2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00d      	beq.n	80046fe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e6:	f043 0210 	orr.w	r2, r3, #16
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046f2:	f043 0201 	orr.w	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e05a      	b.n	80047b4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe fd0c 	bl	8003120 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004708:	f7fe fa50 	bl	8002bac <HAL_GetTick>
 800470c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2b      	ldr	r2, [pc, #172]	@ (80047c0 <ADC_Enable+0x104>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d004      	beq.n	8004722 <ADC_Enable+0x66>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a29      	ldr	r2, [pc, #164]	@ (80047c4 <ADC_Enable+0x108>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d101      	bne.n	8004726 <ADC_Enable+0x6a>
 8004722:	4b29      	ldr	r3, [pc, #164]	@ (80047c8 <ADC_Enable+0x10c>)
 8004724:	e000      	b.n	8004728 <ADC_Enable+0x6c>
 8004726:	4b29      	ldr	r3, [pc, #164]	@ (80047cc <ADC_Enable+0x110>)
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe fc8f 	bl	800304c <LL_ADC_GetMultimode>
 800472e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a23      	ldr	r2, [pc, #140]	@ (80047c4 <ADC_Enable+0x108>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d002      	beq.n	8004740 <ADC_Enable+0x84>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	e000      	b.n	8004742 <ADC_Enable+0x86>
 8004740:	4b1f      	ldr	r3, [pc, #124]	@ (80047c0 <ADC_Enable+0x104>)
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	4293      	cmp	r3, r2
 8004748:	d02c      	beq.n	80047a4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d130      	bne.n	80047b2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004750:	e028      	b.n	80047a4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe fcf6 	bl	8003148 <LL_ADC_IsEnabled>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fcda 	bl	8003120 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800476c:	f7fe fa1e 	bl	8002bac <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d914      	bls.n	80047a4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b01      	cmp	r3, #1
 8004786:	d00d      	beq.n	80047a4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800478c:	f043 0210 	orr.w	r2, r3, #16
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004798:	f043 0201 	orr.w	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e007      	b.n	80047b4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d1cf      	bne.n	8004752 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	8000003f 	.word	0x8000003f
 80047c0:	40022000 	.word	0x40022000
 80047c4:	40022100 	.word	0x40022100
 80047c8:	40022300 	.word	0x40022300
 80047cc:	58026300 	.word	0x58026300

080047d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d14b      	bne.n	8004882 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d021      	beq.n	8004848 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f7fe fb25 	bl	8002e58 <LL_ADC_REG_IsTriggerSourceSWStart>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d032      	beq.n	800487a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d12b      	bne.n	800487a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004826:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004832:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d11f      	bne.n	800487a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	661a      	str	r2, [r3, #96]	@ 0x60
 8004846:	e018      	b.n	800487a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d111      	bne.n	800487a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800485a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004872:	f043 0201 	orr.w	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7fc fea2 	bl	80015c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004880:	e00e      	b.n	80048a0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f7ff f9da 	bl	8003c48 <HAL_ADC_ErrorCallback>
}
 8004894:	e004      	b.n	80048a0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	4798      	blx	r3
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff f9b2 	bl	8003c20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048e2:	f043 0204 	orr.w	r2, r3, #4
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7ff f9ac 	bl	8003c48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a6c      	ldr	r2, [pc, #432]	@ (8004ab8 <ADC_ConfigureBoostMode+0x1c0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <ADC_ConfigureBoostMode+0x1c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6b      	ldr	r2, [pc, #428]	@ (8004abc <ADC_ConfigureBoostMode+0x1c4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d109      	bne.n	8004928 <ADC_ConfigureBoostMode+0x30>
 8004914:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac0 <ADC_ConfigureBoostMode+0x1c8>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	e008      	b.n	800493a <ADC_ConfigureBoostMode+0x42>
 8004928:	4b66      	ldr	r3, [pc, #408]	@ (8004ac4 <ADC_ConfigureBoostMode+0x1cc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01c      	beq.n	8004978 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800493e:	f004 ff23 	bl	8009788 <HAL_RCC_GetHCLKFreq>
 8004942:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800494c:	d010      	beq.n	8004970 <ADC_ConfigureBoostMode+0x78>
 800494e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004952:	d873      	bhi.n	8004a3c <ADC_ConfigureBoostMode+0x144>
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004958:	d002      	beq.n	8004960 <ADC_ConfigureBoostMode+0x68>
 800495a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800495e:	d16d      	bne.n	8004a3c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	0c1b      	lsrs	r3, r3, #16
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	60fb      	str	r3, [r7, #12]
        break;
 800496e:	e068      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	089b      	lsrs	r3, r3, #2
 8004974:	60fb      	str	r3, [r7, #12]
        break;
 8004976:	e064      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004978:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800497c:	f04f 0100 	mov.w	r1, #0
 8004980:	f006 f8fe 	bl	800ab80 <HAL_RCCEx_GetPeriphCLKFreq>
 8004984:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800498e:	d051      	beq.n	8004a34 <ADC_ConfigureBoostMode+0x13c>
 8004990:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004994:	d854      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 8004996:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800499a:	d047      	beq.n	8004a2c <ADC_ConfigureBoostMode+0x134>
 800499c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80049a0:	d84e      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049a2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80049a6:	d03d      	beq.n	8004a24 <ADC_ConfigureBoostMode+0x12c>
 80049a8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80049ac:	d848      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049b2:	d033      	beq.n	8004a1c <ADC_ConfigureBoostMode+0x124>
 80049b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049b8:	d842      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049ba:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80049be:	d029      	beq.n	8004a14 <ADC_ConfigureBoostMode+0x11c>
 80049c0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80049c4:	d83c      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049c6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80049ca:	d01a      	beq.n	8004a02 <ADC_ConfigureBoostMode+0x10a>
 80049cc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80049d0:	d836      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049d2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80049d6:	d014      	beq.n	8004a02 <ADC_ConfigureBoostMode+0x10a>
 80049d8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80049dc:	d830      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049e2:	d00e      	beq.n	8004a02 <ADC_ConfigureBoostMode+0x10a>
 80049e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049e8:	d82a      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049ea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049ee:	d008      	beq.n	8004a02 <ADC_ConfigureBoostMode+0x10a>
 80049f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049f4:	d824      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049fa:	d002      	beq.n	8004a02 <ADC_ConfigureBoostMode+0x10a>
 80049fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a00:	d11e      	bne.n	8004a40 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	0c9b      	lsrs	r3, r3, #18
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	60fb      	str	r3, [r7, #12]
        break;
 8004a12:	e016      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	60fb      	str	r3, [r7, #12]
        break;
 8004a1a:	e012      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	60fb      	str	r3, [r7, #12]
        break;
 8004a22:	e00e      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	60fb      	str	r3, [r7, #12]
        break;
 8004a2a:	e00a      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	09db      	lsrs	r3, r3, #7
 8004a30:	60fb      	str	r3, [r7, #12]
        break;
 8004a32:	e006      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	0a1b      	lsrs	r3, r3, #8
 8004a38:	60fb      	str	r3, [r7, #12]
        break;
 8004a3a:	e002      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004a3c:	bf00      	nop
 8004a3e:	e000      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004a40:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	085b      	lsrs	r3, r3, #1
 8004a46:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac8 <ADC_ConfigureBoostMode+0x1d0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d808      	bhi.n	8004a62 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004a5e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a60:	e025      	b.n	8004aae <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4a19      	ldr	r2, [pc, #100]	@ (8004acc <ADC_ConfigureBoostMode+0x1d4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d80a      	bhi.n	8004a80 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a7c:	609a      	str	r2, [r3, #8]
}
 8004a7e:	e016      	b.n	8004aae <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a13      	ldr	r2, [pc, #76]	@ (8004ad0 <ADC_ConfigureBoostMode+0x1d8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d80a      	bhi.n	8004a9e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a9a:	609a      	str	r2, [r3, #8]
}
 8004a9c:	e007      	b.n	8004aae <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004aac:	609a      	str	r2, [r3, #8]
}
 8004aae:	bf00      	nop
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40022000 	.word	0x40022000
 8004abc:	40022100 	.word	0x40022100
 8004ac0:	40022300 	.word	0x40022300
 8004ac4:	58026300 	.word	0x58026300
 8004ac8:	005f5e10 	.word	0x005f5e10
 8004acc:	00bebc20 	.word	0x00bebc20
 8004ad0:	017d7840 	.word	0x017d7840

08004ad4 <LL_ADC_IsEnabled>:
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <LL_ADC_IsEnabled+0x18>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <LL_ADC_IsEnabled+0x1a>
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <LL_ADC_REG_IsConversionOngoing>:
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d101      	bne.n	8004b12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004b84:	b590      	push	{r4, r7, lr}
 8004b86:	b0a3      	sub	sp, #140	@ 0x8c
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e0c1      	b.n	8004d26 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004baa:	2300      	movs	r3, #0
 8004bac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a5e      	ldr	r2, [pc, #376]	@ (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d102      	bne.n	8004bc2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004bbc:	4b5d      	ldr	r3, [pc, #372]	@ (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e001      	b.n	8004bc6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10b      	bne.n	8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0a0      	b.n	8004d26 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff ff87 	bl	8004afa <LL_ADC_REG_IsConversionOngoing>
 8004bec:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff ff80 	bl	8004afa <LL_ADC_REG_IsConversionOngoing>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f040 8081 	bne.w	8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004c02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d17c      	bne.n	8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a48      	ldr	r2, [pc, #288]	@ (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d004      	beq.n	8004c1e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a46      	ldr	r2, [pc, #280]	@ (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d101      	bne.n	8004c22 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004c1e:	4b46      	ldr	r3, [pc, #280]	@ (8004d38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c20:	e000      	b.n	8004c24 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004c22:	4b46      	ldr	r3, [pc, #280]	@ (8004d3c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c24:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d039      	beq.n	8004ca2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004c2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a3a      	ldr	r2, [pc, #232]	@ (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a39      	ldr	r2, [pc, #228]	@ (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d10e      	bne.n	8004c72 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004c54:	4836      	ldr	r0, [pc, #216]	@ (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c56:	f7ff ff3d 	bl	8004ad4 <LL_ADC_IsEnabled>
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4835      	ldr	r0, [pc, #212]	@ (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c5e:	f7ff ff39 	bl	8004ad4 <LL_ADC_IsEnabled>
 8004c62:	4603      	mov	r3, r0
 8004c64:	4323      	orrs	r3, r4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bf0c      	ite	eq
 8004c6a:	2301      	moveq	r3, #1
 8004c6c:	2300      	movne	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	e008      	b.n	8004c84 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004c72:	4833      	ldr	r0, [pc, #204]	@ (8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004c74:	f7ff ff2e 	bl	8004ad4 <LL_ADC_IsEnabled>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bf0c      	ite	eq
 8004c7e:	2301      	moveq	r3, #1
 8004c80:	2300      	movne	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d047      	beq.n	8004d18 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d44 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	6811      	ldr	r1, [r2, #0]
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	6892      	ldr	r2, [r2, #8]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c9e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ca0:	e03a      	b.n	8004d18 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004ca2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004caa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004cc2:	481b      	ldr	r0, [pc, #108]	@ (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cc4:	f7ff ff06 	bl	8004ad4 <LL_ADC_IsEnabled>
 8004cc8:	4604      	mov	r4, r0
 8004cca:	481a      	ldr	r0, [pc, #104]	@ (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ccc:	f7ff ff02 	bl	8004ad4 <LL_ADC_IsEnabled>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4323      	orrs	r3, r4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	e008      	b.n	8004cf2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004ce0:	4817      	ldr	r0, [pc, #92]	@ (8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ce2:	f7ff fef7 	bl	8004ad4 <LL_ADC_IsEnabled>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d010      	beq.n	8004d18 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004cf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	4b12      	ldr	r3, [pc, #72]	@ (8004d44 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004d00:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d02:	e009      	b.n	8004d18 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d08:	f043 0220 	orr.w	r2, r3, #32
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004d16:	e000      	b.n	8004d1a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d22:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	378c      	adds	r7, #140	@ 0x8c
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd90      	pop	{r4, r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40022000 	.word	0x40022000
 8004d34:	40022100 	.word	0x40022100
 8004d38:	40022300 	.word	0x40022300
 8004d3c:	58026300 	.word	0x58026300
 8004d40:	58026000 	.word	0x58026000
 8004d44:	fffff0e0 	.word	0xfffff0e0

08004d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d58:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <__NVIC_SetPriorityGrouping+0x40>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d64:	4013      	ands	r3, r2
 8004d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d70:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <__NVIC_SetPriorityGrouping+0x44>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d76:	4a04      	ldr	r2, [pc, #16]	@ (8004d88 <__NVIC_SetPriorityGrouping+0x40>)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	60d3      	str	r3, [r2, #12]
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	e000ed00 	.word	0xe000ed00
 8004d8c:	05fa0000 	.word	0x05fa0000

08004d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d94:	4b04      	ldr	r3, [pc, #16]	@ (8004da8 <__NVIC_GetPriorityGrouping+0x18>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	f003 0307 	and.w	r3, r3, #7
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	e000ed00 	.word	0xe000ed00

08004dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	db0b      	blt.n	8004dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	f003 021f 	and.w	r2, r3, #31
 8004dc4:	4907      	ldr	r1, [pc, #28]	@ (8004de4 <__NVIC_EnableIRQ+0x38>)
 8004dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2001      	movs	r0, #1
 8004dce:	fa00 f202 	lsl.w	r2, r0, r2
 8004dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	e000e100 	.word	0xe000e100

08004de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	6039      	str	r1, [r7, #0]
 8004df2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004df4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	db0a      	blt.n	8004e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	490c      	ldr	r1, [pc, #48]	@ (8004e34 <__NVIC_SetPriority+0x4c>)
 8004e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e06:	0112      	lsls	r2, r2, #4
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e10:	e00a      	b.n	8004e28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	4908      	ldr	r1, [pc, #32]	@ (8004e38 <__NVIC_SetPriority+0x50>)
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	3b04      	subs	r3, #4
 8004e20:	0112      	lsls	r2, r2, #4
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	440b      	add	r3, r1
 8004e26:	761a      	strb	r2, [r3, #24]
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	e000e100 	.word	0xe000e100
 8004e38:	e000ed00 	.word	0xe000ed00

08004e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b089      	sub	sp, #36	@ 0x24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f1c3 0307 	rsb	r3, r3, #7
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	bf28      	it	cs
 8004e5a:	2304      	movcs	r3, #4
 8004e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2b06      	cmp	r3, #6
 8004e64:	d902      	bls.n	8004e6c <NVIC_EncodePriority+0x30>
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	3b03      	subs	r3, #3
 8004e6a:	e000      	b.n	8004e6e <NVIC_EncodePriority+0x32>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43da      	mvns	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	401a      	ands	r2, r3
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e84:	f04f 31ff 	mov.w	r1, #4294967295
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8e:	43d9      	mvns	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e94:	4313      	orrs	r3, r2
         );
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3724      	adds	r7, #36	@ 0x24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eb4:	d301      	bcc.n	8004eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e00f      	b.n	8004eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eba:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee4 <SysTick_Config+0x40>)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ec2:	210f      	movs	r1, #15
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec8:	f7ff ff8e 	bl	8004de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ecc:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <SysTick_Config+0x40>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ed2:	4b04      	ldr	r3, [pc, #16]	@ (8004ee4 <SysTick_Config+0x40>)
 8004ed4:	2207      	movs	r2, #7
 8004ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	e000e010 	.word	0xe000e010

08004ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff ff29 	bl	8004d48 <__NVIC_SetPriorityGrouping>
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b086      	sub	sp, #24
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	4603      	mov	r3, r0
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
 8004f0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f0c:	f7ff ff40 	bl	8004d90 <__NVIC_GetPriorityGrouping>
 8004f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	6978      	ldr	r0, [r7, #20]
 8004f18:	f7ff ff90 	bl	8004e3c <NVIC_EncodePriority>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f22:	4611      	mov	r1, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff ff5f 	bl	8004de8 <__NVIC_SetPriority>
}
 8004f2a:	bf00      	nop
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	4603      	mov	r3, r0
 8004f3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff ff33 	bl	8004dac <__NVIC_EnableIRQ>
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff ffa4 	bl	8004ea4 <SysTick_Config>
 8004f5c:	4603      	mov	r3, r0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004f70:	f7fd fe1c 	bl	8002bac <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e312      	b.n	80055a6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a66      	ldr	r2, [pc, #408]	@ (8005120 <HAL_DMA_Init+0x1b8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d04a      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a65      	ldr	r2, [pc, #404]	@ (8005124 <HAL_DMA_Init+0x1bc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d045      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a63      	ldr	r2, [pc, #396]	@ (8005128 <HAL_DMA_Init+0x1c0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d040      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a62      	ldr	r2, [pc, #392]	@ (800512c <HAL_DMA_Init+0x1c4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d03b      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a60      	ldr	r2, [pc, #384]	@ (8005130 <HAL_DMA_Init+0x1c8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d036      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a5f      	ldr	r2, [pc, #380]	@ (8005134 <HAL_DMA_Init+0x1cc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d031      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8005138 <HAL_DMA_Init+0x1d0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d02c      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a5c      	ldr	r2, [pc, #368]	@ (800513c <HAL_DMA_Init+0x1d4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d027      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8005140 <HAL_DMA_Init+0x1d8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d022      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a59      	ldr	r2, [pc, #356]	@ (8005144 <HAL_DMA_Init+0x1dc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d01d      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a57      	ldr	r2, [pc, #348]	@ (8005148 <HAL_DMA_Init+0x1e0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d018      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a56      	ldr	r2, [pc, #344]	@ (800514c <HAL_DMA_Init+0x1e4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d013      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a54      	ldr	r2, [pc, #336]	@ (8005150 <HAL_DMA_Init+0x1e8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00e      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a53      	ldr	r2, [pc, #332]	@ (8005154 <HAL_DMA_Init+0x1ec>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d009      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a51      	ldr	r2, [pc, #324]	@ (8005158 <HAL_DMA_Init+0x1f0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <HAL_DMA_Init+0xb8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a50      	ldr	r2, [pc, #320]	@ (800515c <HAL_DMA_Init+0x1f4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d101      	bne.n	8005024 <HAL_DMA_Init+0xbc>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <HAL_DMA_Init+0xbe>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 813c 	beq.w	80052a4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a37      	ldr	r2, [pc, #220]	@ (8005120 <HAL_DMA_Init+0x1b8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d04a      	beq.n	80050dc <HAL_DMA_Init+0x174>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a36      	ldr	r2, [pc, #216]	@ (8005124 <HAL_DMA_Init+0x1bc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d045      	beq.n	80050dc <HAL_DMA_Init+0x174>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a34      	ldr	r2, [pc, #208]	@ (8005128 <HAL_DMA_Init+0x1c0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d040      	beq.n	80050dc <HAL_DMA_Init+0x174>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a33      	ldr	r2, [pc, #204]	@ (800512c <HAL_DMA_Init+0x1c4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d03b      	beq.n	80050dc <HAL_DMA_Init+0x174>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a31      	ldr	r2, [pc, #196]	@ (8005130 <HAL_DMA_Init+0x1c8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d036      	beq.n	80050dc <HAL_DMA_Init+0x174>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a30      	ldr	r2, [pc, #192]	@ (8005134 <HAL_DMA_Init+0x1cc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d031      	beq.n	80050dc <HAL_DMA_Init+0x174>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2e      	ldr	r2, [pc, #184]	@ (8005138 <HAL_DMA_Init+0x1d0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d02c      	beq.n	80050dc <HAL_DMA_Init+0x174>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a2d      	ldr	r2, [pc, #180]	@ (800513c <HAL_DMA_Init+0x1d4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d027      	beq.n	80050dc <HAL_DMA_Init+0x174>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a2b      	ldr	r2, [pc, #172]	@ (8005140 <HAL_DMA_Init+0x1d8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d022      	beq.n	80050dc <HAL_DMA_Init+0x174>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a2a      	ldr	r2, [pc, #168]	@ (8005144 <HAL_DMA_Init+0x1dc>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d01d      	beq.n	80050dc <HAL_DMA_Init+0x174>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a28      	ldr	r2, [pc, #160]	@ (8005148 <HAL_DMA_Init+0x1e0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d018      	beq.n	80050dc <HAL_DMA_Init+0x174>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a27      	ldr	r2, [pc, #156]	@ (800514c <HAL_DMA_Init+0x1e4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <HAL_DMA_Init+0x174>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a25      	ldr	r2, [pc, #148]	@ (8005150 <HAL_DMA_Init+0x1e8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00e      	beq.n	80050dc <HAL_DMA_Init+0x174>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a24      	ldr	r2, [pc, #144]	@ (8005154 <HAL_DMA_Init+0x1ec>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d009      	beq.n	80050dc <HAL_DMA_Init+0x174>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a22      	ldr	r2, [pc, #136]	@ (8005158 <HAL_DMA_Init+0x1f0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d004      	beq.n	80050dc <HAL_DMA_Init+0x174>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a21      	ldr	r2, [pc, #132]	@ (800515c <HAL_DMA_Init+0x1f4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <HAL_DMA_Init+0x186>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	e007      	b.n	80050fe <HAL_DMA_Init+0x196>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0201 	bic.w	r2, r2, #1
 80050fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050fe:	e02f      	b.n	8005160 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005100:	f7fd fd54 	bl	8002bac <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b05      	cmp	r3, #5
 800510c:	d928      	bls.n	8005160 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2203      	movs	r2, #3
 8005118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e242      	b.n	80055a6 <HAL_DMA_Init+0x63e>
 8005120:	40020010 	.word	0x40020010
 8005124:	40020028 	.word	0x40020028
 8005128:	40020040 	.word	0x40020040
 800512c:	40020058 	.word	0x40020058
 8005130:	40020070 	.word	0x40020070
 8005134:	40020088 	.word	0x40020088
 8005138:	400200a0 	.word	0x400200a0
 800513c:	400200b8 	.word	0x400200b8
 8005140:	40020410 	.word	0x40020410
 8005144:	40020428 	.word	0x40020428
 8005148:	40020440 	.word	0x40020440
 800514c:	40020458 	.word	0x40020458
 8005150:	40020470 	.word	0x40020470
 8005154:	40020488 	.word	0x40020488
 8005158:	400204a0 	.word	0x400204a0
 800515c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1c8      	bne.n	8005100 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4b83      	ldr	r3, [pc, #524]	@ (8005388 <HAL_DMA_Init+0x420>)
 800517a:	4013      	ands	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005186:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005192:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800519e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d107      	bne.n	80051c4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051bc:	4313      	orrs	r3, r2
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b28      	cmp	r3, #40	@ 0x28
 80051ca:	d903      	bls.n	80051d4 <HAL_DMA_Init+0x26c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80051d2:	d91f      	bls.n	8005214 <HAL_DMA_Init+0x2ac>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80051da:	d903      	bls.n	80051e4 <HAL_DMA_Init+0x27c>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b42      	cmp	r3, #66	@ 0x42
 80051e2:	d917      	bls.n	8005214 <HAL_DMA_Init+0x2ac>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b46      	cmp	r3, #70	@ 0x46
 80051ea:	d903      	bls.n	80051f4 <HAL_DMA_Init+0x28c>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b48      	cmp	r3, #72	@ 0x48
 80051f2:	d90f      	bls.n	8005214 <HAL_DMA_Init+0x2ac>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b4e      	cmp	r3, #78	@ 0x4e
 80051fa:	d903      	bls.n	8005204 <HAL_DMA_Init+0x29c>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b52      	cmp	r3, #82	@ 0x52
 8005202:	d907      	bls.n	8005214 <HAL_DMA_Init+0x2ac>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b73      	cmp	r3, #115	@ 0x73
 800520a:	d905      	bls.n	8005218 <HAL_DMA_Init+0x2b0>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b77      	cmp	r3, #119	@ 0x77
 8005212:	d801      	bhi.n	8005218 <HAL_DMA_Init+0x2b0>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <HAL_DMA_Init+0x2b2>
 8005218:	2300      	movs	r3, #0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005224:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f023 0307 	bic.w	r3, r3, #7
 800523c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	2b04      	cmp	r3, #4
 800524e:	d117      	bne.n	8005280 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00e      	beq.n	8005280 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f001 fdca 	bl	8006dfc <DMA_CheckFifoParam>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d008      	beq.n	8005280 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2240      	movs	r2, #64	@ 0x40
 8005272:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e192      	b.n	80055a6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f001 fd05 	bl	8006c98 <DMA_CalcBaseAndBitshift>
 800528e:	4603      	mov	r3, r0
 8005290:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	223f      	movs	r2, #63	@ 0x3f
 800529c:	409a      	lsls	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	609a      	str	r2, [r3, #8]
 80052a2:	e0c8      	b.n	8005436 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a38      	ldr	r2, [pc, #224]	@ (800538c <HAL_DMA_Init+0x424>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d022      	beq.n	80052f4 <HAL_DMA_Init+0x38c>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a37      	ldr	r2, [pc, #220]	@ (8005390 <HAL_DMA_Init+0x428>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d01d      	beq.n	80052f4 <HAL_DMA_Init+0x38c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a35      	ldr	r2, [pc, #212]	@ (8005394 <HAL_DMA_Init+0x42c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d018      	beq.n	80052f4 <HAL_DMA_Init+0x38c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a34      	ldr	r2, [pc, #208]	@ (8005398 <HAL_DMA_Init+0x430>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <HAL_DMA_Init+0x38c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a32      	ldr	r2, [pc, #200]	@ (800539c <HAL_DMA_Init+0x434>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00e      	beq.n	80052f4 <HAL_DMA_Init+0x38c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a31      	ldr	r2, [pc, #196]	@ (80053a0 <HAL_DMA_Init+0x438>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d009      	beq.n	80052f4 <HAL_DMA_Init+0x38c>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a2f      	ldr	r2, [pc, #188]	@ (80053a4 <HAL_DMA_Init+0x43c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d004      	beq.n	80052f4 <HAL_DMA_Init+0x38c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2e      	ldr	r2, [pc, #184]	@ (80053a8 <HAL_DMA_Init+0x440>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d101      	bne.n	80052f8 <HAL_DMA_Init+0x390>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <HAL_DMA_Init+0x392>
 80052f8:	2300      	movs	r3, #0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 8092 	beq.w	8005424 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a21      	ldr	r2, [pc, #132]	@ (800538c <HAL_DMA_Init+0x424>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d021      	beq.n	800534e <HAL_DMA_Init+0x3e6>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a20      	ldr	r2, [pc, #128]	@ (8005390 <HAL_DMA_Init+0x428>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d01c      	beq.n	800534e <HAL_DMA_Init+0x3e6>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1e      	ldr	r2, [pc, #120]	@ (8005394 <HAL_DMA_Init+0x42c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d017      	beq.n	800534e <HAL_DMA_Init+0x3e6>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1d      	ldr	r2, [pc, #116]	@ (8005398 <HAL_DMA_Init+0x430>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d012      	beq.n	800534e <HAL_DMA_Init+0x3e6>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1b      	ldr	r2, [pc, #108]	@ (800539c <HAL_DMA_Init+0x434>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00d      	beq.n	800534e <HAL_DMA_Init+0x3e6>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1a      	ldr	r2, [pc, #104]	@ (80053a0 <HAL_DMA_Init+0x438>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d008      	beq.n	800534e <HAL_DMA_Init+0x3e6>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a18      	ldr	r2, [pc, #96]	@ (80053a4 <HAL_DMA_Init+0x43c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <HAL_DMA_Init+0x3e6>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a17      	ldr	r2, [pc, #92]	@ (80053a8 <HAL_DMA_Init+0x440>)
 800534c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4b10      	ldr	r3, [pc, #64]	@ (80053ac <HAL_DMA_Init+0x444>)
 800536a:	4013      	ands	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2b40      	cmp	r3, #64	@ 0x40
 8005374:	d01c      	beq.n	80053b0 <HAL_DMA_Init+0x448>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b80      	cmp	r3, #128	@ 0x80
 800537c:	d102      	bne.n	8005384 <HAL_DMA_Init+0x41c>
 800537e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005382:	e016      	b.n	80053b2 <HAL_DMA_Init+0x44a>
 8005384:	2300      	movs	r3, #0
 8005386:	e014      	b.n	80053b2 <HAL_DMA_Init+0x44a>
 8005388:	fe10803f 	.word	0xfe10803f
 800538c:	58025408 	.word	0x58025408
 8005390:	5802541c 	.word	0x5802541c
 8005394:	58025430 	.word	0x58025430
 8005398:	58025444 	.word	0x58025444
 800539c:	58025458 	.word	0x58025458
 80053a0:	5802546c 	.word	0x5802546c
 80053a4:	58025480 	.word	0x58025480
 80053a8:	58025494 	.word	0x58025494
 80053ac:	fffe000f 	.word	0xfffe000f
 80053b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	68d2      	ldr	r2, [r2, #12]
 80053b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80053c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80053c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80053d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80053d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80053e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	4b6e      	ldr	r3, [pc, #440]	@ (80055b0 <HAL_DMA_Init+0x648>)
 80053f8:	4413      	add	r3, r2
 80053fa:	4a6e      	ldr	r2, [pc, #440]	@ (80055b4 <HAL_DMA_Init+0x64c>)
 80053fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005400:	091b      	lsrs	r3, r3, #4
 8005402:	009a      	lsls	r2, r3, #2
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f001 fc45 	bl	8006c98 <DMA_CalcBaseAndBitshift>
 800540e:	4603      	mov	r3, r0
 8005410:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	2201      	movs	r2, #1
 800541c:	409a      	lsls	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	e008      	b.n	8005436 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2240      	movs	r2, #64	@ 0x40
 8005428:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2203      	movs	r2, #3
 800542e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e0b7      	b.n	80055a6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a5f      	ldr	r2, [pc, #380]	@ (80055b8 <HAL_DMA_Init+0x650>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d072      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a5d      	ldr	r2, [pc, #372]	@ (80055bc <HAL_DMA_Init+0x654>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d06d      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a5c      	ldr	r2, [pc, #368]	@ (80055c0 <HAL_DMA_Init+0x658>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d068      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a5a      	ldr	r2, [pc, #360]	@ (80055c4 <HAL_DMA_Init+0x65c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d063      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a59      	ldr	r2, [pc, #356]	@ (80055c8 <HAL_DMA_Init+0x660>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d05e      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a57      	ldr	r2, [pc, #348]	@ (80055cc <HAL_DMA_Init+0x664>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d059      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a56      	ldr	r2, [pc, #344]	@ (80055d0 <HAL_DMA_Init+0x668>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d054      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a54      	ldr	r2, [pc, #336]	@ (80055d4 <HAL_DMA_Init+0x66c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d04f      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a53      	ldr	r2, [pc, #332]	@ (80055d8 <HAL_DMA_Init+0x670>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d04a      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a51      	ldr	r2, [pc, #324]	@ (80055dc <HAL_DMA_Init+0x674>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d045      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a50      	ldr	r2, [pc, #320]	@ (80055e0 <HAL_DMA_Init+0x678>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d040      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a4e      	ldr	r2, [pc, #312]	@ (80055e4 <HAL_DMA_Init+0x67c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d03b      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a4d      	ldr	r2, [pc, #308]	@ (80055e8 <HAL_DMA_Init+0x680>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d036      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a4b      	ldr	r2, [pc, #300]	@ (80055ec <HAL_DMA_Init+0x684>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d031      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a4a      	ldr	r2, [pc, #296]	@ (80055f0 <HAL_DMA_Init+0x688>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d02c      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a48      	ldr	r2, [pc, #288]	@ (80055f4 <HAL_DMA_Init+0x68c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d027      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a47      	ldr	r2, [pc, #284]	@ (80055f8 <HAL_DMA_Init+0x690>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d022      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a45      	ldr	r2, [pc, #276]	@ (80055fc <HAL_DMA_Init+0x694>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01d      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a44      	ldr	r2, [pc, #272]	@ (8005600 <HAL_DMA_Init+0x698>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d018      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a42      	ldr	r2, [pc, #264]	@ (8005604 <HAL_DMA_Init+0x69c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a41      	ldr	r2, [pc, #260]	@ (8005608 <HAL_DMA_Init+0x6a0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00e      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a3f      	ldr	r2, [pc, #252]	@ (800560c <HAL_DMA_Init+0x6a4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d009      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a3e      	ldr	r2, [pc, #248]	@ (8005610 <HAL_DMA_Init+0x6a8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d004      	beq.n	8005526 <HAL_DMA_Init+0x5be>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a3c      	ldr	r2, [pc, #240]	@ (8005614 <HAL_DMA_Init+0x6ac>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d101      	bne.n	800552a <HAL_DMA_Init+0x5c2>
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <HAL_DMA_Init+0x5c4>
 800552a:	2300      	movs	r3, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d032      	beq.n	8005596 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f001 fcdf 	bl	8006ef4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b80      	cmp	r3, #128	@ 0x80
 800553c:	d102      	bne.n	8005544 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005558:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d010      	beq.n	8005584 <HAL_DMA_Init+0x61c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b08      	cmp	r3, #8
 8005568:	d80c      	bhi.n	8005584 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f001 fd5c 	bl	8007028 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	e008      	b.n	8005596 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	a7fdabf8 	.word	0xa7fdabf8
 80055b4:	cccccccd 	.word	0xcccccccd
 80055b8:	40020010 	.word	0x40020010
 80055bc:	40020028 	.word	0x40020028
 80055c0:	40020040 	.word	0x40020040
 80055c4:	40020058 	.word	0x40020058
 80055c8:	40020070 	.word	0x40020070
 80055cc:	40020088 	.word	0x40020088
 80055d0:	400200a0 	.word	0x400200a0
 80055d4:	400200b8 	.word	0x400200b8
 80055d8:	40020410 	.word	0x40020410
 80055dc:	40020428 	.word	0x40020428
 80055e0:	40020440 	.word	0x40020440
 80055e4:	40020458 	.word	0x40020458
 80055e8:	40020470 	.word	0x40020470
 80055ec:	40020488 	.word	0x40020488
 80055f0:	400204a0 	.word	0x400204a0
 80055f4:	400204b8 	.word	0x400204b8
 80055f8:	58025408 	.word	0x58025408
 80055fc:	5802541c 	.word	0x5802541c
 8005600:	58025430 	.word	0x58025430
 8005604:	58025444 	.word	0x58025444
 8005608:	58025458 	.word	0x58025458
 800560c:	5802546c 	.word	0x5802546c
 8005610:	58025480 	.word	0x58025480
 8005614:	58025494 	.word	0x58025494

08005618 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e226      	b.n	8005a82 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_DMA_Start_IT+0x2a>
 800563e:	2302      	movs	r3, #2
 8005640:	e21f      	b.n	8005a82 <HAL_DMA_Start_IT+0x46a>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b01      	cmp	r3, #1
 8005654:	f040 820a 	bne.w	8005a6c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a68      	ldr	r2, [pc, #416]	@ (800580c <HAL_DMA_Start_IT+0x1f4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d04a      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a66      	ldr	r2, [pc, #408]	@ (8005810 <HAL_DMA_Start_IT+0x1f8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d045      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a65      	ldr	r2, [pc, #404]	@ (8005814 <HAL_DMA_Start_IT+0x1fc>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d040      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a63      	ldr	r2, [pc, #396]	@ (8005818 <HAL_DMA_Start_IT+0x200>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d03b      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a62      	ldr	r2, [pc, #392]	@ (800581c <HAL_DMA_Start_IT+0x204>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d036      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a60      	ldr	r2, [pc, #384]	@ (8005820 <HAL_DMA_Start_IT+0x208>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d031      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a5f      	ldr	r2, [pc, #380]	@ (8005824 <HAL_DMA_Start_IT+0x20c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d02c      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005828 <HAL_DMA_Start_IT+0x210>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d027      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a5c      	ldr	r2, [pc, #368]	@ (800582c <HAL_DMA_Start_IT+0x214>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d022      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a5a      	ldr	r2, [pc, #360]	@ (8005830 <HAL_DMA_Start_IT+0x218>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d01d      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a59      	ldr	r2, [pc, #356]	@ (8005834 <HAL_DMA_Start_IT+0x21c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d018      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a57      	ldr	r2, [pc, #348]	@ (8005838 <HAL_DMA_Start_IT+0x220>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a56      	ldr	r2, [pc, #344]	@ (800583c <HAL_DMA_Start_IT+0x224>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00e      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a54      	ldr	r2, [pc, #336]	@ (8005840 <HAL_DMA_Start_IT+0x228>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d009      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a53      	ldr	r2, [pc, #332]	@ (8005844 <HAL_DMA_Start_IT+0x22c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d004      	beq.n	8005706 <HAL_DMA_Start_IT+0xee>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a51      	ldr	r2, [pc, #324]	@ (8005848 <HAL_DMA_Start_IT+0x230>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d108      	bne.n	8005718 <HAL_DMA_Start_IT+0x100>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0201 	bic.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	e007      	b.n	8005728 <HAL_DMA_Start_IT+0x110>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0201 	bic.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f001 f906 	bl	8006940 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a34      	ldr	r2, [pc, #208]	@ (800580c <HAL_DMA_Start_IT+0x1f4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d04a      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a33      	ldr	r2, [pc, #204]	@ (8005810 <HAL_DMA_Start_IT+0x1f8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d045      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a31      	ldr	r2, [pc, #196]	@ (8005814 <HAL_DMA_Start_IT+0x1fc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d040      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a30      	ldr	r2, [pc, #192]	@ (8005818 <HAL_DMA_Start_IT+0x200>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d03b      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a2e      	ldr	r2, [pc, #184]	@ (800581c <HAL_DMA_Start_IT+0x204>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d036      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a2d      	ldr	r2, [pc, #180]	@ (8005820 <HAL_DMA_Start_IT+0x208>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d031      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2b      	ldr	r2, [pc, #172]	@ (8005824 <HAL_DMA_Start_IT+0x20c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d02c      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a2a      	ldr	r2, [pc, #168]	@ (8005828 <HAL_DMA_Start_IT+0x210>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d027      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a28      	ldr	r2, [pc, #160]	@ (800582c <HAL_DMA_Start_IT+0x214>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d022      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a27      	ldr	r2, [pc, #156]	@ (8005830 <HAL_DMA_Start_IT+0x218>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d01d      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a25      	ldr	r2, [pc, #148]	@ (8005834 <HAL_DMA_Start_IT+0x21c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d018      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a24      	ldr	r2, [pc, #144]	@ (8005838 <HAL_DMA_Start_IT+0x220>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d013      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a22      	ldr	r2, [pc, #136]	@ (800583c <HAL_DMA_Start_IT+0x224>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00e      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a21      	ldr	r2, [pc, #132]	@ (8005840 <HAL_DMA_Start_IT+0x228>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005844 <HAL_DMA_Start_IT+0x22c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_DMA_Start_IT+0x1bc>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005848 <HAL_DMA_Start_IT+0x230>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d101      	bne.n	80057d8 <HAL_DMA_Start_IT+0x1c0>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <HAL_DMA_Start_IT+0x1c2>
 80057d8:	2300      	movs	r3, #0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d036      	beq.n	800584c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f023 021e 	bic.w	r2, r3, #30
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0216 	orr.w	r2, r2, #22
 80057f0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d03e      	beq.n	8005878 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0208 	orr.w	r2, r2, #8
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	e035      	b.n	8005878 <HAL_DMA_Start_IT+0x260>
 800580c:	40020010 	.word	0x40020010
 8005810:	40020028 	.word	0x40020028
 8005814:	40020040 	.word	0x40020040
 8005818:	40020058 	.word	0x40020058
 800581c:	40020070 	.word	0x40020070
 8005820:	40020088 	.word	0x40020088
 8005824:	400200a0 	.word	0x400200a0
 8005828:	400200b8 	.word	0x400200b8
 800582c:	40020410 	.word	0x40020410
 8005830:	40020428 	.word	0x40020428
 8005834:	40020440 	.word	0x40020440
 8005838:	40020458 	.word	0x40020458
 800583c:	40020470 	.word	0x40020470
 8005840:	40020488 	.word	0x40020488
 8005844:	400204a0 	.word	0x400204a0
 8005848:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f023 020e 	bic.w	r2, r3, #14
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 020a 	orr.w	r2, r2, #10
 800585e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d007      	beq.n	8005878 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0204 	orr.w	r2, r2, #4
 8005876:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a83      	ldr	r2, [pc, #524]	@ (8005a8c <HAL_DMA_Start_IT+0x474>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d072      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a82      	ldr	r2, [pc, #520]	@ (8005a90 <HAL_DMA_Start_IT+0x478>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d06d      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a80      	ldr	r2, [pc, #512]	@ (8005a94 <HAL_DMA_Start_IT+0x47c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d068      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a7f      	ldr	r2, [pc, #508]	@ (8005a98 <HAL_DMA_Start_IT+0x480>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d063      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a7d      	ldr	r2, [pc, #500]	@ (8005a9c <HAL_DMA_Start_IT+0x484>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d05e      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a7c      	ldr	r2, [pc, #496]	@ (8005aa0 <HAL_DMA_Start_IT+0x488>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d059      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a7a      	ldr	r2, [pc, #488]	@ (8005aa4 <HAL_DMA_Start_IT+0x48c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d054      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a79      	ldr	r2, [pc, #484]	@ (8005aa8 <HAL_DMA_Start_IT+0x490>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d04f      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a77      	ldr	r2, [pc, #476]	@ (8005aac <HAL_DMA_Start_IT+0x494>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d04a      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a76      	ldr	r2, [pc, #472]	@ (8005ab0 <HAL_DMA_Start_IT+0x498>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d045      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a74      	ldr	r2, [pc, #464]	@ (8005ab4 <HAL_DMA_Start_IT+0x49c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d040      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a73      	ldr	r2, [pc, #460]	@ (8005ab8 <HAL_DMA_Start_IT+0x4a0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d03b      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a71      	ldr	r2, [pc, #452]	@ (8005abc <HAL_DMA_Start_IT+0x4a4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d036      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a70      	ldr	r2, [pc, #448]	@ (8005ac0 <HAL_DMA_Start_IT+0x4a8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d031      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a6e      	ldr	r2, [pc, #440]	@ (8005ac4 <HAL_DMA_Start_IT+0x4ac>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d02c      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a6d      	ldr	r2, [pc, #436]	@ (8005ac8 <HAL_DMA_Start_IT+0x4b0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d027      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a6b      	ldr	r2, [pc, #428]	@ (8005acc <HAL_DMA_Start_IT+0x4b4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d022      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a6a      	ldr	r2, [pc, #424]	@ (8005ad0 <HAL_DMA_Start_IT+0x4b8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d01d      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a68      	ldr	r2, [pc, #416]	@ (8005ad4 <HAL_DMA_Start_IT+0x4bc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d018      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a67      	ldr	r2, [pc, #412]	@ (8005ad8 <HAL_DMA_Start_IT+0x4c0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d013      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a65      	ldr	r2, [pc, #404]	@ (8005adc <HAL_DMA_Start_IT+0x4c4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00e      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a64      	ldr	r2, [pc, #400]	@ (8005ae0 <HAL_DMA_Start_IT+0x4c8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d009      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a62      	ldr	r2, [pc, #392]	@ (8005ae4 <HAL_DMA_Start_IT+0x4cc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <HAL_DMA_Start_IT+0x350>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a61      	ldr	r2, [pc, #388]	@ (8005ae8 <HAL_DMA_Start_IT+0x4d0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d101      	bne.n	800596c <HAL_DMA_Start_IT+0x354>
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <HAL_DMA_Start_IT+0x356>
 800596c:	2300      	movs	r3, #0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01a      	beq.n	80059a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800598a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800598e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d007      	beq.n	80059a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a37      	ldr	r2, [pc, #220]	@ (8005a8c <HAL_DMA_Start_IT+0x474>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d04a      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a36      	ldr	r2, [pc, #216]	@ (8005a90 <HAL_DMA_Start_IT+0x478>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d045      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a34      	ldr	r2, [pc, #208]	@ (8005a94 <HAL_DMA_Start_IT+0x47c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d040      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a33      	ldr	r2, [pc, #204]	@ (8005a98 <HAL_DMA_Start_IT+0x480>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d03b      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a31      	ldr	r2, [pc, #196]	@ (8005a9c <HAL_DMA_Start_IT+0x484>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d036      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a30      	ldr	r2, [pc, #192]	@ (8005aa0 <HAL_DMA_Start_IT+0x488>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d031      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa4 <HAL_DMA_Start_IT+0x48c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d02c      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa8 <HAL_DMA_Start_IT+0x490>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d027      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a2b      	ldr	r2, [pc, #172]	@ (8005aac <HAL_DMA_Start_IT+0x494>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d022      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab0 <HAL_DMA_Start_IT+0x498>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d01d      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a28      	ldr	r2, [pc, #160]	@ (8005ab4 <HAL_DMA_Start_IT+0x49c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d018      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a27      	ldr	r2, [pc, #156]	@ (8005ab8 <HAL_DMA_Start_IT+0x4a0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d013      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a25      	ldr	r2, [pc, #148]	@ (8005abc <HAL_DMA_Start_IT+0x4a4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00e      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a24      	ldr	r2, [pc, #144]	@ (8005ac0 <HAL_DMA_Start_IT+0x4a8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d009      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a22      	ldr	r2, [pc, #136]	@ (8005ac4 <HAL_DMA_Start_IT+0x4ac>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_DMA_Start_IT+0x430>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a21      	ldr	r2, [pc, #132]	@ (8005ac8 <HAL_DMA_Start_IT+0x4b0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d108      	bne.n	8005a5a <HAL_DMA_Start_IT+0x442>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e012      	b.n	8005a80 <HAL_DMA_Start_IT+0x468>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f042 0201 	orr.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	e009      	b.n	8005a80 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40020010 	.word	0x40020010
 8005a90:	40020028 	.word	0x40020028
 8005a94:	40020040 	.word	0x40020040
 8005a98:	40020058 	.word	0x40020058
 8005a9c:	40020070 	.word	0x40020070
 8005aa0:	40020088 	.word	0x40020088
 8005aa4:	400200a0 	.word	0x400200a0
 8005aa8:	400200b8 	.word	0x400200b8
 8005aac:	40020410 	.word	0x40020410
 8005ab0:	40020428 	.word	0x40020428
 8005ab4:	40020440 	.word	0x40020440
 8005ab8:	40020458 	.word	0x40020458
 8005abc:	40020470 	.word	0x40020470
 8005ac0:	40020488 	.word	0x40020488
 8005ac4:	400204a0 	.word	0x400204a0
 8005ac8:	400204b8 	.word	0x400204b8
 8005acc:	58025408 	.word	0x58025408
 8005ad0:	5802541c 	.word	0x5802541c
 8005ad4:	58025430 	.word	0x58025430
 8005ad8:	58025444 	.word	0x58025444
 8005adc:	58025458 	.word	0x58025458
 8005ae0:	5802546c 	.word	0x5802546c
 8005ae4:	58025480 	.word	0x58025480
 8005ae8:	58025494 	.word	0x58025494

08005aec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	@ 0x28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005af8:	4b67      	ldr	r3, [pc, #412]	@ (8005c98 <HAL_DMA_IRQHandler+0x1ac>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a67      	ldr	r2, [pc, #412]	@ (8005c9c <HAL_DMA_IRQHandler+0x1b0>)
 8005afe:	fba2 2303 	umull	r2, r3, r2, r3
 8005b02:	0a9b      	lsrs	r3, r3, #10
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b0a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b10:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a5f      	ldr	r2, [pc, #380]	@ (8005ca0 <HAL_DMA_IRQHandler+0x1b4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d04a      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ca4 <HAL_DMA_IRQHandler+0x1b8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d045      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a5c      	ldr	r2, [pc, #368]	@ (8005ca8 <HAL_DMA_IRQHandler+0x1bc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d040      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a5a      	ldr	r2, [pc, #360]	@ (8005cac <HAL_DMA_IRQHandler+0x1c0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d03b      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a59      	ldr	r2, [pc, #356]	@ (8005cb0 <HAL_DMA_IRQHandler+0x1c4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d036      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a57      	ldr	r2, [pc, #348]	@ (8005cb4 <HAL_DMA_IRQHandler+0x1c8>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d031      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a56      	ldr	r2, [pc, #344]	@ (8005cb8 <HAL_DMA_IRQHandler+0x1cc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d02c      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a54      	ldr	r2, [pc, #336]	@ (8005cbc <HAL_DMA_IRQHandler+0x1d0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d027      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a53      	ldr	r2, [pc, #332]	@ (8005cc0 <HAL_DMA_IRQHandler+0x1d4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d022      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a51      	ldr	r2, [pc, #324]	@ (8005cc4 <HAL_DMA_IRQHandler+0x1d8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d01d      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a50      	ldr	r2, [pc, #320]	@ (8005cc8 <HAL_DMA_IRQHandler+0x1dc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d018      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a4e      	ldr	r2, [pc, #312]	@ (8005ccc <HAL_DMA_IRQHandler+0x1e0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a4d      	ldr	r2, [pc, #308]	@ (8005cd0 <HAL_DMA_IRQHandler+0x1e4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00e      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8005cd4 <HAL_DMA_IRQHandler+0x1e8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d009      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a4a      	ldr	r2, [pc, #296]	@ (8005cd8 <HAL_DMA_IRQHandler+0x1ec>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d004      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xd2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a48      	ldr	r2, [pc, #288]	@ (8005cdc <HAL_DMA_IRQHandler+0x1f0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d101      	bne.n	8005bc2 <HAL_DMA_IRQHandler+0xd6>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <HAL_DMA_IRQHandler+0xd8>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 842b 	beq.w	8006420 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bce:	f003 031f 	and.w	r3, r3, #31
 8005bd2:	2208      	movs	r2, #8
 8005bd4:	409a      	lsls	r2, r3
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 80a2 	beq.w	8005d24 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a2e      	ldr	r2, [pc, #184]	@ (8005ca0 <HAL_DMA_IRQHandler+0x1b4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d04a      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a2d      	ldr	r2, [pc, #180]	@ (8005ca4 <HAL_DMA_IRQHandler+0x1b8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d045      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8005ca8 <HAL_DMA_IRQHandler+0x1bc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d040      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a2a      	ldr	r2, [pc, #168]	@ (8005cac <HAL_DMA_IRQHandler+0x1c0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d03b      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a28      	ldr	r2, [pc, #160]	@ (8005cb0 <HAL_DMA_IRQHandler+0x1c4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d036      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a27      	ldr	r2, [pc, #156]	@ (8005cb4 <HAL_DMA_IRQHandler+0x1c8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d031      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a25      	ldr	r2, [pc, #148]	@ (8005cb8 <HAL_DMA_IRQHandler+0x1cc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d02c      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a24      	ldr	r2, [pc, #144]	@ (8005cbc <HAL_DMA_IRQHandler+0x1d0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d027      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a22      	ldr	r2, [pc, #136]	@ (8005cc0 <HAL_DMA_IRQHandler+0x1d4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d022      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a21      	ldr	r2, [pc, #132]	@ (8005cc4 <HAL_DMA_IRQHandler+0x1d8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d01d      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1f      	ldr	r2, [pc, #124]	@ (8005cc8 <HAL_DMA_IRQHandler+0x1dc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d018      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1e      	ldr	r2, [pc, #120]	@ (8005ccc <HAL_DMA_IRQHandler+0x1e0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd0 <HAL_DMA_IRQHandler+0x1e4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00e      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1b      	ldr	r2, [pc, #108]	@ (8005cd4 <HAL_DMA_IRQHandler+0x1e8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d009      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a19      	ldr	r2, [pc, #100]	@ (8005cd8 <HAL_DMA_IRQHandler+0x1ec>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x194>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a18      	ldr	r2, [pc, #96]	@ (8005cdc <HAL_DMA_IRQHandler+0x1f0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d12f      	bne.n	8005ce0 <HAL_DMA_IRQHandler+0x1f4>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bf14      	ite	ne
 8005c8e:	2301      	movne	r3, #1
 8005c90:	2300      	moveq	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	e02e      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x208>
 8005c96:	bf00      	nop
 8005c98:	2400000c 	.word	0x2400000c
 8005c9c:	1b4e81b5 	.word	0x1b4e81b5
 8005ca0:	40020010 	.word	0x40020010
 8005ca4:	40020028 	.word	0x40020028
 8005ca8:	40020040 	.word	0x40020040
 8005cac:	40020058 	.word	0x40020058
 8005cb0:	40020070 	.word	0x40020070
 8005cb4:	40020088 	.word	0x40020088
 8005cb8:	400200a0 	.word	0x400200a0
 8005cbc:	400200b8 	.word	0x400200b8
 8005cc0:	40020410 	.word	0x40020410
 8005cc4:	40020428 	.word	0x40020428
 8005cc8:	40020440 	.word	0x40020440
 8005ccc:	40020458 	.word	0x40020458
 8005cd0:	40020470 	.word	0x40020470
 8005cd4:	40020488 	.word	0x40020488
 8005cd8:	400204a0 	.word	0x400204a0
 8005cdc:	400204b8 	.word	0x400204b8
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	bf14      	ite	ne
 8005cee:	2301      	movne	r3, #1
 8005cf0:	2300      	moveq	r3, #0
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d015      	beq.n	8005d24 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0204 	bic.w	r2, r2, #4
 8005d06:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	2208      	movs	r2, #8
 8005d12:	409a      	lsls	r2, r3
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d1c:	f043 0201 	orr.w	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d28:	f003 031f 	and.w	r3, r3, #31
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d06e      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a69      	ldr	r2, [pc, #420]	@ (8005ee4 <HAL_DMA_IRQHandler+0x3f8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d04a      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a67      	ldr	r2, [pc, #412]	@ (8005ee8 <HAL_DMA_IRQHandler+0x3fc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d045      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a66      	ldr	r2, [pc, #408]	@ (8005eec <HAL_DMA_IRQHandler+0x400>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d040      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a64      	ldr	r2, [pc, #400]	@ (8005ef0 <HAL_DMA_IRQHandler+0x404>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d03b      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a63      	ldr	r2, [pc, #396]	@ (8005ef4 <HAL_DMA_IRQHandler+0x408>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d036      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a61      	ldr	r2, [pc, #388]	@ (8005ef8 <HAL_DMA_IRQHandler+0x40c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d031      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a60      	ldr	r2, [pc, #384]	@ (8005efc <HAL_DMA_IRQHandler+0x410>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d02c      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a5e      	ldr	r2, [pc, #376]	@ (8005f00 <HAL_DMA_IRQHandler+0x414>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d027      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a5d      	ldr	r2, [pc, #372]	@ (8005f04 <HAL_DMA_IRQHandler+0x418>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d022      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a5b      	ldr	r2, [pc, #364]	@ (8005f08 <HAL_DMA_IRQHandler+0x41c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d01d      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a5a      	ldr	r2, [pc, #360]	@ (8005f0c <HAL_DMA_IRQHandler+0x420>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d018      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a58      	ldr	r2, [pc, #352]	@ (8005f10 <HAL_DMA_IRQHandler+0x424>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d013      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a57      	ldr	r2, [pc, #348]	@ (8005f14 <HAL_DMA_IRQHandler+0x428>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00e      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a55      	ldr	r2, [pc, #340]	@ (8005f18 <HAL_DMA_IRQHandler+0x42c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d009      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a54      	ldr	r2, [pc, #336]	@ (8005f1c <HAL_DMA_IRQHandler+0x430>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d004      	beq.n	8005dda <HAL_DMA_IRQHandler+0x2ee>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a52      	ldr	r2, [pc, #328]	@ (8005f20 <HAL_DMA_IRQHandler+0x434>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d10a      	bne.n	8005df0 <HAL_DMA_IRQHandler+0x304>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	bf14      	ite	ne
 8005de8:	2301      	movne	r3, #1
 8005dea:	2300      	moveq	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	e003      	b.n	8005df8 <HAL_DMA_IRQHandler+0x30c>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00d      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e00:	f003 031f 	and.w	r3, r3, #31
 8005e04:	2201      	movs	r2, #1
 8005e06:	409a      	lsls	r2, r3
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e10:	f043 0202 	orr.w	r2, r3, #2
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	2204      	movs	r2, #4
 8005e22:	409a      	lsls	r2, r3
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	4013      	ands	r3, r2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 808f 	beq.w	8005f4c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2c      	ldr	r2, [pc, #176]	@ (8005ee4 <HAL_DMA_IRQHandler+0x3f8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d04a      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ee8 <HAL_DMA_IRQHandler+0x3fc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d045      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a29      	ldr	r2, [pc, #164]	@ (8005eec <HAL_DMA_IRQHandler+0x400>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d040      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a27      	ldr	r2, [pc, #156]	@ (8005ef0 <HAL_DMA_IRQHandler+0x404>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d03b      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a26      	ldr	r2, [pc, #152]	@ (8005ef4 <HAL_DMA_IRQHandler+0x408>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d036      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a24      	ldr	r2, [pc, #144]	@ (8005ef8 <HAL_DMA_IRQHandler+0x40c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d031      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a23      	ldr	r2, [pc, #140]	@ (8005efc <HAL_DMA_IRQHandler+0x410>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d02c      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a21      	ldr	r2, [pc, #132]	@ (8005f00 <HAL_DMA_IRQHandler+0x414>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d027      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a20      	ldr	r2, [pc, #128]	@ (8005f04 <HAL_DMA_IRQHandler+0x418>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d022      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8005f08 <HAL_DMA_IRQHandler+0x41c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d01d      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1d      	ldr	r2, [pc, #116]	@ (8005f0c <HAL_DMA_IRQHandler+0x420>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d018      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f10 <HAL_DMA_IRQHandler+0x424>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d013      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8005f14 <HAL_DMA_IRQHandler+0x428>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00e      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a18      	ldr	r2, [pc, #96]	@ (8005f18 <HAL_DMA_IRQHandler+0x42c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d009      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a17      	ldr	r2, [pc, #92]	@ (8005f1c <HAL_DMA_IRQHandler+0x430>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d004      	beq.n	8005ece <HAL_DMA_IRQHandler+0x3e2>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a15      	ldr	r2, [pc, #84]	@ (8005f20 <HAL_DMA_IRQHandler+0x434>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d12a      	bne.n	8005f24 <HAL_DMA_IRQHandler+0x438>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	bf14      	ite	ne
 8005edc:	2301      	movne	r3, #1
 8005ede:	2300      	moveq	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	e023      	b.n	8005f2c <HAL_DMA_IRQHandler+0x440>
 8005ee4:	40020010 	.word	0x40020010
 8005ee8:	40020028 	.word	0x40020028
 8005eec:	40020040 	.word	0x40020040
 8005ef0:	40020058 	.word	0x40020058
 8005ef4:	40020070 	.word	0x40020070
 8005ef8:	40020088 	.word	0x40020088
 8005efc:	400200a0 	.word	0x400200a0
 8005f00:	400200b8 	.word	0x400200b8
 8005f04:	40020410 	.word	0x40020410
 8005f08:	40020428 	.word	0x40020428
 8005f0c:	40020440 	.word	0x40020440
 8005f10:	40020458 	.word	0x40020458
 8005f14:	40020470 	.word	0x40020470
 8005f18:	40020488 	.word	0x40020488
 8005f1c:	400204a0 	.word	0x400204a0
 8005f20:	400204b8 	.word	0x400204b8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00d      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f34:	f003 031f 	and.w	r3, r3, #31
 8005f38:	2204      	movs	r2, #4
 8005f3a:	409a      	lsls	r2, r3
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f44:	f043 0204 	orr.w	r2, r3, #4
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	2210      	movs	r2, #16
 8005f56:	409a      	lsls	r2, r3
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80a6 	beq.w	80060ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a85      	ldr	r2, [pc, #532]	@ (800617c <HAL_DMA_IRQHandler+0x690>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d04a      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a83      	ldr	r2, [pc, #524]	@ (8006180 <HAL_DMA_IRQHandler+0x694>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d045      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a82      	ldr	r2, [pc, #520]	@ (8006184 <HAL_DMA_IRQHandler+0x698>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d040      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a80      	ldr	r2, [pc, #512]	@ (8006188 <HAL_DMA_IRQHandler+0x69c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d03b      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a7f      	ldr	r2, [pc, #508]	@ (800618c <HAL_DMA_IRQHandler+0x6a0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d036      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a7d      	ldr	r2, [pc, #500]	@ (8006190 <HAL_DMA_IRQHandler+0x6a4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d031      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a7c      	ldr	r2, [pc, #496]	@ (8006194 <HAL_DMA_IRQHandler+0x6a8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d02c      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a7a      	ldr	r2, [pc, #488]	@ (8006198 <HAL_DMA_IRQHandler+0x6ac>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d027      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a79      	ldr	r2, [pc, #484]	@ (800619c <HAL_DMA_IRQHandler+0x6b0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d022      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a77      	ldr	r2, [pc, #476]	@ (80061a0 <HAL_DMA_IRQHandler+0x6b4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d01d      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a76      	ldr	r2, [pc, #472]	@ (80061a4 <HAL_DMA_IRQHandler+0x6b8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d018      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a74      	ldr	r2, [pc, #464]	@ (80061a8 <HAL_DMA_IRQHandler+0x6bc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d013      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a73      	ldr	r2, [pc, #460]	@ (80061ac <HAL_DMA_IRQHandler+0x6c0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00e      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a71      	ldr	r2, [pc, #452]	@ (80061b0 <HAL_DMA_IRQHandler+0x6c4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d009      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a70      	ldr	r2, [pc, #448]	@ (80061b4 <HAL_DMA_IRQHandler+0x6c8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d004      	beq.n	8006002 <HAL_DMA_IRQHandler+0x516>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a6e      	ldr	r2, [pc, #440]	@ (80061b8 <HAL_DMA_IRQHandler+0x6cc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d10a      	bne.n	8006018 <HAL_DMA_IRQHandler+0x52c>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b00      	cmp	r3, #0
 800600e:	bf14      	ite	ne
 8006010:	2301      	movne	r3, #1
 8006012:	2300      	moveq	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	e009      	b.n	800602c <HAL_DMA_IRQHandler+0x540>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b00      	cmp	r3, #0
 8006024:	bf14      	ite	ne
 8006026:	2301      	movne	r3, #1
 8006028:	2300      	moveq	r3, #0
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d03e      	beq.n	80060ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	2210      	movs	r2, #16
 800603a:	409a      	lsls	r2, r3
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d018      	beq.n	8006080 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d108      	bne.n	800606e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006060:	2b00      	cmp	r3, #0
 8006062:	d024      	beq.n	80060ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	4798      	blx	r3
 800606c:	e01f      	b.n	80060ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006072:	2b00      	cmp	r3, #0
 8006074:	d01b      	beq.n	80060ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
 800607e:	e016      	b.n	80060ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608a:	2b00      	cmp	r3, #0
 800608c:	d107      	bne.n	800609e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0208 	bic.w	r2, r2, #8
 800609c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b2:	f003 031f 	and.w	r3, r3, #31
 80060b6:	2220      	movs	r2, #32
 80060b8:	409a      	lsls	r2, r3
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	4013      	ands	r3, r2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8110 	beq.w	80062e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a2c      	ldr	r2, [pc, #176]	@ (800617c <HAL_DMA_IRQHandler+0x690>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d04a      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006180 <HAL_DMA_IRQHandler+0x694>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d045      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a29      	ldr	r2, [pc, #164]	@ (8006184 <HAL_DMA_IRQHandler+0x698>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d040      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a28      	ldr	r2, [pc, #160]	@ (8006188 <HAL_DMA_IRQHandler+0x69c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d03b      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a26      	ldr	r2, [pc, #152]	@ (800618c <HAL_DMA_IRQHandler+0x6a0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d036      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a25      	ldr	r2, [pc, #148]	@ (8006190 <HAL_DMA_IRQHandler+0x6a4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d031      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a23      	ldr	r2, [pc, #140]	@ (8006194 <HAL_DMA_IRQHandler+0x6a8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d02c      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a22      	ldr	r2, [pc, #136]	@ (8006198 <HAL_DMA_IRQHandler+0x6ac>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d027      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a20      	ldr	r2, [pc, #128]	@ (800619c <HAL_DMA_IRQHandler+0x6b0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d022      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1f      	ldr	r2, [pc, #124]	@ (80061a0 <HAL_DMA_IRQHandler+0x6b4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d01d      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1d      	ldr	r2, [pc, #116]	@ (80061a4 <HAL_DMA_IRQHandler+0x6b8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d018      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a1c      	ldr	r2, [pc, #112]	@ (80061a8 <HAL_DMA_IRQHandler+0x6bc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d013      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1a      	ldr	r2, [pc, #104]	@ (80061ac <HAL_DMA_IRQHandler+0x6c0>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00e      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a19      	ldr	r2, [pc, #100]	@ (80061b0 <HAL_DMA_IRQHandler+0x6c4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d009      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a17      	ldr	r2, [pc, #92]	@ (80061b4 <HAL_DMA_IRQHandler+0x6c8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d004      	beq.n	8006164 <HAL_DMA_IRQHandler+0x678>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a16      	ldr	r2, [pc, #88]	@ (80061b8 <HAL_DMA_IRQHandler+0x6cc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d12b      	bne.n	80061bc <HAL_DMA_IRQHandler+0x6d0>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0310 	and.w	r3, r3, #16
 800616e:	2b00      	cmp	r3, #0
 8006170:	bf14      	ite	ne
 8006172:	2301      	movne	r3, #1
 8006174:	2300      	moveq	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	e02a      	b.n	80061d0 <HAL_DMA_IRQHandler+0x6e4>
 800617a:	bf00      	nop
 800617c:	40020010 	.word	0x40020010
 8006180:	40020028 	.word	0x40020028
 8006184:	40020040 	.word	0x40020040
 8006188:	40020058 	.word	0x40020058
 800618c:	40020070 	.word	0x40020070
 8006190:	40020088 	.word	0x40020088
 8006194:	400200a0 	.word	0x400200a0
 8006198:	400200b8 	.word	0x400200b8
 800619c:	40020410 	.word	0x40020410
 80061a0:	40020428 	.word	0x40020428
 80061a4:	40020440 	.word	0x40020440
 80061a8:	40020458 	.word	0x40020458
 80061ac:	40020470 	.word	0x40020470
 80061b0:	40020488 	.word	0x40020488
 80061b4:	400204a0 	.word	0x400204a0
 80061b8:	400204b8 	.word	0x400204b8
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bf14      	ite	ne
 80061ca:	2301      	movne	r3, #1
 80061cc:	2300      	moveq	r3, #0
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8087 	beq.w	80062e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061da:	f003 031f 	and.w	r3, r3, #31
 80061de:	2220      	movs	r2, #32
 80061e0:	409a      	lsls	r2, r3
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d139      	bne.n	8006266 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0216 	bic.w	r2, r2, #22
 8006200:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695a      	ldr	r2, [r3, #20]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006210:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d103      	bne.n	8006222 <HAL_DMA_IRQHandler+0x736>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800621e:	2b00      	cmp	r3, #0
 8006220:	d007      	beq.n	8006232 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0208 	bic.w	r2, r2, #8
 8006230:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006236:	f003 031f 	and.w	r3, r3, #31
 800623a:	223f      	movs	r2, #63	@ 0x3f
 800623c:	409a      	lsls	r2, r3
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 834a 	beq.w	80068f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3
          }
          return;
 8006264:	e344      	b.n	80068f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d018      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d108      	bne.n	8006294 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006286:	2b00      	cmp	r3, #0
 8006288:	d02c      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	4798      	blx	r3
 8006292:	e027      	b.n	80062e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d023      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	4798      	blx	r3
 80062a4:	e01e      	b.n	80062e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10f      	bne.n	80062d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0210 	bic.w	r2, r2, #16
 80062c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 8306 	beq.w	80068fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 8088 	beq.w	800640c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2204      	movs	r2, #4
 8006300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a7a      	ldr	r2, [pc, #488]	@ (80064f4 <HAL_DMA_IRQHandler+0xa08>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d04a      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a79      	ldr	r2, [pc, #484]	@ (80064f8 <HAL_DMA_IRQHandler+0xa0c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d045      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a77      	ldr	r2, [pc, #476]	@ (80064fc <HAL_DMA_IRQHandler+0xa10>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d040      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a76      	ldr	r2, [pc, #472]	@ (8006500 <HAL_DMA_IRQHandler+0xa14>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d03b      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a74      	ldr	r2, [pc, #464]	@ (8006504 <HAL_DMA_IRQHandler+0xa18>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d036      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a73      	ldr	r2, [pc, #460]	@ (8006508 <HAL_DMA_IRQHandler+0xa1c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d031      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a71      	ldr	r2, [pc, #452]	@ (800650c <HAL_DMA_IRQHandler+0xa20>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d02c      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a70      	ldr	r2, [pc, #448]	@ (8006510 <HAL_DMA_IRQHandler+0xa24>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d027      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a6e      	ldr	r2, [pc, #440]	@ (8006514 <HAL_DMA_IRQHandler+0xa28>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d022      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a6d      	ldr	r2, [pc, #436]	@ (8006518 <HAL_DMA_IRQHandler+0xa2c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d01d      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a6b      	ldr	r2, [pc, #428]	@ (800651c <HAL_DMA_IRQHandler+0xa30>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d018      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a6a      	ldr	r2, [pc, #424]	@ (8006520 <HAL_DMA_IRQHandler+0xa34>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d013      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a68      	ldr	r2, [pc, #416]	@ (8006524 <HAL_DMA_IRQHandler+0xa38>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00e      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a67      	ldr	r2, [pc, #412]	@ (8006528 <HAL_DMA_IRQHandler+0xa3c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d009      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a65      	ldr	r2, [pc, #404]	@ (800652c <HAL_DMA_IRQHandler+0xa40>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d004      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x8b8>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a64      	ldr	r2, [pc, #400]	@ (8006530 <HAL_DMA_IRQHandler+0xa44>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d108      	bne.n	80063b6 <HAL_DMA_IRQHandler+0x8ca>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0201 	bic.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	e007      	b.n	80063c6 <HAL_DMA_IRQHandler+0x8da>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3301      	adds	r3, #1
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d307      	bcc.n	80063e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1f2      	bne.n	80063c6 <HAL_DMA_IRQHandler+0x8da>
 80063e0:	e000      	b.n	80063e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80063e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d004      	beq.n	80063fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2203      	movs	r2, #3
 80063f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80063fa:	e003      	b.n	8006404 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 8272 	beq.w	80068fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	4798      	blx	r3
 800641e:	e26c      	b.n	80068fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a43      	ldr	r2, [pc, #268]	@ (8006534 <HAL_DMA_IRQHandler+0xa48>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d022      	beq.n	8006470 <HAL_DMA_IRQHandler+0x984>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a42      	ldr	r2, [pc, #264]	@ (8006538 <HAL_DMA_IRQHandler+0xa4c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d01d      	beq.n	8006470 <HAL_DMA_IRQHandler+0x984>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a40      	ldr	r2, [pc, #256]	@ (800653c <HAL_DMA_IRQHandler+0xa50>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d018      	beq.n	8006470 <HAL_DMA_IRQHandler+0x984>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a3f      	ldr	r2, [pc, #252]	@ (8006540 <HAL_DMA_IRQHandler+0xa54>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d013      	beq.n	8006470 <HAL_DMA_IRQHandler+0x984>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a3d      	ldr	r2, [pc, #244]	@ (8006544 <HAL_DMA_IRQHandler+0xa58>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00e      	beq.n	8006470 <HAL_DMA_IRQHandler+0x984>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a3c      	ldr	r2, [pc, #240]	@ (8006548 <HAL_DMA_IRQHandler+0xa5c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d009      	beq.n	8006470 <HAL_DMA_IRQHandler+0x984>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a3a      	ldr	r2, [pc, #232]	@ (800654c <HAL_DMA_IRQHandler+0xa60>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d004      	beq.n	8006470 <HAL_DMA_IRQHandler+0x984>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a39      	ldr	r2, [pc, #228]	@ (8006550 <HAL_DMA_IRQHandler+0xa64>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d101      	bne.n	8006474 <HAL_DMA_IRQHandler+0x988>
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <HAL_DMA_IRQHandler+0x98a>
 8006474:	2300      	movs	r3, #0
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 823f 	beq.w	80068fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	2204      	movs	r2, #4
 800648e:	409a      	lsls	r2, r3
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	4013      	ands	r3, r2
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 80cd 	beq.w	8006634 <HAL_DMA_IRQHandler+0xb48>
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80c7 	beq.w	8006634 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	2204      	movs	r2, #4
 80064b0:	409a      	lsls	r2, r3
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d049      	beq.n	8006554 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d109      	bne.n	80064de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 8210 	beq.w	80068f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064dc:	e20a      	b.n	80068f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 8206 	beq.w	80068f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064f0:	e200      	b.n	80068f4 <HAL_DMA_IRQHandler+0xe08>
 80064f2:	bf00      	nop
 80064f4:	40020010 	.word	0x40020010
 80064f8:	40020028 	.word	0x40020028
 80064fc:	40020040 	.word	0x40020040
 8006500:	40020058 	.word	0x40020058
 8006504:	40020070 	.word	0x40020070
 8006508:	40020088 	.word	0x40020088
 800650c:	400200a0 	.word	0x400200a0
 8006510:	400200b8 	.word	0x400200b8
 8006514:	40020410 	.word	0x40020410
 8006518:	40020428 	.word	0x40020428
 800651c:	40020440 	.word	0x40020440
 8006520:	40020458 	.word	0x40020458
 8006524:	40020470 	.word	0x40020470
 8006528:	40020488 	.word	0x40020488
 800652c:	400204a0 	.word	0x400204a0
 8006530:	400204b8 	.word	0x400204b8
 8006534:	58025408 	.word	0x58025408
 8006538:	5802541c 	.word	0x5802541c
 800653c:	58025430 	.word	0x58025430
 8006540:	58025444 	.word	0x58025444
 8006544:	58025458 	.word	0x58025458
 8006548:	5802546c 	.word	0x5802546c
 800654c:	58025480 	.word	0x58025480
 8006550:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d160      	bne.n	8006620 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a7f      	ldr	r2, [pc, #508]	@ (8006760 <HAL_DMA_IRQHandler+0xc74>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d04a      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a7d      	ldr	r2, [pc, #500]	@ (8006764 <HAL_DMA_IRQHandler+0xc78>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d045      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a7c      	ldr	r2, [pc, #496]	@ (8006768 <HAL_DMA_IRQHandler+0xc7c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d040      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a7a      	ldr	r2, [pc, #488]	@ (800676c <HAL_DMA_IRQHandler+0xc80>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d03b      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a79      	ldr	r2, [pc, #484]	@ (8006770 <HAL_DMA_IRQHandler+0xc84>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d036      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a77      	ldr	r2, [pc, #476]	@ (8006774 <HAL_DMA_IRQHandler+0xc88>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d031      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a76      	ldr	r2, [pc, #472]	@ (8006778 <HAL_DMA_IRQHandler+0xc8c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d02c      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a74      	ldr	r2, [pc, #464]	@ (800677c <HAL_DMA_IRQHandler+0xc90>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d027      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a73      	ldr	r2, [pc, #460]	@ (8006780 <HAL_DMA_IRQHandler+0xc94>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d022      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a71      	ldr	r2, [pc, #452]	@ (8006784 <HAL_DMA_IRQHandler+0xc98>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01d      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a70      	ldr	r2, [pc, #448]	@ (8006788 <HAL_DMA_IRQHandler+0xc9c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d018      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a6e      	ldr	r2, [pc, #440]	@ (800678c <HAL_DMA_IRQHandler+0xca0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a6d      	ldr	r2, [pc, #436]	@ (8006790 <HAL_DMA_IRQHandler+0xca4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00e      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a6b      	ldr	r2, [pc, #428]	@ (8006794 <HAL_DMA_IRQHandler+0xca8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d009      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a6a      	ldr	r2, [pc, #424]	@ (8006798 <HAL_DMA_IRQHandler+0xcac>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d004      	beq.n	80065fe <HAL_DMA_IRQHandler+0xb12>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a68      	ldr	r2, [pc, #416]	@ (800679c <HAL_DMA_IRQHandler+0xcb0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d108      	bne.n	8006610 <HAL_DMA_IRQHandler+0xb24>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0208 	bic.w	r2, r2, #8
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e007      	b.n	8006620 <HAL_DMA_IRQHandler+0xb34>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0204 	bic.w	r2, r2, #4
 800661e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 8165 	beq.w	80068f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006632:	e15f      	b.n	80068f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	2202      	movs	r2, #2
 800663e:	409a      	lsls	r2, r3
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	4013      	ands	r3, r2
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 80c5 	beq.w	80067d4 <HAL_DMA_IRQHandler+0xce8>
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 80bf 	beq.w	80067d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	2202      	movs	r2, #2
 8006660:	409a      	lsls	r2, r3
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d018      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d109      	bne.n	800668e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 813a 	beq.w	80068f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800668c:	e134      	b.n	80068f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 8130 	beq.w	80068f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066a0:	e12a      	b.n	80068f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f003 0320 	and.w	r3, r3, #32
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f040 8089 	bne.w	80067c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006760 <HAL_DMA_IRQHandler+0xc74>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d04a      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a29      	ldr	r2, [pc, #164]	@ (8006764 <HAL_DMA_IRQHandler+0xc78>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d045      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a28      	ldr	r2, [pc, #160]	@ (8006768 <HAL_DMA_IRQHandler+0xc7c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d040      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a26      	ldr	r2, [pc, #152]	@ (800676c <HAL_DMA_IRQHandler+0xc80>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d03b      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a25      	ldr	r2, [pc, #148]	@ (8006770 <HAL_DMA_IRQHandler+0xc84>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d036      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a23      	ldr	r2, [pc, #140]	@ (8006774 <HAL_DMA_IRQHandler+0xc88>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d031      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a22      	ldr	r2, [pc, #136]	@ (8006778 <HAL_DMA_IRQHandler+0xc8c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d02c      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a20      	ldr	r2, [pc, #128]	@ (800677c <HAL_DMA_IRQHandler+0xc90>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d027      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a1f      	ldr	r2, [pc, #124]	@ (8006780 <HAL_DMA_IRQHandler+0xc94>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d022      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1d      	ldr	r2, [pc, #116]	@ (8006784 <HAL_DMA_IRQHandler+0xc98>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d01d      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1c      	ldr	r2, [pc, #112]	@ (8006788 <HAL_DMA_IRQHandler+0xc9c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d018      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1a      	ldr	r2, [pc, #104]	@ (800678c <HAL_DMA_IRQHandler+0xca0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d013      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a19      	ldr	r2, [pc, #100]	@ (8006790 <HAL_DMA_IRQHandler+0xca4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00e      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a17      	ldr	r2, [pc, #92]	@ (8006794 <HAL_DMA_IRQHandler+0xca8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d009      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a16      	ldr	r2, [pc, #88]	@ (8006798 <HAL_DMA_IRQHandler+0xcac>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d004      	beq.n	800674e <HAL_DMA_IRQHandler+0xc62>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a14      	ldr	r2, [pc, #80]	@ (800679c <HAL_DMA_IRQHandler+0xcb0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d128      	bne.n	80067a0 <HAL_DMA_IRQHandler+0xcb4>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0214 	bic.w	r2, r2, #20
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e027      	b.n	80067b0 <HAL_DMA_IRQHandler+0xcc4>
 8006760:	40020010 	.word	0x40020010
 8006764:	40020028 	.word	0x40020028
 8006768:	40020040 	.word	0x40020040
 800676c:	40020058 	.word	0x40020058
 8006770:	40020070 	.word	0x40020070
 8006774:	40020088 	.word	0x40020088
 8006778:	400200a0 	.word	0x400200a0
 800677c:	400200b8 	.word	0x400200b8
 8006780:	40020410 	.word	0x40020410
 8006784:	40020428 	.word	0x40020428
 8006788:	40020440 	.word	0x40020440
 800678c:	40020458 	.word	0x40020458
 8006790:	40020470 	.word	0x40020470
 8006794:	40020488 	.word	0x40020488
 8006798:	400204a0 	.word	0x400204a0
 800679c:	400204b8 	.word	0x400204b8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 020a 	bic.w	r2, r2, #10
 80067ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8097 	beq.w	80068f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067d2:	e091      	b.n	80068f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067d8:	f003 031f 	and.w	r3, r3, #31
 80067dc:	2208      	movs	r2, #8
 80067de:	409a      	lsls	r2, r3
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	4013      	ands	r3, r2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8088 	beq.w	80068fa <HAL_DMA_IRQHandler+0xe0e>
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 8082 	beq.w	80068fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a41      	ldr	r2, [pc, #260]	@ (8006900 <HAL_DMA_IRQHandler+0xe14>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d04a      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a3f      	ldr	r2, [pc, #252]	@ (8006904 <HAL_DMA_IRQHandler+0xe18>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d045      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a3e      	ldr	r2, [pc, #248]	@ (8006908 <HAL_DMA_IRQHandler+0xe1c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d040      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a3c      	ldr	r2, [pc, #240]	@ (800690c <HAL_DMA_IRQHandler+0xe20>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d03b      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a3b      	ldr	r2, [pc, #236]	@ (8006910 <HAL_DMA_IRQHandler+0xe24>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d036      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a39      	ldr	r2, [pc, #228]	@ (8006914 <HAL_DMA_IRQHandler+0xe28>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d031      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a38      	ldr	r2, [pc, #224]	@ (8006918 <HAL_DMA_IRQHandler+0xe2c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d02c      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a36      	ldr	r2, [pc, #216]	@ (800691c <HAL_DMA_IRQHandler+0xe30>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d027      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a35      	ldr	r2, [pc, #212]	@ (8006920 <HAL_DMA_IRQHandler+0xe34>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d022      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a33      	ldr	r2, [pc, #204]	@ (8006924 <HAL_DMA_IRQHandler+0xe38>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d01d      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a32      	ldr	r2, [pc, #200]	@ (8006928 <HAL_DMA_IRQHandler+0xe3c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d018      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a30      	ldr	r2, [pc, #192]	@ (800692c <HAL_DMA_IRQHandler+0xe40>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d013      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a2f      	ldr	r2, [pc, #188]	@ (8006930 <HAL_DMA_IRQHandler+0xe44>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00e      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a2d      	ldr	r2, [pc, #180]	@ (8006934 <HAL_DMA_IRQHandler+0xe48>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d009      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a2c      	ldr	r2, [pc, #176]	@ (8006938 <HAL_DMA_IRQHandler+0xe4c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d004      	beq.n	8006896 <HAL_DMA_IRQHandler+0xdaa>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a2a      	ldr	r2, [pc, #168]	@ (800693c <HAL_DMA_IRQHandler+0xe50>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d108      	bne.n	80068a8 <HAL_DMA_IRQHandler+0xdbc>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 021c 	bic.w	r2, r2, #28
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	e007      	b.n	80068b8 <HAL_DMA_IRQHandler+0xdcc>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 020e 	bic.w	r2, r2, #14
 80068b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	2201      	movs	r2, #1
 80068c2:	409a      	lsls	r2, r3
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d009      	beq.n	80068fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	4798      	blx	r3
 80068ee:	e004      	b.n	80068fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80068f0:	bf00      	nop
 80068f2:	e002      	b.n	80068fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068f4:	bf00      	nop
 80068f6:	e000      	b.n	80068fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80068fa:	3728      	adds	r7, #40	@ 0x28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40020010 	.word	0x40020010
 8006904:	40020028 	.word	0x40020028
 8006908:	40020040 	.word	0x40020040
 800690c:	40020058 	.word	0x40020058
 8006910:	40020070 	.word	0x40020070
 8006914:	40020088 	.word	0x40020088
 8006918:	400200a0 	.word	0x400200a0
 800691c:	400200b8 	.word	0x400200b8
 8006920:	40020410 	.word	0x40020410
 8006924:	40020428 	.word	0x40020428
 8006928:	40020440 	.word	0x40020440
 800692c:	40020458 	.word	0x40020458
 8006930:	40020470 	.word	0x40020470
 8006934:	40020488 	.word	0x40020488
 8006938:	400204a0 	.word	0x400204a0
 800693c:	400204b8 	.word	0x400204b8

08006940 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006952:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006958:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a7f      	ldr	r2, [pc, #508]	@ (8006b5c <DMA_SetConfig+0x21c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d072      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a7d      	ldr	r2, [pc, #500]	@ (8006b60 <DMA_SetConfig+0x220>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d06d      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a7c      	ldr	r2, [pc, #496]	@ (8006b64 <DMA_SetConfig+0x224>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d068      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a7a      	ldr	r2, [pc, #488]	@ (8006b68 <DMA_SetConfig+0x228>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d063      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a79      	ldr	r2, [pc, #484]	@ (8006b6c <DMA_SetConfig+0x22c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d05e      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a77      	ldr	r2, [pc, #476]	@ (8006b70 <DMA_SetConfig+0x230>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d059      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a76      	ldr	r2, [pc, #472]	@ (8006b74 <DMA_SetConfig+0x234>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d054      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a74      	ldr	r2, [pc, #464]	@ (8006b78 <DMA_SetConfig+0x238>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d04f      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a73      	ldr	r2, [pc, #460]	@ (8006b7c <DMA_SetConfig+0x23c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d04a      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a71      	ldr	r2, [pc, #452]	@ (8006b80 <DMA_SetConfig+0x240>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d045      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a70      	ldr	r2, [pc, #448]	@ (8006b84 <DMA_SetConfig+0x244>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d040      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a6e      	ldr	r2, [pc, #440]	@ (8006b88 <DMA_SetConfig+0x248>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d03b      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a6d      	ldr	r2, [pc, #436]	@ (8006b8c <DMA_SetConfig+0x24c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d036      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a6b      	ldr	r2, [pc, #428]	@ (8006b90 <DMA_SetConfig+0x250>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d031      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a6a      	ldr	r2, [pc, #424]	@ (8006b94 <DMA_SetConfig+0x254>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d02c      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a68      	ldr	r2, [pc, #416]	@ (8006b98 <DMA_SetConfig+0x258>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d027      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a67      	ldr	r2, [pc, #412]	@ (8006b9c <DMA_SetConfig+0x25c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d022      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a65      	ldr	r2, [pc, #404]	@ (8006ba0 <DMA_SetConfig+0x260>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01d      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a64      	ldr	r2, [pc, #400]	@ (8006ba4 <DMA_SetConfig+0x264>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d018      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a62      	ldr	r2, [pc, #392]	@ (8006ba8 <DMA_SetConfig+0x268>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a61      	ldr	r2, [pc, #388]	@ (8006bac <DMA_SetConfig+0x26c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00e      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a5f      	ldr	r2, [pc, #380]	@ (8006bb0 <DMA_SetConfig+0x270>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d009      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a5e      	ldr	r2, [pc, #376]	@ (8006bb4 <DMA_SetConfig+0x274>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <DMA_SetConfig+0x10a>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a5c      	ldr	r2, [pc, #368]	@ (8006bb8 <DMA_SetConfig+0x278>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d101      	bne.n	8006a4e <DMA_SetConfig+0x10e>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e000      	b.n	8006a50 <DMA_SetConfig+0x110>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00d      	beq.n	8006a70 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006a5c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d004      	beq.n	8006a70 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a6e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a39      	ldr	r2, [pc, #228]	@ (8006b5c <DMA_SetConfig+0x21c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d04a      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a38      	ldr	r2, [pc, #224]	@ (8006b60 <DMA_SetConfig+0x220>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d045      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a36      	ldr	r2, [pc, #216]	@ (8006b64 <DMA_SetConfig+0x224>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d040      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a35      	ldr	r2, [pc, #212]	@ (8006b68 <DMA_SetConfig+0x228>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d03b      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a33      	ldr	r2, [pc, #204]	@ (8006b6c <DMA_SetConfig+0x22c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d036      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a32      	ldr	r2, [pc, #200]	@ (8006b70 <DMA_SetConfig+0x230>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d031      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a30      	ldr	r2, [pc, #192]	@ (8006b74 <DMA_SetConfig+0x234>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d02c      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a2f      	ldr	r2, [pc, #188]	@ (8006b78 <DMA_SetConfig+0x238>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d027      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8006b7c <DMA_SetConfig+0x23c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d022      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a2c      	ldr	r2, [pc, #176]	@ (8006b80 <DMA_SetConfig+0x240>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d01d      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8006b84 <DMA_SetConfig+0x244>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d018      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a29      	ldr	r2, [pc, #164]	@ (8006b88 <DMA_SetConfig+0x248>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d013      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a27      	ldr	r2, [pc, #156]	@ (8006b8c <DMA_SetConfig+0x24c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00e      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a26      	ldr	r2, [pc, #152]	@ (8006b90 <DMA_SetConfig+0x250>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d009      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a24      	ldr	r2, [pc, #144]	@ (8006b94 <DMA_SetConfig+0x254>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d004      	beq.n	8006b10 <DMA_SetConfig+0x1d0>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a23      	ldr	r2, [pc, #140]	@ (8006b98 <DMA_SetConfig+0x258>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d101      	bne.n	8006b14 <DMA_SetConfig+0x1d4>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <DMA_SetConfig+0x1d6>
 8006b14:	2300      	movs	r3, #0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d059      	beq.n	8006bce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b1e:	f003 031f 	and.w	r3, r3, #31
 8006b22:	223f      	movs	r2, #63	@ 0x3f
 8006b24:	409a      	lsls	r2, r3
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006b38:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	2b40      	cmp	r3, #64	@ 0x40
 8006b48:	d138      	bne.n	8006bbc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b5a:	e086      	b.n	8006c6a <DMA_SetConfig+0x32a>
 8006b5c:	40020010 	.word	0x40020010
 8006b60:	40020028 	.word	0x40020028
 8006b64:	40020040 	.word	0x40020040
 8006b68:	40020058 	.word	0x40020058
 8006b6c:	40020070 	.word	0x40020070
 8006b70:	40020088 	.word	0x40020088
 8006b74:	400200a0 	.word	0x400200a0
 8006b78:	400200b8 	.word	0x400200b8
 8006b7c:	40020410 	.word	0x40020410
 8006b80:	40020428 	.word	0x40020428
 8006b84:	40020440 	.word	0x40020440
 8006b88:	40020458 	.word	0x40020458
 8006b8c:	40020470 	.word	0x40020470
 8006b90:	40020488 	.word	0x40020488
 8006b94:	400204a0 	.word	0x400204a0
 8006b98:	400204b8 	.word	0x400204b8
 8006b9c:	58025408 	.word	0x58025408
 8006ba0:	5802541c 	.word	0x5802541c
 8006ba4:	58025430 	.word	0x58025430
 8006ba8:	58025444 	.word	0x58025444
 8006bac:	58025458 	.word	0x58025458
 8006bb0:	5802546c 	.word	0x5802546c
 8006bb4:	58025480 	.word	0x58025480
 8006bb8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	60da      	str	r2, [r3, #12]
}
 8006bcc:	e04d      	b.n	8006c6a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a29      	ldr	r2, [pc, #164]	@ (8006c78 <DMA_SetConfig+0x338>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d022      	beq.n	8006c1e <DMA_SetConfig+0x2de>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a27      	ldr	r2, [pc, #156]	@ (8006c7c <DMA_SetConfig+0x33c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d01d      	beq.n	8006c1e <DMA_SetConfig+0x2de>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a26      	ldr	r2, [pc, #152]	@ (8006c80 <DMA_SetConfig+0x340>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d018      	beq.n	8006c1e <DMA_SetConfig+0x2de>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a24      	ldr	r2, [pc, #144]	@ (8006c84 <DMA_SetConfig+0x344>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <DMA_SetConfig+0x2de>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a23      	ldr	r2, [pc, #140]	@ (8006c88 <DMA_SetConfig+0x348>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00e      	beq.n	8006c1e <DMA_SetConfig+0x2de>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a21      	ldr	r2, [pc, #132]	@ (8006c8c <DMA_SetConfig+0x34c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d009      	beq.n	8006c1e <DMA_SetConfig+0x2de>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a20      	ldr	r2, [pc, #128]	@ (8006c90 <DMA_SetConfig+0x350>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d004      	beq.n	8006c1e <DMA_SetConfig+0x2de>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a1e      	ldr	r2, [pc, #120]	@ (8006c94 <DMA_SetConfig+0x354>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d101      	bne.n	8006c22 <DMA_SetConfig+0x2e2>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <DMA_SetConfig+0x2e4>
 8006c22:	2300      	movs	r3, #0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d020      	beq.n	8006c6a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c2c:	f003 031f 	and.w	r3, r3, #31
 8006c30:	2201      	movs	r2, #1
 8006c32:	409a      	lsls	r2, r3
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	2b40      	cmp	r3, #64	@ 0x40
 8006c46:	d108      	bne.n	8006c5a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	60da      	str	r2, [r3, #12]
}
 8006c58:	e007      	b.n	8006c6a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	60da      	str	r2, [r3, #12]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	58025408 	.word	0x58025408
 8006c7c:	5802541c 	.word	0x5802541c
 8006c80:	58025430 	.word	0x58025430
 8006c84:	58025444 	.word	0x58025444
 8006c88:	58025458 	.word	0x58025458
 8006c8c:	5802546c 	.word	0x5802546c
 8006c90:	58025480 	.word	0x58025480
 8006c94:	58025494 	.word	0x58025494

08006c98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a42      	ldr	r2, [pc, #264]	@ (8006db0 <DMA_CalcBaseAndBitshift+0x118>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d04a      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a41      	ldr	r2, [pc, #260]	@ (8006db4 <DMA_CalcBaseAndBitshift+0x11c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d045      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a3f      	ldr	r2, [pc, #252]	@ (8006db8 <DMA_CalcBaseAndBitshift+0x120>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d040      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a3e      	ldr	r2, [pc, #248]	@ (8006dbc <DMA_CalcBaseAndBitshift+0x124>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d03b      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8006dc0 <DMA_CalcBaseAndBitshift+0x128>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d036      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a3b      	ldr	r2, [pc, #236]	@ (8006dc4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d031      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a39      	ldr	r2, [pc, #228]	@ (8006dc8 <DMA_CalcBaseAndBitshift+0x130>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d02c      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a38      	ldr	r2, [pc, #224]	@ (8006dcc <DMA_CalcBaseAndBitshift+0x134>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d027      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a36      	ldr	r2, [pc, #216]	@ (8006dd0 <DMA_CalcBaseAndBitshift+0x138>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d022      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a35      	ldr	r2, [pc, #212]	@ (8006dd4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d01d      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a33      	ldr	r2, [pc, #204]	@ (8006dd8 <DMA_CalcBaseAndBitshift+0x140>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d018      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a32      	ldr	r2, [pc, #200]	@ (8006ddc <DMA_CalcBaseAndBitshift+0x144>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d013      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a30      	ldr	r2, [pc, #192]	@ (8006de0 <DMA_CalcBaseAndBitshift+0x148>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00e      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a2f      	ldr	r2, [pc, #188]	@ (8006de4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d009      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a2d      	ldr	r2, [pc, #180]	@ (8006de8 <DMA_CalcBaseAndBitshift+0x150>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d004      	beq.n	8006d40 <DMA_CalcBaseAndBitshift+0xa8>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8006dec <DMA_CalcBaseAndBitshift+0x154>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d101      	bne.n	8006d44 <DMA_CalcBaseAndBitshift+0xac>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <DMA_CalcBaseAndBitshift+0xae>
 8006d44:	2300      	movs	r3, #0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d024      	beq.n	8006d94 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	3b10      	subs	r3, #16
 8006d52:	4a27      	ldr	r2, [pc, #156]	@ (8006df0 <DMA_CalcBaseAndBitshift+0x158>)
 8006d54:	fba2 2303 	umull	r2, r3, r2, r3
 8006d58:	091b      	lsrs	r3, r3, #4
 8006d5a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	4a24      	ldr	r2, [pc, #144]	@ (8006df4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006d64:	5cd3      	ldrb	r3, [r2, r3]
 8006d66:	461a      	mov	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d908      	bls.n	8006d84 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	4b1f      	ldr	r3, [pc, #124]	@ (8006df8 <DMA_CalcBaseAndBitshift+0x160>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	1d1a      	adds	r2, r3, #4
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d82:	e00d      	b.n	8006da0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006df8 <DMA_CalcBaseAndBitshift+0x160>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d92:	e005      	b.n	8006da0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	40020010 	.word	0x40020010
 8006db4:	40020028 	.word	0x40020028
 8006db8:	40020040 	.word	0x40020040
 8006dbc:	40020058 	.word	0x40020058
 8006dc0:	40020070 	.word	0x40020070
 8006dc4:	40020088 	.word	0x40020088
 8006dc8:	400200a0 	.word	0x400200a0
 8006dcc:	400200b8 	.word	0x400200b8
 8006dd0:	40020410 	.word	0x40020410
 8006dd4:	40020428 	.word	0x40020428
 8006dd8:	40020440 	.word	0x40020440
 8006ddc:	40020458 	.word	0x40020458
 8006de0:	40020470 	.word	0x40020470
 8006de4:	40020488 	.word	0x40020488
 8006de8:	400204a0 	.word	0x400204a0
 8006dec:	400204b8 	.word	0x400204b8
 8006df0:	aaaaaaab 	.word	0xaaaaaaab
 8006df4:	08014fc4 	.word	0x08014fc4
 8006df8:	fffffc00 	.word	0xfffffc00

08006dfc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d120      	bne.n	8006e52 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d858      	bhi.n	8006eca <DMA_CheckFifoParam+0xce>
 8006e18:	a201      	add	r2, pc, #4	@ (adr r2, 8006e20 <DMA_CheckFifoParam+0x24>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e31 	.word	0x08006e31
 8006e24:	08006e43 	.word	0x08006e43
 8006e28:	08006e31 	.word	0x08006e31
 8006e2c:	08006ecb 	.word	0x08006ecb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d048      	beq.n	8006ece <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e40:	e045      	b.n	8006ece <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006e4a:	d142      	bne.n	8006ed2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e50:	e03f      	b.n	8006ed2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e5a:	d123      	bne.n	8006ea4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e60:	2b03      	cmp	r3, #3
 8006e62:	d838      	bhi.n	8006ed6 <DMA_CheckFifoParam+0xda>
 8006e64:	a201      	add	r2, pc, #4	@ (adr r2, 8006e6c <DMA_CheckFifoParam+0x70>)
 8006e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6a:	bf00      	nop
 8006e6c:	08006e7d 	.word	0x08006e7d
 8006e70:	08006e83 	.word	0x08006e83
 8006e74:	08006e7d 	.word	0x08006e7d
 8006e78:	08006e95 	.word	0x08006e95
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
        break;
 8006e80:	e030      	b.n	8006ee4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d025      	beq.n	8006eda <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e92:	e022      	b.n	8006eda <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006e9c:	d11f      	bne.n	8006ede <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ea2:	e01c      	b.n	8006ede <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d902      	bls.n	8006eb2 <DMA_CheckFifoParam+0xb6>
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d003      	beq.n	8006eb8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006eb0:	e018      	b.n	8006ee4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	73fb      	strb	r3, [r7, #15]
        break;
 8006eb6:	e015      	b.n	8006ee4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00e      	beq.n	8006ee2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec8:	e00b      	b.n	8006ee2 <DMA_CheckFifoParam+0xe6>
        break;
 8006eca:	bf00      	nop
 8006ecc:	e00a      	b.n	8006ee4 <DMA_CheckFifoParam+0xe8>
        break;
 8006ece:	bf00      	nop
 8006ed0:	e008      	b.n	8006ee4 <DMA_CheckFifoParam+0xe8>
        break;
 8006ed2:	bf00      	nop
 8006ed4:	e006      	b.n	8006ee4 <DMA_CheckFifoParam+0xe8>
        break;
 8006ed6:	bf00      	nop
 8006ed8:	e004      	b.n	8006ee4 <DMA_CheckFifoParam+0xe8>
        break;
 8006eda:	bf00      	nop
 8006edc:	e002      	b.n	8006ee4 <DMA_CheckFifoParam+0xe8>
        break;
 8006ede:	bf00      	nop
 8006ee0:	e000      	b.n	8006ee4 <DMA_CheckFifoParam+0xe8>
    break;
 8006ee2:	bf00      	nop
    }
  }

  return status;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop

08006ef4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a38      	ldr	r2, [pc, #224]	@ (8006fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d022      	beq.n	8006f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a36      	ldr	r2, [pc, #216]	@ (8006fec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d01d      	beq.n	8006f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a35      	ldr	r2, [pc, #212]	@ (8006ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d018      	beq.n	8006f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a33      	ldr	r2, [pc, #204]	@ (8006ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d013      	beq.n	8006f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a32      	ldr	r2, [pc, #200]	@ (8006ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00e      	beq.n	8006f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a30      	ldr	r2, [pc, #192]	@ (8006ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d009      	beq.n	8006f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a2f      	ldr	r2, [pc, #188]	@ (8007000 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d004      	beq.n	8006f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a2d      	ldr	r2, [pc, #180]	@ (8007004 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d101      	bne.n	8006f56 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e000      	b.n	8006f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006f56:	2300      	movs	r3, #0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01a      	beq.n	8006f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	3b08      	subs	r3, #8
 8006f64:	4a28      	ldr	r2, [pc, #160]	@ (8007008 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006f66:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6a:	091b      	lsrs	r3, r3, #4
 8006f6c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4b26      	ldr	r3, [pc, #152]	@ (800700c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	461a      	mov	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a24      	ldr	r2, [pc, #144]	@ (8007010 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006f80:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f003 031f 	and.w	r3, r3, #31
 8006f88:	2201      	movs	r2, #1
 8006f8a:	409a      	lsls	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006f90:	e024      	b.n	8006fdc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	3b10      	subs	r3, #16
 8006f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8007014 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa0:	091b      	lsrs	r3, r3, #4
 8006fa2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8007018 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d806      	bhi.n	8006fba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4a1b      	ldr	r2, [pc, #108]	@ (800701c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d902      	bls.n	8006fba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4b18      	ldr	r3, [pc, #96]	@ (8007020 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a16      	ldr	r2, [pc, #88]	@ (8007024 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006fcc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f003 031f 	and.w	r3, r3, #31
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	409a      	lsls	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006fdc:	bf00      	nop
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	58025408 	.word	0x58025408
 8006fec:	5802541c 	.word	0x5802541c
 8006ff0:	58025430 	.word	0x58025430
 8006ff4:	58025444 	.word	0x58025444
 8006ff8:	58025458 	.word	0x58025458
 8006ffc:	5802546c 	.word	0x5802546c
 8007000:	58025480 	.word	0x58025480
 8007004:	58025494 	.word	0x58025494
 8007008:	cccccccd 	.word	0xcccccccd
 800700c:	16009600 	.word	0x16009600
 8007010:	58025880 	.word	0x58025880
 8007014:	aaaaaaab 	.word	0xaaaaaaab
 8007018:	400204b8 	.word	0x400204b8
 800701c:	4002040f 	.word	0x4002040f
 8007020:	10008200 	.word	0x10008200
 8007024:	40020880 	.word	0x40020880

08007028 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d04a      	beq.n	80070d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b08      	cmp	r3, #8
 8007042:	d847      	bhi.n	80070d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a25      	ldr	r2, [pc, #148]	@ (80070e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d022      	beq.n	8007094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a24      	ldr	r2, [pc, #144]	@ (80070e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d01d      	beq.n	8007094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a22      	ldr	r2, [pc, #136]	@ (80070e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d018      	beq.n	8007094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a21      	ldr	r2, [pc, #132]	@ (80070ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d013      	beq.n	8007094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1f      	ldr	r2, [pc, #124]	@ (80070f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00e      	beq.n	8007094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1e      	ldr	r2, [pc, #120]	@ (80070f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d009      	beq.n	8007094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1c      	ldr	r2, [pc, #112]	@ (80070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d004      	beq.n	8007094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1b      	ldr	r2, [pc, #108]	@ (80070fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d101      	bne.n	8007098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007094:	2301      	movs	r3, #1
 8007096:	e000      	b.n	800709a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007098:	2300      	movs	r3, #0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4b17      	ldr	r3, [pc, #92]	@ (8007100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	461a      	mov	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a15      	ldr	r2, [pc, #84]	@ (8007104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80070b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80070b2:	e009      	b.n	80070c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4b14      	ldr	r3, [pc, #80]	@ (8007108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	461a      	mov	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a11      	ldr	r2, [pc, #68]	@ (800710c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80070c6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	2201      	movs	r2, #1
 80070ce:	409a      	lsls	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80070d4:	bf00      	nop
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	58025408 	.word	0x58025408
 80070e4:	5802541c 	.word	0x5802541c
 80070e8:	58025430 	.word	0x58025430
 80070ec:	58025444 	.word	0x58025444
 80070f0:	58025458 	.word	0x58025458
 80070f4:	5802546c 	.word	0x5802546c
 80070f8:	58025480 	.word	0x58025480
 80070fc:	58025494 	.word	0x58025494
 8007100:	1600963f 	.word	0x1600963f
 8007104:	58025940 	.word	0x58025940
 8007108:	1000823f 	.word	0x1000823f
 800710c:	40020940 	.word	0x40020940

08007110 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b098      	sub	sp, #96	@ 0x60
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007118:	4a84      	ldr	r2, [pc, #528]	@ (800732c <HAL_FDCAN_Init+0x21c>)
 800711a:	f107 030c 	add.w	r3, r7, #12
 800711e:	4611      	mov	r1, r2
 8007120:	224c      	movs	r2, #76	@ 0x4c
 8007122:	4618      	mov	r0, r3
 8007124:	f00d f8b0 	bl	8014288 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e1c6      	b.n	80074c0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a7e      	ldr	r2, [pc, #504]	@ (8007330 <HAL_FDCAN_Init+0x220>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d106      	bne.n	800714a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007144:	461a      	mov	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fb f8ae 	bl	80022c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699a      	ldr	r2, [r3, #24]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0210 	bic.w	r2, r2, #16
 8007172:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007174:	f7fb fd1a 	bl	8002bac <HAL_GetTick>
 8007178:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800717a:	e014      	b.n	80071a6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800717c:	f7fb fd16 	bl	8002bac <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b0a      	cmp	r3, #10
 8007188:	d90d      	bls.n	80071a6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007190:	f043 0201 	orr.w	r2, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2203      	movs	r2, #3
 800719e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e18c      	b.n	80074c0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	f003 0308 	and.w	r3, r3, #8
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d0e3      	beq.n	800717c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699a      	ldr	r2, [r3, #24]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071c4:	f7fb fcf2 	bl	8002bac <HAL_GetTick>
 80071c8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80071ca:	e014      	b.n	80071f6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80071cc:	f7fb fcee 	bl	8002bac <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b0a      	cmp	r3, #10
 80071d8:	d90d      	bls.n	80071f6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071e0:	f043 0201 	orr.w	r2, r3, #1
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2203      	movs	r2, #3
 80071ee:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e164      	b.n	80074c0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0e3      	beq.n	80071cc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0202 	orr.w	r2, r2, #2
 8007212:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	7c1b      	ldrb	r3, [r3, #16]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d108      	bne.n	800722e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800722a:	619a      	str	r2, [r3, #24]
 800722c:	e007      	b.n	800723e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	699a      	ldr	r2, [r3, #24]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800723c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	7c5b      	ldrb	r3, [r3, #17]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d108      	bne.n	8007258 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	699a      	ldr	r2, [r3, #24]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007254:	619a      	str	r2, [r3, #24]
 8007256:	e007      	b.n	8007268 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007266:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	7c9b      	ldrb	r3, [r3, #18]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d108      	bne.n	8007282 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699a      	ldr	r2, [r3, #24]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800727e:	619a      	str	r2, [r3, #24]
 8007280:	e007      	b.n	8007292 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	699a      	ldr	r2, [r3, #24]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007290:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80072b6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691a      	ldr	r2, [r3, #16]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0210 	bic.w	r2, r2, #16
 80072c6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d108      	bne.n	80072e2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699a      	ldr	r2, [r3, #24]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f042 0204 	orr.w	r2, r2, #4
 80072de:	619a      	str	r2, [r3, #24]
 80072e0:	e030      	b.n	8007344 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d02c      	beq.n	8007344 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d020      	beq.n	8007334 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	699a      	ldr	r2, [r3, #24]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007300:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f042 0210 	orr.w	r2, r2, #16
 8007310:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	2b03      	cmp	r3, #3
 8007318:	d114      	bne.n	8007344 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	699a      	ldr	r2, [r3, #24]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f042 0220 	orr.w	r2, r2, #32
 8007328:	619a      	str	r2, [r3, #24]
 800732a:	e00b      	b.n	8007344 <HAL_FDCAN_Init+0x234>
 800732c:	08014f20 	.word	0x08014f20
 8007330:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0220 	orr.w	r2, r2, #32
 8007342:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	3b01      	subs	r3, #1
 800734a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	3b01      	subs	r3, #1
 8007352:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007354:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800735c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	3b01      	subs	r3, #1
 8007366:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800736c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800736e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007378:	d115      	bne.n	80073a6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007384:	3b01      	subs	r3, #1
 8007386:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007388:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738e:	3b01      	subs	r3, #1
 8007390:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007392:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739a:	3b01      	subs	r3, #1
 800739c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80073a2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073a4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073cc:	4413      	add	r3, r2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d011      	beq.n	80073f6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80073da:	f023 0107 	bic.w	r1, r3, #7
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	3360      	adds	r3, #96	@ 0x60
 80073e6:	443b      	add	r3, r7
 80073e8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d011      	beq.n	8007422 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007406:	f023 0107 	bic.w	r1, r3, #7
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	3360      	adds	r3, #96	@ 0x60
 8007412:	443b      	add	r3, r7
 8007414:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007426:	2b00      	cmp	r3, #0
 8007428:	d012      	beq.n	8007450 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007432:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	3360      	adds	r3, #96	@ 0x60
 800743e:	443b      	add	r3, r7
 8007440:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007444:	011a      	lsls	r2, r3, #4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007454:	2b00      	cmp	r3, #0
 8007456:	d012      	beq.n	800747e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007460:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	3360      	adds	r3, #96	@ 0x60
 800746c:	443b      	add	r3, r7
 800746e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007472:	021a      	lsls	r2, r3, #8
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a11      	ldr	r2, [pc, #68]	@ (80074c8 <HAL_FDCAN_Init+0x3b8>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d107      	bne.n	8007498 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f022 0203 	bic.w	r2, r2, #3
 8007496:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fe47 	bl	8008144 <FDCAN_CalcultateRamBlockAddresses>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80074bc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3760      	adds	r7, #96	@ 0x60
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	4000a000 	.word	0x4000a000

080074cc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80074dc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80074de:	7bfb      	ldrb	r3, [r7, #15]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d002      	beq.n	80074ea <HAL_FDCAN_ConfigFilter+0x1e>
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d157      	bne.n	800759a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d12b      	bne.n	800754a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	2b07      	cmp	r3, #7
 80074f8:	d10d      	bne.n	8007516 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8007506:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800750c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800750e:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	e00e      	b.n	8007534 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007522:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800752a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007530:	4313      	orrs	r3, r2
 8007532:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	e025      	b.n	8007596 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	075a      	lsls	r2, r3, #29
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	4313      	orrs	r3, r2
 8007556:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	2b07      	cmp	r3, #7
 800755e:	d103      	bne.n	8007568 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	e006      	b.n	8007576 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	079a      	lsls	r2, r3, #30
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	4313      	orrs	r3, r2
 8007574:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	4413      	add	r3, r2
 8007582:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	3304      	adds	r3, #4
 800758e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	e008      	b.n	80075ac <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075a0:	f043 0202 	orr.w	r2, r3, #2
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
  }
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	371c      	adds	r7, #28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d111      	bne.n	80075f0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 0201 	bic.w	r2, r2, #1
 80075e2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	e008      	b.n	8007602 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075f6:	f043 0204 	orr.w	r2, r3, #4
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
  }
}
 8007602:	4618      	mov	r0, r3
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b086      	sub	sp, #24
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	60b9      	str	r1, [r7, #8]
 8007618:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d141      	bne.n	80076aa <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800762e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800763c:	f043 0220 	orr.w	r2, r3, #32
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e038      	b.n	80076bc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007652:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007660:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e026      	b.n	80076bc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007676:	0c1b      	lsrs	r3, r3, #16
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	68b9      	ldr	r1, [r7, #8]
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 fee3 	bl	8008450 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2101      	movs	r1, #1
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	fa01 f202 	lsl.w	r2, r1, r2
 8007696:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800769a:	2201      	movs	r2, #1
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	409a      	lsls	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	e008      	b.n	80076bc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076b0:	f043 0208 	orr.w	r2, r3, #8
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
  }
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b08b      	sub	sp, #44	@ 0x2c
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80076dc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80076de:	7efb      	ldrb	r3, [r7, #27]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	f040 8149 	bne.w	8007978 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b40      	cmp	r3, #64	@ 0x40
 80076ea:	d14c      	bne.n	8007786 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076f4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d109      	bne.n	8007710 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007702:	f043 0220 	orr.w	r2, r3, #32
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e13c      	b.n	800798a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007718:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800771c:	2b00      	cmp	r3, #0
 800771e:	d109      	bne.n	8007734 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007726:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e12a      	b.n	800798a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800773c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007740:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007744:	d10a      	bne.n	800775c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800774e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007752:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007756:	d101      	bne.n	800775c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007758:	2301      	movs	r3, #1
 800775a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	4413      	add	r3, r2
 800776e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007778:	69f9      	ldr	r1, [r7, #28]
 800777a:	fb01 f303 	mul.w	r3, r1, r3
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	627b      	str	r3, [r7, #36]	@ 0x24
 8007784:	e068      	b.n	8007858 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b41      	cmp	r3, #65	@ 0x41
 800778a:	d14c      	bne.n	8007826 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007794:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d109      	bne.n	80077b0 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077a2:	f043 0220 	orr.w	r2, r3, #32
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e0ec      	b.n	800798a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d109      	bne.n	80077d4 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e0da      	b.n	800798a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077e4:	d10a      	bne.n	80077fc <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077f6:	d101      	bne.n	80077fc <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80077f8:	2301      	movs	r3, #1
 80077fa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007804:	0a1b      	lsrs	r3, r3, #8
 8007806:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800780a:	69fa      	ldr	r2, [r7, #28]
 800780c:	4413      	add	r3, r2
 800780e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007818:	69f9      	ldr	r1, [r7, #28]
 800781a:	fb01 f303 	mul.w	r3, r1, r3
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	627b      	str	r3, [r7, #36]	@ 0x24
 8007824:	e018      	b.n	8007858 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	429a      	cmp	r2, r3
 800782e:	d309      	bcc.n	8007844 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007836:	f043 0220 	orr.w	r2, r3, #32
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e0a2      	b.n	800798a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800784c:	68b9      	ldr	r1, [r7, #8]
 800784e:	fb01 f303 	mul.w	r3, r1, r3
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d107      	bne.n	800787c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	0c9b      	lsrs	r3, r3, #18
 8007872:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	e005      	b.n	8007888 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80078a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a2:	3304      	adds	r3, #4
 80078a4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80078b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	0c1b      	lsrs	r3, r3, #16
 80078b6:	f003 020f 	and.w	r2, r3, #15
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80078be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80078ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80078d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	0e1b      	lsrs	r3, r3, #24
 80078dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80078e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	0fda      	lsrs	r2, r3, #31
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	3304      	adds	r3, #4
 80078f2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80078f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80078f8:	2300      	movs	r3, #0
 80078fa:	623b      	str	r3, [r7, #32]
 80078fc:	e00a      	b.n	8007914 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	441a      	add	r2, r3
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	440b      	add	r3, r1
 800790a:	7812      	ldrb	r2, [r2, #0]
 800790c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	3301      	adds	r3, #1
 8007912:	623b      	str	r3, [r7, #32]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	4a1f      	ldr	r2, [pc, #124]	@ (8007998 <HAL_FDCAN_GetRxMessage+0x2d4>)
 800791a:	5cd3      	ldrb	r3, [r2, r3]
 800791c:	461a      	mov	r2, r3
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	4293      	cmp	r3, r2
 8007922:	d3ec      	bcc.n	80078fe <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b40      	cmp	r3, #64	@ 0x40
 8007928:	d105      	bne.n	8007936 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8007934:	e01e      	b.n	8007974 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b41      	cmp	r3, #65	@ 0x41
 800793a:	d105      	bne.n	8007948 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	69fa      	ldr	r2, [r7, #28]
 8007942:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8007946:	e015      	b.n	8007974 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2b1f      	cmp	r3, #31
 800794c:	d808      	bhi.n	8007960 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2101      	movs	r1, #1
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	fa01 f202 	lsl.w	r2, r1, r2
 800795a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800795e:	e009      	b.n	8007974 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f003 021f 	and.w	r2, r3, #31
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2101      	movs	r1, #1
 800796c:	fa01 f202 	lsl.w	r2, r1, r2
 8007970:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	e008      	b.n	800798a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800797e:	f043 0208 	orr.w	r2, r3, #8
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
  }
}
 800798a:	4618      	mov	r0, r3
 800798c:	372c      	adds	r7, #44	@ 0x2c
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	08014fcc 	.word	0x08014fcc

0800799c <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ac:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f003 0207 	and.w	r2, r3, #7
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	0a1b      	lsrs	r3, r3, #8
 80079bc:	f003 0207 	and.w	r2, r3, #7
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f003 0218 	and.w	r2, r3, #24
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	095b      	lsrs	r3, r3, #5
 80079d2:	f003 0201 	and.w	r2, r3, #1
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	099b      	lsrs	r3, r3, #6
 80079de:	f003 0201 	and.w	r2, r3, #1
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	09db      	lsrs	r3, r3, #7
 80079ea:	f003 0201 	and.w	r2, r3, #1
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	0adb      	lsrs	r3, r3, #11
 80079f6:	f003 0201 	and.w	r2, r3, #1
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	0b1b      	lsrs	r3, r3, #12
 8007a02:	f003 0201 	and.w	r2, r3, #1
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	0b5b      	lsrs	r3, r3, #13
 8007a0e:	f003 0201 	and.w	r2, r3, #1
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	0b9b      	lsrs	r3, r3, #14
 8007a1a:	f003 0201 	and.w	r2, r3, #1
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	0c1b      	lsrs	r3, r3, #16
 8007a26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007a4e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d002      	beq.n	8007a5c <HAL_FDCAN_ActivateNotification+0x20>
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d155      	bne.n	8007b08 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	4013      	ands	r3, r2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d108      	bne.n	8007a7c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f042 0201 	orr.w	r2, r2, #1
 8007a78:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a7a:	e014      	b.n	8007aa6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	4013      	ands	r3, r2
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d108      	bne.n	8007a9e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0202 	orr.w	r2, r2, #2
 8007a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a9c:	e003      	b.n	8007aa6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2203      	movs	r2, #3
 8007aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d009      	beq.n	8007ac4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d009      	beq.n	8007ae2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	4b0f      	ldr	r3, [pc, #60]	@ (8007b28 <HAL_FDCAN_ActivateNotification+0xec>)
 8007aec:	4013      	ands	r3, r2
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	6812      	ldr	r2, [r2, #0]
 8007af2:	430b      	orrs	r3, r1
 8007af4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007af6:	4b0d      	ldr	r3, [pc, #52]	@ (8007b2c <HAL_FDCAN_ActivateNotification+0xf0>)
 8007af8:	695a      	ldr	r2, [r3, #20]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	0f9b      	lsrs	r3, r3, #30
 8007afe:	490b      	ldr	r1, [pc, #44]	@ (8007b2c <HAL_FDCAN_ActivateNotification+0xf0>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	e008      	b.n	8007b1a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b0e:	f043 0202 	orr.w	r2, r3, #2
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
  }
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	3fcfffff 	.word	0x3fcfffff
 8007b2c:	4000a800 	.word	0x4000a800

08007b30 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b096      	sub	sp, #88	@ 0x58
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8007b38:	4b9a      	ldr	r3, [pc, #616]	@ (8007da4 <HAL_FDCAN_IRQHandler+0x274>)
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	079b      	lsls	r3, r3, #30
 8007b3e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007b40:	4b98      	ldr	r3, [pc, #608]	@ (8007da4 <HAL_FDCAN_IRQHandler+0x274>)
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	079b      	lsls	r3, r3, #30
 8007b46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b48:	4013      	ands	r3, r2
 8007b4a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b52:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007b56:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007b60:	4013      	ands	r3, r2
 8007b62:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b78:	4013      	ands	r3, r2
 8007b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b90:	4013      	ands	r3, r2
 8007b92:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b9a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8007b9e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ba8:	4013      	ands	r3, r2
 8007baa:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb2:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8007bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bd6:	0a1b      	lsrs	r3, r3, #8
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d010      	beq.n	8007c02 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be2:	0a1b      	lsrs	r3, r3, #8
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00a      	beq.n	8007c02 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bf4:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bf6:	4b6b      	ldr	r3, [pc, #428]	@ (8007da4 <HAL_FDCAN_IRQHandler+0x274>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fa54 	bl	80080aa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c04:	0a9b      	lsrs	r3, r3, #10
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d01d      	beq.n	8007c4a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c10:	0a9b      	lsrs	r3, r3, #10
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d017      	beq.n	8007c4a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007c22:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c2e:	4013      	ands	r3, r2
 8007c30:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c3c:	4b59      	ldr	r3, [pc, #356]	@ (8007da4 <HAL_FDCAN_IRQHandler+0x274>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007c42:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fa07 	bl	8008058 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00d      	beq.n	8007c6c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c56:	4b54      	ldr	r3, [pc, #336]	@ (8007da8 <HAL_FDCAN_IRQHandler+0x278>)
 8007c58:	400b      	ands	r3, r1
 8007c5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c5c:	4a51      	ldr	r2, [pc, #324]	@ (8007da4 <HAL_FDCAN_IRQHandler+0x274>)
 8007c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c60:	0f9b      	lsrs	r3, r3, #30
 8007c62:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007c64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f9c0 	bl	8007fec <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00d      	beq.n	8007c8e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c78:	4b4b      	ldr	r3, [pc, #300]	@ (8007da8 <HAL_FDCAN_IRQHandler+0x278>)
 8007c7a:	400b      	ands	r3, r1
 8007c7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c7e:	4a49      	ldr	r2, [pc, #292]	@ (8007da4 <HAL_FDCAN_IRQHandler+0x274>)
 8007c80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c82:	0f9b      	lsrs	r3, r3, #30
 8007c84:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007c86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f9ba 	bl	8008002 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00d      	beq.n	8007cb0 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007c9a:	4b43      	ldr	r3, [pc, #268]	@ (8007da8 <HAL_FDCAN_IRQHandler+0x278>)
 8007c9c:	400b      	ands	r3, r1
 8007c9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ca0:	4a40      	ldr	r2, [pc, #256]	@ (8007da4 <HAL_FDCAN_IRQHandler+0x274>)
 8007ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ca4:	0f9b      	lsrs	r3, r3, #30
 8007ca6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007ca8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7f9 fcac 	bl	8001608 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00d      	beq.n	8007cd2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8007da8 <HAL_FDCAN_IRQHandler+0x278>)
 8007cbe:	400b      	ands	r3, r1
 8007cc0:	6513      	str	r3, [r2, #80]	@ 0x50
 8007cc2:	4a38      	ldr	r2, [pc, #224]	@ (8007da4 <HAL_FDCAN_IRQHandler+0x274>)
 8007cc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc6:	0f9b      	lsrs	r3, r3, #30
 8007cc8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007cca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f9a3 	bl	8008018 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd4:	0adb      	lsrs	r3, r3, #11
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d010      	beq.n	8007d00 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce0:	0adb      	lsrs	r3, r3, #11
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cf2:	651a      	str	r2, [r3, #80]	@ 0x50
 8007cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8007da4 <HAL_FDCAN_IRQHandler+0x274>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f997 	bl	800802e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d02:	0a5b      	lsrs	r3, r3, #9
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01d      	beq.n	8007d48 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0e:	0a5b      	lsrs	r3, r3, #9
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d017      	beq.n	8007d48 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007d20:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d38:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8007da4 <HAL_FDCAN_IRQHandler+0x274>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007d40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f97d 	bl	8008042 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d4a:	0cdb      	lsrs	r3, r3, #19
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d010      	beq.n	8007d76 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d56:	0cdb      	lsrs	r3, r3, #19
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007d68:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8007da4 <HAL_FDCAN_IRQHandler+0x274>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f97c 	bl	800806e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d78:	0c1b      	lsrs	r3, r3, #16
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d016      	beq.n	8007db0 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d84:	0c1b      	lsrs	r3, r3, #16
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d010      	beq.n	8007db0 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007d96:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d98:	4b02      	ldr	r3, [pc, #8]	@ (8007da4 <HAL_FDCAN_IRQHandler+0x274>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	e004      	b.n	8007dac <HAL_FDCAN_IRQHandler+0x27c>
 8007da2:	bf00      	nop
 8007da4:	4000a800 	.word	0x4000a800
 8007da8:	3fcfffff 	.word	0x3fcfffff
 8007dac:	f000 f969 	bl	8008082 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007db2:	0c9b      	lsrs	r3, r3, #18
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d010      	beq.n	8007dde <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbe:	0c9b      	lsrs	r3, r3, #18
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007dd0:	651a      	str	r2, [r3, #80]	@ 0x50
 8007dd2:	4b83      	ldr	r3, [pc, #524]	@ (8007fe0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f95c 	bl	8008096 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007de0:	0c5b      	lsrs	r3, r3, #17
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d015      	beq.n	8007e16 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dec:	0c5b      	lsrs	r3, r3, #17
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00f      	beq.n	8007e16 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007dfe:	651a      	str	r2, [r3, #80]	@ 0x50
 8007e00:	4b77      	ldr	r3, [pc, #476]	@ (8007fe0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00d      	beq.n	8007e38 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e22:	4b70      	ldr	r3, [pc, #448]	@ (8007fe4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007e24:	400b      	ands	r3, r1
 8007e26:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e28:	4a6d      	ldr	r2, [pc, #436]	@ (8007fe0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e2c:	0f9b      	lsrs	r3, r3, #30
 8007e2e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f94d 	bl	80080d2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d011      	beq.n	8007e62 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e44:	4b67      	ldr	r3, [pc, #412]	@ (8007fe4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007e46:	400b      	ands	r3, r1
 8007e48:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e4a:	4a65      	ldr	r2, [pc, #404]	@ (8007fe0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e4e:	0f9b      	lsrs	r3, r3, #30
 8007e50:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007e58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a60      	ldr	r2, [pc, #384]	@ (8007fe8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	f040 80ac 	bne.w	8007fc6 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f003 0303 	and.w	r3, r3, #3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 80a4 	beq.w	8007fc6 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e92:	4013      	ands	r3, r2
 8007e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eaa:	4013      	ands	r3, r2
 8007eac:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8007eb8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8007ed0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed8:	6a3a      	ldr	r2, [r7, #32]
 8007eda:	4013      	ands	r3, r2
 8007edc:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8007ee8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef0:	69fa      	ldr	r2, [r7, #28]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efc:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d007      	beq.n	8007f1c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f12:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007f14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f8e6 	bl	80080e8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f28:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f8e6 	bl	80080fe <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	099b      	lsrs	r3, r3, #6
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01a      	beq.n	8007f74 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	099b      	lsrs	r3, r3, #6
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d014      	beq.n	8007f74 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f50:	0c1b      	lsrs	r3, r3, #16
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f60:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2240      	movs	r2, #64	@ 0x40
 8007f68:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	6939      	ldr	r1, [r7, #16]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f8d0 	bl	8008114 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d007      	beq.n	8007f8a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f80:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007f82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f8d1 	bl	800812c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00b      	beq.n	8007fa8 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	6a3a      	ldr	r2, [r7, #32]
 8007f96:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f874 	bl	80080be <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007fd6:	bf00      	nop
 8007fd8:	3758      	adds	r7, #88	@ 0x58
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	4000a800 	.word	0x4000a800
 8007fe4:	3fcfffff 	.word	0x3fcfffff
 8007fe8:	4000a000 	.word	0x4000a000

08007fec <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800809e:	bf00      	nop
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
	...

08008144 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008150:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800815a:	4ba7      	ldr	r3, [pc, #668]	@ (80083f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800815c:	4013      	ands	r3, r2
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	0091      	lsls	r1, r2, #2
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	6812      	ldr	r2, [r2, #0]
 8008166:	430b      	orrs	r3, r1
 8008168:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008174:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817c:	041a      	lsls	r2, r3, #16
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	4413      	add	r3, r2
 8008190:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800819a:	4b97      	ldr	r3, [pc, #604]	@ (80083f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800819c:	4013      	ands	r3, r2
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	0091      	lsls	r1, r2, #2
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	6812      	ldr	r2, [r2, #0]
 80081a6:	430b      	orrs	r3, r1
 80081a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081b4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081bc:	041a      	lsls	r2, r3, #16
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	4413      	add	r3, r2
 80081d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80081dc:	4b86      	ldr	r3, [pc, #536]	@ (80083f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80081de:	4013      	ands	r3, r2
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	0091      	lsls	r1, r2, #2
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	6812      	ldr	r2, [r2, #0]
 80081e8:	430b      	orrs	r3, r1
 80081ea:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081f6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081fe:	041a      	lsls	r2, r3, #16
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008212:	fb02 f303 	mul.w	r3, r2, r3
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	4413      	add	r3, r2
 800821a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008224:	4b74      	ldr	r3, [pc, #464]	@ (80083f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008226:	4013      	ands	r3, r2
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	0091      	lsls	r1, r2, #2
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	430b      	orrs	r3, r1
 8008232:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800823e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008246:	041a      	lsls	r2, r3, #16
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800825a:	fb02 f303 	mul.w	r3, r2, r3
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	4413      	add	r3, r2
 8008262:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800826c:	4b62      	ldr	r3, [pc, #392]	@ (80083f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800826e:	4013      	ands	r3, r2
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	0091      	lsls	r1, r2, #2
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	6812      	ldr	r2, [r2, #0]
 8008278:	430b      	orrs	r3, r1
 800827a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008286:	fb02 f303 	mul.w	r3, r2, r3
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	4413      	add	r3, r2
 800828e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008298:	4b57      	ldr	r3, [pc, #348]	@ (80083f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800829a:	4013      	ands	r3, r2
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	0091      	lsls	r1, r2, #2
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	6812      	ldr	r2, [r2, #0]
 80082a4:	430b      	orrs	r3, r1
 80082a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082b2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ba:	041a      	lsls	r2, r3, #16
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	4413      	add	r3, r2
 80082d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80082da:	4b47      	ldr	r3, [pc, #284]	@ (80083f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80082dc:	4013      	ands	r3, r2
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	0091      	lsls	r1, r2, #2
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	6812      	ldr	r2, [r2, #0]
 80082e6:	430b      	orrs	r3, r1
 80082e8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80082f4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082fc:	041a      	lsls	r2, r3, #16
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008310:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008318:	061a      	lsls	r2, r3, #24
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008328:	4b34      	ldr	r3, [pc, #208]	@ (80083fc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800832a:	4413      	add	r3, r2
 800832c:	009a      	lsls	r2, r3, #2
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	441a      	add	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	441a      	add	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800835e:	fb01 f303 	mul.w	r3, r1, r3
 8008362:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008364:	441a      	add	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008376:	fb01 f303 	mul.w	r3, r1, r3
 800837a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800837c:	441a      	add	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800838e:	fb01 f303 	mul.w	r3, r1, r3
 8008392:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008394:	441a      	add	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	441a      	add	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80083be:	fb01 f303 	mul.w	r3, r1, r3
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	441a      	add	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80083da:	fb01 f303 	mul.w	r3, r1, r3
 80083de:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80083e0:	441a      	add	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ee:	4a04      	ldr	r2, [pc, #16]	@ (8008400 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d915      	bls.n	8008420 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80083f4:	e006      	b.n	8008404 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80083f6:	bf00      	nop
 80083f8:	ffff0003 	.word	0xffff0003
 80083fc:	10002b00 	.word	0x10002b00
 8008400:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800840a:	f043 0220 	orr.w	r2, r3, #32
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2203      	movs	r2, #3
 8008418:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e010      	b.n	8008442 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	e005      	b.n	8008434 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3304      	adds	r3, #4
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	429a      	cmp	r2, r3
 800843e:	d3f3      	bcc.n	8008428 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop

08008450 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8008450:	b480      	push	{r7}
 8008452:	b089      	sub	sp, #36	@ 0x24
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
 800845c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10a      	bne.n	800847c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800846e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008476:	4313      	orrs	r3, r2
 8008478:	61fb      	str	r3, [r7, #28]
 800847a:	e00a      	b.n	8008492 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008484:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800848a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800848c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008490:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800849c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80084a2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80084a8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80084b0:	4313      	orrs	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	fb01 f303 	mul.w	r3, r1, r3
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	69fa      	ldr	r2, [r7, #28]
 80084ce:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	3304      	adds	r3, #4
 80084d4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	3304      	adds	r3, #4
 80084e0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80084e2:	2300      	movs	r3, #0
 80084e4:	617b      	str	r3, [r7, #20]
 80084e6:	e020      	b.n	800852a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	3303      	adds	r3, #3
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	4413      	add	r3, r2
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	3302      	adds	r3, #2
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	440b      	add	r3, r1
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008500:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	3301      	adds	r3, #1
 8008506:	6879      	ldr	r1, [r7, #4]
 8008508:	440b      	add	r3, r1
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800850e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	440a      	add	r2, r1
 8008516:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008518:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	3304      	adds	r3, #4
 8008522:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	3304      	adds	r3, #4
 8008528:	617b      	str	r3, [r7, #20]
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	4a06      	ldr	r2, [pc, #24]	@ (8008548 <FDCAN_CopyMessageToRAM+0xf8>)
 8008530:	5cd3      	ldrb	r3, [r2, r3]
 8008532:	461a      	mov	r2, r3
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	4293      	cmp	r3, r2
 8008538:	d3d6      	bcc.n	80084e8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800853a:	bf00      	nop
 800853c:	bf00      	nop
 800853e:	3724      	adds	r7, #36	@ 0x24
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	08014fcc 	.word	0x08014fcc

0800854c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800854c:	b480      	push	{r7}
 800854e:	b089      	sub	sp, #36	@ 0x24
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008556:	2300      	movs	r3, #0
 8008558:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800855a:	4b86      	ldr	r3, [pc, #536]	@ (8008774 <HAL_GPIO_Init+0x228>)
 800855c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800855e:	e18c      	b.n	800887a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	2101      	movs	r1, #1
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	fa01 f303 	lsl.w	r3, r1, r3
 800856c:	4013      	ands	r3, r2
 800856e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 817e 	beq.w	8008874 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f003 0303 	and.w	r3, r3, #3
 8008580:	2b01      	cmp	r3, #1
 8008582:	d005      	beq.n	8008590 <HAL_GPIO_Init+0x44>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f003 0303 	and.w	r3, r3, #3
 800858c:	2b02      	cmp	r3, #2
 800858e:	d130      	bne.n	80085f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	2203      	movs	r2, #3
 800859c:	fa02 f303 	lsl.w	r3, r2, r3
 80085a0:	43db      	mvns	r3, r3
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	4013      	ands	r3, r2
 80085a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	68da      	ldr	r2, [r3, #12]
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	fa02 f303 	lsl.w	r3, r2, r3
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80085c6:	2201      	movs	r2, #1
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	fa02 f303 	lsl.w	r3, r2, r3
 80085ce:	43db      	mvns	r3, r3
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	4013      	ands	r3, r2
 80085d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	091b      	lsrs	r3, r3, #4
 80085dc:	f003 0201 	and.w	r2, r3, #1
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	fa02 f303 	lsl.w	r3, r2, r3
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f003 0303 	and.w	r3, r3, #3
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d017      	beq.n	800862e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	2203      	movs	r2, #3
 800860a:	fa02 f303 	lsl.w	r3, r2, r3
 800860e:	43db      	mvns	r3, r3
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	4013      	ands	r3, r2
 8008614:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	689a      	ldr	r2, [r3, #8]
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	fa02 f303 	lsl.w	r3, r2, r3
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	4313      	orrs	r3, r2
 8008626:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f003 0303 	and.w	r3, r3, #3
 8008636:	2b02      	cmp	r3, #2
 8008638:	d123      	bne.n	8008682 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	08da      	lsrs	r2, r3, #3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3208      	adds	r2, #8
 8008642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	220f      	movs	r2, #15
 8008652:	fa02 f303 	lsl.w	r3, r2, r3
 8008656:	43db      	mvns	r3, r3
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	4013      	ands	r3, r2
 800865c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	691a      	ldr	r2, [r3, #16]
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	f003 0307 	and.w	r3, r3, #7
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	fa02 f303 	lsl.w	r3, r2, r3
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	4313      	orrs	r3, r2
 8008672:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	08da      	lsrs	r2, r3, #3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3208      	adds	r2, #8
 800867c:	69b9      	ldr	r1, [r7, #24]
 800867e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	2203      	movs	r2, #3
 800868e:	fa02 f303 	lsl.w	r3, r2, r3
 8008692:	43db      	mvns	r3, r3
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	4013      	ands	r3, r2
 8008698:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f003 0203 	and.w	r2, r3, #3
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	fa02 f303 	lsl.w	r3, r2, r3
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 80d8 	beq.w	8008874 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086c4:	4b2c      	ldr	r3, [pc, #176]	@ (8008778 <HAL_GPIO_Init+0x22c>)
 80086c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086ca:	4a2b      	ldr	r2, [pc, #172]	@ (8008778 <HAL_GPIO_Init+0x22c>)
 80086cc:	f043 0302 	orr.w	r3, r3, #2
 80086d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80086d4:	4b28      	ldr	r3, [pc, #160]	@ (8008778 <HAL_GPIO_Init+0x22c>)
 80086d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80086e2:	4a26      	ldr	r2, [pc, #152]	@ (800877c <HAL_GPIO_Init+0x230>)
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	089b      	lsrs	r3, r3, #2
 80086e8:	3302      	adds	r3, #2
 80086ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	220f      	movs	r2, #15
 80086fa:	fa02 f303 	lsl.w	r3, r2, r3
 80086fe:	43db      	mvns	r3, r3
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	4013      	ands	r3, r2
 8008704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a1d      	ldr	r2, [pc, #116]	@ (8008780 <HAL_GPIO_Init+0x234>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d04a      	beq.n	80087a4 <HAL_GPIO_Init+0x258>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a1c      	ldr	r2, [pc, #112]	@ (8008784 <HAL_GPIO_Init+0x238>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d02b      	beq.n	800876e <HAL_GPIO_Init+0x222>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a1b      	ldr	r2, [pc, #108]	@ (8008788 <HAL_GPIO_Init+0x23c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d025      	beq.n	800876a <HAL_GPIO_Init+0x21e>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a1a      	ldr	r2, [pc, #104]	@ (800878c <HAL_GPIO_Init+0x240>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d01f      	beq.n	8008766 <HAL_GPIO_Init+0x21a>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a19      	ldr	r2, [pc, #100]	@ (8008790 <HAL_GPIO_Init+0x244>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d019      	beq.n	8008762 <HAL_GPIO_Init+0x216>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a18      	ldr	r2, [pc, #96]	@ (8008794 <HAL_GPIO_Init+0x248>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d013      	beq.n	800875e <HAL_GPIO_Init+0x212>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a17      	ldr	r2, [pc, #92]	@ (8008798 <HAL_GPIO_Init+0x24c>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00d      	beq.n	800875a <HAL_GPIO_Init+0x20e>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a16      	ldr	r2, [pc, #88]	@ (800879c <HAL_GPIO_Init+0x250>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d007      	beq.n	8008756 <HAL_GPIO_Init+0x20a>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a15      	ldr	r2, [pc, #84]	@ (80087a0 <HAL_GPIO_Init+0x254>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d101      	bne.n	8008752 <HAL_GPIO_Init+0x206>
 800874e:	2309      	movs	r3, #9
 8008750:	e029      	b.n	80087a6 <HAL_GPIO_Init+0x25a>
 8008752:	230a      	movs	r3, #10
 8008754:	e027      	b.n	80087a6 <HAL_GPIO_Init+0x25a>
 8008756:	2307      	movs	r3, #7
 8008758:	e025      	b.n	80087a6 <HAL_GPIO_Init+0x25a>
 800875a:	2306      	movs	r3, #6
 800875c:	e023      	b.n	80087a6 <HAL_GPIO_Init+0x25a>
 800875e:	2305      	movs	r3, #5
 8008760:	e021      	b.n	80087a6 <HAL_GPIO_Init+0x25a>
 8008762:	2304      	movs	r3, #4
 8008764:	e01f      	b.n	80087a6 <HAL_GPIO_Init+0x25a>
 8008766:	2303      	movs	r3, #3
 8008768:	e01d      	b.n	80087a6 <HAL_GPIO_Init+0x25a>
 800876a:	2302      	movs	r3, #2
 800876c:	e01b      	b.n	80087a6 <HAL_GPIO_Init+0x25a>
 800876e:	2301      	movs	r3, #1
 8008770:	e019      	b.n	80087a6 <HAL_GPIO_Init+0x25a>
 8008772:	bf00      	nop
 8008774:	58000080 	.word	0x58000080
 8008778:	58024400 	.word	0x58024400
 800877c:	58000400 	.word	0x58000400
 8008780:	58020000 	.word	0x58020000
 8008784:	58020400 	.word	0x58020400
 8008788:	58020800 	.word	0x58020800
 800878c:	58020c00 	.word	0x58020c00
 8008790:	58021000 	.word	0x58021000
 8008794:	58021400 	.word	0x58021400
 8008798:	58021800 	.word	0x58021800
 800879c:	58021c00 	.word	0x58021c00
 80087a0:	58022400 	.word	0x58022400
 80087a4:	2300      	movs	r3, #0
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	f002 0203 	and.w	r2, r2, #3
 80087ac:	0092      	lsls	r2, r2, #2
 80087ae:	4093      	lsls	r3, r2
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087b6:	4938      	ldr	r1, [pc, #224]	@ (8008898 <HAL_GPIO_Init+0x34c>)
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	089b      	lsrs	r3, r3, #2
 80087bc:	3302      	adds	r3, #2
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80087c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	43db      	mvns	r3, r3
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	4013      	ands	r3, r2
 80087d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80087ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80087f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	43db      	mvns	r3, r3
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	4013      	ands	r3, r2
 8008802:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	4313      	orrs	r3, r2
 8008816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008818:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	43db      	mvns	r3, r3
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	4013      	ands	r3, r2
 800882e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800883c:	69ba      	ldr	r2, [r7, #24]
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	4313      	orrs	r3, r2
 8008842:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	69ba      	ldr	r2, [r7, #24]
 8008848:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	43db      	mvns	r3, r3
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	4013      	ands	r3, r2
 8008858:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	4313      	orrs	r3, r2
 800886c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	3301      	adds	r3, #1
 8008878:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	fa22 f303 	lsr.w	r3, r2, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	f47f ae6b 	bne.w	8008560 <HAL_GPIO_Init+0x14>
  }
}
 800888a:	bf00      	nop
 800888c:	bf00      	nop
 800888e:	3724      	adds	r7, #36	@ 0x24
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	58000400 	.word	0x58000400

0800889c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	691a      	ldr	r2, [r3, #16]
 80088ac:	887b      	ldrh	r3, [r7, #2]
 80088ae:	4013      	ands	r3, r2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80088b4:	2301      	movs	r3, #1
 80088b6:	73fb      	strb	r3, [r7, #15]
 80088b8:	e001      	b.n	80088be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80088be:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	807b      	strh	r3, [r7, #2]
 80088d8:	4613      	mov	r3, r2
 80088da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80088dc:	787b      	ldrb	r3, [r7, #1]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80088e2:	887a      	ldrh	r2, [r7, #2]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80088e8:	e003      	b.n	80088f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80088ea:	887b      	ldrh	r3, [r7, #2]
 80088ec:	041a      	lsls	r2, r3, #16
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	619a      	str	r2, [r3, #24]
}
 80088f2:	bf00      	nop
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
	...

08008900 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008908:	4b19      	ldr	r3, [pc, #100]	@ (8008970 <HAL_PWREx_ConfigSupply+0x70>)
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b04      	cmp	r3, #4
 8008912:	d00a      	beq.n	800892a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008914:	4b16      	ldr	r3, [pc, #88]	@ (8008970 <HAL_PWREx_ConfigSupply+0x70>)
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f003 0307 	and.w	r3, r3, #7
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	429a      	cmp	r2, r3
 8008920:	d001      	beq.n	8008926 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e01f      	b.n	8008966 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	e01d      	b.n	8008966 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800892a:	4b11      	ldr	r3, [pc, #68]	@ (8008970 <HAL_PWREx_ConfigSupply+0x70>)
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	f023 0207 	bic.w	r2, r3, #7
 8008932:	490f      	ldr	r1, [pc, #60]	@ (8008970 <HAL_PWREx_ConfigSupply+0x70>)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4313      	orrs	r3, r2
 8008938:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800893a:	f7fa f937 	bl	8002bac <HAL_GetTick>
 800893e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008940:	e009      	b.n	8008956 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008942:	f7fa f933 	bl	8002bac <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008950:	d901      	bls.n	8008956 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e007      	b.n	8008966 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008956:	4b06      	ldr	r3, [pc, #24]	@ (8008970 <HAL_PWREx_ConfigSupply+0x70>)
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800895e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008962:	d1ee      	bne.n	8008942 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	58024800 	.word	0x58024800

08008974 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08c      	sub	sp, #48	@ 0x30
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e3c8      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 8087 	beq.w	8008aa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008994:	4b88      	ldr	r3, [pc, #544]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800899c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800899e:	4b86      	ldr	r3, [pc, #536]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 80089a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80089a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a6:	2b10      	cmp	r3, #16
 80089a8:	d007      	beq.n	80089ba <HAL_RCC_OscConfig+0x46>
 80089aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ac:	2b18      	cmp	r3, #24
 80089ae:	d110      	bne.n	80089d2 <HAL_RCC_OscConfig+0x5e>
 80089b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d10b      	bne.n	80089d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089ba:	4b7f      	ldr	r3, [pc, #508]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d06c      	beq.n	8008aa0 <HAL_RCC_OscConfig+0x12c>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d168      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e3a2      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089da:	d106      	bne.n	80089ea <HAL_RCC_OscConfig+0x76>
 80089dc:	4b76      	ldr	r3, [pc, #472]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a75      	ldr	r2, [pc, #468]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 80089e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	e02e      	b.n	8008a48 <HAL_RCC_OscConfig+0xd4>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10c      	bne.n	8008a0c <HAL_RCC_OscConfig+0x98>
 80089f2:	4b71      	ldr	r3, [pc, #452]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a70      	ldr	r2, [pc, #448]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 80089f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	4b6e      	ldr	r3, [pc, #440]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a6d      	ldr	r2, [pc, #436]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008a04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a08:	6013      	str	r3, [r2, #0]
 8008a0a:	e01d      	b.n	8008a48 <HAL_RCC_OscConfig+0xd4>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a14:	d10c      	bne.n	8008a30 <HAL_RCC_OscConfig+0xbc>
 8008a16:	4b68      	ldr	r3, [pc, #416]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a67      	ldr	r2, [pc, #412]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a20:	6013      	str	r3, [r2, #0]
 8008a22:	4b65      	ldr	r3, [pc, #404]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a64      	ldr	r2, [pc, #400]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	e00b      	b.n	8008a48 <HAL_RCC_OscConfig+0xd4>
 8008a30:	4b61      	ldr	r3, [pc, #388]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a60      	ldr	r2, [pc, #384]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	4b5e      	ldr	r3, [pc, #376]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a5d      	ldr	r2, [pc, #372]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d013      	beq.n	8008a78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a50:	f7fa f8ac 	bl	8002bac <HAL_GetTick>
 8008a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a56:	e008      	b.n	8008a6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a58:	f7fa f8a8 	bl	8002bac <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	2b64      	cmp	r3, #100	@ 0x64
 8008a64:	d901      	bls.n	8008a6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e356      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a6a:	4b53      	ldr	r3, [pc, #332]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0f0      	beq.n	8008a58 <HAL_RCC_OscConfig+0xe4>
 8008a76:	e014      	b.n	8008aa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a78:	f7fa f898 	bl	8002bac <HAL_GetTick>
 8008a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a7e:	e008      	b.n	8008a92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a80:	f7fa f894 	bl	8002bac <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	2b64      	cmp	r3, #100	@ 0x64
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e342      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a92:	4b49      	ldr	r3, [pc, #292]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1f0      	bne.n	8008a80 <HAL_RCC_OscConfig+0x10c>
 8008a9e:	e000      	b.n	8008aa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0302 	and.w	r3, r3, #2
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 808c 	beq.w	8008bc8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ab0:	4b41      	ldr	r3, [pc, #260]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ab8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008aba:	4b3f      	ldr	r3, [pc, #252]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008abe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d007      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x162>
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	2b18      	cmp	r3, #24
 8008aca:	d137      	bne.n	8008b3c <HAL_RCC_OscConfig+0x1c8>
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d132      	bne.n	8008b3c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ad6:	4b38      	ldr	r3, [pc, #224]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0304 	and.w	r3, r3, #4
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d005      	beq.n	8008aee <HAL_RCC_OscConfig+0x17a>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e314      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008aee:	4b32      	ldr	r3, [pc, #200]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f023 0219 	bic.w	r2, r3, #25
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	492f      	ldr	r1, [pc, #188]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b00:	f7fa f854 	bl	8002bac <HAL_GetTick>
 8008b04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b06:	e008      	b.n	8008b1a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b08:	f7fa f850 	bl	8002bac <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d901      	bls.n	8008b1a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e2fe      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b1a:	4b27      	ldr	r3, [pc, #156]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0304 	and.w	r3, r3, #4
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0f0      	beq.n	8008b08 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b26:	4b24      	ldr	r3, [pc, #144]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	061b      	lsls	r3, r3, #24
 8008b34:	4920      	ldr	r1, [pc, #128]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b3a:	e045      	b.n	8008bc8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d026      	beq.n	8008b92 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008b44:	4b1c      	ldr	r3, [pc, #112]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f023 0219 	bic.w	r2, r3, #25
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	4919      	ldr	r1, [pc, #100]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008b52:	4313      	orrs	r3, r2
 8008b54:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b56:	f7fa f829 	bl	8002bac <HAL_GetTick>
 8008b5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b5c:	e008      	b.n	8008b70 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b5e:	f7fa f825 	bl	8002bac <HAL_GetTick>
 8008b62:	4602      	mov	r2, r0
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d901      	bls.n	8008b70 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e2d3      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b70:	4b11      	ldr	r3, [pc, #68]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0f0      	beq.n	8008b5e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	061b      	lsls	r3, r3, #24
 8008b8a:	490b      	ldr	r1, [pc, #44]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	604b      	str	r3, [r1, #4]
 8008b90:	e01a      	b.n	8008bc8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b92:	4b09      	ldr	r3, [pc, #36]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a08      	ldr	r2, [pc, #32]	@ (8008bb8 <HAL_RCC_OscConfig+0x244>)
 8008b98:	f023 0301 	bic.w	r3, r3, #1
 8008b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b9e:	f7fa f805 	bl	8002bac <HAL_GetTick>
 8008ba2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ba4:	e00a      	b.n	8008bbc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ba6:	f7fa f801 	bl	8002bac <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d903      	bls.n	8008bbc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e2af      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
 8008bb8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008bbc:	4b96      	ldr	r3, [pc, #600]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1ee      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0310 	and.w	r3, r3, #16
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d06a      	beq.n	8008caa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bd4:	4b90      	ldr	r3, [pc, #576]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bdc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008bde:	4b8e      	ldr	r3, [pc, #568]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	2b08      	cmp	r3, #8
 8008be8:	d007      	beq.n	8008bfa <HAL_RCC_OscConfig+0x286>
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	2b18      	cmp	r3, #24
 8008bee:	d11b      	bne.n	8008c28 <HAL_RCC_OscConfig+0x2b4>
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d116      	bne.n	8008c28 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bfa:	4b87      	ldr	r3, [pc, #540]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d005      	beq.n	8008c12 <HAL_RCC_OscConfig+0x29e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	2b80      	cmp	r3, #128	@ 0x80
 8008c0c:	d001      	beq.n	8008c12 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e282      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c12:	4b81      	ldr	r3, [pc, #516]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	061b      	lsls	r3, r3, #24
 8008c20:	497d      	ldr	r1, [pc, #500]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008c22:	4313      	orrs	r3, r2
 8008c24:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008c26:	e040      	b.n	8008caa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d023      	beq.n	8008c78 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008c30:	4b79      	ldr	r3, [pc, #484]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a78      	ldr	r2, [pc, #480]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c3c:	f7f9 ffb6 	bl	8002bac <HAL_GetTick>
 8008c40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c42:	e008      	b.n	8008c56 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c44:	f7f9 ffb2 	bl	8002bac <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d901      	bls.n	8008c56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e260      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c56:	4b70      	ldr	r3, [pc, #448]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0f0      	beq.n	8008c44 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c62:	4b6d      	ldr	r3, [pc, #436]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	061b      	lsls	r3, r3, #24
 8008c70:	4969      	ldr	r1, [pc, #420]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60cb      	str	r3, [r1, #12]
 8008c76:	e018      	b.n	8008caa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c78:	4b67      	ldr	r3, [pc, #412]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a66      	ldr	r2, [pc, #408]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008c7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c84:	f7f9 ff92 	bl	8002bac <HAL_GetTick>
 8008c88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c8a:	e008      	b.n	8008c9e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c8c:	f7f9 ff8e 	bl	8002bac <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e23c      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c9e:	4b5e      	ldr	r3, [pc, #376]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1f0      	bne.n	8008c8c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0308 	and.w	r3, r3, #8
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d036      	beq.n	8008d24 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d019      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cbe:	4b56      	ldr	r3, [pc, #344]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cc2:	4a55      	ldr	r2, [pc, #340]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008cc4:	f043 0301 	orr.w	r3, r3, #1
 8008cc8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cca:	f7f9 ff6f 	bl	8002bac <HAL_GetTick>
 8008cce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cd0:	e008      	b.n	8008ce4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cd2:	f7f9 ff6b 	bl	8002bac <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d901      	bls.n	8008ce4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e219      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ce4:	4b4c      	ldr	r3, [pc, #304]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d0f0      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x35e>
 8008cf0:	e018      	b.n	8008d24 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cf2:	4b49      	ldr	r3, [pc, #292]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cf6:	4a48      	ldr	r2, [pc, #288]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008cf8:	f023 0301 	bic.w	r3, r3, #1
 8008cfc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cfe:	f7f9 ff55 	bl	8002bac <HAL_GetTick>
 8008d02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008d04:	e008      	b.n	8008d18 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d06:	f7f9 ff51 	bl	8002bac <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d901      	bls.n	8008d18 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e1ff      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008d18:	4b3f      	ldr	r3, [pc, #252]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d1c:	f003 0302 	and.w	r3, r3, #2
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1f0      	bne.n	8008d06 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0320 	and.w	r3, r3, #32
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d036      	beq.n	8008d9e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d019      	beq.n	8008d6c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d38:	4b37      	ldr	r3, [pc, #220]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a36      	ldr	r2, [pc, #216]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008d3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008d42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d44:	f7f9 ff32 	bl	8002bac <HAL_GetTick>
 8008d48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d4a:	e008      	b.n	8008d5e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d4c:	f7f9 ff2e 	bl	8002bac <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e1dc      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0f0      	beq.n	8008d4c <HAL_RCC_OscConfig+0x3d8>
 8008d6a:	e018      	b.n	8008d9e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a29      	ldr	r2, [pc, #164]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008d72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d78:	f7f9 ff18 	bl	8002bac <HAL_GetTick>
 8008d7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d7e:	e008      	b.n	8008d92 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d80:	f7f9 ff14 	bl	8002bac <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d901      	bls.n	8008d92 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e1c2      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d92:	4b21      	ldr	r3, [pc, #132]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1f0      	bne.n	8008d80 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0304 	and.w	r3, r3, #4
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 8086 	beq.w	8008eb8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008dac:	4b1b      	ldr	r3, [pc, #108]	@ (8008e1c <HAL_RCC_OscConfig+0x4a8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a1a      	ldr	r2, [pc, #104]	@ (8008e1c <HAL_RCC_OscConfig+0x4a8>)
 8008db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008db8:	f7f9 fef8 	bl	8002bac <HAL_GetTick>
 8008dbc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dc0:	f7f9 fef4 	bl	8002bac <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b64      	cmp	r3, #100	@ 0x64
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e1a2      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dd2:	4b12      	ldr	r3, [pc, #72]	@ (8008e1c <HAL_RCC_OscConfig+0x4a8>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d0f0      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d106      	bne.n	8008df4 <HAL_RCC_OscConfig+0x480>
 8008de6:	4b0c      	ldr	r3, [pc, #48]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dea:	4a0b      	ldr	r2, [pc, #44]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008dec:	f043 0301 	orr.w	r3, r3, #1
 8008df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008df2:	e032      	b.n	8008e5a <HAL_RCC_OscConfig+0x4e6>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d111      	bne.n	8008e20 <HAL_RCC_OscConfig+0x4ac>
 8008dfc:	4b06      	ldr	r3, [pc, #24]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e00:	4a05      	ldr	r2, [pc, #20]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008e02:	f023 0301 	bic.w	r3, r3, #1
 8008e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e08:	4b03      	ldr	r3, [pc, #12]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e0c:	4a02      	ldr	r2, [pc, #8]	@ (8008e18 <HAL_RCC_OscConfig+0x4a4>)
 8008e0e:	f023 0304 	bic.w	r3, r3, #4
 8008e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e14:	e021      	b.n	8008e5a <HAL_RCC_OscConfig+0x4e6>
 8008e16:	bf00      	nop
 8008e18:	58024400 	.word	0x58024400
 8008e1c:	58024800 	.word	0x58024800
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	2b05      	cmp	r3, #5
 8008e26:	d10c      	bne.n	8008e42 <HAL_RCC_OscConfig+0x4ce>
 8008e28:	4b83      	ldr	r3, [pc, #524]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e2c:	4a82      	ldr	r2, [pc, #520]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008e2e:	f043 0304 	orr.w	r3, r3, #4
 8008e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e34:	4b80      	ldr	r3, [pc, #512]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e38:	4a7f      	ldr	r2, [pc, #508]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008e3a:	f043 0301 	orr.w	r3, r3, #1
 8008e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e40:	e00b      	b.n	8008e5a <HAL_RCC_OscConfig+0x4e6>
 8008e42:	4b7d      	ldr	r3, [pc, #500]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e46:	4a7c      	ldr	r2, [pc, #496]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008e48:	f023 0301 	bic.w	r3, r3, #1
 8008e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e52:	4a79      	ldr	r2, [pc, #484]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008e54:	f023 0304 	bic.w	r3, r3, #4
 8008e58:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d015      	beq.n	8008e8e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e62:	f7f9 fea3 	bl	8002bac <HAL_GetTick>
 8008e66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e68:	e00a      	b.n	8008e80 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e6a:	f7f9 fe9f 	bl	8002bac <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d901      	bls.n	8008e80 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e14b      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e80:	4b6d      	ldr	r3, [pc, #436]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d0ee      	beq.n	8008e6a <HAL_RCC_OscConfig+0x4f6>
 8008e8c:	e014      	b.n	8008eb8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e8e:	f7f9 fe8d 	bl	8002bac <HAL_GetTick>
 8008e92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e94:	e00a      	b.n	8008eac <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e96:	f7f9 fe89 	bl	8002bac <HAL_GetTick>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d901      	bls.n	8008eac <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e135      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008eac:	4b62      	ldr	r3, [pc, #392]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eb0:	f003 0302 	and.w	r3, r3, #2
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1ee      	bne.n	8008e96 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 812a 	beq.w	8009116 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008ec2:	4b5d      	ldr	r3, [pc, #372]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008eca:	2b18      	cmp	r3, #24
 8008ecc:	f000 80ba 	beq.w	8009044 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	f040 8095 	bne.w	8009004 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eda:	4b57      	ldr	r3, [pc, #348]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a56      	ldr	r2, [pc, #344]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008ee0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee6:	f7f9 fe61 	bl	8002bac <HAL_GetTick>
 8008eea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eec:	e008      	b.n	8008f00 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eee:	f7f9 fe5d 	bl	8002bac <HAL_GetTick>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d901      	bls.n	8008f00 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008efc:	2303      	movs	r3, #3
 8008efe:	e10b      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f00:	4b4d      	ldr	r3, [pc, #308]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1f0      	bne.n	8008eee <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008f0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f10:	4b4a      	ldr	r3, [pc, #296]	@ (800903c <HAL_RCC_OscConfig+0x6c8>)
 8008f12:	4013      	ands	r3, r2
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008f1c:	0112      	lsls	r2, r2, #4
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	4945      	ldr	r1, [pc, #276]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f34:	3b01      	subs	r3, #1
 8008f36:	025b      	lsls	r3, r3, #9
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f40:	3b01      	subs	r3, #1
 8008f42:	041b      	lsls	r3, r3, #16
 8008f44:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	061b      	lsls	r3, r3, #24
 8008f52:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f56:	4938      	ldr	r1, [pc, #224]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008f5c:	4b36      	ldr	r3, [pc, #216]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f60:	4a35      	ldr	r2, [pc, #212]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008f62:	f023 0301 	bic.w	r3, r3, #1
 8008f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f68:	4b33      	ldr	r3, [pc, #204]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008f6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f6c:	4b34      	ldr	r3, [pc, #208]	@ (8009040 <HAL_RCC_OscConfig+0x6cc>)
 8008f6e:	4013      	ands	r3, r2
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008f74:	00d2      	lsls	r2, r2, #3
 8008f76:	4930      	ldr	r1, [pc, #192]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f80:	f023 020c 	bic.w	r2, r3, #12
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f88:	492b      	ldr	r1, [pc, #172]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f92:	f023 0202 	bic.w	r2, r3, #2
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f9a:	4927      	ldr	r1, [pc, #156]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008fa0:	4b25      	ldr	r3, [pc, #148]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa4:	4a24      	ldr	r2, [pc, #144]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fac:	4b22      	ldr	r3, [pc, #136]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb0:	4a21      	ldr	r2, [pc, #132]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008fbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008fca:	f043 0301 	orr.w	r3, r3, #1
 8008fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fd0:	4b19      	ldr	r3, [pc, #100]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a18      	ldr	r2, [pc, #96]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fdc:	f7f9 fde6 	bl	8002bac <HAL_GetTick>
 8008fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fe2:	e008      	b.n	8008ff6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fe4:	f7f9 fde2 	bl	8002bac <HAL_GetTick>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d901      	bls.n	8008ff6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e090      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ff6:	4b10      	ldr	r3, [pc, #64]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d0f0      	beq.n	8008fe4 <HAL_RCC_OscConfig+0x670>
 8009002:	e088      	b.n	8009116 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009004:	4b0c      	ldr	r3, [pc, #48]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a0b      	ldr	r2, [pc, #44]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 800900a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800900e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009010:	f7f9 fdcc 	bl	8002bac <HAL_GetTick>
 8009014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009016:	e008      	b.n	800902a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009018:	f7f9 fdc8 	bl	8002bac <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	2b02      	cmp	r3, #2
 8009024:	d901      	bls.n	800902a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e076      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800902a:	4b03      	ldr	r3, [pc, #12]	@ (8009038 <HAL_RCC_OscConfig+0x6c4>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1f0      	bne.n	8009018 <HAL_RCC_OscConfig+0x6a4>
 8009036:	e06e      	b.n	8009116 <HAL_RCC_OscConfig+0x7a2>
 8009038:	58024400 	.word	0x58024400
 800903c:	fffffc0c 	.word	0xfffffc0c
 8009040:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009044:	4b36      	ldr	r3, [pc, #216]	@ (8009120 <HAL_RCC_OscConfig+0x7ac>)
 8009046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009048:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800904a:	4b35      	ldr	r3, [pc, #212]	@ (8009120 <HAL_RCC_OscConfig+0x7ac>)
 800904c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800904e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009054:	2b01      	cmp	r3, #1
 8009056:	d031      	beq.n	80090bc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f003 0203 	and.w	r2, r3, #3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009062:	429a      	cmp	r2, r3
 8009064:	d12a      	bne.n	80090bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	091b      	lsrs	r3, r3, #4
 800906a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009072:	429a      	cmp	r2, r3
 8009074:	d122      	bne.n	80090bc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009080:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009082:	429a      	cmp	r2, r3
 8009084:	d11a      	bne.n	80090bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	0a5b      	lsrs	r3, r3, #9
 800908a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009092:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009094:	429a      	cmp	r2, r3
 8009096:	d111      	bne.n	80090bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	0c1b      	lsrs	r3, r3, #16
 800909c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d108      	bne.n	80090bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	0e1b      	lsrs	r3, r3, #24
 80090ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d001      	beq.n	80090c0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e02b      	b.n	8009118 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80090c0:	4b17      	ldr	r3, [pc, #92]	@ (8009120 <HAL_RCC_OscConfig+0x7ac>)
 80090c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090c4:	08db      	lsrs	r3, r3, #3
 80090c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d01f      	beq.n	8009116 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80090d6:	4b12      	ldr	r3, [pc, #72]	@ (8009120 <HAL_RCC_OscConfig+0x7ac>)
 80090d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090da:	4a11      	ldr	r2, [pc, #68]	@ (8009120 <HAL_RCC_OscConfig+0x7ac>)
 80090dc:	f023 0301 	bic.w	r3, r3, #1
 80090e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80090e2:	f7f9 fd63 	bl	8002bac <HAL_GetTick>
 80090e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80090e8:	bf00      	nop
 80090ea:	f7f9 fd5f 	bl	8002bac <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d0f9      	beq.n	80090ea <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80090f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009120 <HAL_RCC_OscConfig+0x7ac>)
 80090f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009124 <HAL_RCC_OscConfig+0x7b0>)
 80090fc:	4013      	ands	r3, r2
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009102:	00d2      	lsls	r2, r2, #3
 8009104:	4906      	ldr	r1, [pc, #24]	@ (8009120 <HAL_RCC_OscConfig+0x7ac>)
 8009106:	4313      	orrs	r3, r2
 8009108:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800910a:	4b05      	ldr	r3, [pc, #20]	@ (8009120 <HAL_RCC_OscConfig+0x7ac>)
 800910c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910e:	4a04      	ldr	r2, [pc, #16]	@ (8009120 <HAL_RCC_OscConfig+0x7ac>)
 8009110:	f043 0301 	orr.w	r3, r3, #1
 8009114:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3730      	adds	r7, #48	@ 0x30
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	58024400 	.word	0x58024400
 8009124:	ffff0007 	.word	0xffff0007

08009128 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e19c      	b.n	8009476 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800913c:	4b8a      	ldr	r3, [pc, #552]	@ (8009368 <HAL_RCC_ClockConfig+0x240>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 030f 	and.w	r3, r3, #15
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d910      	bls.n	800916c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800914a:	4b87      	ldr	r3, [pc, #540]	@ (8009368 <HAL_RCC_ClockConfig+0x240>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f023 020f 	bic.w	r2, r3, #15
 8009152:	4985      	ldr	r1, [pc, #532]	@ (8009368 <HAL_RCC_ClockConfig+0x240>)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	4313      	orrs	r3, r2
 8009158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800915a:	4b83      	ldr	r3, [pc, #524]	@ (8009368 <HAL_RCC_ClockConfig+0x240>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 030f 	and.w	r3, r3, #15
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	429a      	cmp	r2, r3
 8009166:	d001      	beq.n	800916c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e184      	b.n	8009476 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 0304 	and.w	r3, r3, #4
 8009174:	2b00      	cmp	r3, #0
 8009176:	d010      	beq.n	800919a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691a      	ldr	r2, [r3, #16]
 800917c:	4b7b      	ldr	r3, [pc, #492]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009184:	429a      	cmp	r2, r3
 8009186:	d908      	bls.n	800919a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009188:	4b78      	ldr	r3, [pc, #480]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	4975      	ldr	r1, [pc, #468]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 8009196:	4313      	orrs	r3, r2
 8009198:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0308 	and.w	r3, r3, #8
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d010      	beq.n	80091c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	695a      	ldr	r2, [r3, #20]
 80091aa:	4b70      	ldr	r3, [pc, #448]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d908      	bls.n	80091c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80091b6:	4b6d      	ldr	r3, [pc, #436]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	496a      	ldr	r1, [pc, #424]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0310 	and.w	r3, r3, #16
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d010      	beq.n	80091f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	699a      	ldr	r2, [r3, #24]
 80091d8:	4b64      	ldr	r3, [pc, #400]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d908      	bls.n	80091f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091e4:	4b61      	ldr	r3, [pc, #388]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	495e      	ldr	r1, [pc, #376]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d010      	beq.n	8009224 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	69da      	ldr	r2, [r3, #28]
 8009206:	4b59      	ldr	r3, [pc, #356]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800920e:	429a      	cmp	r2, r3
 8009210:	d908      	bls.n	8009224 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009212:	4b56      	ldr	r3, [pc, #344]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	4953      	ldr	r1, [pc, #332]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 8009220:	4313      	orrs	r3, r2
 8009222:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0302 	and.w	r3, r3, #2
 800922c:	2b00      	cmp	r3, #0
 800922e:	d010      	beq.n	8009252 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68da      	ldr	r2, [r3, #12]
 8009234:	4b4d      	ldr	r3, [pc, #308]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	429a      	cmp	r2, r3
 800923e:	d908      	bls.n	8009252 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009240:	4b4a      	ldr	r3, [pc, #296]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	f023 020f 	bic.w	r2, r3, #15
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	4947      	ldr	r1, [pc, #284]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 800924e:	4313      	orrs	r3, r2
 8009250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d055      	beq.n	800930a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800925e:	4b43      	ldr	r3, [pc, #268]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	4940      	ldr	r1, [pc, #256]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 800926c:	4313      	orrs	r3, r2
 800926e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d107      	bne.n	8009288 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009278:	4b3c      	ldr	r3, [pc, #240]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d121      	bne.n	80092c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e0f6      	b.n	8009476 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	2b03      	cmp	r3, #3
 800928e:	d107      	bne.n	80092a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009290:	4b36      	ldr	r3, [pc, #216]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d115      	bne.n	80092c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e0ea      	b.n	8009476 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d107      	bne.n	80092b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80092a8:	4b30      	ldr	r3, [pc, #192]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d109      	bne.n	80092c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e0de      	b.n	8009476 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092b8:	4b2c      	ldr	r3, [pc, #176]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e0d6      	b.n	8009476 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092c8:	4b28      	ldr	r3, [pc, #160]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	f023 0207 	bic.w	r2, r3, #7
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	4925      	ldr	r1, [pc, #148]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092da:	f7f9 fc67 	bl	8002bac <HAL_GetTick>
 80092de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092e0:	e00a      	b.n	80092f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092e2:	f7f9 fc63 	bl	8002bac <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d901      	bls.n	80092f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e0be      	b.n	8009476 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092f8:	4b1c      	ldr	r3, [pc, #112]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	00db      	lsls	r3, r3, #3
 8009306:	429a      	cmp	r2, r3
 8009308:	d1eb      	bne.n	80092e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	2b00      	cmp	r3, #0
 8009314:	d010      	beq.n	8009338 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	4b14      	ldr	r3, [pc, #80]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f003 030f 	and.w	r3, r3, #15
 8009322:	429a      	cmp	r2, r3
 8009324:	d208      	bcs.n	8009338 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009326:	4b11      	ldr	r3, [pc, #68]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	f023 020f 	bic.w	r2, r3, #15
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	490e      	ldr	r1, [pc, #56]	@ (800936c <HAL_RCC_ClockConfig+0x244>)
 8009334:	4313      	orrs	r3, r2
 8009336:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009338:	4b0b      	ldr	r3, [pc, #44]	@ (8009368 <HAL_RCC_ClockConfig+0x240>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 030f 	and.w	r3, r3, #15
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	429a      	cmp	r2, r3
 8009344:	d214      	bcs.n	8009370 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009346:	4b08      	ldr	r3, [pc, #32]	@ (8009368 <HAL_RCC_ClockConfig+0x240>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f023 020f 	bic.w	r2, r3, #15
 800934e:	4906      	ldr	r1, [pc, #24]	@ (8009368 <HAL_RCC_ClockConfig+0x240>)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	4313      	orrs	r3, r2
 8009354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009356:	4b04      	ldr	r3, [pc, #16]	@ (8009368 <HAL_RCC_ClockConfig+0x240>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 030f 	and.w	r3, r3, #15
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d005      	beq.n	8009370 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e086      	b.n	8009476 <HAL_RCC_ClockConfig+0x34e>
 8009368:	52002000 	.word	0x52002000
 800936c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0304 	and.w	r3, r3, #4
 8009378:	2b00      	cmp	r3, #0
 800937a:	d010      	beq.n	800939e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	691a      	ldr	r2, [r3, #16]
 8009380:	4b3f      	ldr	r3, [pc, #252]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009388:	429a      	cmp	r2, r3
 800938a:	d208      	bcs.n	800939e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800938c:	4b3c      	ldr	r3, [pc, #240]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	4939      	ldr	r1, [pc, #228]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 800939a:	4313      	orrs	r3, r2
 800939c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 0308 	and.w	r3, r3, #8
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d010      	beq.n	80093cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	695a      	ldr	r2, [r3, #20]
 80093ae:	4b34      	ldr	r3, [pc, #208]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d208      	bcs.n	80093cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093ba:	4b31      	ldr	r3, [pc, #196]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	492e      	ldr	r1, [pc, #184]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0310 	and.w	r3, r3, #16
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d010      	beq.n	80093fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	699a      	ldr	r2, [r3, #24]
 80093dc:	4b28      	ldr	r3, [pc, #160]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 80093de:	69db      	ldr	r3, [r3, #28]
 80093e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d208      	bcs.n	80093fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80093e8:	4b25      	ldr	r3, [pc, #148]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 80093ea:	69db      	ldr	r3, [r3, #28]
 80093ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	4922      	ldr	r1, [pc, #136]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b00      	cmp	r3, #0
 8009404:	d010      	beq.n	8009428 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69da      	ldr	r2, [r3, #28]
 800940a:	4b1d      	ldr	r3, [pc, #116]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009412:	429a      	cmp	r2, r3
 8009414:	d208      	bcs.n	8009428 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009416:	4b1a      	ldr	r3, [pc, #104]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	4917      	ldr	r1, [pc, #92]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 8009424:	4313      	orrs	r3, r2
 8009426:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009428:	f000 f834 	bl	8009494 <HAL_RCC_GetSysClockFreq>
 800942c:	4602      	mov	r2, r0
 800942e:	4b14      	ldr	r3, [pc, #80]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	0a1b      	lsrs	r3, r3, #8
 8009434:	f003 030f 	and.w	r3, r3, #15
 8009438:	4912      	ldr	r1, [pc, #72]	@ (8009484 <HAL_RCC_ClockConfig+0x35c>)
 800943a:	5ccb      	ldrb	r3, [r1, r3]
 800943c:	f003 031f 	and.w	r3, r3, #31
 8009440:	fa22 f303 	lsr.w	r3, r2, r3
 8009444:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009446:	4b0e      	ldr	r3, [pc, #56]	@ (8009480 <HAL_RCC_ClockConfig+0x358>)
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	f003 030f 	and.w	r3, r3, #15
 800944e:	4a0d      	ldr	r2, [pc, #52]	@ (8009484 <HAL_RCC_ClockConfig+0x35c>)
 8009450:	5cd3      	ldrb	r3, [r2, r3]
 8009452:	f003 031f 	and.w	r3, r3, #31
 8009456:	693a      	ldr	r2, [r7, #16]
 8009458:	fa22 f303 	lsr.w	r3, r2, r3
 800945c:	4a0a      	ldr	r2, [pc, #40]	@ (8009488 <HAL_RCC_ClockConfig+0x360>)
 800945e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009460:	4a0a      	ldr	r2, [pc, #40]	@ (800948c <HAL_RCC_ClockConfig+0x364>)
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009466:	4b0a      	ldr	r3, [pc, #40]	@ (8009490 <HAL_RCC_ClockConfig+0x368>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4618      	mov	r0, r3
 800946c:	f7f9 fb54 	bl	8002b18 <HAL_InitTick>
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009474:	7bfb      	ldrb	r3, [r7, #15]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	58024400 	.word	0x58024400
 8009484:	08014fb4 	.word	0x08014fb4
 8009488:	24000010 	.word	0x24000010
 800948c:	2400000c 	.word	0x2400000c
 8009490:	24000014 	.word	0x24000014

08009494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009494:	b480      	push	{r7}
 8009496:	b089      	sub	sp, #36	@ 0x24
 8009498:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800949a:	4bb3      	ldr	r3, [pc, #716]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094a2:	2b18      	cmp	r3, #24
 80094a4:	f200 8155 	bhi.w	8009752 <HAL_RCC_GetSysClockFreq+0x2be>
 80094a8:	a201      	add	r2, pc, #4	@ (adr r2, 80094b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	08009515 	.word	0x08009515
 80094b4:	08009753 	.word	0x08009753
 80094b8:	08009753 	.word	0x08009753
 80094bc:	08009753 	.word	0x08009753
 80094c0:	08009753 	.word	0x08009753
 80094c4:	08009753 	.word	0x08009753
 80094c8:	08009753 	.word	0x08009753
 80094cc:	08009753 	.word	0x08009753
 80094d0:	0800953b 	.word	0x0800953b
 80094d4:	08009753 	.word	0x08009753
 80094d8:	08009753 	.word	0x08009753
 80094dc:	08009753 	.word	0x08009753
 80094e0:	08009753 	.word	0x08009753
 80094e4:	08009753 	.word	0x08009753
 80094e8:	08009753 	.word	0x08009753
 80094ec:	08009753 	.word	0x08009753
 80094f0:	08009541 	.word	0x08009541
 80094f4:	08009753 	.word	0x08009753
 80094f8:	08009753 	.word	0x08009753
 80094fc:	08009753 	.word	0x08009753
 8009500:	08009753 	.word	0x08009753
 8009504:	08009753 	.word	0x08009753
 8009508:	08009753 	.word	0x08009753
 800950c:	08009753 	.word	0x08009753
 8009510:	08009547 	.word	0x08009547
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009514:	4b94      	ldr	r3, [pc, #592]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b00      	cmp	r3, #0
 800951e:	d009      	beq.n	8009534 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009520:	4b91      	ldr	r3, [pc, #580]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	08db      	lsrs	r3, r3, #3
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	4a90      	ldr	r2, [pc, #576]	@ (800976c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800952c:	fa22 f303 	lsr.w	r3, r2, r3
 8009530:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009532:	e111      	b.n	8009758 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009534:	4b8d      	ldr	r3, [pc, #564]	@ (800976c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009536:	61bb      	str	r3, [r7, #24]
      break;
 8009538:	e10e      	b.n	8009758 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800953a:	4b8d      	ldr	r3, [pc, #564]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800953c:	61bb      	str	r3, [r7, #24]
      break;
 800953e:	e10b      	b.n	8009758 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009540:	4b8c      	ldr	r3, [pc, #560]	@ (8009774 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009542:	61bb      	str	r3, [r7, #24]
      break;
 8009544:	e108      	b.n	8009758 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009546:	4b88      	ldr	r3, [pc, #544]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954a:	f003 0303 	and.w	r3, r3, #3
 800954e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009550:	4b85      	ldr	r3, [pc, #532]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009554:	091b      	lsrs	r3, r3, #4
 8009556:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800955a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800955c:	4b82      	ldr	r3, [pc, #520]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800955e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009566:	4b80      	ldr	r3, [pc, #512]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800956a:	08db      	lsrs	r3, r3, #3
 800956c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	fb02 f303 	mul.w	r3, r2, r3
 8009576:	ee07 3a90 	vmov	s15, r3
 800957a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 80e1 	beq.w	800974c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b02      	cmp	r3, #2
 800958e:	f000 8083 	beq.w	8009698 <HAL_RCC_GetSysClockFreq+0x204>
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b02      	cmp	r3, #2
 8009596:	f200 80a1 	bhi.w	80096dc <HAL_RCC_GetSysClockFreq+0x248>
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <HAL_RCC_GetSysClockFreq+0x114>
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d056      	beq.n	8009654 <HAL_RCC_GetSysClockFreq+0x1c0>
 80095a6:	e099      	b.n	80096dc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095a8:	4b6f      	ldr	r3, [pc, #444]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 0320 	and.w	r3, r3, #32
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d02d      	beq.n	8009610 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095b4:	4b6c      	ldr	r3, [pc, #432]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	08db      	lsrs	r3, r3, #3
 80095ba:	f003 0303 	and.w	r3, r3, #3
 80095be:	4a6b      	ldr	r2, [pc, #428]	@ (800976c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80095c0:	fa22 f303 	lsr.w	r3, r2, r3
 80095c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	ee07 3a90 	vmov	s15, r3
 80095cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095de:	4b62      	ldr	r3, [pc, #392]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80095f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009778 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800960a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800960e:	e087      	b.n	8009720 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	ee07 3a90 	vmov	s15, r3
 8009616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800977c <HAL_RCC_GetSysClockFreq+0x2e8>
 800961e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009622:	4b51      	ldr	r3, [pc, #324]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009632:	ed97 6a02 	vldr	s12, [r7, #8]
 8009636:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009778 <HAL_RCC_GetSysClockFreq+0x2e4>
 800963a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800963e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009652:	e065      	b.n	8009720 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009780 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009666:	4b40      	ldr	r3, [pc, #256]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800966a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009676:	ed97 6a02 	vldr	s12, [r7, #8]
 800967a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009778 <HAL_RCC_GetSysClockFreq+0x2e4>
 800967e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800968a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009692:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009696:	e043      	b.n	8009720 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009784 <HAL_RCC_GetSysClockFreq+0x2f0>
 80096a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80096be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009778 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80096da:	e021      	b.n	8009720 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	ee07 3a90 	vmov	s15, r3
 80096e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009780 <HAL_RCC_GetSysClockFreq+0x2ec>
 80096ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009702:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009778 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800970a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800971a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800971e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009720:	4b11      	ldr	r3, [pc, #68]	@ (8009768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009724:	0a5b      	lsrs	r3, r3, #9
 8009726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800972a:	3301      	adds	r3, #1
 800972c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	ee07 3a90 	vmov	s15, r3
 8009734:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009738:	edd7 6a07 	vldr	s13, [r7, #28]
 800973c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009744:	ee17 3a90 	vmov	r3, s15
 8009748:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800974a:	e005      	b.n	8009758 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800974c:	2300      	movs	r3, #0
 800974e:	61bb      	str	r3, [r7, #24]
      break;
 8009750:	e002      	b.n	8009758 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009752:	4b07      	ldr	r3, [pc, #28]	@ (8009770 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009754:	61bb      	str	r3, [r7, #24]
      break;
 8009756:	bf00      	nop
  }

  return sysclockfreq;
 8009758:	69bb      	ldr	r3, [r7, #24]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3724      	adds	r7, #36	@ 0x24
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	58024400 	.word	0x58024400
 800976c:	03d09000 	.word	0x03d09000
 8009770:	003d0900 	.word	0x003d0900
 8009774:	016e3600 	.word	0x016e3600
 8009778:	46000000 	.word	0x46000000
 800977c:	4c742400 	.word	0x4c742400
 8009780:	4a742400 	.word	0x4a742400
 8009784:	4bb71b00 	.word	0x4bb71b00

08009788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800978e:	f7ff fe81 	bl	8009494 <HAL_RCC_GetSysClockFreq>
 8009792:	4602      	mov	r2, r0
 8009794:	4b10      	ldr	r3, [pc, #64]	@ (80097d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	0a1b      	lsrs	r3, r3, #8
 800979a:	f003 030f 	and.w	r3, r3, #15
 800979e:	490f      	ldr	r1, [pc, #60]	@ (80097dc <HAL_RCC_GetHCLKFreq+0x54>)
 80097a0:	5ccb      	ldrb	r3, [r1, r3]
 80097a2:	f003 031f 	and.w	r3, r3, #31
 80097a6:	fa22 f303 	lsr.w	r3, r2, r3
 80097aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097ac:	4b0a      	ldr	r3, [pc, #40]	@ (80097d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	f003 030f 	and.w	r3, r3, #15
 80097b4:	4a09      	ldr	r2, [pc, #36]	@ (80097dc <HAL_RCC_GetHCLKFreq+0x54>)
 80097b6:	5cd3      	ldrb	r3, [r2, r3]
 80097b8:	f003 031f 	and.w	r3, r3, #31
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	fa22 f303 	lsr.w	r3, r2, r3
 80097c2:	4a07      	ldr	r2, [pc, #28]	@ (80097e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80097c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097c6:	4a07      	ldr	r2, [pc, #28]	@ (80097e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80097cc:	4b04      	ldr	r3, [pc, #16]	@ (80097e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80097ce:	681b      	ldr	r3, [r3, #0]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	58024400 	.word	0x58024400
 80097dc:	08014fb4 	.word	0x08014fb4
 80097e0:	24000010 	.word	0x24000010
 80097e4:	2400000c 	.word	0x2400000c

080097e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80097ec:	f7ff ffcc 	bl	8009788 <HAL_RCC_GetHCLKFreq>
 80097f0:	4602      	mov	r2, r0
 80097f2:	4b06      	ldr	r3, [pc, #24]	@ (800980c <HAL_RCC_GetPCLK1Freq+0x24>)
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	091b      	lsrs	r3, r3, #4
 80097f8:	f003 0307 	and.w	r3, r3, #7
 80097fc:	4904      	ldr	r1, [pc, #16]	@ (8009810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80097fe:	5ccb      	ldrb	r3, [r1, r3]
 8009800:	f003 031f 	and.w	r3, r3, #31
 8009804:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009808:	4618      	mov	r0, r3
 800980a:	bd80      	pop	{r7, pc}
 800980c:	58024400 	.word	0x58024400
 8009810:	08014fb4 	.word	0x08014fb4

08009814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009818:	f7ff ffb6 	bl	8009788 <HAL_RCC_GetHCLKFreq>
 800981c:	4602      	mov	r2, r0
 800981e:	4b06      	ldr	r3, [pc, #24]	@ (8009838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	0a1b      	lsrs	r3, r3, #8
 8009824:	f003 0307 	and.w	r3, r3, #7
 8009828:	4904      	ldr	r1, [pc, #16]	@ (800983c <HAL_RCC_GetPCLK2Freq+0x28>)
 800982a:	5ccb      	ldrb	r3, [r1, r3]
 800982c:	f003 031f 	and.w	r3, r3, #31
 8009830:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009834:	4618      	mov	r0, r3
 8009836:	bd80      	pop	{r7, pc}
 8009838:	58024400 	.word	0x58024400
 800983c:	08014fb4 	.word	0x08014fb4

08009840 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009844:	b0c6      	sub	sp, #280	@ 0x118
 8009846:	af00      	add	r7, sp, #0
 8009848:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800984c:	2300      	movs	r3, #0
 800984e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009852:	2300      	movs	r3, #0
 8009854:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009860:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009864:	2500      	movs	r5, #0
 8009866:	ea54 0305 	orrs.w	r3, r4, r5
 800986a:	d049      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800986c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009872:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009876:	d02f      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009878:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800987c:	d828      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800987e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009882:	d01a      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009884:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009888:	d822      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800988e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009892:	d007      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009894:	e01c      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009896:	4bab      	ldr	r3, [pc, #684]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989a:	4aaa      	ldr	r2, [pc, #680]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800989c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098a2:	e01a      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80098a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a8:	3308      	adds	r3, #8
 80098aa:	2102      	movs	r1, #2
 80098ac:	4618      	mov	r0, r3
 80098ae:	f002 fa49 	bl	800bd44 <RCCEx_PLL2_Config>
 80098b2:	4603      	mov	r3, r0
 80098b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098b8:	e00f      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098be:	3328      	adds	r3, #40	@ 0x28
 80098c0:	2102      	movs	r1, #2
 80098c2:	4618      	mov	r0, r3
 80098c4:	f002 faf0 	bl	800bea8 <RCCEx_PLL3_Config>
 80098c8:	4603      	mov	r3, r0
 80098ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098ce:	e004      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098d6:	e000      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80098d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10a      	bne.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80098e2:	4b98      	ldr	r3, [pc, #608]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80098ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098f0:	4a94      	ldr	r2, [pc, #592]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098f2:	430b      	orrs	r3, r1
 80098f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80098f6:	e003      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800990c:	f04f 0900 	mov.w	r9, #0
 8009910:	ea58 0309 	orrs.w	r3, r8, r9
 8009914:	d047      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800991a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800991c:	2b04      	cmp	r3, #4
 800991e:	d82a      	bhi.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009920:	a201      	add	r2, pc, #4	@ (adr r2, 8009928 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009926:	bf00      	nop
 8009928:	0800993d 	.word	0x0800993d
 800992c:	0800994b 	.word	0x0800994b
 8009930:	08009961 	.word	0x08009961
 8009934:	0800997f 	.word	0x0800997f
 8009938:	0800997f 	.word	0x0800997f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800993c:	4b81      	ldr	r3, [pc, #516]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800993e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009940:	4a80      	ldr	r2, [pc, #512]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009948:	e01a      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800994a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800994e:	3308      	adds	r3, #8
 8009950:	2100      	movs	r1, #0
 8009952:	4618      	mov	r0, r3
 8009954:	f002 f9f6 	bl	800bd44 <RCCEx_PLL2_Config>
 8009958:	4603      	mov	r3, r0
 800995a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800995e:	e00f      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009964:	3328      	adds	r3, #40	@ 0x28
 8009966:	2100      	movs	r1, #0
 8009968:	4618      	mov	r0, r3
 800996a:	f002 fa9d 	bl	800bea8 <RCCEx_PLL3_Config>
 800996e:	4603      	mov	r3, r0
 8009970:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009974:	e004      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800997c:	e000      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800997e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10a      	bne.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009988:	4b6e      	ldr	r3, [pc, #440]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800998a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800998c:	f023 0107 	bic.w	r1, r3, #7
 8009990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009996:	4a6b      	ldr	r2, [pc, #428]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009998:	430b      	orrs	r3, r1
 800999a:	6513      	str	r3, [r2, #80]	@ 0x50
 800999c:	e003      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800999e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80099a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80099b2:	f04f 0b00 	mov.w	fp, #0
 80099b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80099ba:	d05b      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80099bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80099c4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80099c8:	d03b      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80099ca:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80099ce:	d834      	bhi.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80099d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80099d4:	d037      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80099d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80099da:	d82e      	bhi.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80099dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80099e0:	d033      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80099e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80099e6:	d828      	bhi.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80099e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099ec:	d01a      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80099ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099f2:	d822      	bhi.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80099f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099fc:	d007      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80099fe:	e01c      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a00:	4b50      	ldr	r3, [pc, #320]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a04:	4a4f      	ldr	r2, [pc, #316]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a0c:	e01e      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a12:	3308      	adds	r3, #8
 8009a14:	2100      	movs	r1, #0
 8009a16:	4618      	mov	r0, r3
 8009a18:	f002 f994 	bl	800bd44 <RCCEx_PLL2_Config>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a22:	e013      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a28:	3328      	adds	r3, #40	@ 0x28
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f002 fa3b 	bl	800bea8 <RCCEx_PLL3_Config>
 8009a32:	4603      	mov	r3, r0
 8009a34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a38:	e008      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a40:	e004      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009a42:	bf00      	nop
 8009a44:	e002      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009a46:	bf00      	nop
 8009a48:	e000      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10b      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009a54:	4b3b      	ldr	r3, [pc, #236]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a58:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009a64:	4a37      	ldr	r2, [pc, #220]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a66:	430b      	orrs	r3, r1
 8009a68:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a6a:	e003      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009a80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009a84:	2300      	movs	r3, #0
 8009a86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009a8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4313      	orrs	r3, r2
 8009a92:	d05d      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009a9c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009aa0:	d03b      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009aa2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009aa6:	d834      	bhi.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009aa8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009aac:	d037      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009aae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ab2:	d82e      	bhi.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ab4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ab8:	d033      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009aba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009abe:	d828      	bhi.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ac0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ac4:	d01a      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009ac6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009aca:	d822      	bhi.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d003      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ad4:	d007      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009ad6:	e01c      	b.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009adc:	4a19      	ldr	r2, [pc, #100]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ae4:	e01e      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aea:	3308      	adds	r3, #8
 8009aec:	2100      	movs	r1, #0
 8009aee:	4618      	mov	r0, r3
 8009af0:	f002 f928 	bl	800bd44 <RCCEx_PLL2_Config>
 8009af4:	4603      	mov	r3, r0
 8009af6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009afa:	e013      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b00:	3328      	adds	r3, #40	@ 0x28
 8009b02:	2100      	movs	r1, #0
 8009b04:	4618      	mov	r0, r3
 8009b06:	f002 f9cf 	bl	800bea8 <RCCEx_PLL3_Config>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b10:	e008      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b18:	e004      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009b1a:	bf00      	nop
 8009b1c:	e002      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009b1e:	bf00      	nop
 8009b20:	e000      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10d      	bne.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009b2c:	4b05      	ldr	r3, [pc, #20]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b30:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009b3c:	4a01      	ldr	r2, [pc, #4]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b3e:	430b      	orrs	r3, r1
 8009b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b42:	e005      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009b5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009b60:	2300      	movs	r3, #0
 8009b62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b66:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	d03a      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b76:	2b30      	cmp	r3, #48	@ 0x30
 8009b78:	d01f      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009b7a:	2b30      	cmp	r3, #48	@ 0x30
 8009b7c:	d819      	bhi.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009b7e:	2b20      	cmp	r3, #32
 8009b80:	d00c      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009b82:	2b20      	cmp	r3, #32
 8009b84:	d815      	bhi.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d019      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009b8a:	2b10      	cmp	r3, #16
 8009b8c:	d111      	bne.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b8e:	4baa      	ldr	r3, [pc, #680]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b92:	4aa9      	ldr	r2, [pc, #676]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009b9a:	e011      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	2102      	movs	r1, #2
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f002 f8cd 	bl	800bd44 <RCCEx_PLL2_Config>
 8009baa:	4603      	mov	r3, r0
 8009bac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009bb0:	e006      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bb8:	e002      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009bba:	bf00      	nop
 8009bbc:	e000      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10a      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009bc8:	4b9b      	ldr	r3, [pc, #620]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bcc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bd6:	4a98      	ldr	r2, [pc, #608]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bd8:	430b      	orrs	r3, r1
 8009bda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009bdc:	e003      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009be2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009bfc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009c00:	460b      	mov	r3, r1
 8009c02:	4313      	orrs	r3, r2
 8009c04:	d051      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c10:	d035      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c16:	d82e      	bhi.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009c18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c1c:	d031      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009c1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c22:	d828      	bhi.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c28:	d01a      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c2e:	d822      	bhi.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d003      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c38:	d007      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009c3a:	e01c      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c3c:	4b7e      	ldr	r3, [pc, #504]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c40:	4a7d      	ldr	r2, [pc, #500]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c48:	e01c      	b.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c4e:	3308      	adds	r3, #8
 8009c50:	2100      	movs	r1, #0
 8009c52:	4618      	mov	r0, r3
 8009c54:	f002 f876 	bl	800bd44 <RCCEx_PLL2_Config>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c5e:	e011      	b.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c64:	3328      	adds	r3, #40	@ 0x28
 8009c66:	2100      	movs	r1, #0
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f002 f91d 	bl	800bea8 <RCCEx_PLL3_Config>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c74:	e006      	b.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c7c:	e002      	b.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009c7e:	bf00      	nop
 8009c80:	e000      	b.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10a      	bne.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c8c:	4b6a      	ldr	r3, [pc, #424]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c90:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c9a:	4a67      	ldr	r2, [pc, #412]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c9c:	430b      	orrs	r3, r1
 8009c9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ca0:	e003      	b.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ca6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009cb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009cc0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	d053      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009cd4:	d033      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009cd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009cda:	d82c      	bhi.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009cdc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ce0:	d02f      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009ce2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ce6:	d826      	bhi.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009ce8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009cec:	d02b      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009cee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009cf2:	d820      	bhi.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009cf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cf8:	d012      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009cfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cfe:	d81a      	bhi.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d022      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d08:	d115      	bne.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0e:	3308      	adds	r3, #8
 8009d10:	2101      	movs	r1, #1
 8009d12:	4618      	mov	r0, r3
 8009d14:	f002 f816 	bl	800bd44 <RCCEx_PLL2_Config>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009d1e:	e015      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d24:	3328      	adds	r3, #40	@ 0x28
 8009d26:	2101      	movs	r1, #1
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f002 f8bd 	bl	800bea8 <RCCEx_PLL3_Config>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009d34:	e00a      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d3c:	e006      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009d3e:	bf00      	nop
 8009d40:	e004      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009d42:	bf00      	nop
 8009d44:	e002      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009d46:	bf00      	nop
 8009d48:	e000      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10a      	bne.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009d54:	4b38      	ldr	r3, [pc, #224]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d58:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d62:	4a35      	ldr	r2, [pc, #212]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d64:	430b      	orrs	r3, r1
 8009d66:	6513      	str	r3, [r2, #80]	@ 0x50
 8009d68:	e003      	b.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d82:	2300      	movs	r3, #0
 8009d84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009d88:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	d058      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d9e:	d033      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009da4:	d82c      	bhi.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009daa:	d02f      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009db0:	d826      	bhi.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009db2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009db6:	d02b      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009db8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009dbc:	d820      	bhi.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009dbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dc2:	d012      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009dc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dc8:	d81a      	bhi.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d022      	beq.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009dce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dd2:	d115      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd8:	3308      	adds	r3, #8
 8009dda:	2101      	movs	r1, #1
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f001 ffb1 	bl	800bd44 <RCCEx_PLL2_Config>
 8009de2:	4603      	mov	r3, r0
 8009de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009de8:	e015      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dee:	3328      	adds	r3, #40	@ 0x28
 8009df0:	2101      	movs	r1, #1
 8009df2:	4618      	mov	r0, r3
 8009df4:	f002 f858 	bl	800bea8 <RCCEx_PLL3_Config>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009dfe:	e00a      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e06:	e006      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009e08:	bf00      	nop
 8009e0a:	e004      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009e0c:	bf00      	nop
 8009e0e:	e002      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009e10:	bf00      	nop
 8009e12:	e000      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10e      	bne.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009e1e:	4b06      	ldr	r3, [pc, #24]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009e2e:	4a02      	ldr	r2, [pc, #8]	@ (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e30:	430b      	orrs	r3, r1
 8009e32:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e34:	e006      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009e36:	bf00      	nop
 8009e38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e54:	2300      	movs	r3, #0
 8009e56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009e5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4313      	orrs	r3, r2
 8009e62:	d037      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e6e:	d00e      	beq.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e74:	d816      	bhi.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d018      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009e7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e7e:	d111      	bne.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e80:	4bc4      	ldr	r3, [pc, #784]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e84:	4ac3      	ldr	r2, [pc, #780]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e8c:	e00f      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e92:	3308      	adds	r3, #8
 8009e94:	2101      	movs	r1, #1
 8009e96:	4618      	mov	r0, r3
 8009e98:	f001 ff54 	bl	800bd44 <RCCEx_PLL2_Config>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009ea2:	e004      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009eaa:	e000      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10a      	bne.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009eb6:	4bb7      	ldr	r3, [pc, #732]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ec4:	4ab3      	ldr	r2, [pc, #716]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ec6:	430b      	orrs	r3, r1
 8009ec8:	6513      	str	r3, [r2, #80]	@ 0x50
 8009eca:	e003      	b.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ed0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009edc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009ee0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009eea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	d039      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	d81c      	bhi.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009efe:	a201      	add	r2, pc, #4	@ (adr r2, 8009f04 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009f41 	.word	0x08009f41
 8009f08:	08009f15 	.word	0x08009f15
 8009f0c:	08009f23 	.word	0x08009f23
 8009f10:	08009f41 	.word	0x08009f41
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f14:	4b9f      	ldr	r3, [pc, #636]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f18:	4a9e      	ldr	r2, [pc, #632]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009f20:	e00f      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f26:	3308      	adds	r3, #8
 8009f28:	2102      	movs	r1, #2
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f001 ff0a 	bl	800bd44 <RCCEx_PLL2_Config>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009f36:	e004      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f3e:	e000      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d10a      	bne.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009f4a:	4b92      	ldr	r3, [pc, #584]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f4e:	f023 0103 	bic.w	r1, r3, #3
 8009f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f58:	4a8e      	ldr	r2, [pc, #568]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f5a:	430b      	orrs	r3, r1
 8009f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f5e:	e003      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009f74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009f82:	460b      	mov	r3, r1
 8009f84:	4313      	orrs	r3, r2
 8009f86:	f000 8099 	beq.w	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f8a:	4b83      	ldr	r3, [pc, #524]	@ (800a198 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a82      	ldr	r2, [pc, #520]	@ (800a198 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f96:	f7f8 fe09 	bl	8002bac <HAL_GetTick>
 8009f9a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f9e:	e00b      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fa0:	f7f8 fe04 	bl	8002bac <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	2b64      	cmp	r3, #100	@ 0x64
 8009fae:	d903      	bls.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009fb6:	e005      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fb8:	4b77      	ldr	r3, [pc, #476]	@ (800a198 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d0ed      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d173      	bne.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009fcc:	4b71      	ldr	r3, [pc, #452]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009fd8:	4053      	eors	r3, r2
 8009fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d015      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009fe2:	4b6c      	ldr	r3, [pc, #432]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009fee:	4b69      	ldr	r3, [pc, #420]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ff2:	4a68      	ldr	r2, [pc, #416]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ff8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ffa:	4b66      	ldr	r3, [pc, #408]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ffe:	4a65      	ldr	r2, [pc, #404]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a004:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a006:	4a63      	ldr	r2, [pc, #396]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a00c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a012:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a01a:	d118      	bne.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a01c:	f7f8 fdc6 	bl	8002bac <HAL_GetTick>
 800a020:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a024:	e00d      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a026:	f7f8 fdc1 	bl	8002bac <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a030:	1ad2      	subs	r2, r2, r3
 800a032:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a036:	429a      	cmp	r2, r3
 800a038:	d903      	bls.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a03a:	2303      	movs	r3, #3
 800a03c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a040:	e005      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a042:	4b54      	ldr	r3, [pc, #336]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a046:	f003 0302 	and.w	r3, r3, #2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0eb      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a04e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a052:	2b00      	cmp	r3, #0
 800a054:	d129      	bne.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a05e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a066:	d10e      	bne.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a068:	4b4a      	ldr	r3, [pc, #296]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a078:	091a      	lsrs	r2, r3, #4
 800a07a:	4b48      	ldr	r3, [pc, #288]	@ (800a19c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a07c:	4013      	ands	r3, r2
 800a07e:	4a45      	ldr	r2, [pc, #276]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a080:	430b      	orrs	r3, r1
 800a082:	6113      	str	r3, [r2, #16]
 800a084:	e005      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a086:	4b43      	ldr	r3, [pc, #268]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	4a42      	ldr	r2, [pc, #264]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a08c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a090:	6113      	str	r3, [r2, #16]
 800a092:	4b40      	ldr	r3, [pc, #256]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a094:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a09a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a09e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0a2:	4a3c      	ldr	r2, [pc, #240]	@ (800a194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a0a8:	e008      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a0aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a0b2:	e003      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c4:	f002 0301 	and.w	r3, r2, #1
 800a0c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a0d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	f000 808f 	beq.w	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0e4:	2b28      	cmp	r3, #40	@ 0x28
 800a0e6:	d871      	bhi.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a0e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ee:	bf00      	nop
 800a0f0:	0800a1d5 	.word	0x0800a1d5
 800a0f4:	0800a1cd 	.word	0x0800a1cd
 800a0f8:	0800a1cd 	.word	0x0800a1cd
 800a0fc:	0800a1cd 	.word	0x0800a1cd
 800a100:	0800a1cd 	.word	0x0800a1cd
 800a104:	0800a1cd 	.word	0x0800a1cd
 800a108:	0800a1cd 	.word	0x0800a1cd
 800a10c:	0800a1cd 	.word	0x0800a1cd
 800a110:	0800a1a1 	.word	0x0800a1a1
 800a114:	0800a1cd 	.word	0x0800a1cd
 800a118:	0800a1cd 	.word	0x0800a1cd
 800a11c:	0800a1cd 	.word	0x0800a1cd
 800a120:	0800a1cd 	.word	0x0800a1cd
 800a124:	0800a1cd 	.word	0x0800a1cd
 800a128:	0800a1cd 	.word	0x0800a1cd
 800a12c:	0800a1cd 	.word	0x0800a1cd
 800a130:	0800a1b7 	.word	0x0800a1b7
 800a134:	0800a1cd 	.word	0x0800a1cd
 800a138:	0800a1cd 	.word	0x0800a1cd
 800a13c:	0800a1cd 	.word	0x0800a1cd
 800a140:	0800a1cd 	.word	0x0800a1cd
 800a144:	0800a1cd 	.word	0x0800a1cd
 800a148:	0800a1cd 	.word	0x0800a1cd
 800a14c:	0800a1cd 	.word	0x0800a1cd
 800a150:	0800a1d5 	.word	0x0800a1d5
 800a154:	0800a1cd 	.word	0x0800a1cd
 800a158:	0800a1cd 	.word	0x0800a1cd
 800a15c:	0800a1cd 	.word	0x0800a1cd
 800a160:	0800a1cd 	.word	0x0800a1cd
 800a164:	0800a1cd 	.word	0x0800a1cd
 800a168:	0800a1cd 	.word	0x0800a1cd
 800a16c:	0800a1cd 	.word	0x0800a1cd
 800a170:	0800a1d5 	.word	0x0800a1d5
 800a174:	0800a1cd 	.word	0x0800a1cd
 800a178:	0800a1cd 	.word	0x0800a1cd
 800a17c:	0800a1cd 	.word	0x0800a1cd
 800a180:	0800a1cd 	.word	0x0800a1cd
 800a184:	0800a1cd 	.word	0x0800a1cd
 800a188:	0800a1cd 	.word	0x0800a1cd
 800a18c:	0800a1cd 	.word	0x0800a1cd
 800a190:	0800a1d5 	.word	0x0800a1d5
 800a194:	58024400 	.word	0x58024400
 800a198:	58024800 	.word	0x58024800
 800a19c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f001 fdcb 	bl	800bd44 <RCCEx_PLL2_Config>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a1b4:	e00f      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1ba:	3328      	adds	r3, #40	@ 0x28
 800a1bc:	2101      	movs	r1, #1
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f001 fe72 	bl	800bea8 <RCCEx_PLL3_Config>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a1ca:	e004      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1d2:	e000      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a1d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10a      	bne.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a1de:	4bbf      	ldr	r3, [pc, #764]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1ec:	4abb      	ldr	r2, [pc, #748]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1ee:	430b      	orrs	r3, r1
 800a1f0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1f2:	e003      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a204:	f002 0302 	and.w	r3, r2, #2
 800a208:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a20c:	2300      	movs	r3, #0
 800a20e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a212:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a216:	460b      	mov	r3, r1
 800a218:	4313      	orrs	r3, r2
 800a21a:	d041      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a222:	2b05      	cmp	r3, #5
 800a224:	d824      	bhi.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a226:	a201      	add	r2, pc, #4	@ (adr r2, 800a22c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22c:	0800a279 	.word	0x0800a279
 800a230:	0800a245 	.word	0x0800a245
 800a234:	0800a25b 	.word	0x0800a25b
 800a238:	0800a279 	.word	0x0800a279
 800a23c:	0800a279 	.word	0x0800a279
 800a240:	0800a279 	.word	0x0800a279
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a248:	3308      	adds	r3, #8
 800a24a:	2101      	movs	r1, #1
 800a24c:	4618      	mov	r0, r3
 800a24e:	f001 fd79 	bl	800bd44 <RCCEx_PLL2_Config>
 800a252:	4603      	mov	r3, r0
 800a254:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a258:	e00f      	b.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a25e:	3328      	adds	r3, #40	@ 0x28
 800a260:	2101      	movs	r1, #1
 800a262:	4618      	mov	r0, r3
 800a264:	f001 fe20 	bl	800bea8 <RCCEx_PLL3_Config>
 800a268:	4603      	mov	r3, r0
 800a26a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a26e:	e004      	b.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a276:	e000      	b.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a27a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10a      	bne.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a282:	4b96      	ldr	r3, [pc, #600]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a286:	f023 0107 	bic.w	r1, r3, #7
 800a28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a28e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a290:	4a92      	ldr	r2, [pc, #584]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a292:	430b      	orrs	r3, r1
 800a294:	6553      	str	r3, [r2, #84]	@ 0x54
 800a296:	e003      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a29c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	f002 0304 	and.w	r3, r2, #4
 800a2ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a2b6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	d044      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2c8:	2b05      	cmp	r3, #5
 800a2ca:	d825      	bhi.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a2cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d2:	bf00      	nop
 800a2d4:	0800a321 	.word	0x0800a321
 800a2d8:	0800a2ed 	.word	0x0800a2ed
 800a2dc:	0800a303 	.word	0x0800a303
 800a2e0:	0800a321 	.word	0x0800a321
 800a2e4:	0800a321 	.word	0x0800a321
 800a2e8:	0800a321 	.word	0x0800a321
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f001 fd25 	bl	800bd44 <RCCEx_PLL2_Config>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a300:	e00f      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a306:	3328      	adds	r3, #40	@ 0x28
 800a308:	2101      	movs	r1, #1
 800a30a:	4618      	mov	r0, r3
 800a30c:	f001 fdcc 	bl	800bea8 <RCCEx_PLL3_Config>
 800a310:	4603      	mov	r3, r0
 800a312:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a316:	e004      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a31e:	e000      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a320:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a322:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10b      	bne.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a32a:	4b6c      	ldr	r3, [pc, #432]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a32c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a32e:	f023 0107 	bic.w	r1, r3, #7
 800a332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a33a:	4a68      	ldr	r2, [pc, #416]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a33c:	430b      	orrs	r3, r1
 800a33e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a340:	e003      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a342:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a346:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f002 0320 	and.w	r3, r2, #32
 800a356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a35a:	2300      	movs	r3, #0
 800a35c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a360:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a364:	460b      	mov	r3, r1
 800a366:	4313      	orrs	r3, r2
 800a368:	d055      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a36e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a376:	d033      	beq.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a378:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a37c:	d82c      	bhi.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a37e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a382:	d02f      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a388:	d826      	bhi.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a38a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a38e:	d02b      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a390:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a394:	d820      	bhi.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a39a:	d012      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a39c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a0:	d81a      	bhi.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d022      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a3a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3aa:	d115      	bne.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3b0:	3308      	adds	r3, #8
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f001 fcc5 	bl	800bd44 <RCCEx_PLL2_Config>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a3c0:	e015      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c6:	3328      	adds	r3, #40	@ 0x28
 800a3c8:	2102      	movs	r1, #2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 fd6c 	bl	800bea8 <RCCEx_PLL3_Config>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a3d6:	e00a      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a3de:	e006      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a3e0:	bf00      	nop
 800a3e2:	e004      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a3e4:	bf00      	nop
 800a3e6:	e002      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a3e8:	bf00      	nop
 800a3ea:	e000      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a3ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10b      	bne.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a3f6:	4b39      	ldr	r3, [pc, #228]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a3f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a402:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a406:	4a35      	ldr	r2, [pc, #212]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a408:	430b      	orrs	r3, r1
 800a40a:	6553      	str	r3, [r2, #84]	@ 0x54
 800a40c:	e003      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a40e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a412:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a422:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a426:	2300      	movs	r3, #0
 800a428:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a42c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a430:	460b      	mov	r3, r1
 800a432:	4313      	orrs	r3, r2
 800a434:	d058      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a43a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a43e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a442:	d033      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a444:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a448:	d82c      	bhi.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a44a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a44e:	d02f      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a454:	d826      	bhi.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a456:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a45a:	d02b      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a45c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a460:	d820      	bhi.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a462:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a466:	d012      	beq.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a468:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a46c:	d81a      	bhi.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d022      	beq.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a476:	d115      	bne.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a47c:	3308      	adds	r3, #8
 800a47e:	2100      	movs	r1, #0
 800a480:	4618      	mov	r0, r3
 800a482:	f001 fc5f 	bl	800bd44 <RCCEx_PLL2_Config>
 800a486:	4603      	mov	r3, r0
 800a488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a48c:	e015      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a492:	3328      	adds	r3, #40	@ 0x28
 800a494:	2102      	movs	r1, #2
 800a496:	4618      	mov	r0, r3
 800a498:	f001 fd06 	bl	800bea8 <RCCEx_PLL3_Config>
 800a49c:	4603      	mov	r3, r0
 800a49e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a4a2:	e00a      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4aa:	e006      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a4ac:	bf00      	nop
 800a4ae:	e004      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a4b0:	bf00      	nop
 800a4b2:	e002      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a4b4:	bf00      	nop
 800a4b6:	e000      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a4b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10e      	bne.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a4c2:	4b06      	ldr	r3, [pc, #24]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a4c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a4d2:	4a02      	ldr	r2, [pc, #8]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a4d4:	430b      	orrs	r3, r1
 800a4d6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4d8:	e006      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a4da:	bf00      	nop
 800a4dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a4e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a4f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a4fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a502:	460b      	mov	r3, r1
 800a504:	4313      	orrs	r3, r2
 800a506:	d055      	beq.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a50c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a510:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a514:	d033      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a516:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a51a:	d82c      	bhi.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a51c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a520:	d02f      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a522:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a526:	d826      	bhi.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a528:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a52c:	d02b      	beq.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a52e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a532:	d820      	bhi.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a534:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a538:	d012      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a53a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a53e:	d81a      	bhi.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a540:	2b00      	cmp	r3, #0
 800a542:	d022      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a544:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a548:	d115      	bne.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a54e:	3308      	adds	r3, #8
 800a550:	2100      	movs	r1, #0
 800a552:	4618      	mov	r0, r3
 800a554:	f001 fbf6 	bl	800bd44 <RCCEx_PLL2_Config>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a55e:	e015      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a564:	3328      	adds	r3, #40	@ 0x28
 800a566:	2102      	movs	r1, #2
 800a568:	4618      	mov	r0, r3
 800a56a:	f001 fc9d 	bl	800bea8 <RCCEx_PLL3_Config>
 800a56e:	4603      	mov	r3, r0
 800a570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a574:	e00a      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a57c:	e006      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a57e:	bf00      	nop
 800a580:	e004      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a582:	bf00      	nop
 800a584:	e002      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a586:	bf00      	nop
 800a588:	e000      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a58a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a58c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10b      	bne.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a594:	4ba0      	ldr	r3, [pc, #640]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a598:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a5a4:	4a9c      	ldr	r2, [pc, #624]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5a6:	430b      	orrs	r3, r1
 800a5a8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a5aa:	e003      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5bc:	f002 0308 	and.w	r3, r2, #8
 800a5c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a5ca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	d01e      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5e0:	d10c      	bne.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5e6:	3328      	adds	r3, #40	@ 0x28
 800a5e8:	2102      	movs	r1, #2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f001 fc5c 	bl	800bea8 <RCCEx_PLL3_Config>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a5fc:	4b86      	ldr	r3, [pc, #536]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a600:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a60c:	4a82      	ldr	r2, [pc, #520]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a60e:	430b      	orrs	r3, r1
 800a610:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61a:	f002 0310 	and.w	r3, r2, #16
 800a61e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a622:	2300      	movs	r3, #0
 800a624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a628:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a62c:	460b      	mov	r3, r1
 800a62e:	4313      	orrs	r3, r2
 800a630:	d01e      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a63a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a63e:	d10c      	bne.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a644:	3328      	adds	r3, #40	@ 0x28
 800a646:	2102      	movs	r1, #2
 800a648:	4618      	mov	r0, r3
 800a64a:	f001 fc2d 	bl	800bea8 <RCCEx_PLL3_Config>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a65a:	4b6f      	ldr	r3, [pc, #444]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a65c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a65e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a66a:	4a6b      	ldr	r2, [pc, #428]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a66c:	430b      	orrs	r3, r1
 800a66e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a67c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a67e:	2300      	movs	r3, #0
 800a680:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a682:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a686:	460b      	mov	r3, r1
 800a688:	4313      	orrs	r3, r2
 800a68a:	d03e      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a690:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a698:	d022      	beq.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a69a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a69e:	d81b      	bhi.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d003      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a6a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6a8:	d00b      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a6aa:	e015      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6b0:	3308      	adds	r3, #8
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f001 fb45 	bl	800bd44 <RCCEx_PLL2_Config>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a6c0:	e00f      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6c6:	3328      	adds	r3, #40	@ 0x28
 800a6c8:	2102      	movs	r1, #2
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f001 fbec 	bl	800bea8 <RCCEx_PLL3_Config>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a6d6:	e004      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a6de:	e000      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a6e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10b      	bne.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a6ea:	4b4b      	ldr	r3, [pc, #300]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a6fa:	4a47      	ldr	r2, [pc, #284]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6fc:	430b      	orrs	r3, r1
 800a6fe:	6593      	str	r3, [r2, #88]	@ 0x58
 800a700:	e003      	b.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a702:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a706:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a716:	673b      	str	r3, [r7, #112]	@ 0x70
 800a718:	2300      	movs	r3, #0
 800a71a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a71c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a720:	460b      	mov	r3, r1
 800a722:	4313      	orrs	r3, r2
 800a724:	d03b      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a72a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a72e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a732:	d01f      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a734:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a738:	d818      	bhi.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a73a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a73e:	d003      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a740:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a744:	d007      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a746:	e011      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a748:	4b33      	ldr	r3, [pc, #204]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a74c:	4a32      	ldr	r2, [pc, #200]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a74e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a754:	e00f      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a75a:	3328      	adds	r3, #40	@ 0x28
 800a75c:	2101      	movs	r1, #1
 800a75e:	4618      	mov	r0, r3
 800a760:	f001 fba2 	bl	800bea8 <RCCEx_PLL3_Config>
 800a764:	4603      	mov	r3, r0
 800a766:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a76a:	e004      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a772:	e000      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a774:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a776:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10b      	bne.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a77e:	4b26      	ldr	r3, [pc, #152]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a782:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a78a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a78e:	4a22      	ldr	r2, [pc, #136]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a790:	430b      	orrs	r3, r1
 800a792:	6553      	str	r3, [r2, #84]	@ 0x54
 800a794:	e003      	b.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a796:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a79a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a7aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a7b0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	d034      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d003      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a7c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7c8:	d007      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a7ca:	e011      	b.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7cc:	4b12      	ldr	r3, [pc, #72]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7d0:	4a11      	ldr	r2, [pc, #68]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a7d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a7d8:	e00e      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7de:	3308      	adds	r3, #8
 800a7e0:	2102      	movs	r1, #2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f001 faae 	bl	800bd44 <RCCEx_PLL2_Config>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a7ee:	e003      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a7f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10d      	bne.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a800:	4b05      	ldr	r3, [pc, #20]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a804:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a80c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a80e:	4a02      	ldr	r2, [pc, #8]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a810:	430b      	orrs	r3, r1
 800a812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a814:	e006      	b.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a816:	bf00      	nop
 800a818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a820:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a830:	663b      	str	r3, [r7, #96]	@ 0x60
 800a832:	2300      	movs	r3, #0
 800a834:	667b      	str	r3, [r7, #100]	@ 0x64
 800a836:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a83a:	460b      	mov	r3, r1
 800a83c:	4313      	orrs	r3, r2
 800a83e:	d00c      	beq.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a844:	3328      	adds	r3, #40	@ 0x28
 800a846:	2102      	movs	r1, #2
 800a848:	4618      	mov	r0, r3
 800a84a:	f001 fb2d 	bl	800bea8 <RCCEx_PLL3_Config>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a866:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a868:	2300      	movs	r3, #0
 800a86a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a86c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a870:	460b      	mov	r3, r1
 800a872:	4313      	orrs	r3, r2
 800a874:	d036      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a87a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a87c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a880:	d018      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a886:	d811      	bhi.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a88c:	d014      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a88e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a892:	d80b      	bhi.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a894:	2b00      	cmp	r3, #0
 800a896:	d011      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a89c:	d106      	bne.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a89e:	4bb7      	ldr	r3, [pc, #732]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a2:	4ab6      	ldr	r2, [pc, #728]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a8aa:	e008      	b.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8b2:	e004      	b.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a8b4:	bf00      	nop
 800a8b6:	e002      	b.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a8b8:	bf00      	nop
 800a8ba:	e000      	b.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a8bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10a      	bne.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a8c6:	4bad      	ldr	r3, [pc, #692]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8d4:	4aa9      	ldr	r2, [pc, #676]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8d6:	430b      	orrs	r3, r1
 800a8d8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a8da:	e003      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a8f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	d009      	beq.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a900:	4b9e      	ldr	r3, [pc, #632]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a904:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a90c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a90e:	4a9b      	ldr	r2, [pc, #620]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a910:	430b      	orrs	r3, r1
 800a912:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a920:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a922:	2300      	movs	r3, #0
 800a924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a926:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a92a:	460b      	mov	r3, r1
 800a92c:	4313      	orrs	r3, r2
 800a92e:	d009      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a930:	4b92      	ldr	r3, [pc, #584]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a934:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a93c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a93e:	4a8f      	ldr	r2, [pc, #572]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a940:	430b      	orrs	r3, r1
 800a942:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a950:	643b      	str	r3, [r7, #64]	@ 0x40
 800a952:	2300      	movs	r3, #0
 800a954:	647b      	str	r3, [r7, #68]	@ 0x44
 800a956:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a95a:	460b      	mov	r3, r1
 800a95c:	4313      	orrs	r3, r2
 800a95e:	d00e      	beq.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a960:	4b86      	ldr	r3, [pc, #536]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	4a85      	ldr	r2, [pc, #532]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a966:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a96a:	6113      	str	r3, [r2, #16]
 800a96c:	4b83      	ldr	r3, [pc, #524]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a96e:	6919      	ldr	r1, [r3, #16]
 800a970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a974:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a978:	4a80      	ldr	r2, [pc, #512]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a97a:	430b      	orrs	r3, r1
 800a97c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a98a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a98c:	2300      	movs	r3, #0
 800a98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a990:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a994:	460b      	mov	r3, r1
 800a996:	4313      	orrs	r3, r2
 800a998:	d009      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a99a:	4b78      	ldr	r3, [pc, #480]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a99c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a99e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9a8:	4a74      	ldr	r2, [pc, #464]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a9aa:	430b      	orrs	r3, r1
 800a9ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a9ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9bc:	2300      	movs	r3, #0
 800a9be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	d00a      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a9ca:	4b6c      	ldr	r3, [pc, #432]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a9cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ce:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9da:	4a68      	ldr	r2, [pc, #416]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a9dc:	430b      	orrs	r3, r1
 800a9de:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9f2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	d011      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa00:	3308      	adds	r3, #8
 800aa02:	2100      	movs	r1, #0
 800aa04:	4618      	mov	r0, r3
 800aa06:	f001 f99d 	bl	800bd44 <RCCEx_PLL2_Config>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aa10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d003      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aa20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	2100      	movs	r1, #0
 800aa2a:	6239      	str	r1, [r7, #32]
 800aa2c:	f003 0302 	and.w	r3, r3, #2
 800aa30:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aa36:	460b      	mov	r3, r1
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	d011      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa40:	3308      	adds	r3, #8
 800aa42:	2101      	movs	r1, #1
 800aa44:	4618      	mov	r0, r3
 800aa46:	f001 f97d 	bl	800bd44 <RCCEx_PLL2_Config>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aa50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aa60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	2100      	movs	r1, #0
 800aa6a:	61b9      	str	r1, [r7, #24]
 800aa6c:	f003 0304 	and.w	r3, r3, #4
 800aa70:	61fb      	str	r3, [r7, #28]
 800aa72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aa76:	460b      	mov	r3, r1
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	d011      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa80:	3308      	adds	r3, #8
 800aa82:	2102      	movs	r1, #2
 800aa84:	4618      	mov	r0, r3
 800aa86:	f001 f95d 	bl	800bd44 <RCCEx_PLL2_Config>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aa90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aaa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	6139      	str	r1, [r7, #16]
 800aaac:	f003 0308 	and.w	r3, r3, #8
 800aab0:	617b      	str	r3, [r7, #20]
 800aab2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aab6:	460b      	mov	r3, r1
 800aab8:	4313      	orrs	r3, r2
 800aaba:	d011      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aac0:	3328      	adds	r3, #40	@ 0x28
 800aac2:	2100      	movs	r1, #0
 800aac4:	4618      	mov	r0, r3
 800aac6:	f001 f9ef 	bl	800bea8 <RCCEx_PLL3_Config>
 800aaca:	4603      	mov	r3, r0
 800aacc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800aad0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d003      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aadc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	2100      	movs	r1, #0
 800aaea:	60b9      	str	r1, [r7, #8]
 800aaec:	f003 0310 	and.w	r3, r3, #16
 800aaf0:	60fb      	str	r3, [r7, #12]
 800aaf2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	d011      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab00:	3328      	adds	r3, #40	@ 0x28
 800ab02:	2101      	movs	r1, #1
 800ab04:	4618      	mov	r0, r3
 800ab06:	f001 f9cf 	bl	800bea8 <RCCEx_PLL3_Config>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ab10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d003      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ab20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	2100      	movs	r1, #0
 800ab2a:	6039      	str	r1, [r7, #0]
 800ab2c:	f003 0320 	and.w	r3, r3, #32
 800ab30:	607b      	str	r3, [r7, #4]
 800ab32:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ab36:	460b      	mov	r3, r1
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	d011      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab40:	3328      	adds	r3, #40	@ 0x28
 800ab42:	2102      	movs	r1, #2
 800ab44:	4618      	mov	r0, r3
 800ab46:	f001 f9af 	bl	800bea8 <RCCEx_PLL3_Config>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ab50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d003      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800ab60:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	e000      	b.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800ab74:	46bd      	mov	sp, r7
 800ab76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab7a:	bf00      	nop
 800ab7c:	58024400 	.word	0x58024400

0800ab80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b090      	sub	sp, #64	@ 0x40
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ab8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab8e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ab92:	430b      	orrs	r3, r1
 800ab94:	f040 8094 	bne.w	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ab98:	4b9b      	ldr	r3, [pc, #620]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab9c:	f003 0307 	and.w	r3, r3, #7
 800aba0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba4:	2b04      	cmp	r3, #4
 800aba6:	f200 8087 	bhi.w	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800abaa:	a201      	add	r2, pc, #4	@ (adr r2, 800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800abac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb0:	0800abc5 	.word	0x0800abc5
 800abb4:	0800abed 	.word	0x0800abed
 800abb8:	0800ac15 	.word	0x0800ac15
 800abbc:	0800acb1 	.word	0x0800acb1
 800abc0:	0800ac3d 	.word	0x0800ac3d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abc4:	4b90      	ldr	r3, [pc, #576]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abd0:	d108      	bne.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 ff62 	bl	800baa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abe0:	f000 bc93 	b.w	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abe4:	2300      	movs	r3, #0
 800abe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abe8:	f000 bc8f 	b.w	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abec:	4b86      	ldr	r3, [pc, #536]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abf8:	d108      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abfa:	f107 0318 	add.w	r3, r7, #24
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 fca6 	bl	800b550 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac08:	f000 bc7f 	b.w	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac10:	f000 bc7b 	b.w	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac14:	4b7c      	ldr	r3, [pc, #496]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac20:	d108      	bne.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac22:	f107 030c 	add.w	r3, r7, #12
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 fde6 	bl	800b7f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac30:	f000 bc6b 	b.w	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac38:	f000 bc67 	b.w	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac3c:	4b72      	ldr	r3, [pc, #456]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac44:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac46:	4b70      	ldr	r3, [pc, #448]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 0304 	and.w	r3, r3, #4
 800ac4e:	2b04      	cmp	r3, #4
 800ac50:	d10c      	bne.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ac52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d109      	bne.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac58:	4b6b      	ldr	r3, [pc, #428]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	08db      	lsrs	r3, r3, #3
 800ac5e:	f003 0303 	and.w	r3, r3, #3
 800ac62:	4a6a      	ldr	r2, [pc, #424]	@ (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ac64:	fa22 f303 	lsr.w	r3, r2, r3
 800ac68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac6a:	e01f      	b.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac6c:	4b66      	ldr	r3, [pc, #408]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac78:	d106      	bne.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ac7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac80:	d102      	bne.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac82:	4b63      	ldr	r3, [pc, #396]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ac84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac86:	e011      	b.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac88:	4b5f      	ldr	r3, [pc, #380]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac94:	d106      	bne.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ac96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac9c:	d102      	bne.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac9e:	4b5d      	ldr	r3, [pc, #372]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aca2:	e003      	b.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aca8:	f000 bc2f 	b.w	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800acac:	f000 bc2d 	b.w	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800acb0:	4b59      	ldr	r3, [pc, #356]	@ (800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800acb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb4:	f000 bc29 	b.w	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acbc:	f000 bc25 	b.w	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800acc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acc4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800acc8:	430b      	orrs	r3, r1
 800acca:	f040 80a7 	bne.w	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800acce:	4b4e      	ldr	r3, [pc, #312]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800acd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acd2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800acd6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800acd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800acde:	d054      	beq.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ace0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ace6:	f200 808b 	bhi.w	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800acea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800acf0:	f000 8083 	beq.w	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800acf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800acfa:	f200 8081 	bhi.w	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800acfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad04:	d02f      	beq.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ad06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad0c:	d878      	bhi.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d004      	beq.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ad14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad1a:	d012      	beq.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ad1c:	e070      	b.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad1e:	4b3a      	ldr	r3, [pc, #232]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad2a:	d107      	bne.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 feb5 	bl	800baa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad3a:	e3e6      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad40:	e3e3      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad42:	4b31      	ldr	r3, [pc, #196]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad4e:	d107      	bne.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad50:	f107 0318 	add.w	r3, r7, #24
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 fbfb 	bl	800b550 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad5e:	e3d4      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad64:	e3d1      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad66:	4b28      	ldr	r3, [pc, #160]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad72:	d107      	bne.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad74:	f107 030c 	add.w	r3, r7, #12
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 fd3d 	bl	800b7f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad82:	e3c2      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad88:	e3bf      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad8a:	4b1f      	ldr	r3, [pc, #124]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad94:	4b1c      	ldr	r3, [pc, #112]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0304 	and.w	r3, r3, #4
 800ad9c:	2b04      	cmp	r3, #4
 800ad9e:	d10c      	bne.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ada0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d109      	bne.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ada6:	4b18      	ldr	r3, [pc, #96]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	08db      	lsrs	r3, r3, #3
 800adac:	f003 0303 	and.w	r3, r3, #3
 800adb0:	4a16      	ldr	r2, [pc, #88]	@ (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800adb2:	fa22 f303 	lsr.w	r3, r2, r3
 800adb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adb8:	e01e      	b.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adba:	4b13      	ldr	r3, [pc, #76]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adc6:	d106      	bne.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800adc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adce:	d102      	bne.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800add0:	4b0f      	ldr	r3, [pc, #60]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800add2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800add4:	e010      	b.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800add6:	4b0c      	ldr	r3, [pc, #48]	@ (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ade2:	d106      	bne.n	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ade4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ade6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adea:	d102      	bne.n	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800adec:	4b09      	ldr	r3, [pc, #36]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800adee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adf0:	e002      	b.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800adf6:	e388      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800adf8:	e387      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800adfa:	4b07      	ldr	r3, [pc, #28]	@ (800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800adfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adfe:	e384      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae04:	e381      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae06:	bf00      	nop
 800ae08:	58024400 	.word	0x58024400
 800ae0c:	03d09000 	.word	0x03d09000
 800ae10:	003d0900 	.word	0x003d0900
 800ae14:	016e3600 	.word	0x016e3600
 800ae18:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ae1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae20:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ae24:	430b      	orrs	r3, r1
 800ae26:	f040 809c 	bne.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ae2a:	4b9e      	ldr	r3, [pc, #632]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae2e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ae32:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ae34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ae3a:	d054      	beq.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ae42:	f200 808b 	bhi.w	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ae46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ae4c:	f000 8083 	beq.w	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ae50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ae56:	f200 8081 	bhi.w	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae60:	d02f      	beq.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ae62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae68:	d878      	bhi.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d004      	beq.n	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ae70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae76:	d012      	beq.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ae78:	e070      	b.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae7a:	4b8a      	ldr	r3, [pc, #552]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae86:	d107      	bne.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 fe07 	bl	800baa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae96:	e338      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae9c:	e335      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae9e:	4b81      	ldr	r3, [pc, #516]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aea6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aeaa:	d107      	bne.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeac:	f107 0318 	add.w	r3, r7, #24
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 fb4d 	bl	800b550 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeba:	e326      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aec0:	e323      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aec2:	4b78      	ldr	r3, [pc, #480]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aeca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aece:	d107      	bne.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aed0:	f107 030c 	add.w	r3, r7, #12
 800aed4:	4618      	mov	r0, r3
 800aed6:	f000 fc8f 	bl	800b7f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aede:	e314      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aee4:	e311      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aee6:	4b6f      	ldr	r3, [pc, #444]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aeea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aeee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aef0:	4b6c      	ldr	r3, [pc, #432]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 0304 	and.w	r3, r3, #4
 800aef8:	2b04      	cmp	r3, #4
 800aefa:	d10c      	bne.n	800af16 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800aefc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d109      	bne.n	800af16 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af02:	4b68      	ldr	r3, [pc, #416]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	08db      	lsrs	r3, r3, #3
 800af08:	f003 0303 	and.w	r3, r3, #3
 800af0c:	4a66      	ldr	r2, [pc, #408]	@ (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800af0e:	fa22 f303 	lsr.w	r3, r2, r3
 800af12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af14:	e01e      	b.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af16:	4b63      	ldr	r3, [pc, #396]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af22:	d106      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800af24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af2a:	d102      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af2c:	4b5f      	ldr	r3, [pc, #380]	@ (800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800af2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af30:	e010      	b.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af32:	4b5c      	ldr	r3, [pc, #368]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af3e:	d106      	bne.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800af40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af46:	d102      	bne.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af48:	4b59      	ldr	r3, [pc, #356]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af4c:	e002      	b.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af4e:	2300      	movs	r3, #0
 800af50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800af52:	e2da      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af54:	e2d9      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800af56:	4b57      	ldr	r3, [pc, #348]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800af58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af5a:	e2d6      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af60:	e2d3      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800af62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af66:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800af6a:	430b      	orrs	r3, r1
 800af6c:	f040 80a7 	bne.w	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800af70:	4b4c      	ldr	r3, [pc, #304]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af74:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800af78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800af7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af80:	d055      	beq.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800af82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af88:	f200 8096 	bhi.w	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af92:	f000 8084 	beq.w	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800af96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af9c:	f200 808c 	bhi.w	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800afa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afa6:	d030      	beq.n	800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800afa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afae:	f200 8083 	bhi.w	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800afb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d004      	beq.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800afb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afbe:	d012      	beq.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800afc0:	e07a      	b.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afc2:	4b38      	ldr	r3, [pc, #224]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afce:	d107      	bne.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 fd63 	bl	800baa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afde:	e294      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afe0:	2300      	movs	r3, #0
 800afe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afe4:	e291      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afe6:	4b2f      	ldr	r3, [pc, #188]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aff2:	d107      	bne.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aff4:	f107 0318 	add.w	r3, r7, #24
 800aff8:	4618      	mov	r0, r3
 800affa:	f000 faa9 	bl	800b550 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b002:	e282      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b004:	2300      	movs	r3, #0
 800b006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b008:	e27f      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b00a:	4b26      	ldr	r3, [pc, #152]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b012:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b016:	d107      	bne.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b018:	f107 030c 	add.w	r3, r7, #12
 800b01c:	4618      	mov	r0, r3
 800b01e:	f000 fbeb 	bl	800b7f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b026:	e270      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b02c:	e26d      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b02e:	4b1d      	ldr	r3, [pc, #116]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b032:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b036:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b038:	4b1a      	ldr	r3, [pc, #104]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 0304 	and.w	r3, r3, #4
 800b040:	2b04      	cmp	r3, #4
 800b042:	d10c      	bne.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b046:	2b00      	cmp	r3, #0
 800b048:	d109      	bne.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b04a:	4b16      	ldr	r3, [pc, #88]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	08db      	lsrs	r3, r3, #3
 800b050:	f003 0303 	and.w	r3, r3, #3
 800b054:	4a14      	ldr	r2, [pc, #80]	@ (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b056:	fa22 f303 	lsr.w	r3, r2, r3
 800b05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b05c:	e01e      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b05e:	4b11      	ldr	r3, [pc, #68]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b06a:	d106      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b06e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b072:	d102      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b074:	4b0d      	ldr	r3, [pc, #52]	@ (800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b078:	e010      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b07a:	4b0a      	ldr	r3, [pc, #40]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b082:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b086:	d106      	bne.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b08a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b08e:	d102      	bne.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b090:	4b07      	ldr	r3, [pc, #28]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b094:	e002      	b.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b09a:	e236      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b09c:	e235      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b09e:	4b05      	ldr	r3, [pc, #20]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0a2:	e232      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b0a4:	58024400 	.word	0x58024400
 800b0a8:	03d09000 	.word	0x03d09000
 800b0ac:	003d0900 	.word	0x003d0900
 800b0b0:	016e3600 	.word	0x016e3600
 800b0b4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0bc:	e225      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b0be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0c2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b0c6:	430b      	orrs	r3, r1
 800b0c8:	f040 8085 	bne.w	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b0cc:	4b9c      	ldr	r3, [pc, #624]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0d0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b0d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b0dc:	d06b      	beq.n	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b0e4:	d874      	bhi.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b0ec:	d056      	beq.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b0f4:	d86c      	bhi.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b0fc:	d03b      	beq.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b100:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b104:	d864      	bhi.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b108:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b10c:	d021      	beq.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b110:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b114:	d85c      	bhi.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d004      	beq.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b122:	d004      	beq.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b124:	e054      	b.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b126:	f7fe fb5f 	bl	80097e8 <HAL_RCC_GetPCLK1Freq>
 800b12a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b12c:	e1ed      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b12e:	4b84      	ldr	r3, [pc, #528]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b13a:	d107      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b13c:	f107 0318 	add.w	r3, r7, #24
 800b140:	4618      	mov	r0, r3
 800b142:	f000 fa05 	bl	800b550 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b14a:	e1de      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b150:	e1db      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b152:	4b7b      	ldr	r3, [pc, #492]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b15a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b15e:	d107      	bne.n	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b160:	f107 030c 	add.w	r3, r7, #12
 800b164:	4618      	mov	r0, r3
 800b166:	f000 fb47 	bl	800b7f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b16e:	e1cc      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b170:	2300      	movs	r3, #0
 800b172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b174:	e1c9      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b176:	4b72      	ldr	r3, [pc, #456]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f003 0304 	and.w	r3, r3, #4
 800b17e:	2b04      	cmp	r3, #4
 800b180:	d109      	bne.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b182:	4b6f      	ldr	r3, [pc, #444]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	08db      	lsrs	r3, r3, #3
 800b188:	f003 0303 	and.w	r3, r3, #3
 800b18c:	4a6d      	ldr	r2, [pc, #436]	@ (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b18e:	fa22 f303 	lsr.w	r3, r2, r3
 800b192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b194:	e1b9      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b196:	2300      	movs	r3, #0
 800b198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b19a:	e1b6      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b19c:	4b68      	ldr	r3, [pc, #416]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1a8:	d102      	bne.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b1aa:	4b67      	ldr	r3, [pc, #412]	@ (800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b1ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1ae:	e1ac      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b4:	e1a9      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b1b6:	4b62      	ldr	r3, [pc, #392]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1c2:	d102      	bne.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b1c4:	4b61      	ldr	r3, [pc, #388]	@ (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1c8:	e19f      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ce:	e19c      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1d4:	e199      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b1d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1da:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b1de:	430b      	orrs	r3, r1
 800b1e0:	d173      	bne.n	800b2ca <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b1e2:	4b57      	ldr	r3, [pc, #348]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b1ea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1f2:	d02f      	beq.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1fa:	d863      	bhi.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d004      	beq.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b208:	d012      	beq.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b20a:	e05b      	b.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b20c:	4b4c      	ldr	r3, [pc, #304]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b214:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b218:	d107      	bne.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b21a:	f107 0318 	add.w	r3, r7, #24
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 f996 	bl	800b550 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b228:	e16f      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b22e:	e16c      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b230:	4b43      	ldr	r3, [pc, #268]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b23c:	d107      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b23e:	f107 030c 	add.w	r3, r7, #12
 800b242:	4618      	mov	r0, r3
 800b244:	f000 fad8 	bl	800b7f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b24c:	e15d      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b252:	e15a      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b254:	4b3a      	ldr	r3, [pc, #232]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b258:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b25c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b25e:	4b38      	ldr	r3, [pc, #224]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f003 0304 	and.w	r3, r3, #4
 800b266:	2b04      	cmp	r3, #4
 800b268:	d10c      	bne.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d109      	bne.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b270:	4b33      	ldr	r3, [pc, #204]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	08db      	lsrs	r3, r3, #3
 800b276:	f003 0303 	and.w	r3, r3, #3
 800b27a:	4a32      	ldr	r2, [pc, #200]	@ (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b27c:	fa22 f303 	lsr.w	r3, r2, r3
 800b280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b282:	e01e      	b.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b284:	4b2e      	ldr	r3, [pc, #184]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b28c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b290:	d106      	bne.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b298:	d102      	bne.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b29a:	4b2b      	ldr	r3, [pc, #172]	@ (800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b29e:	e010      	b.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2a0:	4b27      	ldr	r3, [pc, #156]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2ac:	d106      	bne.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b2ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2b4:	d102      	bne.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2b6:	4b25      	ldr	r3, [pc, #148]	@ (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2ba:	e002      	b.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b2c0:	e123      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2c2:	e122      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2c8:	e11f      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b2ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2ce:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b2d2:	430b      	orrs	r3, r1
 800b2d4:	d13c      	bne.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b2d6:	4b1a      	ldr	r3, [pc, #104]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b2de:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d004      	beq.n	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2ec:	d012      	beq.n	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b2ee:	e023      	b.n	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2f0:	4b13      	ldr	r3, [pc, #76]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b2fc:	d107      	bne.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b302:	4618      	mov	r0, r3
 800b304:	f000 fbcc 	bl	800baa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b30c:	e0fd      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b312:	e0fa      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b314:	4b0a      	ldr	r3, [pc, #40]	@ (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b31c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b320:	d107      	bne.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b322:	f107 0318 	add.w	r3, r7, #24
 800b326:	4618      	mov	r0, r3
 800b328:	f000 f912 	bl	800b550 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b32c:	6a3b      	ldr	r3, [r7, #32]
 800b32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b330:	e0eb      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b332:	2300      	movs	r3, #0
 800b334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b336:	e0e8      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b338:	2300      	movs	r3, #0
 800b33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b33c:	e0e5      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b33e:	bf00      	nop
 800b340:	58024400 	.word	0x58024400
 800b344:	03d09000 	.word	0x03d09000
 800b348:	003d0900 	.word	0x003d0900
 800b34c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b350:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b354:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b358:	430b      	orrs	r3, r1
 800b35a:	f040 8085 	bne.w	800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b35e:	4b6d      	ldr	r3, [pc, #436]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b362:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b366:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b36e:	d06b      	beq.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b376:	d874      	bhi.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b37e:	d056      	beq.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b386:	d86c      	bhi.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b38e:	d03b      	beq.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b392:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b396:	d864      	bhi.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b39e:	d021      	beq.n	800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3a6:	d85c      	bhi.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d004      	beq.n	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3b4:	d004      	beq.n	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b3b6:	e054      	b.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b3b8:	f000 f8b4 	bl	800b524 <HAL_RCCEx_GetD3PCLK1Freq>
 800b3bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b3be:	e0a4      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3c0:	4b54      	ldr	r3, [pc, #336]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3cc:	d107      	bne.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3ce:	f107 0318 	add.w	r3, r7, #24
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f000 f8bc 	bl	800b550 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3dc:	e095      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3e2:	e092      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3e4:	4b4b      	ldr	r3, [pc, #300]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3f0:	d107      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3f2:	f107 030c 	add.w	r3, r7, #12
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 f9fe 	bl	800b7f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b400:	e083      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b402:	2300      	movs	r3, #0
 800b404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b406:	e080      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b408:	4b42      	ldr	r3, [pc, #264]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f003 0304 	and.w	r3, r3, #4
 800b410:	2b04      	cmp	r3, #4
 800b412:	d109      	bne.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b414:	4b3f      	ldr	r3, [pc, #252]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	08db      	lsrs	r3, r3, #3
 800b41a:	f003 0303 	and.w	r3, r3, #3
 800b41e:	4a3e      	ldr	r2, [pc, #248]	@ (800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b420:	fa22 f303 	lsr.w	r3, r2, r3
 800b424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b426:	e070      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b42c:	e06d      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b42e:	4b39      	ldr	r3, [pc, #228]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b43a:	d102      	bne.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b43c:	4b37      	ldr	r3, [pc, #220]	@ (800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b440:	e063      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b442:	2300      	movs	r3, #0
 800b444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b446:	e060      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b448:	4b32      	ldr	r3, [pc, #200]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b450:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b454:	d102      	bne.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b456:	4b32      	ldr	r3, [pc, #200]	@ (800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b45a:	e056      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b460:	e053      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b462:	2300      	movs	r3, #0
 800b464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b466:	e050      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b46c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b470:	430b      	orrs	r3, r1
 800b472:	d148      	bne.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b474:	4b27      	ldr	r3, [pc, #156]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b478:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b47c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b484:	d02a      	beq.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b48c:	d838      	bhi.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b490:	2b00      	cmp	r3, #0
 800b492:	d004      	beq.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b49a:	d00d      	beq.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b49c:	e030      	b.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b49e:	4b1d      	ldr	r3, [pc, #116]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4aa:	d102      	bne.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b4ac:	4b1c      	ldr	r3, [pc, #112]	@ (800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4b0:	e02b      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4b6:	e028      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4b8:	4b16      	ldr	r3, [pc, #88]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4c4:	d107      	bne.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f000 fae8 	bl	800baa0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4d4:	e019      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4da:	e016      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4dc:	4b0d      	ldr	r3, [pc, #52]	@ (800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4e8:	d107      	bne.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4ea:	f107 0318 	add.w	r3, r7, #24
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 f82e 	bl	800b550 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4f8:	e007      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4fe:	e004      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b500:	2300      	movs	r3, #0
 800b502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b504:	e001      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b506:	2300      	movs	r3, #0
 800b508:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b50a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3740      	adds	r7, #64	@ 0x40
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	58024400 	.word	0x58024400
 800b518:	03d09000 	.word	0x03d09000
 800b51c:	003d0900 	.word	0x003d0900
 800b520:	016e3600 	.word	0x016e3600

0800b524 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b528:	f7fe f92e 	bl	8009788 <HAL_RCC_GetHCLKFreq>
 800b52c:	4602      	mov	r2, r0
 800b52e:	4b06      	ldr	r3, [pc, #24]	@ (800b548 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b530:	6a1b      	ldr	r3, [r3, #32]
 800b532:	091b      	lsrs	r3, r3, #4
 800b534:	f003 0307 	and.w	r3, r3, #7
 800b538:	4904      	ldr	r1, [pc, #16]	@ (800b54c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b53a:	5ccb      	ldrb	r3, [r1, r3]
 800b53c:	f003 031f 	and.w	r3, r3, #31
 800b540:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b544:	4618      	mov	r0, r3
 800b546:	bd80      	pop	{r7, pc}
 800b548:	58024400 	.word	0x58024400
 800b54c:	08014fb4 	.word	0x08014fb4

0800b550 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b550:	b480      	push	{r7}
 800b552:	b089      	sub	sp, #36	@ 0x24
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b558:	4ba1      	ldr	r3, [pc, #644]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b55c:	f003 0303 	and.w	r3, r3, #3
 800b560:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b562:	4b9f      	ldr	r3, [pc, #636]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b566:	0b1b      	lsrs	r3, r3, #12
 800b568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b56c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b56e:	4b9c      	ldr	r3, [pc, #624]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b572:	091b      	lsrs	r3, r3, #4
 800b574:	f003 0301 	and.w	r3, r3, #1
 800b578:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b57a:	4b99      	ldr	r3, [pc, #612]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b57c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b57e:	08db      	lsrs	r3, r3, #3
 800b580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	fb02 f303 	mul.w	r3, r2, r3
 800b58a:	ee07 3a90 	vmov	s15, r3
 800b58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b592:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 8111 	beq.w	800b7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	f000 8083 	beq.w	800b6ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	f200 80a1 	bhi.w	800b6f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d003      	beq.n	800b5bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d056      	beq.n	800b668 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b5ba:	e099      	b.n	800b6f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5bc:	4b88      	ldr	r3, [pc, #544]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 0320 	and.w	r3, r3, #32
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d02d      	beq.n	800b624 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5c8:	4b85      	ldr	r3, [pc, #532]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	08db      	lsrs	r3, r3, #3
 800b5ce:	f003 0303 	and.w	r3, r3, #3
 800b5d2:	4a84      	ldr	r2, [pc, #528]	@ (800b7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b5d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b5d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	ee07 3a90 	vmov	s15, r3
 800b5e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	ee07 3a90 	vmov	s15, r3
 800b5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5f2:	4b7b      	ldr	r3, [pc, #492]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5fa:	ee07 3a90 	vmov	s15, r3
 800b5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b602:	ed97 6a03 	vldr	s12, [r7, #12]
 800b606:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b60a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b60e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b61a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b61e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b622:	e087      	b.n	800b734 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	ee07 3a90 	vmov	s15, r3
 800b62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b62e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b7ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b636:	4b6a      	ldr	r3, [pc, #424]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b63e:	ee07 3a90 	vmov	s15, r3
 800b642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b646:	ed97 6a03 	vldr	s12, [r7, #12]
 800b64a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b64e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b65a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b65e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b666:	e065      	b.n	800b734 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	ee07 3a90 	vmov	s15, r3
 800b66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b672:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b67a:	4b59      	ldr	r3, [pc, #356]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b67c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b682:	ee07 3a90 	vmov	s15, r3
 800b686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b68a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b68e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b69a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b69e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6aa:	e043      	b.n	800b734 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	ee07 3a90 	vmov	s15, r3
 800b6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b6ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6be:	4b48      	ldr	r3, [pc, #288]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6ee:	e021      	b.n	800b734 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	ee07 3a90 	vmov	s15, r3
 800b6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b6fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b702:	4b37      	ldr	r3, [pc, #220]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b70a:	ee07 3a90 	vmov	s15, r3
 800b70e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b712:	ed97 6a03 	vldr	s12, [r7, #12]
 800b716:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b71a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b71e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b72a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b72e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b732:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b734:	4b2a      	ldr	r3, [pc, #168]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b738:	0a5b      	lsrs	r3, r3, #9
 800b73a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b73e:	ee07 3a90 	vmov	s15, r3
 800b742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b746:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b74a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b74e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b75a:	ee17 2a90 	vmov	r2, s15
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b762:	4b1f      	ldr	r3, [pc, #124]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b766:	0c1b      	lsrs	r3, r3, #16
 800b768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b76c:	ee07 3a90 	vmov	s15, r3
 800b770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b774:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b778:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b77c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b788:	ee17 2a90 	vmov	r2, s15
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b790:	4b13      	ldr	r3, [pc, #76]	@ (800b7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b794:	0e1b      	lsrs	r3, r3, #24
 800b796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b79a:	ee07 3a90 	vmov	s15, r3
 800b79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7b6:	ee17 2a90 	vmov	r2, s15
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b7be:	e008      	b.n	800b7d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	609a      	str	r2, [r3, #8]
}
 800b7d2:	bf00      	nop
 800b7d4:	3724      	adds	r7, #36	@ 0x24
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	58024400 	.word	0x58024400
 800b7e4:	03d09000 	.word	0x03d09000
 800b7e8:	46000000 	.word	0x46000000
 800b7ec:	4c742400 	.word	0x4c742400
 800b7f0:	4a742400 	.word	0x4a742400
 800b7f4:	4bb71b00 	.word	0x4bb71b00

0800b7f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b089      	sub	sp, #36	@ 0x24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b800:	4ba1      	ldr	r3, [pc, #644]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b804:	f003 0303 	and.w	r3, r3, #3
 800b808:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b80a:	4b9f      	ldr	r3, [pc, #636]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b80c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b80e:	0d1b      	lsrs	r3, r3, #20
 800b810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b814:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b816:	4b9c      	ldr	r3, [pc, #624]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b81a:	0a1b      	lsrs	r3, r3, #8
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b822:	4b99      	ldr	r3, [pc, #612]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b826:	08db      	lsrs	r3, r3, #3
 800b828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b82c:	693a      	ldr	r2, [r7, #16]
 800b82e:	fb02 f303 	mul.w	r3, r2, r3
 800b832:	ee07 3a90 	vmov	s15, r3
 800b836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b83a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 8111 	beq.w	800ba68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	f000 8083 	beq.w	800b954 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	2b02      	cmp	r3, #2
 800b852:	f200 80a1 	bhi.w	800b998 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d003      	beq.n	800b864 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d056      	beq.n	800b910 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b862:	e099      	b.n	800b998 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b864:	4b88      	ldr	r3, [pc, #544]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f003 0320 	and.w	r3, r3, #32
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d02d      	beq.n	800b8cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b870:	4b85      	ldr	r3, [pc, #532]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	08db      	lsrs	r3, r3, #3
 800b876:	f003 0303 	and.w	r3, r3, #3
 800b87a:	4a84      	ldr	r2, [pc, #528]	@ (800ba8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b87c:	fa22 f303 	lsr.w	r3, r2, r3
 800b880:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	ee07 3a90 	vmov	s15, r3
 800b892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b89a:	4b7b      	ldr	r3, [pc, #492]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b89e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a2:	ee07 3a90 	vmov	s15, r3
 800b8a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ba90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b8ca:	e087      	b.n	800b9dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	ee07 3a90 	vmov	s15, r3
 800b8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ba94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b8da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8de:	4b6a      	ldr	r3, [pc, #424]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8e6:	ee07 3a90 	vmov	s15, r3
 800b8ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ba90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b90a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b90e:	e065      	b.n	800b9dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	ee07 3a90 	vmov	s15, r3
 800b916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ba98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b91e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b922:	4b59      	ldr	r3, [pc, #356]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b92a:	ee07 3a90 	vmov	s15, r3
 800b92e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b932:	ed97 6a03 	vldr	s12, [r7, #12]
 800b936:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ba90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b93a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b93e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b94a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b94e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b952:	e043      	b.n	800b9dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	ee07 3a90 	vmov	s15, r3
 800b95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b95e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ba9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b966:	4b48      	ldr	r3, [pc, #288]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b96a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b96e:	ee07 3a90 	vmov	s15, r3
 800b972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b976:	ed97 6a03 	vldr	s12, [r7, #12]
 800b97a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ba90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b97e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b98e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b996:	e021      	b.n	800b9dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	ee07 3a90 	vmov	s15, r3
 800b99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ba98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9aa:	4b37      	ldr	r3, [pc, #220]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b2:	ee07 3a90 	vmov	s15, r3
 800b9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ba90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b9dc:	4b2a      	ldr	r3, [pc, #168]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9e0:	0a5b      	lsrs	r3, r3, #9
 800b9e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9e6:	ee07 3a90 	vmov	s15, r3
 800b9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba02:	ee17 2a90 	vmov	r2, s15
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ba0a:	4b1f      	ldr	r3, [pc, #124]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba0e:	0c1b      	lsrs	r3, r3, #16
 800ba10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba14:	ee07 3a90 	vmov	s15, r3
 800ba18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba24:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba30:	ee17 2a90 	vmov	r2, s15
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ba38:	4b13      	ldr	r3, [pc, #76]	@ (800ba88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba3c:	0e1b      	lsrs	r3, r3, #24
 800ba3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba42:	ee07 3a90 	vmov	s15, r3
 800ba46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba52:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba5e:	ee17 2a90 	vmov	r2, s15
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ba66:	e008      	b.n	800ba7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	609a      	str	r2, [r3, #8]
}
 800ba7a:	bf00      	nop
 800ba7c:	3724      	adds	r7, #36	@ 0x24
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	58024400 	.word	0x58024400
 800ba8c:	03d09000 	.word	0x03d09000
 800ba90:	46000000 	.word	0x46000000
 800ba94:	4c742400 	.word	0x4c742400
 800ba98:	4a742400 	.word	0x4a742400
 800ba9c:	4bb71b00 	.word	0x4bb71b00

0800baa0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b089      	sub	sp, #36	@ 0x24
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800baa8:	4ba0      	ldr	r3, [pc, #640]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baac:	f003 0303 	and.w	r3, r3, #3
 800bab0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bab2:	4b9e      	ldr	r3, [pc, #632]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bab6:	091b      	lsrs	r3, r3, #4
 800bab8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800babc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800babe:	4b9b      	ldr	r3, [pc, #620]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac2:	f003 0301 	and.w	r3, r3, #1
 800bac6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bac8:	4b98      	ldr	r3, [pc, #608]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bacc:	08db      	lsrs	r3, r3, #3
 800bace:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bad2:	693a      	ldr	r2, [r7, #16]
 800bad4:	fb02 f303 	mul.w	r3, r2, r3
 800bad8:	ee07 3a90 	vmov	s15, r3
 800badc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f000 8111 	beq.w	800bd0e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	f000 8083 	beq.w	800bbfa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	f200 80a1 	bhi.w	800bc3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bafc:	69bb      	ldr	r3, [r7, #24]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d003      	beq.n	800bb0a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d056      	beq.n	800bbb6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bb08:	e099      	b.n	800bc3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb0a:	4b88      	ldr	r3, [pc, #544]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f003 0320 	and.w	r3, r3, #32
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d02d      	beq.n	800bb72 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb16:	4b85      	ldr	r3, [pc, #532]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	08db      	lsrs	r3, r3, #3
 800bb1c:	f003 0303 	and.w	r3, r3, #3
 800bb20:	4a83      	ldr	r2, [pc, #524]	@ (800bd30 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bb22:	fa22 f303 	lsr.w	r3, r2, r3
 800bb26:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	ee07 3a90 	vmov	s15, r3
 800bb2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	ee07 3a90 	vmov	s15, r3
 800bb38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb40:	4b7a      	ldr	r3, [pc, #488]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb48:	ee07 3a90 	vmov	s15, r3
 800bb4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb50:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb54:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800bd34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb6c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb70:	e087      	b.n	800bc82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	ee07 3a90 	vmov	s15, r3
 800bb78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800bd38 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bb80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb84:	4b69      	ldr	r3, [pc, #420]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb8c:	ee07 3a90 	vmov	s15, r3
 800bb90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb94:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb98:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800bd34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bba4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbb4:	e065      	b.n	800bc82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	ee07 3a90 	vmov	s15, r3
 800bbbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800bd3c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bbc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbc8:	4b58      	ldr	r3, [pc, #352]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd0:	ee07 3a90 	vmov	s15, r3
 800bbd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbd8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbdc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800bd34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbe8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbf8:	e043      	b.n	800bc82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	ee07 3a90 	vmov	s15, r3
 800bc00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc04:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800bd40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bc08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc0c:	4b47      	ldr	r3, [pc, #284]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc14:	ee07 3a90 	vmov	s15, r3
 800bc18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc20:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800bd34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc3c:	e021      	b.n	800bc82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	ee07 3a90 	vmov	s15, r3
 800bc44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc48:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bd38 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bc4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc50:	4b36      	ldr	r3, [pc, #216]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc58:	ee07 3a90 	vmov	s15, r3
 800bc5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc60:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc64:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bd34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc80:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bc82:	4b2a      	ldr	r3, [pc, #168]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc86:	0a5b      	lsrs	r3, r3, #9
 800bc88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc8c:	ee07 3a90 	vmov	s15, r3
 800bc90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bca8:	ee17 2a90 	vmov	r2, s15
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bcb0:	4b1e      	ldr	r3, [pc, #120]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcb4:	0c1b      	lsrs	r3, r3, #16
 800bcb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bcc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcca:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcd6:	ee17 2a90 	vmov	r2, s15
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bcde:	4b13      	ldr	r3, [pc, #76]	@ (800bd2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bce2:	0e1b      	lsrs	r3, r3, #24
 800bce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bce8:	ee07 3a90 	vmov	s15, r3
 800bcec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bcf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcf8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd04:	ee17 2a90 	vmov	r2, s15
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bd0c:	e008      	b.n	800bd20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	609a      	str	r2, [r3, #8]
}
 800bd20:	bf00      	nop
 800bd22:	3724      	adds	r7, #36	@ 0x24
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr
 800bd2c:	58024400 	.word	0x58024400
 800bd30:	03d09000 	.word	0x03d09000
 800bd34:	46000000 	.word	0x46000000
 800bd38:	4c742400 	.word	0x4c742400
 800bd3c:	4a742400 	.word	0x4a742400
 800bd40:	4bb71b00 	.word	0x4bb71b00

0800bd44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd52:	4b53      	ldr	r3, [pc, #332]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800bd54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd56:	f003 0303 	and.w	r3, r3, #3
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d101      	bne.n	800bd62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e099      	b.n	800be96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bd62:	4b4f      	ldr	r3, [pc, #316]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a4e      	ldr	r2, [pc, #312]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800bd68:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bd6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd6e:	f7f6 ff1d 	bl	8002bac <HAL_GetTick>
 800bd72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd74:	e008      	b.n	800bd88 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bd76:	f7f6 ff19 	bl	8002bac <HAL_GetTick>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	2b02      	cmp	r3, #2
 800bd82:	d901      	bls.n	800bd88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd84:	2303      	movs	r3, #3
 800bd86:	e086      	b.n	800be96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd88:	4b45      	ldr	r3, [pc, #276]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1f0      	bne.n	800bd76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bd94:	4b42      	ldr	r3, [pc, #264]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800bd96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd98:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	031b      	lsls	r3, r3, #12
 800bda2:	493f      	ldr	r1, [pc, #252]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800bda4:	4313      	orrs	r3, r2
 800bda6:	628b      	str	r3, [r1, #40]	@ 0x28
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	3b01      	subs	r3, #1
 800bdae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	025b      	lsls	r3, r3, #9
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	431a      	orrs	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	041b      	lsls	r3, r3, #16
 800bdc6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bdca:	431a      	orrs	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	691b      	ldr	r3, [r3, #16]
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	061b      	lsls	r3, r3, #24
 800bdd4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bdd8:	4931      	ldr	r1, [pc, #196]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800bdda:	4313      	orrs	r3, r2
 800bddc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bdde:	4b30      	ldr	r3, [pc, #192]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800bde0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	492d      	ldr	r1, [pc, #180]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800bdec:	4313      	orrs	r3, r2
 800bdee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bdf0:	4b2b      	ldr	r3, [pc, #172]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800bdf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf4:	f023 0220 	bic.w	r2, r3, #32
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	699b      	ldr	r3, [r3, #24]
 800bdfc:	4928      	ldr	r1, [pc, #160]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800bdfe:	4313      	orrs	r3, r2
 800be00:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800be02:	4b27      	ldr	r3, [pc, #156]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be06:	4a26      	ldr	r2, [pc, #152]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be08:	f023 0310 	bic.w	r3, r3, #16
 800be0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800be0e:	4b24      	ldr	r3, [pc, #144]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be12:	4b24      	ldr	r3, [pc, #144]	@ (800bea4 <RCCEx_PLL2_Config+0x160>)
 800be14:	4013      	ands	r3, r2
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	69d2      	ldr	r2, [r2, #28]
 800be1a:	00d2      	lsls	r2, r2, #3
 800be1c:	4920      	ldr	r1, [pc, #128]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be1e:	4313      	orrs	r3, r2
 800be20:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800be22:	4b1f      	ldr	r3, [pc, #124]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be26:	4a1e      	ldr	r2, [pc, #120]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be28:	f043 0310 	orr.w	r3, r3, #16
 800be2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d106      	bne.n	800be42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800be34:	4b1a      	ldr	r3, [pc, #104]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be38:	4a19      	ldr	r2, [pc, #100]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800be3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800be40:	e00f      	b.n	800be62 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d106      	bne.n	800be56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800be48:	4b15      	ldr	r3, [pc, #84]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be4c:	4a14      	ldr	r2, [pc, #80]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800be54:	e005      	b.n	800be62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800be56:	4b12      	ldr	r3, [pc, #72]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5a:	4a11      	ldr	r2, [pc, #68]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800be60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800be62:	4b0f      	ldr	r3, [pc, #60]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a0e      	ldr	r2, [pc, #56]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800be6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be6e:	f7f6 fe9d 	bl	8002bac <HAL_GetTick>
 800be72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be74:	e008      	b.n	800be88 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be76:	f7f6 fe99 	bl	8002bac <HAL_GetTick>
 800be7a:	4602      	mov	r2, r0
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	1ad3      	subs	r3, r2, r3
 800be80:	2b02      	cmp	r3, #2
 800be82:	d901      	bls.n	800be88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be84:	2303      	movs	r3, #3
 800be86:	e006      	b.n	800be96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be88:	4b05      	ldr	r3, [pc, #20]	@ (800bea0 <RCCEx_PLL2_Config+0x15c>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d0f0      	beq.n	800be76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800be94:	7bfb      	ldrb	r3, [r7, #15]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	58024400 	.word	0x58024400
 800bea4:	ffff0007 	.word	0xffff0007

0800bea8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800beb2:	2300      	movs	r3, #0
 800beb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800beb6:	4b53      	ldr	r3, [pc, #332]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800beb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beba:	f003 0303 	and.w	r3, r3, #3
 800bebe:	2b03      	cmp	r3, #3
 800bec0:	d101      	bne.n	800bec6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	e099      	b.n	800bffa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bec6:	4b4f      	ldr	r3, [pc, #316]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a4e      	ldr	r2, [pc, #312]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800becc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bed2:	f7f6 fe6b 	bl	8002bac <HAL_GetTick>
 800bed6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bed8:	e008      	b.n	800beec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800beda:	f7f6 fe67 	bl	8002bac <HAL_GetTick>
 800bede:	4602      	mov	r2, r0
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d901      	bls.n	800beec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bee8:	2303      	movs	r3, #3
 800beea:	e086      	b.n	800bffa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800beec:	4b45      	ldr	r3, [pc, #276]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d1f0      	bne.n	800beda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bef8:	4b42      	ldr	r3, [pc, #264]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800befa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800befc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	051b      	lsls	r3, r3, #20
 800bf06:	493f      	ldr	r1, [pc, #252]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	628b      	str	r3, [r1, #40]	@ 0x28
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	3b01      	subs	r3, #1
 800bf12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	025b      	lsls	r3, r3, #9
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	431a      	orrs	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	3b01      	subs	r3, #1
 800bf28:	041b      	lsls	r3, r3, #16
 800bf2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bf2e:	431a      	orrs	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	3b01      	subs	r3, #1
 800bf36:	061b      	lsls	r3, r3, #24
 800bf38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bf3c:	4931      	ldr	r1, [pc, #196]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bf42:	4b30      	ldr	r3, [pc, #192]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	695b      	ldr	r3, [r3, #20]
 800bf4e:	492d      	ldr	r1, [pc, #180]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf50:	4313      	orrs	r3, r2
 800bf52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bf54:	4b2b      	ldr	r3, [pc, #172]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf58:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	699b      	ldr	r3, [r3, #24]
 800bf60:	4928      	ldr	r1, [pc, #160]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf62:	4313      	orrs	r3, r2
 800bf64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bf66:	4b27      	ldr	r3, [pc, #156]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf6a:	4a26      	ldr	r2, [pc, #152]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bf72:	4b24      	ldr	r3, [pc, #144]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf76:	4b24      	ldr	r3, [pc, #144]	@ (800c008 <RCCEx_PLL3_Config+0x160>)
 800bf78:	4013      	ands	r3, r2
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	69d2      	ldr	r2, [r2, #28]
 800bf7e:	00d2      	lsls	r2, r2, #3
 800bf80:	4920      	ldr	r1, [pc, #128]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf82:	4313      	orrs	r3, r2
 800bf84:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bf86:	4b1f      	ldr	r3, [pc, #124]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf8a:	4a1e      	ldr	r2, [pc, #120]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d106      	bne.n	800bfa6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bf98:	4b1a      	ldr	r3, [pc, #104]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf9c:	4a19      	ldr	r2, [pc, #100]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bf9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bfa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bfa4:	e00f      	b.n	800bfc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d106      	bne.n	800bfba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bfac:	4b15      	ldr	r3, [pc, #84]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bfae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfb0:	4a14      	ldr	r2, [pc, #80]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bfb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bfb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bfb8:	e005      	b.n	800bfc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bfba:	4b12      	ldr	r3, [pc, #72]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bfbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfbe:	4a11      	ldr	r2, [pc, #68]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bfc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bfc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bfc6:	4b0f      	ldr	r3, [pc, #60]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a0e      	ldr	r2, [pc, #56]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bfcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bfd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfd2:	f7f6 fdeb 	bl	8002bac <HAL_GetTick>
 800bfd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bfd8:	e008      	b.n	800bfec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bfda:	f7f6 fde7 	bl	8002bac <HAL_GetTick>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d901      	bls.n	800bfec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	e006      	b.n	800bffa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bfec:	4b05      	ldr	r3, [pc, #20]	@ (800c004 <RCCEx_PLL3_Config+0x15c>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d0f0      	beq.n	800bfda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	58024400 	.word	0x58024400
 800c008:	ffff0007 	.word	0xffff0007

0800c00c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08a      	sub	sp, #40	@ 0x28
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d101      	bne.n	800c01e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e075      	b.n	800c10a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c024:	b2db      	uxtb	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d105      	bne.n	800c036 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7f6 fa23 	bl	800247c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2204      	movs	r2, #4
 800c03a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f868 	bl	800c114 <HAL_SD_InitCard>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d001      	beq.n	800c04e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c04a:	2301      	movs	r3, #1
 800c04c:	e05d      	b.n	800c10a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c04e:	f107 0308 	add.w	r3, r7, #8
 800c052:	4619      	mov	r1, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fdaf 	bl	800cbb8 <HAL_SD_GetCardStatus>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e052      	b.n	800c10a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c064:	7e3b      	ldrb	r3, [r7, #24]
 800c066:	b2db      	uxtb	r3, r3
 800c068:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c06a:	7e7b      	ldrb	r3, [r7, #25]
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c074:	2b01      	cmp	r3, #1
 800c076:	d10a      	bne.n	800c08e <HAL_SD_Init+0x82>
 800c078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d102      	bne.n	800c084 <HAL_SD_Init+0x78>
 800c07e:	6a3b      	ldr	r3, [r7, #32]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d004      	beq.n	800c08e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c08a:	659a      	str	r2, [r3, #88]	@ 0x58
 800c08c:	e00b      	b.n	800c0a6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c092:	2b01      	cmp	r3, #1
 800c094:	d104      	bne.n	800c0a0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c09c:	659a      	str	r2, [r3, #88]	@ 0x58
 800c09e:	e002      	b.n	800c0a6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fe6d 	bl	800cd8c <HAL_SD_ConfigWideBusOperation>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d001      	beq.n	800c0bc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e026      	b.n	800c10a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c0bc:	f7f6 fd76 	bl	8002bac <HAL_GetTick>
 800c0c0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c0c2:	e011      	b.n	800c0e8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c0c4:	f7f6 fd72 	bl	8002bac <HAL_GetTick>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d2:	d109      	bne.n	800c0e8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c0da:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	e010      	b.n	800c10a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 ff61 	bl	800cfb0 <HAL_SD_GetCardState>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b04      	cmp	r3, #4
 800c0f2:	d1e7      	bne.n	800c0c4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3728      	adds	r7, #40	@ 0x28
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
	...

0800c114 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c114:	b590      	push	{r4, r7, lr}
 800c116:	b08d      	sub	sp, #52	@ 0x34
 800c118:	af02      	add	r7, sp, #8
 800c11a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c11c:	2300      	movs	r3, #0
 800c11e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c120:	2300      	movs	r3, #0
 800c122:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c124:	2300      	movs	r3, #0
 800c126:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c128:	2300      	movs	r3, #0
 800c12a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c12c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c130:	f04f 0100 	mov.w	r1, #0
 800c134:	f7fe fd24 	bl	800ab80 <HAL_RCCEx_GetPeriphCLKFreq>
 800c138:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d109      	bne.n	800c154 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c14e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	e070      	b.n	800c236 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c156:	0a1b      	lsrs	r3, r3, #8
 800c158:	4a39      	ldr	r2, [pc, #228]	@ (800c240 <HAL_SD_InitCard+0x12c>)
 800c15a:	fba2 2303 	umull	r2, r3, r2, r3
 800c15e:	091b      	lsrs	r3, r3, #4
 800c160:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681c      	ldr	r4, [r3, #0]
 800c166:	466a      	mov	r2, sp
 800c168:	f107 0318 	add.w	r3, r7, #24
 800c16c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c170:	e882 0003 	stmia.w	r2, {r0, r1}
 800c174:	f107 030c 	add.w	r3, r7, #12
 800c178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c17a:	4620      	mov	r0, r4
 800c17c:	f003 fffe 	bl	801017c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4618      	mov	r0, r3
 800c186:	f004 f841 	bl	801020c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d005      	beq.n	800c19c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c196:	fbb2 f3f3 	udiv	r3, r2, r3
 800c19a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d007      	beq.n	800c1b2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c1a2:	4a28      	ldr	r2, [pc, #160]	@ (800c244 <HAL_SD_InitCard+0x130>)
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7f6 fd09 	bl	8002bc4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 ffea 	bl	800d18c <SD_PowerON>
 800c1b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c1ba:	6a3b      	ldr	r3, [r7, #32]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00b      	beq.n	800c1d8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1cc:	6a3b      	ldr	r3, [r7, #32]
 800c1ce:	431a      	orrs	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e02e      	b.n	800c236 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 ff09 	bl	800cff0 <SD_InitCard>
 800c1de:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c1e0:	6a3b      	ldr	r3, [r7, #32]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00b      	beq.n	800c1fe <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1f2:	6a3b      	ldr	r3, [r7, #32]
 800c1f4:	431a      	orrs	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e01b      	b.n	800c236 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c206:	4618      	mov	r0, r3
 800c208:	f004 f896 	bl	8010338 <SDMMC_CmdBlockLength>
 800c20c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c20e:	6a3b      	ldr	r3, [r7, #32]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00f      	beq.n	800c234 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a0b      	ldr	r2, [pc, #44]	@ (800c248 <HAL_SD_InitCard+0x134>)
 800c21a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c220:	6a3b      	ldr	r3, [r7, #32]
 800c222:	431a      	orrs	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	e000      	b.n	800c236 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	372c      	adds	r7, #44	@ 0x2c
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd90      	pop	{r4, r7, pc}
 800c23e:	bf00      	nop
 800c240:	014f8b59 	.word	0x014f8b59
 800c244:	00012110 	.word	0x00012110
 800c248:	1fe00fff 	.word	0x1fe00fff

0800c24c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b08c      	sub	sp, #48	@ 0x30
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
 800c258:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d107      	bne.n	800c274 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c268:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	e08d      	b.n	800c390 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	f040 8086 	bne.w	800c38e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	441a      	add	r2, r3
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c292:	429a      	cmp	r2, r3
 800c294:	d907      	bls.n	800c2a6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c29a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e074      	b.n	800c390 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2203      	movs	r2, #3
 800c2aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	68ba      	ldr	r2, [r7, #8]
 800c2ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	025a      	lsls	r2, r3, #9
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d002      	beq.n	800c2d2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ce:	025b      	lsls	r3, r3, #9
 800c2d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	025b      	lsls	r3, r3, #9
 800c2dc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c2de:	2390      	movs	r3, #144	@ 0x90
 800c2e0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c2e2:	2302      	movs	r3, #2
 800c2e4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f107 0210 	add.w	r2, r7, #16
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f003 fff1 	bl	80102e0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68da      	ldr	r2, [r3, #12]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c30c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2201      	movs	r2, #1
 800c31c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d90a      	bls.n	800c33a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2282      	movs	r2, #130	@ 0x82
 800c328:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c330:	4618      	mov	r0, r3
 800c332:	f004 f847 	bl	80103c4 <SDMMC_CmdReadMultiBlock>
 800c336:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c338:	e009      	b.n	800c34e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2281      	movs	r2, #129	@ 0x81
 800c33e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c346:	4618      	mov	r0, r3
 800c348:	f004 f819 	bl	801037e <SDMMC_CmdReadSingleBlock>
 800c34c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c350:	2b00      	cmp	r3, #0
 800c352:	d012      	beq.n	800c37a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a0f      	ldr	r2, [pc, #60]	@ (800c398 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c35a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c362:	431a      	orrs	r2, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2201      	movs	r2, #1
 800c36c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2200      	movs	r2, #0
 800c374:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	e00a      	b.n	800c390 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c388:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	e000      	b.n	800c390 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c38e:	2302      	movs	r3, #2
  }
}
 800c390:	4618      	mov	r0, r3
 800c392:	3730      	adds	r7, #48	@ 0x30
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	1fe00fff 	.word	0x1fe00fff

0800c39c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b08c      	sub	sp, #48	@ 0x30
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
 800c3a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d107      	bne.n	800c3c4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3b8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e08d      	b.n	800c4e0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	f040 8086 	bne.w	800c4de <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c3d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	441a      	add	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d907      	bls.n	800c3f6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3ea:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e074      	b.n	800c4e0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2203      	movs	r2, #3
 800c3fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2200      	movs	r2, #0
 800c404:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	025a      	lsls	r2, r3, #9
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d002      	beq.n	800c422 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c41e:	025b      	lsls	r3, r3, #9
 800c420:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c422:	f04f 33ff 	mov.w	r3, #4294967295
 800c426:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	025b      	lsls	r3, r3, #9
 800c42c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c42e:	2390      	movs	r3, #144	@ 0x90
 800c430:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c432:	2300      	movs	r3, #0
 800c434:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c436:	2300      	movs	r3, #0
 800c438:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c43a:	2300      	movs	r3, #0
 800c43c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f107 0210 	add.w	r2, r7, #16
 800c446:	4611      	mov	r1, r2
 800c448:	4618      	mov	r0, r3
 800c44a:	f003 ff49 	bl	80102e0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	68da      	ldr	r2, [r3, #12]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c45c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2201      	movs	r2, #1
 800c46c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d90a      	bls.n	800c48a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	22a0      	movs	r2, #160	@ 0xa0
 800c478:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c480:	4618      	mov	r0, r3
 800c482:	f003 ffe5 	bl	8010450 <SDMMC_CmdWriteMultiBlock>
 800c486:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c488:	e009      	b.n	800c49e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2290      	movs	r2, #144	@ 0x90
 800c48e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c496:	4618      	mov	r0, r3
 800c498:	f003 ffb7 	bl	801040a <SDMMC_CmdWriteSingleBlock>
 800c49c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d012      	beq.n	800c4ca <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a0f      	ldr	r2, [pc, #60]	@ (800c4e8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c4aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b2:	431a      	orrs	r2, r3
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e00a      	b.n	800c4e0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800c4d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	e000      	b.n	800c4e0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c4de:	2302      	movs	r3, #2
  }
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3730      	adds	r7, #48	@ 0x30
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	1fe00fff 	.word	0x1fe00fff

0800c4ec <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d008      	beq.n	800c51a <HAL_SD_IRQHandler+0x2e>
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f003 0308 	and.w	r3, r3, #8
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d003      	beq.n	800c51a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f001 f926 	bl	800d764 <SD_Read_IT>
 800c518:	e19a      	b.n	800c850 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c524:	2b00      	cmp	r3, #0
 800c526:	f000 80ac 	beq.w	800c682 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c532:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	4b59      	ldr	r3, [pc, #356]	@ (800c6a4 <HAL_SD_IRQHandler+0x1b8>)
 800c540:	400b      	ands	r3, r1
 800c542:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c552:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68da      	ldr	r2, [r3, #12]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c562:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f003 0308 	and.w	r3, r3, #8
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d038      	beq.n	800c5e0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f003 0302 	and.w	r3, r3, #2
 800c574:	2b00      	cmp	r3, #0
 800c576:	d104      	bne.n	800c582 <HAL_SD_IRQHandler+0x96>
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f003 0320 	and.w	r3, r3, #32
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d011      	beq.n	800c5a6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4618      	mov	r0, r3
 800c588:	f003 ff86 	bl	8010498 <SDMMC_CmdStopTransfer>
 800c58c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d008      	beq.n	800c5a6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	431a      	orrs	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f95b 	bl	800c85c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a3f      	ldr	r2, [pc, #252]	@ (800c6a8 <HAL_SD_IRQHandler+0x1bc>)
 800c5ac:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f003 0301 	and.w	r3, r3, #1
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d104      	bne.n	800c5d0 <HAL_SD_IRQHandler+0xe4>
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f003 0302 	and.w	r3, r3, #2
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d003      	beq.n	800c5d8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f004 fc39 	bl	8010e48 <HAL_SD_RxCpltCallback>
 800c5d6:	e13b      	b.n	800c850 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f004 fc2b 	bl	8010e34 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c5de:	e137      	b.n	800c850 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f000 8132 	beq.w	800c850 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2200      	movs	r2, #0
 800c602:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f003 0302 	and.w	r3, r3, #2
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d104      	bne.n	800c618 <HAL_SD_IRQHandler+0x12c>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f003 0320 	and.w	r3, r3, #32
 800c614:	2b00      	cmp	r3, #0
 800c616:	d011      	beq.n	800c63c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4618      	mov	r0, r3
 800c61e:	f003 ff3b 	bl	8010498 <SDMMC_CmdStopTransfer>
 800c622:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d008      	beq.n	800c63c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	431a      	orrs	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f910 	bl	800c85c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f003 0310 	and.w	r3, r3, #16
 800c650:	2b00      	cmp	r3, #0
 800c652:	d104      	bne.n	800c65e <HAL_SD_IRQHandler+0x172>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f003 0320 	and.w	r3, r3, #32
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d002      	beq.n	800c664 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f004 fbe8 	bl	8010e34 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f003 0301 	and.w	r3, r3, #1
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d105      	bne.n	800c67a <HAL_SD_IRQHandler+0x18e>
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f003 0302 	and.w	r3, r3, #2
 800c674:	2b00      	cmp	r3, #0
 800c676:	f000 80eb 	beq.w	800c850 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f004 fbe4 	bl	8010e48 <HAL_SD_RxCpltCallback>
}
 800c680:	e0e6      	b.n	800c850 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c688:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00d      	beq.n	800c6ac <HAL_SD_IRQHandler+0x1c0>
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f003 0308 	and.w	r3, r3, #8
 800c696:	2b00      	cmp	r3, #0
 800c698:	d008      	beq.n	800c6ac <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f001 f8a8 	bl	800d7f0 <SD_Write_IT>
 800c6a0:	e0d6      	b.n	800c850 <HAL_SD_IRQHandler+0x364>
 800c6a2:	bf00      	nop
 800c6a4:	ffff3ec5 	.word	0xffff3ec5
 800c6a8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6b2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	f000 809d 	beq.w	800c7f6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6c2:	f003 0302 	and.w	r3, r3, #2
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d005      	beq.n	800c6d6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ce:	f043 0202 	orr.w	r2, r3, #2
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6dc:	f003 0308 	and.w	r3, r3, #8
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d005      	beq.n	800c6f0 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6e8:	f043 0208 	orr.w	r2, r3, #8
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6f6:	f003 0320 	and.w	r3, r3, #32
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d005      	beq.n	800c70a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c702:	f043 0220 	orr.w	r2, r3, #32
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c710:	f003 0310 	and.w	r3, r3, #16
 800c714:	2b00      	cmp	r3, #0
 800c716:	d005      	beq.n	800c724 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c71c:	f043 0210 	orr.w	r2, r3, #16
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a4b      	ldr	r2, [pc, #300]	@ (800c858 <HAL_SD_IRQHandler+0x36c>)
 800c72a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c73a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	68da      	ldr	r2, [r3, #12]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c74a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c75a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	68da      	ldr	r2, [r3, #12]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c76a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4618      	mov	r0, r3
 800c772:	f003 fe91 	bl	8010498 <SDMMC_CmdStopTransfer>
 800c776:	4602      	mov	r2, r0
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c77c:	431a      	orrs	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	68da      	ldr	r2, [r3, #12]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c790:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c79a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f003 0308 	and.w	r3, r3, #8
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00a      	beq.n	800c7bc <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 f851 	bl	800c85c <HAL_SD_ErrorCallback>
}
 800c7ba:	e049      	b.n	800c850 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d044      	beq.n	800c850 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d040      	beq.n	800c850 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c7dc:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f834 	bl	800c85c <HAL_SD_ErrorCallback>
}
 800c7f4:	e02c      	b.n	800c850 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c800:	2b00      	cmp	r3, #0
 800c802:	d025      	beq.n	800c850 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c80c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c814:	f003 0304 	and.w	r3, r3, #4
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10c      	bne.n	800c836 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f003 0320 	and.w	r3, r3, #32
 800c822:	2b00      	cmp	r3, #0
 800c824:	d003      	beq.n	800c82e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f001 f84a 	bl	800d8c0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c82c:	e010      	b.n	800c850 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f001 f832 	bl	800d898 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c834:	e00c      	b.n	800c850 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f003 0320 	and.w	r3, r3, #32
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d003      	beq.n	800c848 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f001 f833 	bl	800d8ac <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c846:	e003      	b.n	800c850 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f001 f81b 	bl	800d884 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c84e:	e7ff      	b.n	800c850 <HAL_SD_IRQHandler+0x364>
 800c850:	bf00      	nop
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	18000f3a 	.word	0x18000f3a

0800c85c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c864:	bf00      	nop
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c87e:	0f9b      	lsrs	r3, r3, #30
 800c880:	b2da      	uxtb	r2, r3
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c88a:	0e9b      	lsrs	r3, r3, #26
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	f003 030f 	and.w	r3, r3, #15
 800c892:	b2da      	uxtb	r2, r3
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c89c:	0e1b      	lsrs	r3, r3, #24
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	f003 0303 	and.w	r3, r3, #3
 800c8a4:	b2da      	uxtb	r2, r3
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8ae:	0c1b      	lsrs	r3, r3, #16
 800c8b0:	b2da      	uxtb	r2, r3
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8ba:	0a1b      	lsrs	r3, r3, #8
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8d0:	0d1b      	lsrs	r3, r3, #20
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8dc:	0c1b      	lsrs	r3, r3, #16
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	f003 030f 	and.w	r3, r3, #15
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8ee:	0bdb      	lsrs	r3, r3, #15
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	f003 0301 	and.w	r3, r3, #1
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c900:	0b9b      	lsrs	r3, r3, #14
 800c902:	b2db      	uxtb	r3, r3
 800c904:	f003 0301 	and.w	r3, r3, #1
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c912:	0b5b      	lsrs	r3, r3, #13
 800c914:	b2db      	uxtb	r3, r3
 800c916:	f003 0301 	and.w	r3, r3, #1
 800c91a:	b2da      	uxtb	r2, r3
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c924:	0b1b      	lsrs	r3, r3, #12
 800c926:	b2db      	uxtb	r3, r3
 800c928:	f003 0301 	and.w	r3, r3, #1
 800c92c:	b2da      	uxtb	r2, r3
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	2200      	movs	r2, #0
 800c936:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d163      	bne.n	800ca08 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c944:	009a      	lsls	r2, r3, #2
 800c946:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c94a:	4013      	ands	r3, r2
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c950:	0f92      	lsrs	r2, r2, #30
 800c952:	431a      	orrs	r2, r3
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c95c:	0edb      	lsrs	r3, r3, #27
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	f003 0307 	and.w	r3, r3, #7
 800c964:	b2da      	uxtb	r2, r3
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c96e:	0e1b      	lsrs	r3, r3, #24
 800c970:	b2db      	uxtb	r3, r3
 800c972:	f003 0307 	and.w	r3, r3, #7
 800c976:	b2da      	uxtb	r2, r3
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c980:	0d5b      	lsrs	r3, r3, #21
 800c982:	b2db      	uxtb	r3, r3
 800c984:	f003 0307 	and.w	r3, r3, #7
 800c988:	b2da      	uxtb	r2, r3
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c992:	0c9b      	lsrs	r3, r3, #18
 800c994:	b2db      	uxtb	r3, r3
 800c996:	f003 0307 	and.w	r3, r3, #7
 800c99a:	b2da      	uxtb	r2, r3
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9a4:	0bdb      	lsrs	r3, r3, #15
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	f003 0307 	and.w	r3, r3, #7
 800c9ac:	b2da      	uxtb	r2, r3
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	1c5a      	adds	r2, r3, #1
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	7e1b      	ldrb	r3, [r3, #24]
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	f003 0307 	and.w	r3, r3, #7
 800c9c6:	3302      	adds	r3, #2
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c9d2:	fb03 f202 	mul.w	r2, r3, r2
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	7a1b      	ldrb	r3, [r3, #8]
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	f003 030f 	and.w	r3, r3, #15
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	409a      	lsls	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c9f4:	0a52      	lsrs	r2, r2, #9
 800c9f6:	fb03 f202 	mul.w	r2, r3, r2
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca04:	655a      	str	r2, [r3, #84]	@ 0x54
 800ca06:	e031      	b.n	800ca6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d11d      	bne.n	800ca4c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca14:	041b      	lsls	r3, r3, #16
 800ca16:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca1e:	0c1b      	lsrs	r3, r3, #16
 800ca20:	431a      	orrs	r2, r3
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	029a      	lsls	r2, r3, #10
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca40:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	655a      	str	r2, [r3, #84]	@ 0x54
 800ca4a:	e00f      	b.n	800ca6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a58      	ldr	r2, [pc, #352]	@ (800cbb4 <HAL_SD_GetCardCSD+0x344>)
 800ca52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e09d      	b.n	800cba8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca70:	0b9b      	lsrs	r3, r3, #14
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	f003 0301 	and.w	r3, r3, #1
 800ca78:	b2da      	uxtb	r2, r3
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca82:	09db      	lsrs	r3, r3, #7
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800caa4:	0fdb      	lsrs	r3, r3, #31
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cab0:	0f5b      	lsrs	r3, r3, #29
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	f003 0303 	and.w	r3, r3, #3
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cac2:	0e9b      	lsrs	r3, r3, #26
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	f003 0307 	and.w	r3, r3, #7
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cad4:	0d9b      	lsrs	r3, r3, #22
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	f003 030f 	and.w	r3, r3, #15
 800cadc:	b2da      	uxtb	r2, r3
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cae6:	0d5b      	lsrs	r3, r3, #21
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	f003 0301 	and.w	r3, r3, #1
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	2200      	movs	r2, #0
 800cafa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb02:	0c1b      	lsrs	r3, r3, #16
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	f003 0301 	and.w	r3, r3, #1
 800cb0a:	b2da      	uxtb	r2, r3
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb16:	0bdb      	lsrs	r3, r3, #15
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	f003 0301 	and.w	r3, r3, #1
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb2a:	0b9b      	lsrs	r3, r3, #14
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	f003 0301 	and.w	r3, r3, #1
 800cb32:	b2da      	uxtb	r2, r3
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb3e:	0b5b      	lsrs	r3, r3, #13
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	f003 0301 	and.w	r3, r3, #1
 800cb46:	b2da      	uxtb	r2, r3
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb52:	0b1b      	lsrs	r3, r3, #12
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	f003 0301 	and.w	r3, r3, #1
 800cb5a:	b2da      	uxtb	r2, r3
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb66:	0a9b      	lsrs	r3, r3, #10
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	f003 0303 	and.w	r3, r3, #3
 800cb6e:	b2da      	uxtb	r2, r3
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb7a:	0a1b      	lsrs	r3, r3, #8
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	f003 0303 	and.w	r3, r3, #3
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb8e:	085b      	lsrs	r3, r3, #1
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb96:	b2da      	uxtb	r2, r3
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	2201      	movs	r2, #1
 800cba2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr
 800cbb4:	1fe00fff 	.word	0x1fe00fff

0800cbb8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b094      	sub	sp, #80	@ 0x50
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	2b03      	cmp	r3, #3
 800cbd2:	d101      	bne.n	800cbd8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	e0a7      	b.n	800cd28 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cbd8:	f107 0308 	add.w	r3, r7, #8
 800cbdc:	4619      	mov	r1, r3
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 fb62 	bl	800d2a8 <SD_SendSDStatus>
 800cbe4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cbe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d011      	beq.n	800cc10 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a4f      	ldr	r2, [pc, #316]	@ (800cd30 <HAL_SD_GetCardStatus+0x178>)
 800cbf2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbfa:	431a      	orrs	r2, r3
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2201      	movs	r2, #1
 800cc04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800cc0e:	e070      	b.n	800ccf2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	099b      	lsrs	r3, r3, #6
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	f003 0303 	and.w	r3, r3, #3
 800cc1a:	b2da      	uxtb	r2, r3
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	095b      	lsrs	r3, r3, #5
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	b2da      	uxtb	r2, r3
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	0a1b      	lsrs	r3, r3, #8
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	0e1b      	lsrs	r3, r3, #24
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	4313      	orrs	r3, r2
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	061a      	lsls	r2, r3, #24
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	021b      	lsls	r3, r3, #8
 800cc52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cc56:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	0a1b      	lsrs	r3, r3, #8
 800cc5c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cc60:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	0e1b      	lsrs	r3, r3, #24
 800cc66:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	b2da      	uxtb	r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	0a1b      	lsrs	r3, r3, #8
 800cc78:	b2da      	uxtb	r2, r3
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	0d1b      	lsrs	r3, r3, #20
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	f003 030f 	and.w	r3, r3, #15
 800cc88:	b2da      	uxtb	r2, r3
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	0c1b      	lsrs	r3, r3, #16
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cc98:	b29a      	uxth	r2, r3
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	4313      	orrs	r3, r2
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	0a9b      	lsrs	r3, r3, #10
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ccb4:	b2da      	uxtb	r2, r3
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	0a1b      	lsrs	r3, r3, #8
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	f003 0303 	and.w	r3, r3, #3
 800ccc4:	b2da      	uxtb	r2, r3
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	091b      	lsrs	r3, r3, #4
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	f003 030f 	and.w	r3, r3, #15
 800ccd4:	b2da      	uxtb	r2, r3
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	f003 030f 	and.w	r3, r3, #15
 800cce2:	b2da      	uxtb	r2, r3
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	0e1b      	lsrs	r3, r3, #24
 800ccec:	b2da      	uxtb	r2, r3
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f003 fb1c 	bl	8010338 <SDMMC_CmdBlockLength>
 800cd00:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00d      	beq.n	800cd24 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a08      	ldr	r2, [pc, #32]	@ (800cd30 <HAL_SD_GetCardStatus+0x178>)
 800cd0e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd14:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800cd24:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3750      	adds	r7, #80	@ 0x50
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	1fe00fff 	.word	0x1fe00fff

0800cd34 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b083      	sub	sp, #12
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	370c      	adds	r7, #12
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr

0800cd8c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cd8c:	b590      	push	{r4, r7, lr}
 800cd8e:	b08d      	sub	sp, #52	@ 0x34
 800cd90:	af02      	add	r7, sp, #8
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2203      	movs	r2, #3
 800cda0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cda8:	2b03      	cmp	r3, #3
 800cdaa:	d02e      	beq.n	800ce0a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cdb2:	d106      	bne.n	800cdc2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	635a      	str	r2, [r3, #52]	@ 0x34
 800cdc0:	e029      	b.n	800ce16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cdc8:	d10a      	bne.n	800cde0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fb64 	bl	800d498 <SD_WideBus_Enable>
 800cdd0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cdd6:	6a3b      	ldr	r3, [r7, #32]
 800cdd8:	431a      	orrs	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	635a      	str	r2, [r3, #52]	@ 0x34
 800cdde:	e01a      	b.n	800ce16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10a      	bne.n	800cdfc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fba1 	bl	800d52e <SD_WideBus_Disable>
 800cdec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cdf2:	6a3b      	ldr	r3, [r7, #32]
 800cdf4:	431a      	orrs	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	635a      	str	r2, [r3, #52]	@ 0x34
 800cdfa:	e00c      	b.n	800ce16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce00:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	635a      	str	r2, [r3, #52]	@ 0x34
 800ce08:	e005      	b.n	800ce16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce0e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d007      	beq.n	800ce2e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a5f      	ldr	r2, [pc, #380]	@ (800cfa0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ce24:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800ce26:	2301      	movs	r3, #1
 800ce28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ce2c:	e096      	b.n	800cf5c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ce2e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800ce32:	f04f 0100 	mov.w	r1, #0
 800ce36:	f7fd fea3 	bl	800ab80 <HAL_RCCEx_GetPeriphCLKFreq>
 800ce3a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f000 8083 	beq.w	800cf4a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	689b      	ldr	r3, [r3, #8]
 800ce4e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	691b      	ldr	r3, [r3, #16]
 800ce58:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	695a      	ldr	r2, [r3, #20]
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	4950      	ldr	r1, [pc, #320]	@ (800cfa4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce62:	fba1 1303 	umull	r1, r3, r1, r3
 800ce66:	0e1b      	lsrs	r3, r3, #24
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d303      	bcc.n	800ce74 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	695b      	ldr	r3, [r3, #20]
 800ce70:	61bb      	str	r3, [r7, #24]
 800ce72:	e05a      	b.n	800cf2a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce7c:	d103      	bne.n	800ce86 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	695b      	ldr	r3, [r3, #20]
 800ce82:	61bb      	str	r3, [r7, #24]
 800ce84:	e051      	b.n	800cf2a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce8e:	d126      	bne.n	800cede <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	695b      	ldr	r3, [r3, #20]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10e      	bne.n	800ceb6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	4a43      	ldr	r2, [pc, #268]	@ (800cfa8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d906      	bls.n	800ceae <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	4a40      	ldr	r2, [pc, #256]	@ (800cfa4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cea4:	fba2 2303 	umull	r2, r3, r2, r3
 800cea8:	0e5b      	lsrs	r3, r3, #25
 800ceaa:	61bb      	str	r3, [r7, #24]
 800ceac:	e03d      	b.n	800cf2a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	695b      	ldr	r3, [r3, #20]
 800ceb2:	61bb      	str	r3, [r7, #24]
 800ceb4:	e039      	b.n	800cf2a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	695b      	ldr	r3, [r3, #20]
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	69fa      	ldr	r2, [r7, #28]
 800cebe:	fbb2 f3f3 	udiv	r3, r2, r3
 800cec2:	4a39      	ldr	r2, [pc, #228]	@ (800cfa8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d906      	bls.n	800ced6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	4a36      	ldr	r2, [pc, #216]	@ (800cfa4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cecc:	fba2 2303 	umull	r2, r3, r2, r3
 800ced0:	0e5b      	lsrs	r3, r3, #25
 800ced2:	61bb      	str	r3, [r7, #24]
 800ced4:	e029      	b.n	800cf2a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	695b      	ldr	r3, [r3, #20]
 800ceda:	61bb      	str	r3, [r7, #24]
 800cedc:	e025      	b.n	800cf2a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	695b      	ldr	r3, [r3, #20]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10e      	bne.n	800cf04 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	4a30      	ldr	r2, [pc, #192]	@ (800cfac <HAL_SD_ConfigWideBusOperation+0x220>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d906      	bls.n	800cefc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	4a2c      	ldr	r2, [pc, #176]	@ (800cfa4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cef2:	fba2 2303 	umull	r2, r3, r2, r3
 800cef6:	0e1b      	lsrs	r3, r3, #24
 800cef8:	61bb      	str	r3, [r7, #24]
 800cefa:	e016      	b.n	800cf2a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	695b      	ldr	r3, [r3, #20]
 800cf00:	61bb      	str	r3, [r7, #24]
 800cf02:	e012      	b.n	800cf2a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	695b      	ldr	r3, [r3, #20]
 800cf08:	005b      	lsls	r3, r3, #1
 800cf0a:	69fa      	ldr	r2, [r7, #28]
 800cf0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf10:	4a26      	ldr	r2, [pc, #152]	@ (800cfac <HAL_SD_ConfigWideBusOperation+0x220>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d906      	bls.n	800cf24 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	4a22      	ldr	r2, [pc, #136]	@ (800cfa4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cf1a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf1e:	0e1b      	lsrs	r3, r3, #24
 800cf20:	61bb      	str	r3, [r7, #24]
 800cf22:	e002      	b.n	800cf2a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	695b      	ldr	r3, [r3, #20]
 800cf28:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681c      	ldr	r4, [r3, #0]
 800cf2e:	466a      	mov	r2, sp
 800cf30:	f107 0314 	add.w	r3, r7, #20
 800cf34:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cf38:	e882 0003 	stmia.w	r2, {r0, r1}
 800cf3c:	f107 0308 	add.w	r3, r7, #8
 800cf40:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf42:	4620      	mov	r0, r4
 800cf44:	f003 f91a 	bl	801017c <SDMMC_Init>
 800cf48:	e008      	b.n	800cf5c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf4e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800cf56:	2301      	movs	r3, #1
 800cf58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cf64:	4618      	mov	r0, r3
 800cf66:	f003 f9e7 	bl	8010338 <SDMMC_CmdBlockLength>
 800cf6a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf6c:	6a3b      	ldr	r3, [r7, #32]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00c      	beq.n	800cf8c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a0a      	ldr	r2, [pc, #40]	@ (800cfa0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cf78:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	431a      	orrs	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800cf94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	372c      	adds	r7, #44	@ 0x2c
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd90      	pop	{r4, r7, pc}
 800cfa0:	1fe00fff 	.word	0x1fe00fff
 800cfa4:	55e63b89 	.word	0x55e63b89
 800cfa8:	02faf080 	.word	0x02faf080
 800cfac:	017d7840 	.word	0x017d7840

0800cfb0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b086      	sub	sp, #24
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cfbc:	f107 030c 	add.w	r3, r7, #12
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 fa40 	bl	800d448 <SD_SendStatus>
 800cfc8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d005      	beq.n	800cfdc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	431a      	orrs	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	0a5b      	lsrs	r3, r3, #9
 800cfe0:	f003 030f 	and.w	r3, r3, #15
 800cfe4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cfe6:	693b      	ldr	r3, [r7, #16]
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3718      	adds	r7, #24
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b090      	sub	sp, #64	@ 0x40
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cff8:	2300      	movs	r3, #0
 800cffa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cffc:	f7f5 fdd6 	bl	8002bac <HAL_GetTick>
 800d000:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4618      	mov	r0, r3
 800d008:	f003 f911 	bl	801022e <SDMMC_GetPowerState>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d102      	bne.n	800d018 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d012:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d016:	e0b5      	b.n	800d184 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d01c:	2b03      	cmp	r3, #3
 800d01e:	d02e      	beq.n	800d07e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4618      	mov	r0, r3
 800d026:	f003 fb5c 	bl	80106e2 <SDMMC_CmdSendCID>
 800d02a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <SD_InitCard+0x46>
    {
      return errorstate;
 800d032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d034:	e0a6      	b.n	800d184 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2100      	movs	r1, #0
 800d03c:	4618      	mov	r0, r3
 800d03e:	f003 f93c 	bl	80102ba <SDMMC_GetResponse>
 800d042:	4602      	mov	r2, r0
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2104      	movs	r1, #4
 800d04e:	4618      	mov	r0, r3
 800d050:	f003 f933 	bl	80102ba <SDMMC_GetResponse>
 800d054:	4602      	mov	r2, r0
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2108      	movs	r1, #8
 800d060:	4618      	mov	r0, r3
 800d062:	f003 f92a 	bl	80102ba <SDMMC_GetResponse>
 800d066:	4602      	mov	r2, r0
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	210c      	movs	r1, #12
 800d072:	4618      	mov	r0, r3
 800d074:	f003 f921 	bl	80102ba <SDMMC_GetResponse>
 800d078:	4602      	mov	r2, r0
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d082:	2b03      	cmp	r3, #3
 800d084:	d01d      	beq.n	800d0c2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d086:	e019      	b.n	800d0bc <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f107 020a 	add.w	r2, r7, #10
 800d090:	4611      	mov	r1, r2
 800d092:	4618      	mov	r0, r3
 800d094:	f003 fb64 	bl	8010760 <SDMMC_CmdSetRelAdd>
 800d098:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d001      	beq.n	800d0a4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a2:	e06f      	b.n	800d184 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d0a4:	f7f5 fd82 	bl	8002bac <HAL_GetTick>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0ac:	1ad3      	subs	r3, r2, r3
 800d0ae:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d902      	bls.n	800d0bc <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d0b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d0ba:	e063      	b.n	800d184 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d0bc:	897b      	ldrh	r3, [r7, #10]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d0e2      	beq.n	800d088 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	d036      	beq.n	800d138 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d0ca:	897b      	ldrh	r3, [r7, #10]
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0da:	041b      	lsls	r3, r3, #16
 800d0dc:	4619      	mov	r1, r3
 800d0de:	4610      	mov	r0, r2
 800d0e0:	f003 fb1e 	bl	8010720 <SDMMC_CmdSendCSD>
 800d0e4:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d001      	beq.n	800d0f0 <SD_InitCard+0x100>
    {
      return errorstate;
 800d0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ee:	e049      	b.n	800d184 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f003 f8df 	bl	80102ba <SDMMC_GetResponse>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2104      	movs	r1, #4
 800d108:	4618      	mov	r0, r3
 800d10a:	f003 f8d6 	bl	80102ba <SDMMC_GetResponse>
 800d10e:	4602      	mov	r2, r0
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2108      	movs	r1, #8
 800d11a:	4618      	mov	r0, r3
 800d11c:	f003 f8cd 	bl	80102ba <SDMMC_GetResponse>
 800d120:	4602      	mov	r2, r0
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	210c      	movs	r1, #12
 800d12c:	4618      	mov	r0, r3
 800d12e:	f003 f8c4 	bl	80102ba <SDMMC_GetResponse>
 800d132:	4602      	mov	r2, r0
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2104      	movs	r1, #4
 800d13e:	4618      	mov	r0, r3
 800d140:	f003 f8bb 	bl	80102ba <SDMMC_GetResponse>
 800d144:	4603      	mov	r3, r0
 800d146:	0d1a      	lsrs	r2, r3, #20
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d14c:	f107 030c 	add.w	r3, r7, #12
 800d150:	4619      	mov	r1, r3
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7ff fb8c 	bl	800c870 <HAL_SD_GetCardCSD>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d002      	beq.n	800d164 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d15e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d162:	e00f      	b.n	800d184 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d16c:	041b      	lsls	r3, r3, #16
 800d16e:	4619      	mov	r1, r3
 800d170:	4610      	mov	r0, r2
 800d172:	f003 f9cd 	bl	8010510 <SDMMC_CmdSelDesel>
 800d176:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <SD_InitCard+0x192>
  {
    return errorstate;
 800d17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d180:	e000      	b.n	800d184 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d182:	2300      	movs	r3, #0
}
 800d184:	4618      	mov	r0, r3
 800d186:	3740      	adds	r7, #64	@ 0x40
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b086      	sub	sp, #24
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d194:	2300      	movs	r3, #0
 800d196:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d198:	2300      	movs	r3, #0
 800d19a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d19c:	2300      	movs	r3, #0
 800d19e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f003 f9d6 	bl	8010556 <SDMMC_CmdGoIdleState>
 800d1aa:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d001      	beq.n	800d1b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	e072      	b.n	800d29c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f003 f9e9 	bl	8010592 <SDMMC_CmdOperCond>
 800d1c0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d1c8:	d10d      	bne.n	800d1e6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f003 f9be 	bl	8010556 <SDMMC_CmdGoIdleState>
 800d1da:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d004      	beq.n	800d1ec <SD_PowerON+0x60>
    {
      return errorstate;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	e05a      	b.n	800d29c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d137      	bne.n	800d264 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f003 f9e9 	bl	80105d2 <SDMMC_CmdAppCommand>
 800d200:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d02d      	beq.n	800d264 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d208:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d20c:	e046      	b.n	800d29c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2100      	movs	r1, #0
 800d214:	4618      	mov	r0, r3
 800d216:	f003 f9dc 	bl	80105d2 <SDMMC_CmdAppCommand>
 800d21a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <SD_PowerON+0x9a>
    {
      return errorstate;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	e03a      	b.n	800d29c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	491e      	ldr	r1, [pc, #120]	@ (800d2a4 <SD_PowerON+0x118>)
 800d22c:	4618      	mov	r0, r3
 800d22e:	f003 f9f3 	bl	8010618 <SDMMC_CmdAppOperCommand>
 800d232:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d002      	beq.n	800d240 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d23a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d23e:	e02d      	b.n	800d29c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2100      	movs	r1, #0
 800d246:	4618      	mov	r0, r3
 800d248:	f003 f837 	bl	80102ba <SDMMC_GetResponse>
 800d24c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	0fdb      	lsrs	r3, r3, #31
 800d252:	2b01      	cmp	r3, #1
 800d254:	d101      	bne.n	800d25a <SD_PowerON+0xce>
 800d256:	2301      	movs	r3, #1
 800d258:	e000      	b.n	800d25c <SD_PowerON+0xd0>
 800d25a:	2300      	movs	r3, #0
 800d25c:	613b      	str	r3, [r7, #16]

    count++;
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	3301      	adds	r3, #1
 800d262:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d802      	bhi.n	800d274 <SD_PowerON+0xe8>
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d0cc      	beq.n	800d20e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d902      	bls.n	800d284 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d27e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d282:	e00b      	b.n	800d29c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2200      	movs	r2, #0
 800d288:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d290:	2b00      	cmp	r3, #0
 800d292:	d002      	beq.n	800d29a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2201      	movs	r2, #1
 800d298:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d29a:	2300      	movs	r3, #0
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3718      	adds	r7, #24
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	c1100000 	.word	0xc1100000

0800d2a8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b08c      	sub	sp, #48	@ 0x30
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d2b2:	f7f5 fc7b 	bl	8002bac <HAL_GetTick>
 800d2b6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2100      	movs	r1, #0
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f002 fff9 	bl	80102ba <SDMMC_GetResponse>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d2ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d2d2:	d102      	bne.n	800d2da <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d2d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d2d8:	e0b0      	b.n	800d43c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2140      	movs	r1, #64	@ 0x40
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f003 f829 	bl	8010338 <SDMMC_CmdBlockLength>
 800d2e6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2e8:	6a3b      	ldr	r3, [r7, #32]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d005      	beq.n	800d2fa <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d2f6:	6a3b      	ldr	r3, [r7, #32]
 800d2f8:	e0a0      	b.n	800d43c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d302:	041b      	lsls	r3, r3, #16
 800d304:	4619      	mov	r1, r3
 800d306:	4610      	mov	r0, r2
 800d308:	f003 f963 	bl	80105d2 <SDMMC_CmdAppCommand>
 800d30c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d005      	beq.n	800d320 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d31c:	6a3b      	ldr	r3, [r7, #32]
 800d31e:	e08d      	b.n	800d43c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d320:	f04f 33ff 	mov.w	r3, #4294967295
 800d324:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d326:	2340      	movs	r3, #64	@ 0x40
 800d328:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d32a:	2360      	movs	r3, #96	@ 0x60
 800d32c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d32e:	2302      	movs	r3, #2
 800d330:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d332:	2300      	movs	r3, #0
 800d334:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d336:	2301      	movs	r3, #1
 800d338:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f107 0208 	add.w	r2, r7, #8
 800d342:	4611      	mov	r1, r2
 800d344:	4618      	mov	r0, r3
 800d346:	f002 ffcb 	bl	80102e0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4618      	mov	r0, r3
 800d350:	f003 fa4b 	bl	80107ea <SDMMC_CmdStatusRegister>
 800d354:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d356:	6a3b      	ldr	r3, [r7, #32]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d02b      	beq.n	800d3b4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d364:	6a3b      	ldr	r3, [r7, #32]
 800d366:	e069      	b.n	800d43c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d36e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d372:	2b00      	cmp	r3, #0
 800d374:	d013      	beq.n	800d39e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d376:	2300      	movs	r3, #0
 800d378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d37a:	e00d      	b.n	800d398 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4618      	mov	r0, r3
 800d382:	f002 ff25 	bl	80101d0 <SDMMC_ReadFIFO>
 800d386:	4602      	mov	r2, r0
 800d388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38a:	601a      	str	r2, [r3, #0]
        pData++;
 800d38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38e:	3304      	adds	r3, #4
 800d390:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d394:	3301      	adds	r3, #1
 800d396:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d39a:	2b07      	cmp	r3, #7
 800d39c:	d9ee      	bls.n	800d37c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d39e:	f7f5 fc05 	bl	8002bac <HAL_GetTick>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ac:	d102      	bne.n	800d3b4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d3ae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d3b2:	e043      	b.n	800d43c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3ba:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d0d2      	beq.n	800d368 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3c8:	f003 0308 	and.w	r3, r3, #8
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d001      	beq.n	800d3d4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d3d0:	2308      	movs	r3, #8
 800d3d2:	e033      	b.n	800d43c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3da:	f003 0302 	and.w	r3, r3, #2
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d001      	beq.n	800d3e6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d3e2:	2302      	movs	r3, #2
 800d3e4:	e02a      	b.n	800d43c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3ec:	f003 0320 	and.w	r3, r3, #32
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d017      	beq.n	800d424 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d3f4:	2320      	movs	r3, #32
 800d3f6:	e021      	b.n	800d43c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f002 fee7 	bl	80101d0 <SDMMC_ReadFIFO>
 800d402:	4602      	mov	r2, r0
 800d404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d406:	601a      	str	r2, [r3, #0]
    pData++;
 800d408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d40a:	3304      	adds	r3, #4
 800d40c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d40e:	f7f5 fbcd 	bl	8002bac <HAL_GetTick>
 800d412:	4602      	mov	r2, r0
 800d414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41c:	d102      	bne.n	800d424 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d41e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d422:	e00b      	b.n	800d43c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1e2      	bne.n	800d3f8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a03      	ldr	r2, [pc, #12]	@ (800d444 <SD_SendSDStatus+0x19c>)
 800d438:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3730      	adds	r7, #48	@ 0x30
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	18000f3a 	.word	0x18000f3a

0800d448 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d102      	bne.n	800d45e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d458:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d45c:	e018      	b.n	800d490 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d466:	041b      	lsls	r3, r3, #16
 800d468:	4619      	mov	r1, r3
 800d46a:	4610      	mov	r0, r2
 800d46c:	f003 f99a 	bl	80107a4 <SDMMC_CmdSendStatus>
 800d470:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d001      	beq.n	800d47c <SD_SendStatus+0x34>
  {
    return errorstate;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	e009      	b.n	800d490 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2100      	movs	r1, #0
 800d482:	4618      	mov	r0, r3
 800d484:	f002 ff19 	bl	80102ba <SDMMC_GetResponse>
 800d488:	4602      	mov	r2, r0
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d48e:	2300      	movs	r3, #0
}
 800d490:	4618      	mov	r0, r3
 800d492:	3710      	adds	r7, #16
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b086      	sub	sp, #24
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	60fb      	str	r3, [r7, #12]
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f002 ff03 	bl	80102ba <SDMMC_GetResponse>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d4be:	d102      	bne.n	800d4c6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d4c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d4c4:	e02f      	b.n	800d526 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d4c6:	f107 030c 	add.w	r3, r7, #12
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 f879 	bl	800d5c4 <SD_FindSCR>
 800d4d2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d001      	beq.n	800d4de <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	e023      	b.n	800d526 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d01c      	beq.n	800d522 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4f0:	041b      	lsls	r3, r3, #16
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	4610      	mov	r0, r2
 800d4f6:	f003 f86c 	bl	80105d2 <SDMMC_CmdAppCommand>
 800d4fa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	e00f      	b.n	800d526 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2102      	movs	r1, #2
 800d50c:	4618      	mov	r0, r3
 800d50e:	f003 f8a3 	bl	8010658 <SDMMC_CmdBusWidth>
 800d512:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d001      	beq.n	800d51e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	e003      	b.n	800d526 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d51e:	2300      	movs	r3, #0
 800d520:	e001      	b.n	800d526 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d522:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d526:	4618      	mov	r0, r3
 800d528:	3718      	adds	r7, #24
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d52e:	b580      	push	{r7, lr}
 800d530:	b086      	sub	sp, #24
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d536:	2300      	movs	r3, #0
 800d538:	60fb      	str	r3, [r7, #12]
 800d53a:	2300      	movs	r3, #0
 800d53c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2100      	movs	r1, #0
 800d544:	4618      	mov	r0, r3
 800d546:	f002 feb8 	bl	80102ba <SDMMC_GetResponse>
 800d54a:	4603      	mov	r3, r0
 800d54c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d550:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d554:	d102      	bne.n	800d55c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d556:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d55a:	e02f      	b.n	800d5bc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d55c:	f107 030c 	add.w	r3, r7, #12
 800d560:	4619      	mov	r1, r3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f82e 	bl	800d5c4 <SD_FindSCR>
 800d568:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d001      	beq.n	800d574 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	e023      	b.n	800d5bc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d01c      	beq.n	800d5b8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d586:	041b      	lsls	r3, r3, #16
 800d588:	4619      	mov	r1, r3
 800d58a:	4610      	mov	r0, r2
 800d58c:	f003 f821 	bl	80105d2 <SDMMC_CmdAppCommand>
 800d590:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d001      	beq.n	800d59c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	e00f      	b.n	800d5bc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f003 f858 	bl	8010658 <SDMMC_CmdBusWidth>
 800d5a8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d001      	beq.n	800d5b4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	e003      	b.n	800d5bc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	e001      	b.n	800d5bc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d5b8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3718      	adds	r7, #24
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b08e      	sub	sp, #56	@ 0x38
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d5ce:	f7f5 faed 	bl	8002bac <HAL_GetTick>
 800d5d2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d5d8:	2300      	movs	r3, #0
 800d5da:	60bb      	str	r3, [r7, #8]
 800d5dc:	2300      	movs	r3, #0
 800d5de:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2108      	movs	r1, #8
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f002 fea4 	bl	8010338 <SDMMC_CmdBlockLength>
 800d5f0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d001      	beq.n	800d5fc <SD_FindSCR+0x38>
  {
    return errorstate;
 800d5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5fa:	e0ad      	b.n	800d758 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d604:	041b      	lsls	r3, r3, #16
 800d606:	4619      	mov	r1, r3
 800d608:	4610      	mov	r0, r2
 800d60a:	f002 ffe2 	bl	80105d2 <SDMMC_CmdAppCommand>
 800d60e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d612:	2b00      	cmp	r3, #0
 800d614:	d001      	beq.n	800d61a <SD_FindSCR+0x56>
  {
    return errorstate;
 800d616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d618:	e09e      	b.n	800d758 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d61a:	f04f 33ff 	mov.w	r3, #4294967295
 800d61e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d620:	2308      	movs	r3, #8
 800d622:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d624:	2330      	movs	r3, #48	@ 0x30
 800d626:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d628:	2302      	movs	r3, #2
 800d62a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d630:	2301      	movs	r3, #1
 800d632:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f107 0210 	add.w	r2, r7, #16
 800d63c:	4611      	mov	r1, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f002 fe4e 	bl	80102e0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4618      	mov	r0, r3
 800d64a:	f003 f828 	bl	801069e <SDMMC_CmdSendSCR>
 800d64e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d652:	2b00      	cmp	r3, #0
 800d654:	d027      	beq.n	800d6a6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d658:	e07e      	b.n	800d758 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d664:	2b00      	cmp	r3, #0
 800d666:	d113      	bne.n	800d690 <SD_FindSCR+0xcc>
 800d668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d110      	bne.n	800d690 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4618      	mov	r0, r3
 800d674:	f002 fdac 	bl	80101d0 <SDMMC_ReadFIFO>
 800d678:	4603      	mov	r3, r0
 800d67a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4618      	mov	r0, r3
 800d682:	f002 fda5 	bl	80101d0 <SDMMC_ReadFIFO>
 800d686:	4603      	mov	r3, r0
 800d688:	60fb      	str	r3, [r7, #12]
      index++;
 800d68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d68c:	3301      	adds	r3, #1
 800d68e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d690:	f7f5 fa8c 	bl	8002bac <HAL_GetTick>
 800d694:	4602      	mov	r2, r0
 800d696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d698:	1ad3      	subs	r3, r2, r3
 800d69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d69e:	d102      	bne.n	800d6a6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d6a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d6a4:	e058      	b.n	800d758 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6ac:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d0d1      	beq.n	800d65a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6bc:	f003 0308 	and.w	r3, r3, #8
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d005      	beq.n	800d6d0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2208      	movs	r2, #8
 800d6ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d6cc:	2308      	movs	r3, #8
 800d6ce:	e043      	b.n	800d758 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6d6:	f003 0302 	and.w	r3, r3, #2
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d005      	beq.n	800d6ea <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2202      	movs	r2, #2
 800d6e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d6e6:	2302      	movs	r3, #2
 800d6e8:	e036      	b.n	800d758 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6f0:	f003 0320 	and.w	r3, r3, #32
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d005      	beq.n	800d704 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2220      	movs	r2, #32
 800d6fe:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d700:	2320      	movs	r3, #32
 800d702:	e029      	b.n	800d758 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a15      	ldr	r2, [pc, #84]	@ (800d760 <SD_FindSCR+0x19c>)
 800d70a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	061a      	lsls	r2, r3, #24
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	021b      	lsls	r3, r3, #8
 800d714:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d718:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	0a1b      	lsrs	r3, r3, #8
 800d71e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d722:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	0e1b      	lsrs	r3, r3, #24
 800d728:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72c:	601a      	str	r2, [r3, #0]
    scr++;
 800d72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d730:	3304      	adds	r3, #4
 800d732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	061a      	lsls	r2, r3, #24
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	021b      	lsls	r3, r3, #8
 800d73c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d740:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	0a1b      	lsrs	r3, r3, #8
 800d746:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d74a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	0e1b      	lsrs	r3, r3, #24
 800d750:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d754:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d756:	2300      	movs	r3, #0
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3738      	adds	r7, #56	@ 0x38
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	18000f3a 	.word	0x18000f3a

0800d764 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b086      	sub	sp, #24
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d770:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d776:	2b1f      	cmp	r3, #31
 800d778:	d936      	bls.n	800d7e8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d77a:	2300      	movs	r3, #0
 800d77c:	617b      	str	r3, [r7, #20]
 800d77e:	e027      	b.n	800d7d0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4618      	mov	r0, r3
 800d786:	f002 fd23 	bl	80101d0 <SDMMC_ReadFIFO>
 800d78a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	b2da      	uxtb	r2, r3
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	3301      	adds	r3, #1
 800d798:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	0a1b      	lsrs	r3, r3, #8
 800d79e:	b2da      	uxtb	r2, r3
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	0c1b      	lsrs	r3, r3, #16
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	0e1b      	lsrs	r3, r3, #24
 800d7be:	b2da      	uxtb	r2, r3
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	617b      	str	r3, [r7, #20]
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	2b07      	cmp	r3, #7
 800d7d4:	d9d4      	bls.n	800d780 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	693a      	ldr	r2, [r7, #16]
 800d7da:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7e0:	f1a3 0220 	sub.w	r2, r3, #32
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800d7e8:	bf00      	nop
 800d7ea:	3718      	adds	r7, #24
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	69db      	ldr	r3, [r3, #28]
 800d7fc:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a1b      	ldr	r3, [r3, #32]
 800d802:	2b1f      	cmp	r3, #31
 800d804:	d93a      	bls.n	800d87c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d806:	2300      	movs	r3, #0
 800d808:	617b      	str	r3, [r7, #20]
 800d80a:	e02b      	b.n	800d864 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	3301      	adds	r3, #1
 800d816:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	021a      	lsls	r2, r3, #8
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	4313      	orrs	r3, r2
 800d822:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	3301      	adds	r3, #1
 800d828:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	041a      	lsls	r2, r3, #16
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	4313      	orrs	r3, r2
 800d834:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	3301      	adds	r3, #1
 800d83a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	061a      	lsls	r2, r3, #24
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	4313      	orrs	r3, r2
 800d846:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	3301      	adds	r3, #1
 800d84c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f107 020c 	add.w	r2, r7, #12
 800d856:	4611      	mov	r1, r2
 800d858:	4618      	mov	r0, r3
 800d85a:	f002 fcc6 	bl	80101ea <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	3301      	adds	r3, #1
 800d862:	617b      	str	r3, [r7, #20]
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	2b07      	cmp	r3, #7
 800d868:	d9d0      	bls.n	800d80c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	693a      	ldr	r2, [r7, #16]
 800d86e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6a1b      	ldr	r3, [r3, #32]
 800d874:	f1a3 0220 	sub.w	r2, r3, #32
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	621a      	str	r2, [r3, #32]
  }
}
 800d87c:	bf00      	nop
 800d87e:	3718      	adds	r7, #24
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d88c:	bf00      	nop
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d898:	b480      	push	{r7}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d8a0:	bf00      	nop
 800d8a2:	370c      	adds	r7, #12
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d8b4:	bf00      	nop
 800d8b6:	370c      	adds	r7, #12
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d8c8:	bf00      	nop
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d101      	bne.n	800d8e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e049      	b.n	800d97a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d106      	bne.n	800d900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f7f4 fe54 	bl	80025a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2202      	movs	r2, #2
 800d904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	3304      	adds	r3, #4
 800d910:	4619      	mov	r1, r3
 800d912:	4610      	mov	r0, r2
 800d914:	f000 fc58 	bl	800e1c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2201      	movs	r2, #1
 800d91c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2201      	movs	r2, #1
 800d924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2201      	movs	r2, #1
 800d92c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2201      	movs	r2, #1
 800d934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2201      	movs	r2, #1
 800d93c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2201      	movs	r2, #1
 800d944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2201      	movs	r2, #1
 800d94c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2201      	movs	r2, #1
 800d954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2201      	movs	r2, #1
 800d95c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2201      	movs	r2, #1
 800d974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3708      	adds	r7, #8
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
	...

0800d984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d992:	b2db      	uxtb	r3, r3
 800d994:	2b01      	cmp	r3, #1
 800d996:	d001      	beq.n	800d99c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d998:	2301      	movs	r3, #1
 800d99a:	e05e      	b.n	800da5a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2202      	movs	r2, #2
 800d9a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	68da      	ldr	r2, [r3, #12]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f042 0201 	orr.w	r2, r2, #1
 800d9b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a2b      	ldr	r2, [pc, #172]	@ (800da68 <HAL_TIM_Base_Start_IT+0xe4>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d02c      	beq.n	800da18 <HAL_TIM_Base_Start_IT+0x94>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9c6:	d027      	beq.n	800da18 <HAL_TIM_Base_Start_IT+0x94>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a27      	ldr	r2, [pc, #156]	@ (800da6c <HAL_TIM_Base_Start_IT+0xe8>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d022      	beq.n	800da18 <HAL_TIM_Base_Start_IT+0x94>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4a26      	ldr	r2, [pc, #152]	@ (800da70 <HAL_TIM_Base_Start_IT+0xec>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d01d      	beq.n	800da18 <HAL_TIM_Base_Start_IT+0x94>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4a24      	ldr	r2, [pc, #144]	@ (800da74 <HAL_TIM_Base_Start_IT+0xf0>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d018      	beq.n	800da18 <HAL_TIM_Base_Start_IT+0x94>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a23      	ldr	r2, [pc, #140]	@ (800da78 <HAL_TIM_Base_Start_IT+0xf4>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d013      	beq.n	800da18 <HAL_TIM_Base_Start_IT+0x94>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a21      	ldr	r2, [pc, #132]	@ (800da7c <HAL_TIM_Base_Start_IT+0xf8>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d00e      	beq.n	800da18 <HAL_TIM_Base_Start_IT+0x94>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	4a20      	ldr	r2, [pc, #128]	@ (800da80 <HAL_TIM_Base_Start_IT+0xfc>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d009      	beq.n	800da18 <HAL_TIM_Base_Start_IT+0x94>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a1e      	ldr	r2, [pc, #120]	@ (800da84 <HAL_TIM_Base_Start_IT+0x100>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d004      	beq.n	800da18 <HAL_TIM_Base_Start_IT+0x94>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	4a1d      	ldr	r2, [pc, #116]	@ (800da88 <HAL_TIM_Base_Start_IT+0x104>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d115      	bne.n	800da44 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	689a      	ldr	r2, [r3, #8]
 800da1e:	4b1b      	ldr	r3, [pc, #108]	@ (800da8c <HAL_TIM_Base_Start_IT+0x108>)
 800da20:	4013      	ands	r3, r2
 800da22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2b06      	cmp	r3, #6
 800da28:	d015      	beq.n	800da56 <HAL_TIM_Base_Start_IT+0xd2>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da30:	d011      	beq.n	800da56 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f042 0201 	orr.w	r2, r2, #1
 800da40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da42:	e008      	b.n	800da56 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f042 0201 	orr.w	r2, r2, #1
 800da52:	601a      	str	r2, [r3, #0]
 800da54:	e000      	b.n	800da58 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800da58:	2300      	movs	r3, #0
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3714      	adds	r7, #20
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop
 800da68:	40010000 	.word	0x40010000
 800da6c:	40000400 	.word	0x40000400
 800da70:	40000800 	.word	0x40000800
 800da74:	40000c00 	.word	0x40000c00
 800da78:	40010400 	.word	0x40010400
 800da7c:	40001800 	.word	0x40001800
 800da80:	40014000 	.word	0x40014000
 800da84:	4000e000 	.word	0x4000e000
 800da88:	4000e400 	.word	0x4000e400
 800da8c:	00010007 	.word	0x00010007

0800da90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d101      	bne.n	800daa2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800da9e:	2301      	movs	r3, #1
 800daa0:	e049      	b.n	800db36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d106      	bne.n	800dabc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f841 	bl	800db3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2202      	movs	r2, #2
 800dac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	3304      	adds	r3, #4
 800dacc:	4619      	mov	r1, r3
 800dace:	4610      	mov	r0, r2
 800dad0:	f000 fb7a 	bl	800e1c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2201      	movs	r2, #1
 800daf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2201      	movs	r2, #1
 800db00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2201      	movs	r2, #1
 800db10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2201      	movs	r2, #1
 800db18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2201      	movs	r2, #1
 800db20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2201      	movs	r2, #1
 800db28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800db34:	2300      	movs	r3, #0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3708      	adds	r7, #8
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800db3e:	b480      	push	{r7}
 800db40:	b083      	sub	sp, #12
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800db46:	bf00      	nop
 800db48:	370c      	adds	r7, #12
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr

0800db52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b084      	sub	sp, #16
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	691b      	ldr	r3, [r3, #16]
 800db68:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	f003 0302 	and.w	r3, r3, #2
 800db70:	2b00      	cmp	r3, #0
 800db72:	d020      	beq.n	800dbb6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f003 0302 	and.w	r3, r3, #2
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d01b      	beq.n	800dbb6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f06f 0202 	mvn.w	r2, #2
 800db86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	f003 0303 	and.w	r3, r3, #3
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d003      	beq.n	800dba4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 faf5 	bl	800e18c <HAL_TIM_IC_CaptureCallback>
 800dba2:	e005      	b.n	800dbb0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 fae7 	bl	800e178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 faf8 	bl	800e1a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	f003 0304 	and.w	r3, r3, #4
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d020      	beq.n	800dc02 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f003 0304 	and.w	r3, r3, #4
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d01b      	beq.n	800dc02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f06f 0204 	mvn.w	r2, #4
 800dbd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2202      	movs	r2, #2
 800dbd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	699b      	ldr	r3, [r3, #24]
 800dbe0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d003      	beq.n	800dbf0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 facf 	bl	800e18c <HAL_TIM_IC_CaptureCallback>
 800dbee:	e005      	b.n	800dbfc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 fac1 	bl	800e178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 fad2 	bl	800e1a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	f003 0308 	and.w	r3, r3, #8
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d020      	beq.n	800dc4e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f003 0308 	and.w	r3, r3, #8
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d01b      	beq.n	800dc4e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f06f 0208 	mvn.w	r2, #8
 800dc1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2204      	movs	r2, #4
 800dc24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	69db      	ldr	r3, [r3, #28]
 800dc2c:	f003 0303 	and.w	r3, r3, #3
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d003      	beq.n	800dc3c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 faa9 	bl	800e18c <HAL_TIM_IC_CaptureCallback>
 800dc3a:	e005      	b.n	800dc48 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 fa9b 	bl	800e178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 faac 	bl	800e1a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	f003 0310 	and.w	r3, r3, #16
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d020      	beq.n	800dc9a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f003 0310 	and.w	r3, r3, #16
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d01b      	beq.n	800dc9a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f06f 0210 	mvn.w	r2, #16
 800dc6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2208      	movs	r2, #8
 800dc70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	69db      	ldr	r3, [r3, #28]
 800dc78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d003      	beq.n	800dc88 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 fa83 	bl	800e18c <HAL_TIM_IC_CaptureCallback>
 800dc86:	e005      	b.n	800dc94 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 fa75 	bl	800e178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 fa86 	bl	800e1a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	f003 0301 	and.w	r3, r3, #1
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00c      	beq.n	800dcbe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f003 0301 	and.w	r3, r3, #1
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d007      	beq.n	800dcbe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f06f 0201 	mvn.w	r2, #1
 800dcb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7f3 ff05 	bl	8001ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d104      	bne.n	800dcd2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00c      	beq.n	800dcec <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d007      	beq.n	800dcec <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 ffc6 	bl	800ec78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00c      	beq.n	800dd10 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d007      	beq.n	800dd10 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dd08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 ffbe 	bl	800ec8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00c      	beq.n	800dd34 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d007      	beq.n	800dd34 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dd2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 fa40 	bl	800e1b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	f003 0320 	and.w	r3, r3, #32
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00c      	beq.n	800dd58 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f003 0320 	and.w	r3, r3, #32
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d007      	beq.n	800dd58 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f06f 0220 	mvn.w	r2, #32
 800dd50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 ff86 	bl	800ec64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd58:	bf00      	nop
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d101      	bne.n	800dd7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dd7a:	2302      	movs	r3, #2
 800dd7c:	e0ff      	b.n	800df7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2201      	movs	r2, #1
 800dd82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2b14      	cmp	r3, #20
 800dd8a:	f200 80f0 	bhi.w	800df6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dd8e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd94:	0800dde9 	.word	0x0800dde9
 800dd98:	0800df6f 	.word	0x0800df6f
 800dd9c:	0800df6f 	.word	0x0800df6f
 800dda0:	0800df6f 	.word	0x0800df6f
 800dda4:	0800de29 	.word	0x0800de29
 800dda8:	0800df6f 	.word	0x0800df6f
 800ddac:	0800df6f 	.word	0x0800df6f
 800ddb0:	0800df6f 	.word	0x0800df6f
 800ddb4:	0800de6b 	.word	0x0800de6b
 800ddb8:	0800df6f 	.word	0x0800df6f
 800ddbc:	0800df6f 	.word	0x0800df6f
 800ddc0:	0800df6f 	.word	0x0800df6f
 800ddc4:	0800deab 	.word	0x0800deab
 800ddc8:	0800df6f 	.word	0x0800df6f
 800ddcc:	0800df6f 	.word	0x0800df6f
 800ddd0:	0800df6f 	.word	0x0800df6f
 800ddd4:	0800deed 	.word	0x0800deed
 800ddd8:	0800df6f 	.word	0x0800df6f
 800dddc:	0800df6f 	.word	0x0800df6f
 800dde0:	0800df6f 	.word	0x0800df6f
 800dde4:	0800df2d 	.word	0x0800df2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	68b9      	ldr	r1, [r7, #8]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f000 fa9c 	bl	800e32c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	699a      	ldr	r2, [r3, #24]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f042 0208 	orr.w	r2, r2, #8
 800de02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	699a      	ldr	r2, [r3, #24]
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f022 0204 	bic.w	r2, r2, #4
 800de12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	6999      	ldr	r1, [r3, #24]
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	691a      	ldr	r2, [r3, #16]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	430a      	orrs	r2, r1
 800de24:	619a      	str	r2, [r3, #24]
      break;
 800de26:	e0a5      	b.n	800df74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	68b9      	ldr	r1, [r7, #8]
 800de2e:	4618      	mov	r0, r3
 800de30:	f000 fb0c 	bl	800e44c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	699a      	ldr	r2, [r3, #24]
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	699a      	ldr	r2, [r3, #24]
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	6999      	ldr	r1, [r3, #24]
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	691b      	ldr	r3, [r3, #16]
 800de5e:	021a      	lsls	r2, r3, #8
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	430a      	orrs	r2, r1
 800de66:	619a      	str	r2, [r3, #24]
      break;
 800de68:	e084      	b.n	800df74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	68b9      	ldr	r1, [r7, #8]
 800de70:	4618      	mov	r0, r3
 800de72:	f000 fb75 	bl	800e560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	69da      	ldr	r2, [r3, #28]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f042 0208 	orr.w	r2, r2, #8
 800de84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	69da      	ldr	r2, [r3, #28]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f022 0204 	bic.w	r2, r2, #4
 800de94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	69d9      	ldr	r1, [r3, #28]
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	691a      	ldr	r2, [r3, #16]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	430a      	orrs	r2, r1
 800dea6:	61da      	str	r2, [r3, #28]
      break;
 800dea8:	e064      	b.n	800df74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	68b9      	ldr	r1, [r7, #8]
 800deb0:	4618      	mov	r0, r3
 800deb2:	f000 fbdd 	bl	800e670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	69da      	ldr	r2, [r3, #28]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	69da      	ldr	r2, [r3, #28]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ded4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	69d9      	ldr	r1, [r3, #28]
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	691b      	ldr	r3, [r3, #16]
 800dee0:	021a      	lsls	r2, r3, #8
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	430a      	orrs	r2, r1
 800dee8:	61da      	str	r2, [r3, #28]
      break;
 800deea:	e043      	b.n	800df74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	68b9      	ldr	r1, [r7, #8]
 800def2:	4618      	mov	r0, r3
 800def4:	f000 fc26 	bl	800e744 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f042 0208 	orr.w	r2, r2, #8
 800df06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f022 0204 	bic.w	r2, r2, #4
 800df16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	691a      	ldr	r2, [r3, #16]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	430a      	orrs	r2, r1
 800df28:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800df2a:	e023      	b.n	800df74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	68b9      	ldr	r1, [r7, #8]
 800df32:	4618      	mov	r0, r3
 800df34:	f000 fc6a 	bl	800e80c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800df46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800df56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	691b      	ldr	r3, [r3, #16]
 800df62:	021a      	lsls	r2, r3, #8
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	430a      	orrs	r2, r1
 800df6a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800df6c:	e002      	b.n	800df74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800df6e:	2301      	movs	r3, #1
 800df70:	75fb      	strb	r3, [r7, #23]
      break;
 800df72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2200      	movs	r2, #0
 800df78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800df7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3718      	adds	r7, #24
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop

0800df88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df92:	2300      	movs	r3, #0
 800df94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d101      	bne.n	800dfa4 <HAL_TIM_ConfigClockSource+0x1c>
 800dfa0:	2302      	movs	r3, #2
 800dfa2:	e0dc      	b.n	800e15e <HAL_TIM_ConfigClockSource+0x1d6>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2202      	movs	r2, #2
 800dfb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	689b      	ldr	r3, [r3, #8]
 800dfba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dfbc:	68ba      	ldr	r2, [r7, #8]
 800dfbe:	4b6a      	ldr	r3, [pc, #424]	@ (800e168 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dfc0:	4013      	ands	r3, r2
 800dfc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dfca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4a64      	ldr	r2, [pc, #400]	@ (800e16c <HAL_TIM_ConfigClockSource+0x1e4>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	f000 80a9 	beq.w	800e132 <HAL_TIM_ConfigClockSource+0x1aa>
 800dfe0:	4a62      	ldr	r2, [pc, #392]	@ (800e16c <HAL_TIM_ConfigClockSource+0x1e4>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	f200 80ae 	bhi.w	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfe8:	4a61      	ldr	r2, [pc, #388]	@ (800e170 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	f000 80a1 	beq.w	800e132 <HAL_TIM_ConfigClockSource+0x1aa>
 800dff0:	4a5f      	ldr	r2, [pc, #380]	@ (800e170 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	f200 80a6 	bhi.w	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
 800dff8:	4a5e      	ldr	r2, [pc, #376]	@ (800e174 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	f000 8099 	beq.w	800e132 <HAL_TIM_ConfigClockSource+0x1aa>
 800e000:	4a5c      	ldr	r2, [pc, #368]	@ (800e174 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e002:	4293      	cmp	r3, r2
 800e004:	f200 809e 	bhi.w	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
 800e008:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e00c:	f000 8091 	beq.w	800e132 <HAL_TIM_ConfigClockSource+0x1aa>
 800e010:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e014:	f200 8096 	bhi.w	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
 800e018:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e01c:	f000 8089 	beq.w	800e132 <HAL_TIM_ConfigClockSource+0x1aa>
 800e020:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e024:	f200 808e 	bhi.w	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
 800e028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e02c:	d03e      	beq.n	800e0ac <HAL_TIM_ConfigClockSource+0x124>
 800e02e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e032:	f200 8087 	bhi.w	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
 800e036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e03a:	f000 8086 	beq.w	800e14a <HAL_TIM_ConfigClockSource+0x1c2>
 800e03e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e042:	d87f      	bhi.n	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
 800e044:	2b70      	cmp	r3, #112	@ 0x70
 800e046:	d01a      	beq.n	800e07e <HAL_TIM_ConfigClockSource+0xf6>
 800e048:	2b70      	cmp	r3, #112	@ 0x70
 800e04a:	d87b      	bhi.n	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
 800e04c:	2b60      	cmp	r3, #96	@ 0x60
 800e04e:	d050      	beq.n	800e0f2 <HAL_TIM_ConfigClockSource+0x16a>
 800e050:	2b60      	cmp	r3, #96	@ 0x60
 800e052:	d877      	bhi.n	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
 800e054:	2b50      	cmp	r3, #80	@ 0x50
 800e056:	d03c      	beq.n	800e0d2 <HAL_TIM_ConfigClockSource+0x14a>
 800e058:	2b50      	cmp	r3, #80	@ 0x50
 800e05a:	d873      	bhi.n	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
 800e05c:	2b40      	cmp	r3, #64	@ 0x40
 800e05e:	d058      	beq.n	800e112 <HAL_TIM_ConfigClockSource+0x18a>
 800e060:	2b40      	cmp	r3, #64	@ 0x40
 800e062:	d86f      	bhi.n	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
 800e064:	2b30      	cmp	r3, #48	@ 0x30
 800e066:	d064      	beq.n	800e132 <HAL_TIM_ConfigClockSource+0x1aa>
 800e068:	2b30      	cmp	r3, #48	@ 0x30
 800e06a:	d86b      	bhi.n	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
 800e06c:	2b20      	cmp	r3, #32
 800e06e:	d060      	beq.n	800e132 <HAL_TIM_ConfigClockSource+0x1aa>
 800e070:	2b20      	cmp	r3, #32
 800e072:	d867      	bhi.n	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
 800e074:	2b00      	cmp	r3, #0
 800e076:	d05c      	beq.n	800e132 <HAL_TIM_ConfigClockSource+0x1aa>
 800e078:	2b10      	cmp	r3, #16
 800e07a:	d05a      	beq.n	800e132 <HAL_TIM_ConfigClockSource+0x1aa>
 800e07c:	e062      	b.n	800e144 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e08e:	f000 fca1 	bl	800e9d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e0a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	68ba      	ldr	r2, [r7, #8]
 800e0a8:	609a      	str	r2, [r3, #8]
      break;
 800e0aa:	e04f      	b.n	800e14c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e0bc:	f000 fc8a 	bl	800e9d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	689a      	ldr	r2, [r3, #8]
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e0ce:	609a      	str	r2, [r3, #8]
      break;
 800e0d0:	e03c      	b.n	800e14c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e0de:	461a      	mov	r2, r3
 800e0e0:	f000 fbfa 	bl	800e8d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2150      	movs	r1, #80	@ 0x50
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 fc54 	bl	800e998 <TIM_ITRx_SetConfig>
      break;
 800e0f0:	e02c      	b.n	800e14c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e0fe:	461a      	mov	r2, r3
 800e100:	f000 fc19 	bl	800e936 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2160      	movs	r1, #96	@ 0x60
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 fc44 	bl	800e998 <TIM_ITRx_SetConfig>
      break;
 800e110:	e01c      	b.n	800e14c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e11e:	461a      	mov	r2, r3
 800e120:	f000 fbda 	bl	800e8d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	2140      	movs	r1, #64	@ 0x40
 800e12a:	4618      	mov	r0, r3
 800e12c:	f000 fc34 	bl	800e998 <TIM_ITRx_SetConfig>
      break;
 800e130:	e00c      	b.n	800e14c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4619      	mov	r1, r3
 800e13c:	4610      	mov	r0, r2
 800e13e:	f000 fc2b 	bl	800e998 <TIM_ITRx_SetConfig>
      break;
 800e142:	e003      	b.n	800e14c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e144:	2301      	movs	r3, #1
 800e146:	73fb      	strb	r3, [r7, #15]
      break;
 800e148:	e000      	b.n	800e14c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e14a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3710      	adds	r7, #16
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	ffceff88 	.word	0xffceff88
 800e16c:	00100040 	.word	0x00100040
 800e170:	00100030 	.word	0x00100030
 800e174:	00100020 	.word	0x00100020

0800e178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e180:	bf00      	nop
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e194:	bf00      	nop
 800e196:	370c      	adds	r7, #12
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr

0800e1a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b083      	sub	sp, #12
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e1a8:	bf00      	nop
 800e1aa:	370c      	adds	r7, #12
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr

0800e1b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e1bc:	bf00      	nop
 800e1be:	370c      	adds	r7, #12
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b085      	sub	sp, #20
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	4a4a      	ldr	r2, [pc, #296]	@ (800e304 <TIM_Base_SetConfig+0x13c>)
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d013      	beq.n	800e208 <TIM_Base_SetConfig+0x40>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1e6:	d00f      	beq.n	800e208 <TIM_Base_SetConfig+0x40>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	4a47      	ldr	r2, [pc, #284]	@ (800e308 <TIM_Base_SetConfig+0x140>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d00b      	beq.n	800e208 <TIM_Base_SetConfig+0x40>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	4a46      	ldr	r2, [pc, #280]	@ (800e30c <TIM_Base_SetConfig+0x144>)
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d007      	beq.n	800e208 <TIM_Base_SetConfig+0x40>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	4a45      	ldr	r2, [pc, #276]	@ (800e310 <TIM_Base_SetConfig+0x148>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d003      	beq.n	800e208 <TIM_Base_SetConfig+0x40>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	4a44      	ldr	r2, [pc, #272]	@ (800e314 <TIM_Base_SetConfig+0x14c>)
 800e204:	4293      	cmp	r3, r2
 800e206:	d108      	bne.n	800e21a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e20e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	68fa      	ldr	r2, [r7, #12]
 800e216:	4313      	orrs	r3, r2
 800e218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	4a39      	ldr	r2, [pc, #228]	@ (800e304 <TIM_Base_SetConfig+0x13c>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d027      	beq.n	800e272 <TIM_Base_SetConfig+0xaa>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e228:	d023      	beq.n	800e272 <TIM_Base_SetConfig+0xaa>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4a36      	ldr	r2, [pc, #216]	@ (800e308 <TIM_Base_SetConfig+0x140>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d01f      	beq.n	800e272 <TIM_Base_SetConfig+0xaa>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	4a35      	ldr	r2, [pc, #212]	@ (800e30c <TIM_Base_SetConfig+0x144>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d01b      	beq.n	800e272 <TIM_Base_SetConfig+0xaa>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	4a34      	ldr	r2, [pc, #208]	@ (800e310 <TIM_Base_SetConfig+0x148>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d017      	beq.n	800e272 <TIM_Base_SetConfig+0xaa>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	4a33      	ldr	r2, [pc, #204]	@ (800e314 <TIM_Base_SetConfig+0x14c>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d013      	beq.n	800e272 <TIM_Base_SetConfig+0xaa>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4a32      	ldr	r2, [pc, #200]	@ (800e318 <TIM_Base_SetConfig+0x150>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d00f      	beq.n	800e272 <TIM_Base_SetConfig+0xaa>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	4a31      	ldr	r2, [pc, #196]	@ (800e31c <TIM_Base_SetConfig+0x154>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d00b      	beq.n	800e272 <TIM_Base_SetConfig+0xaa>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	4a30      	ldr	r2, [pc, #192]	@ (800e320 <TIM_Base_SetConfig+0x158>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d007      	beq.n	800e272 <TIM_Base_SetConfig+0xaa>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4a2f      	ldr	r2, [pc, #188]	@ (800e324 <TIM_Base_SetConfig+0x15c>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d003      	beq.n	800e272 <TIM_Base_SetConfig+0xaa>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	4a2e      	ldr	r2, [pc, #184]	@ (800e328 <TIM_Base_SetConfig+0x160>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d108      	bne.n	800e284 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	4313      	orrs	r3, r2
 800e282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	695b      	ldr	r3, [r3, #20]
 800e28e:	4313      	orrs	r3, r2
 800e290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	68fa      	ldr	r2, [r7, #12]
 800e296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	689a      	ldr	r2, [r3, #8]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a16      	ldr	r2, [pc, #88]	@ (800e304 <TIM_Base_SetConfig+0x13c>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d00f      	beq.n	800e2d0 <TIM_Base_SetConfig+0x108>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4a18      	ldr	r2, [pc, #96]	@ (800e314 <TIM_Base_SetConfig+0x14c>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d00b      	beq.n	800e2d0 <TIM_Base_SetConfig+0x108>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4a17      	ldr	r2, [pc, #92]	@ (800e318 <TIM_Base_SetConfig+0x150>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d007      	beq.n	800e2d0 <TIM_Base_SetConfig+0x108>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4a16      	ldr	r2, [pc, #88]	@ (800e31c <TIM_Base_SetConfig+0x154>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d003      	beq.n	800e2d0 <TIM_Base_SetConfig+0x108>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	4a15      	ldr	r2, [pc, #84]	@ (800e320 <TIM_Base_SetConfig+0x158>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d103      	bne.n	800e2d8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	691a      	ldr	r2, [r3, #16]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	691b      	ldr	r3, [r3, #16]
 800e2e2:	f003 0301 	and.w	r3, r3, #1
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d105      	bne.n	800e2f6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	691b      	ldr	r3, [r3, #16]
 800e2ee:	f023 0201 	bic.w	r2, r3, #1
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	611a      	str	r2, [r3, #16]
  }
}
 800e2f6:	bf00      	nop
 800e2f8:	3714      	adds	r7, #20
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	40010000 	.word	0x40010000
 800e308:	40000400 	.word	0x40000400
 800e30c:	40000800 	.word	0x40000800
 800e310:	40000c00 	.word	0x40000c00
 800e314:	40010400 	.word	0x40010400
 800e318:	40014000 	.word	0x40014000
 800e31c:	40014400 	.word	0x40014400
 800e320:	40014800 	.word	0x40014800
 800e324:	4000e000 	.word	0x4000e000
 800e328:	4000e400 	.word	0x4000e400

0800e32c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b087      	sub	sp, #28
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6a1b      	ldr	r3, [r3, #32]
 800e33a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a1b      	ldr	r3, [r3, #32]
 800e340:	f023 0201 	bic.w	r2, r3, #1
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	699b      	ldr	r3, [r3, #24]
 800e352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	4b37      	ldr	r3, [pc, #220]	@ (800e434 <TIM_OC1_SetConfig+0x108>)
 800e358:	4013      	ands	r3, r2
 800e35a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f023 0303 	bic.w	r3, r3, #3
 800e362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	68fa      	ldr	r2, [r7, #12]
 800e36a:	4313      	orrs	r3, r2
 800e36c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	f023 0302 	bic.w	r3, r3, #2
 800e374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	689b      	ldr	r3, [r3, #8]
 800e37a:	697a      	ldr	r2, [r7, #20]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	4a2d      	ldr	r2, [pc, #180]	@ (800e438 <TIM_OC1_SetConfig+0x10c>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d00f      	beq.n	800e3a8 <TIM_OC1_SetConfig+0x7c>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	4a2c      	ldr	r2, [pc, #176]	@ (800e43c <TIM_OC1_SetConfig+0x110>)
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d00b      	beq.n	800e3a8 <TIM_OC1_SetConfig+0x7c>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	4a2b      	ldr	r2, [pc, #172]	@ (800e440 <TIM_OC1_SetConfig+0x114>)
 800e394:	4293      	cmp	r3, r2
 800e396:	d007      	beq.n	800e3a8 <TIM_OC1_SetConfig+0x7c>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4a2a      	ldr	r2, [pc, #168]	@ (800e444 <TIM_OC1_SetConfig+0x118>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d003      	beq.n	800e3a8 <TIM_OC1_SetConfig+0x7c>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	4a29      	ldr	r2, [pc, #164]	@ (800e448 <TIM_OC1_SetConfig+0x11c>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d10c      	bne.n	800e3c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	f023 0308 	bic.w	r3, r3, #8
 800e3ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	697a      	ldr	r2, [r7, #20]
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	f023 0304 	bic.w	r3, r3, #4
 800e3c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	4a1c      	ldr	r2, [pc, #112]	@ (800e438 <TIM_OC1_SetConfig+0x10c>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d00f      	beq.n	800e3ea <TIM_OC1_SetConfig+0xbe>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4a1b      	ldr	r2, [pc, #108]	@ (800e43c <TIM_OC1_SetConfig+0x110>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d00b      	beq.n	800e3ea <TIM_OC1_SetConfig+0xbe>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	4a1a      	ldr	r2, [pc, #104]	@ (800e440 <TIM_OC1_SetConfig+0x114>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d007      	beq.n	800e3ea <TIM_OC1_SetConfig+0xbe>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4a19      	ldr	r2, [pc, #100]	@ (800e444 <TIM_OC1_SetConfig+0x118>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d003      	beq.n	800e3ea <TIM_OC1_SetConfig+0xbe>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	4a18      	ldr	r2, [pc, #96]	@ (800e448 <TIM_OC1_SetConfig+0x11c>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d111      	bne.n	800e40e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e3f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e3f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	695b      	ldr	r3, [r3, #20]
 800e3fe:	693a      	ldr	r2, [r7, #16]
 800e400:	4313      	orrs	r3, r2
 800e402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	699b      	ldr	r3, [r3, #24]
 800e408:	693a      	ldr	r2, [r7, #16]
 800e40a:	4313      	orrs	r3, r2
 800e40c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	693a      	ldr	r2, [r7, #16]
 800e412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	68fa      	ldr	r2, [r7, #12]
 800e418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	685a      	ldr	r2, [r3, #4]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	697a      	ldr	r2, [r7, #20]
 800e426:	621a      	str	r2, [r3, #32]
}
 800e428:	bf00      	nop
 800e42a:	371c      	adds	r7, #28
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr
 800e434:	fffeff8f 	.word	0xfffeff8f
 800e438:	40010000 	.word	0x40010000
 800e43c:	40010400 	.word	0x40010400
 800e440:	40014000 	.word	0x40014000
 800e444:	40014400 	.word	0x40014400
 800e448:	40014800 	.word	0x40014800

0800e44c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b087      	sub	sp, #28
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6a1b      	ldr	r3, [r3, #32]
 800e45a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6a1b      	ldr	r3, [r3, #32]
 800e460:	f023 0210 	bic.w	r2, r3, #16
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	699b      	ldr	r3, [r3, #24]
 800e472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	4b34      	ldr	r3, [pc, #208]	@ (800e548 <TIM_OC2_SetConfig+0xfc>)
 800e478:	4013      	ands	r3, r2
 800e47a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	021b      	lsls	r3, r3, #8
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	f023 0320 	bic.w	r3, r3, #32
 800e496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	689b      	ldr	r3, [r3, #8]
 800e49c:	011b      	lsls	r3, r3, #4
 800e49e:	697a      	ldr	r2, [r7, #20]
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	4a29      	ldr	r2, [pc, #164]	@ (800e54c <TIM_OC2_SetConfig+0x100>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d003      	beq.n	800e4b4 <TIM_OC2_SetConfig+0x68>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4a28      	ldr	r2, [pc, #160]	@ (800e550 <TIM_OC2_SetConfig+0x104>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d10d      	bne.n	800e4d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e4ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	011b      	lsls	r3, r3, #4
 800e4c2:	697a      	ldr	r2, [r7, #20]
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e4ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	4a1e      	ldr	r2, [pc, #120]	@ (800e54c <TIM_OC2_SetConfig+0x100>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d00f      	beq.n	800e4f8 <TIM_OC2_SetConfig+0xac>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4a1d      	ldr	r2, [pc, #116]	@ (800e550 <TIM_OC2_SetConfig+0x104>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d00b      	beq.n	800e4f8 <TIM_OC2_SetConfig+0xac>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	4a1c      	ldr	r2, [pc, #112]	@ (800e554 <TIM_OC2_SetConfig+0x108>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d007      	beq.n	800e4f8 <TIM_OC2_SetConfig+0xac>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	4a1b      	ldr	r2, [pc, #108]	@ (800e558 <TIM_OC2_SetConfig+0x10c>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d003      	beq.n	800e4f8 <TIM_OC2_SetConfig+0xac>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	4a1a      	ldr	r2, [pc, #104]	@ (800e55c <TIM_OC2_SetConfig+0x110>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d113      	bne.n	800e520 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e4fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	695b      	ldr	r3, [r3, #20]
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	693a      	ldr	r2, [r7, #16]
 800e510:	4313      	orrs	r3, r2
 800e512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	699b      	ldr	r3, [r3, #24]
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	693a      	ldr	r2, [r7, #16]
 800e51c:	4313      	orrs	r3, r2
 800e51e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	693a      	ldr	r2, [r7, #16]
 800e524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	68fa      	ldr	r2, [r7, #12]
 800e52a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	685a      	ldr	r2, [r3, #4]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	697a      	ldr	r2, [r7, #20]
 800e538:	621a      	str	r2, [r3, #32]
}
 800e53a:	bf00      	nop
 800e53c:	371c      	adds	r7, #28
 800e53e:	46bd      	mov	sp, r7
 800e540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e544:	4770      	bx	lr
 800e546:	bf00      	nop
 800e548:	feff8fff 	.word	0xfeff8fff
 800e54c:	40010000 	.word	0x40010000
 800e550:	40010400 	.word	0x40010400
 800e554:	40014000 	.word	0x40014000
 800e558:	40014400 	.word	0x40014400
 800e55c:	40014800 	.word	0x40014800

0800e560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e560:	b480      	push	{r7}
 800e562:	b087      	sub	sp, #28
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6a1b      	ldr	r3, [r3, #32]
 800e56e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6a1b      	ldr	r3, [r3, #32]
 800e574:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	69db      	ldr	r3, [r3, #28]
 800e586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e588:	68fa      	ldr	r2, [r7, #12]
 800e58a:	4b33      	ldr	r3, [pc, #204]	@ (800e658 <TIM_OC3_SetConfig+0xf8>)
 800e58c:	4013      	ands	r3, r2
 800e58e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f023 0303 	bic.w	r3, r3, #3
 800e596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e5a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	021b      	lsls	r3, r3, #8
 800e5b0:	697a      	ldr	r2, [r7, #20]
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4a28      	ldr	r2, [pc, #160]	@ (800e65c <TIM_OC3_SetConfig+0xfc>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d003      	beq.n	800e5c6 <TIM_OC3_SetConfig+0x66>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4a27      	ldr	r2, [pc, #156]	@ (800e660 <TIM_OC3_SetConfig+0x100>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d10d      	bne.n	800e5e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e5cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	68db      	ldr	r3, [r3, #12]
 800e5d2:	021b      	lsls	r3, r3, #8
 800e5d4:	697a      	ldr	r2, [r7, #20]
 800e5d6:	4313      	orrs	r3, r2
 800e5d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e5e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	4a1d      	ldr	r2, [pc, #116]	@ (800e65c <TIM_OC3_SetConfig+0xfc>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d00f      	beq.n	800e60a <TIM_OC3_SetConfig+0xaa>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	4a1c      	ldr	r2, [pc, #112]	@ (800e660 <TIM_OC3_SetConfig+0x100>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d00b      	beq.n	800e60a <TIM_OC3_SetConfig+0xaa>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	4a1b      	ldr	r2, [pc, #108]	@ (800e664 <TIM_OC3_SetConfig+0x104>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d007      	beq.n	800e60a <TIM_OC3_SetConfig+0xaa>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	4a1a      	ldr	r2, [pc, #104]	@ (800e668 <TIM_OC3_SetConfig+0x108>)
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d003      	beq.n	800e60a <TIM_OC3_SetConfig+0xaa>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	4a19      	ldr	r2, [pc, #100]	@ (800e66c <TIM_OC3_SetConfig+0x10c>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d113      	bne.n	800e632 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	695b      	ldr	r3, [r3, #20]
 800e61e:	011b      	lsls	r3, r3, #4
 800e620:	693a      	ldr	r2, [r7, #16]
 800e622:	4313      	orrs	r3, r2
 800e624:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	699b      	ldr	r3, [r3, #24]
 800e62a:	011b      	lsls	r3, r3, #4
 800e62c:	693a      	ldr	r2, [r7, #16]
 800e62e:	4313      	orrs	r3, r2
 800e630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	693a      	ldr	r2, [r7, #16]
 800e636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	68fa      	ldr	r2, [r7, #12]
 800e63c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	685a      	ldr	r2, [r3, #4]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	697a      	ldr	r2, [r7, #20]
 800e64a:	621a      	str	r2, [r3, #32]
}
 800e64c:	bf00      	nop
 800e64e:	371c      	adds	r7, #28
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr
 800e658:	fffeff8f 	.word	0xfffeff8f
 800e65c:	40010000 	.word	0x40010000
 800e660:	40010400 	.word	0x40010400
 800e664:	40014000 	.word	0x40014000
 800e668:	40014400 	.word	0x40014400
 800e66c:	40014800 	.word	0x40014800

0800e670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e670:	b480      	push	{r7}
 800e672:	b087      	sub	sp, #28
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6a1b      	ldr	r3, [r3, #32]
 800e67e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6a1b      	ldr	r3, [r3, #32]
 800e684:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	69db      	ldr	r3, [r3, #28]
 800e696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e698:	68fa      	ldr	r2, [r7, #12]
 800e69a:	4b24      	ldr	r3, [pc, #144]	@ (800e72c <TIM_OC4_SetConfig+0xbc>)
 800e69c:	4013      	ands	r3, r2
 800e69e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e6a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	021b      	lsls	r3, r3, #8
 800e6ae:	68fa      	ldr	r2, [r7, #12]
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e6ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	689b      	ldr	r3, [r3, #8]
 800e6c0:	031b      	lsls	r3, r3, #12
 800e6c2:	693a      	ldr	r2, [r7, #16]
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	4a19      	ldr	r2, [pc, #100]	@ (800e730 <TIM_OC4_SetConfig+0xc0>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d00f      	beq.n	800e6f0 <TIM_OC4_SetConfig+0x80>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	4a18      	ldr	r2, [pc, #96]	@ (800e734 <TIM_OC4_SetConfig+0xc4>)
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d00b      	beq.n	800e6f0 <TIM_OC4_SetConfig+0x80>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4a17      	ldr	r2, [pc, #92]	@ (800e738 <TIM_OC4_SetConfig+0xc8>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d007      	beq.n	800e6f0 <TIM_OC4_SetConfig+0x80>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	4a16      	ldr	r2, [pc, #88]	@ (800e73c <TIM_OC4_SetConfig+0xcc>)
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d003      	beq.n	800e6f0 <TIM_OC4_SetConfig+0x80>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4a15      	ldr	r2, [pc, #84]	@ (800e740 <TIM_OC4_SetConfig+0xd0>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d109      	bne.n	800e704 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e6f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	695b      	ldr	r3, [r3, #20]
 800e6fc:	019b      	lsls	r3, r3, #6
 800e6fe:	697a      	ldr	r2, [r7, #20]
 800e700:	4313      	orrs	r3, r2
 800e702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	697a      	ldr	r2, [r7, #20]
 800e708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	68fa      	ldr	r2, [r7, #12]
 800e70e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	685a      	ldr	r2, [r3, #4]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	693a      	ldr	r2, [r7, #16]
 800e71c:	621a      	str	r2, [r3, #32]
}
 800e71e:	bf00      	nop
 800e720:	371c      	adds	r7, #28
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr
 800e72a:	bf00      	nop
 800e72c:	feff8fff 	.word	0xfeff8fff
 800e730:	40010000 	.word	0x40010000
 800e734:	40010400 	.word	0x40010400
 800e738:	40014000 	.word	0x40014000
 800e73c:	40014400 	.word	0x40014400
 800e740:	40014800 	.word	0x40014800

0800e744 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e744:	b480      	push	{r7}
 800e746:	b087      	sub	sp, #28
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6a1b      	ldr	r3, [r3, #32]
 800e752:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6a1b      	ldr	r3, [r3, #32]
 800e758:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	4b21      	ldr	r3, [pc, #132]	@ (800e7f4 <TIM_OC5_SetConfig+0xb0>)
 800e770:	4013      	ands	r3, r2
 800e772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	4313      	orrs	r3, r2
 800e77c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e784:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	041b      	lsls	r3, r3, #16
 800e78c:	693a      	ldr	r2, [r7, #16]
 800e78e:	4313      	orrs	r3, r2
 800e790:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4a18      	ldr	r2, [pc, #96]	@ (800e7f8 <TIM_OC5_SetConfig+0xb4>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d00f      	beq.n	800e7ba <TIM_OC5_SetConfig+0x76>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4a17      	ldr	r2, [pc, #92]	@ (800e7fc <TIM_OC5_SetConfig+0xb8>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d00b      	beq.n	800e7ba <TIM_OC5_SetConfig+0x76>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	4a16      	ldr	r2, [pc, #88]	@ (800e800 <TIM_OC5_SetConfig+0xbc>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d007      	beq.n	800e7ba <TIM_OC5_SetConfig+0x76>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4a15      	ldr	r2, [pc, #84]	@ (800e804 <TIM_OC5_SetConfig+0xc0>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d003      	beq.n	800e7ba <TIM_OC5_SetConfig+0x76>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4a14      	ldr	r2, [pc, #80]	@ (800e808 <TIM_OC5_SetConfig+0xc4>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d109      	bne.n	800e7ce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e7c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	695b      	ldr	r3, [r3, #20]
 800e7c6:	021b      	lsls	r3, r3, #8
 800e7c8:	697a      	ldr	r2, [r7, #20]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	697a      	ldr	r2, [r7, #20]
 800e7d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	68fa      	ldr	r2, [r7, #12]
 800e7d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	685a      	ldr	r2, [r3, #4]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	693a      	ldr	r2, [r7, #16]
 800e7e6:	621a      	str	r2, [r3, #32]
}
 800e7e8:	bf00      	nop
 800e7ea:	371c      	adds	r7, #28
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr
 800e7f4:	fffeff8f 	.word	0xfffeff8f
 800e7f8:	40010000 	.word	0x40010000
 800e7fc:	40010400 	.word	0x40010400
 800e800:	40014000 	.word	0x40014000
 800e804:	40014400 	.word	0x40014400
 800e808:	40014800 	.word	0x40014800

0800e80c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b087      	sub	sp, #28
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6a1b      	ldr	r3, [r3, #32]
 800e81a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6a1b      	ldr	r3, [r3, #32]
 800e820:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	4b22      	ldr	r3, [pc, #136]	@ (800e8c0 <TIM_OC6_SetConfig+0xb4>)
 800e838:	4013      	ands	r3, r2
 800e83a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	021b      	lsls	r3, r3, #8
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	4313      	orrs	r3, r2
 800e846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e84e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	689b      	ldr	r3, [r3, #8]
 800e854:	051b      	lsls	r3, r3, #20
 800e856:	693a      	ldr	r2, [r7, #16]
 800e858:	4313      	orrs	r3, r2
 800e85a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4a19      	ldr	r2, [pc, #100]	@ (800e8c4 <TIM_OC6_SetConfig+0xb8>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d00f      	beq.n	800e884 <TIM_OC6_SetConfig+0x78>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4a18      	ldr	r2, [pc, #96]	@ (800e8c8 <TIM_OC6_SetConfig+0xbc>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d00b      	beq.n	800e884 <TIM_OC6_SetConfig+0x78>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4a17      	ldr	r2, [pc, #92]	@ (800e8cc <TIM_OC6_SetConfig+0xc0>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d007      	beq.n	800e884 <TIM_OC6_SetConfig+0x78>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	4a16      	ldr	r2, [pc, #88]	@ (800e8d0 <TIM_OC6_SetConfig+0xc4>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d003      	beq.n	800e884 <TIM_OC6_SetConfig+0x78>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	4a15      	ldr	r2, [pc, #84]	@ (800e8d4 <TIM_OC6_SetConfig+0xc8>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d109      	bne.n	800e898 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e88a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	695b      	ldr	r3, [r3, #20]
 800e890:	029b      	lsls	r3, r3, #10
 800e892:	697a      	ldr	r2, [r7, #20]
 800e894:	4313      	orrs	r3, r2
 800e896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	697a      	ldr	r2, [r7, #20]
 800e89c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	685a      	ldr	r2, [r3, #4]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	693a      	ldr	r2, [r7, #16]
 800e8b0:	621a      	str	r2, [r3, #32]
}
 800e8b2:	bf00      	nop
 800e8b4:	371c      	adds	r7, #28
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	feff8fff 	.word	0xfeff8fff
 800e8c4:	40010000 	.word	0x40010000
 800e8c8:	40010400 	.word	0x40010400
 800e8cc:	40014000 	.word	0x40014000
 800e8d0:	40014400 	.word	0x40014400
 800e8d4:	40014800 	.word	0x40014800

0800e8d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b087      	sub	sp, #28
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6a1b      	ldr	r3, [r3, #32]
 800e8e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	6a1b      	ldr	r3, [r3, #32]
 800e8ee:	f023 0201 	bic.w	r2, r3, #1
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	699b      	ldr	r3, [r3, #24]
 800e8fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	011b      	lsls	r3, r3, #4
 800e908:	693a      	ldr	r2, [r7, #16]
 800e90a:	4313      	orrs	r3, r2
 800e90c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	f023 030a 	bic.w	r3, r3, #10
 800e914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e916:	697a      	ldr	r2, [r7, #20]
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	4313      	orrs	r3, r2
 800e91c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	693a      	ldr	r2, [r7, #16]
 800e922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	697a      	ldr	r2, [r7, #20]
 800e928:	621a      	str	r2, [r3, #32]
}
 800e92a:	bf00      	nop
 800e92c:	371c      	adds	r7, #28
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr

0800e936 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e936:	b480      	push	{r7}
 800e938:	b087      	sub	sp, #28
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	60f8      	str	r0, [r7, #12]
 800e93e:	60b9      	str	r1, [r7, #8]
 800e940:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	6a1b      	ldr	r3, [r3, #32]
 800e946:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	6a1b      	ldr	r3, [r3, #32]
 800e94c:	f023 0210 	bic.w	r2, r3, #16
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	699b      	ldr	r3, [r3, #24]
 800e958:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e960:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	031b      	lsls	r3, r3, #12
 800e966:	693a      	ldr	r2, [r7, #16]
 800e968:	4313      	orrs	r3, r2
 800e96a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e972:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	011b      	lsls	r3, r3, #4
 800e978:	697a      	ldr	r2, [r7, #20]
 800e97a:	4313      	orrs	r3, r2
 800e97c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	693a      	ldr	r2, [r7, #16]
 800e982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	697a      	ldr	r2, [r7, #20]
 800e988:	621a      	str	r2, [r3, #32]
}
 800e98a:	bf00      	nop
 800e98c:	371c      	adds	r7, #28
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr
	...

0800e998 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e998:	b480      	push	{r7}
 800e99a:	b085      	sub	sp, #20
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	689b      	ldr	r3, [r3, #8]
 800e9a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e9a8:	68fa      	ldr	r2, [r7, #12]
 800e9aa:	4b09      	ldr	r3, [pc, #36]	@ (800e9d0 <TIM_ITRx_SetConfig+0x38>)
 800e9ac:	4013      	ands	r3, r2
 800e9ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e9b0:	683a      	ldr	r2, [r7, #0]
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	f043 0307 	orr.w	r3, r3, #7
 800e9ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	68fa      	ldr	r2, [r7, #12]
 800e9c0:	609a      	str	r2, [r3, #8]
}
 800e9c2:	bf00      	nop
 800e9c4:	3714      	adds	r7, #20
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9cc:	4770      	bx	lr
 800e9ce:	bf00      	nop
 800e9d0:	ffcfff8f 	.word	0xffcfff8f

0800e9d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b087      	sub	sp, #28
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	607a      	str	r2, [r7, #4]
 800e9e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e9ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	021a      	lsls	r2, r3, #8
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	431a      	orrs	r2, r3
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	4313      	orrs	r3, r2
 800e9fc:	697a      	ldr	r2, [r7, #20]
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	697a      	ldr	r2, [r7, #20]
 800ea06:	609a      	str	r2, [r3, #8]
}
 800ea08:	bf00      	nop
 800ea0a:	371c      	adds	r7, #28
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b085      	sub	sp, #20
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	d101      	bne.n	800ea2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea28:	2302      	movs	r3, #2
 800ea2a:	e077      	b.n	800eb1c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2201      	movs	r2, #1
 800ea30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2202      	movs	r2, #2
 800ea38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	689b      	ldr	r3, [r3, #8]
 800ea4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a35      	ldr	r2, [pc, #212]	@ (800eb28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d004      	beq.n	800ea60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	4a34      	ldr	r2, [pc, #208]	@ (800eb2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d108      	bne.n	800ea72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ea66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	68fa      	ldr	r2, [r7, #12]
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	68fa      	ldr	r2, [r7, #12]
 800ea80:	4313      	orrs	r3, r2
 800ea82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a25      	ldr	r2, [pc, #148]	@ (800eb28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d02c      	beq.n	800eaf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea9e:	d027      	beq.n	800eaf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a22      	ldr	r2, [pc, #136]	@ (800eb30 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d022      	beq.n	800eaf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a21      	ldr	r2, [pc, #132]	@ (800eb34 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d01d      	beq.n	800eaf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a1f      	ldr	r2, [pc, #124]	@ (800eb38 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d018      	beq.n	800eaf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a1a      	ldr	r2, [pc, #104]	@ (800eb2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d013      	beq.n	800eaf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a1b      	ldr	r2, [pc, #108]	@ (800eb3c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d00e      	beq.n	800eaf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4a1a      	ldr	r2, [pc, #104]	@ (800eb40 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d009      	beq.n	800eaf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a18      	ldr	r2, [pc, #96]	@ (800eb44 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d004      	beq.n	800eaf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4a17      	ldr	r2, [pc, #92]	@ (800eb48 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d10c      	bne.n	800eb0a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eaf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	68ba      	ldr	r2, [r7, #8]
 800eafe:	4313      	orrs	r3, r2
 800eb00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3714      	adds	r7, #20
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr
 800eb28:	40010000 	.word	0x40010000
 800eb2c:	40010400 	.word	0x40010400
 800eb30:	40000400 	.word	0x40000400
 800eb34:	40000800 	.word	0x40000800
 800eb38:	40000c00 	.word	0x40000c00
 800eb3c:	40001800 	.word	0x40001800
 800eb40:	40014000 	.word	0x40014000
 800eb44:	4000e000 	.word	0x4000e000
 800eb48:	4000e400 	.word	0x4000e400

0800eb4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eb56:	2300      	movs	r3, #0
 800eb58:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d101      	bne.n	800eb68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eb64:	2302      	movs	r3, #2
 800eb66:	e073      	b.n	800ec50 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	4313      	orrs	r3, r2
 800eb8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	685b      	ldr	r3, [r3, #4]
 800eb96:	4313      	orrs	r3, r2
 800eb98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4313      	orrs	r3, r2
 800eba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	691b      	ldr	r3, [r3, #16]
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	695b      	ldr	r3, [r3, #20]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	699b      	ldr	r3, [r3, #24]
 800ebdc:	041b      	lsls	r3, r3, #16
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	69db      	ldr	r3, [r3, #28]
 800ebec:	4313      	orrs	r3, r2
 800ebee:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4a19      	ldr	r2, [pc, #100]	@ (800ec5c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d004      	beq.n	800ec04 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	4a18      	ldr	r2, [pc, #96]	@ (800ec60 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d11c      	bne.n	800ec3e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec0e:	051b      	lsls	r3, r3, #20
 800ec10:	4313      	orrs	r3, r2
 800ec12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	6a1b      	ldr	r3, [r3, #32]
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec2c:	4313      	orrs	r3, r2
 800ec2e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	68fa      	ldr	r2, [r7, #12]
 800ec44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ec4e:	2300      	movs	r3, #0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3714      	adds	r7, #20
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr
 800ec5c:	40010000 	.word	0x40010000
 800ec60:	40010400 	.word	0x40010400

0800ec64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ec6c:	bf00      	nop
 800ec6e:	370c      	adds	r7, #12
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ec80:	bf00      	nop
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ec94:	bf00      	nop
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d101      	bne.n	800ecb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	e042      	b.n	800ed38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d106      	bne.n	800ecca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f7f3 fceb 	bl	80026a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2224      	movs	r2, #36	@ 0x24
 800ecce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	681a      	ldr	r2, [r3, #0]
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f022 0201 	bic.w	r2, r2, #1
 800ece0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d002      	beq.n	800ecf0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 ff22 	bl	800fb34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f000 f8b3 	bl	800ee5c <UART_SetConfig>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d101      	bne.n	800ed00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	e01b      	b.n	800ed38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	685a      	ldr	r2, [r3, #4]
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ed0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	689a      	ldr	r2, [r3, #8]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ed1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f042 0201 	orr.w	r2, r2, #1
 800ed2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 ffa1 	bl	800fc78 <UART_CheckIdleState>
 800ed36:	4603      	mov	r3, r0
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b08a      	sub	sp, #40	@ 0x28
 800ed44:	af02      	add	r7, sp, #8
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	603b      	str	r3, [r7, #0]
 800ed4c:	4613      	mov	r3, r2
 800ed4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed56:	2b20      	cmp	r3, #32
 800ed58:	d17b      	bne.n	800ee52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d002      	beq.n	800ed66 <HAL_UART_Transmit+0x26>
 800ed60:	88fb      	ldrh	r3, [r7, #6]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d101      	bne.n	800ed6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ed66:	2301      	movs	r3, #1
 800ed68:	e074      	b.n	800ee54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2221      	movs	r2, #33	@ 0x21
 800ed76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ed7a:	f7f3 ff17 	bl	8002bac <HAL_GetTick>
 800ed7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	88fa      	ldrh	r2, [r7, #6]
 800ed84:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	88fa      	ldrh	r2, [r7, #6]
 800ed8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed98:	d108      	bne.n	800edac <HAL_UART_Transmit+0x6c>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	691b      	ldr	r3, [r3, #16]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d104      	bne.n	800edac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800eda2:	2300      	movs	r3, #0
 800eda4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	61bb      	str	r3, [r7, #24]
 800edaa:	e003      	b.n	800edb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800edb0:	2300      	movs	r3, #0
 800edb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800edb4:	e030      	b.n	800ee18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	9300      	str	r3, [sp, #0]
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	2200      	movs	r2, #0
 800edbe:	2180      	movs	r1, #128	@ 0x80
 800edc0:	68f8      	ldr	r0, [r7, #12]
 800edc2:	f001 f803 	bl	800fdcc <UART_WaitOnFlagUntilTimeout>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d005      	beq.n	800edd8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	2220      	movs	r2, #32
 800edd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800edd4:	2303      	movs	r3, #3
 800edd6:	e03d      	b.n	800ee54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d10b      	bne.n	800edf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800edde:	69bb      	ldr	r3, [r7, #24]
 800ede0:	881b      	ldrh	r3, [r3, #0]
 800ede2:	461a      	mov	r2, r3
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800edec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800edee:	69bb      	ldr	r3, [r7, #24]
 800edf0:	3302      	adds	r3, #2
 800edf2:	61bb      	str	r3, [r7, #24]
 800edf4:	e007      	b.n	800ee06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	781a      	ldrb	r2, [r3, #0]
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	3301      	adds	r3, #1
 800ee04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1c8      	bne.n	800edb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	2140      	movs	r1, #64	@ 0x40
 800ee2e:	68f8      	ldr	r0, [r7, #12]
 800ee30:	f000 ffcc 	bl	800fdcc <UART_WaitOnFlagUntilTimeout>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d005      	beq.n	800ee46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2220      	movs	r2, #32
 800ee3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ee42:	2303      	movs	r3, #3
 800ee44:	e006      	b.n	800ee54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2220      	movs	r2, #32
 800ee4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	e000      	b.n	800ee54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ee52:	2302      	movs	r3, #2
  }
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3720      	adds	r7, #32
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ee5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee60:	b092      	sub	sp, #72	@ 0x48
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ee66:	2300      	movs	r3, #0
 800ee68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	689a      	ldr	r2, [r3, #8]
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	691b      	ldr	r3, [r3, #16]
 800ee74:	431a      	orrs	r2, r3
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	695b      	ldr	r3, [r3, #20]
 800ee7a:	431a      	orrs	r2, r3
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	69db      	ldr	r3, [r3, #28]
 800ee80:	4313      	orrs	r3, r2
 800ee82:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	4bbe      	ldr	r3, [pc, #760]	@ (800f184 <UART_SetConfig+0x328>)
 800ee8c:	4013      	ands	r3, r2
 800ee8e:	697a      	ldr	r2, [r7, #20]
 800ee90:	6812      	ldr	r2, [r2, #0]
 800ee92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ee94:	430b      	orrs	r3, r1
 800ee96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	68da      	ldr	r2, [r3, #12]
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	430a      	orrs	r2, r1
 800eeac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	699b      	ldr	r3, [r3, #24]
 800eeb2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4ab3      	ldr	r2, [pc, #716]	@ (800f188 <UART_SetConfig+0x32c>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d004      	beq.n	800eec8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	6a1b      	ldr	r3, [r3, #32]
 800eec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eec4:	4313      	orrs	r3, r2
 800eec6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	689a      	ldr	r2, [r3, #8]
 800eece:	4baf      	ldr	r3, [pc, #700]	@ (800f18c <UART_SetConfig+0x330>)
 800eed0:	4013      	ands	r3, r2
 800eed2:	697a      	ldr	r2, [r7, #20]
 800eed4:	6812      	ldr	r2, [r2, #0]
 800eed6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eed8:	430b      	orrs	r3, r1
 800eeda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eee2:	f023 010f 	bic.w	r1, r3, #15
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	430a      	orrs	r2, r1
 800eef0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4aa6      	ldr	r2, [pc, #664]	@ (800f190 <UART_SetConfig+0x334>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d177      	bne.n	800efec <UART_SetConfig+0x190>
 800eefc:	4ba5      	ldr	r3, [pc, #660]	@ (800f194 <UART_SetConfig+0x338>)
 800eefe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ef04:	2b28      	cmp	r3, #40	@ 0x28
 800ef06:	d86d      	bhi.n	800efe4 <UART_SetConfig+0x188>
 800ef08:	a201      	add	r2, pc, #4	@ (adr r2, 800ef10 <UART_SetConfig+0xb4>)
 800ef0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef0e:	bf00      	nop
 800ef10:	0800efb5 	.word	0x0800efb5
 800ef14:	0800efe5 	.word	0x0800efe5
 800ef18:	0800efe5 	.word	0x0800efe5
 800ef1c:	0800efe5 	.word	0x0800efe5
 800ef20:	0800efe5 	.word	0x0800efe5
 800ef24:	0800efe5 	.word	0x0800efe5
 800ef28:	0800efe5 	.word	0x0800efe5
 800ef2c:	0800efe5 	.word	0x0800efe5
 800ef30:	0800efbd 	.word	0x0800efbd
 800ef34:	0800efe5 	.word	0x0800efe5
 800ef38:	0800efe5 	.word	0x0800efe5
 800ef3c:	0800efe5 	.word	0x0800efe5
 800ef40:	0800efe5 	.word	0x0800efe5
 800ef44:	0800efe5 	.word	0x0800efe5
 800ef48:	0800efe5 	.word	0x0800efe5
 800ef4c:	0800efe5 	.word	0x0800efe5
 800ef50:	0800efc5 	.word	0x0800efc5
 800ef54:	0800efe5 	.word	0x0800efe5
 800ef58:	0800efe5 	.word	0x0800efe5
 800ef5c:	0800efe5 	.word	0x0800efe5
 800ef60:	0800efe5 	.word	0x0800efe5
 800ef64:	0800efe5 	.word	0x0800efe5
 800ef68:	0800efe5 	.word	0x0800efe5
 800ef6c:	0800efe5 	.word	0x0800efe5
 800ef70:	0800efcd 	.word	0x0800efcd
 800ef74:	0800efe5 	.word	0x0800efe5
 800ef78:	0800efe5 	.word	0x0800efe5
 800ef7c:	0800efe5 	.word	0x0800efe5
 800ef80:	0800efe5 	.word	0x0800efe5
 800ef84:	0800efe5 	.word	0x0800efe5
 800ef88:	0800efe5 	.word	0x0800efe5
 800ef8c:	0800efe5 	.word	0x0800efe5
 800ef90:	0800efd5 	.word	0x0800efd5
 800ef94:	0800efe5 	.word	0x0800efe5
 800ef98:	0800efe5 	.word	0x0800efe5
 800ef9c:	0800efe5 	.word	0x0800efe5
 800efa0:	0800efe5 	.word	0x0800efe5
 800efa4:	0800efe5 	.word	0x0800efe5
 800efa8:	0800efe5 	.word	0x0800efe5
 800efac:	0800efe5 	.word	0x0800efe5
 800efb0:	0800efdd 	.word	0x0800efdd
 800efb4:	2301      	movs	r3, #1
 800efb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efba:	e326      	b.n	800f60a <UART_SetConfig+0x7ae>
 800efbc:	2304      	movs	r3, #4
 800efbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efc2:	e322      	b.n	800f60a <UART_SetConfig+0x7ae>
 800efc4:	2308      	movs	r3, #8
 800efc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efca:	e31e      	b.n	800f60a <UART_SetConfig+0x7ae>
 800efcc:	2310      	movs	r3, #16
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efd2:	e31a      	b.n	800f60a <UART_SetConfig+0x7ae>
 800efd4:	2320      	movs	r3, #32
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efda:	e316      	b.n	800f60a <UART_SetConfig+0x7ae>
 800efdc:	2340      	movs	r3, #64	@ 0x40
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efe2:	e312      	b.n	800f60a <UART_SetConfig+0x7ae>
 800efe4:	2380      	movs	r3, #128	@ 0x80
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efea:	e30e      	b.n	800f60a <UART_SetConfig+0x7ae>
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a69      	ldr	r2, [pc, #420]	@ (800f198 <UART_SetConfig+0x33c>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d130      	bne.n	800f058 <UART_SetConfig+0x1fc>
 800eff6:	4b67      	ldr	r3, [pc, #412]	@ (800f194 <UART_SetConfig+0x338>)
 800eff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800effa:	f003 0307 	and.w	r3, r3, #7
 800effe:	2b05      	cmp	r3, #5
 800f000:	d826      	bhi.n	800f050 <UART_SetConfig+0x1f4>
 800f002:	a201      	add	r2, pc, #4	@ (adr r2, 800f008 <UART_SetConfig+0x1ac>)
 800f004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f008:	0800f021 	.word	0x0800f021
 800f00c:	0800f029 	.word	0x0800f029
 800f010:	0800f031 	.word	0x0800f031
 800f014:	0800f039 	.word	0x0800f039
 800f018:	0800f041 	.word	0x0800f041
 800f01c:	0800f049 	.word	0x0800f049
 800f020:	2300      	movs	r3, #0
 800f022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f026:	e2f0      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f028:	2304      	movs	r3, #4
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f02e:	e2ec      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f030:	2308      	movs	r3, #8
 800f032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f036:	e2e8      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f038:	2310      	movs	r3, #16
 800f03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f03e:	e2e4      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f040:	2320      	movs	r3, #32
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f046:	e2e0      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f048:	2340      	movs	r3, #64	@ 0x40
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f04e:	e2dc      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f050:	2380      	movs	r3, #128	@ 0x80
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f056:	e2d8      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a4f      	ldr	r2, [pc, #316]	@ (800f19c <UART_SetConfig+0x340>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d130      	bne.n	800f0c4 <UART_SetConfig+0x268>
 800f062:	4b4c      	ldr	r3, [pc, #304]	@ (800f194 <UART_SetConfig+0x338>)
 800f064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f066:	f003 0307 	and.w	r3, r3, #7
 800f06a:	2b05      	cmp	r3, #5
 800f06c:	d826      	bhi.n	800f0bc <UART_SetConfig+0x260>
 800f06e:	a201      	add	r2, pc, #4	@ (adr r2, 800f074 <UART_SetConfig+0x218>)
 800f070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f074:	0800f08d 	.word	0x0800f08d
 800f078:	0800f095 	.word	0x0800f095
 800f07c:	0800f09d 	.word	0x0800f09d
 800f080:	0800f0a5 	.word	0x0800f0a5
 800f084:	0800f0ad 	.word	0x0800f0ad
 800f088:	0800f0b5 	.word	0x0800f0b5
 800f08c:	2300      	movs	r3, #0
 800f08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f092:	e2ba      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f094:	2304      	movs	r3, #4
 800f096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f09a:	e2b6      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f09c:	2308      	movs	r3, #8
 800f09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0a2:	e2b2      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f0a4:	2310      	movs	r3, #16
 800f0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0aa:	e2ae      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f0ac:	2320      	movs	r3, #32
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0b2:	e2aa      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f0b4:	2340      	movs	r3, #64	@ 0x40
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ba:	e2a6      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f0bc:	2380      	movs	r3, #128	@ 0x80
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0c2:	e2a2      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4a35      	ldr	r2, [pc, #212]	@ (800f1a0 <UART_SetConfig+0x344>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d130      	bne.n	800f130 <UART_SetConfig+0x2d4>
 800f0ce:	4b31      	ldr	r3, [pc, #196]	@ (800f194 <UART_SetConfig+0x338>)
 800f0d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0d2:	f003 0307 	and.w	r3, r3, #7
 800f0d6:	2b05      	cmp	r3, #5
 800f0d8:	d826      	bhi.n	800f128 <UART_SetConfig+0x2cc>
 800f0da:	a201      	add	r2, pc, #4	@ (adr r2, 800f0e0 <UART_SetConfig+0x284>)
 800f0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e0:	0800f0f9 	.word	0x0800f0f9
 800f0e4:	0800f101 	.word	0x0800f101
 800f0e8:	0800f109 	.word	0x0800f109
 800f0ec:	0800f111 	.word	0x0800f111
 800f0f0:	0800f119 	.word	0x0800f119
 800f0f4:	0800f121 	.word	0x0800f121
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0fe:	e284      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f100:	2304      	movs	r3, #4
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f106:	e280      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f108:	2308      	movs	r3, #8
 800f10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f10e:	e27c      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f110:	2310      	movs	r3, #16
 800f112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f116:	e278      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f118:	2320      	movs	r3, #32
 800f11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f11e:	e274      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f120:	2340      	movs	r3, #64	@ 0x40
 800f122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f126:	e270      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f128:	2380      	movs	r3, #128	@ 0x80
 800f12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f12e:	e26c      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4a1b      	ldr	r2, [pc, #108]	@ (800f1a4 <UART_SetConfig+0x348>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d142      	bne.n	800f1c0 <UART_SetConfig+0x364>
 800f13a:	4b16      	ldr	r3, [pc, #88]	@ (800f194 <UART_SetConfig+0x338>)
 800f13c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f13e:	f003 0307 	and.w	r3, r3, #7
 800f142:	2b05      	cmp	r3, #5
 800f144:	d838      	bhi.n	800f1b8 <UART_SetConfig+0x35c>
 800f146:	a201      	add	r2, pc, #4	@ (adr r2, 800f14c <UART_SetConfig+0x2f0>)
 800f148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f14c:	0800f165 	.word	0x0800f165
 800f150:	0800f16d 	.word	0x0800f16d
 800f154:	0800f175 	.word	0x0800f175
 800f158:	0800f17d 	.word	0x0800f17d
 800f15c:	0800f1a9 	.word	0x0800f1a9
 800f160:	0800f1b1 	.word	0x0800f1b1
 800f164:	2300      	movs	r3, #0
 800f166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f16a:	e24e      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f16c:	2304      	movs	r3, #4
 800f16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f172:	e24a      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f174:	2308      	movs	r3, #8
 800f176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f17a:	e246      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f17c:	2310      	movs	r3, #16
 800f17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f182:	e242      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f184:	cfff69f3 	.word	0xcfff69f3
 800f188:	58000c00 	.word	0x58000c00
 800f18c:	11fff4ff 	.word	0x11fff4ff
 800f190:	40011000 	.word	0x40011000
 800f194:	58024400 	.word	0x58024400
 800f198:	40004400 	.word	0x40004400
 800f19c:	40004800 	.word	0x40004800
 800f1a0:	40004c00 	.word	0x40004c00
 800f1a4:	40005000 	.word	0x40005000
 800f1a8:	2320      	movs	r3, #32
 800f1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1ae:	e22c      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f1b0:	2340      	movs	r3, #64	@ 0x40
 800f1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1b6:	e228      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f1b8:	2380      	movs	r3, #128	@ 0x80
 800f1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1be:	e224      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4ab1      	ldr	r2, [pc, #708]	@ (800f48c <UART_SetConfig+0x630>)
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	d176      	bne.n	800f2b8 <UART_SetConfig+0x45c>
 800f1ca:	4bb1      	ldr	r3, [pc, #708]	@ (800f490 <UART_SetConfig+0x634>)
 800f1cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f1d2:	2b28      	cmp	r3, #40	@ 0x28
 800f1d4:	d86c      	bhi.n	800f2b0 <UART_SetConfig+0x454>
 800f1d6:	a201      	add	r2, pc, #4	@ (adr r2, 800f1dc <UART_SetConfig+0x380>)
 800f1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1dc:	0800f281 	.word	0x0800f281
 800f1e0:	0800f2b1 	.word	0x0800f2b1
 800f1e4:	0800f2b1 	.word	0x0800f2b1
 800f1e8:	0800f2b1 	.word	0x0800f2b1
 800f1ec:	0800f2b1 	.word	0x0800f2b1
 800f1f0:	0800f2b1 	.word	0x0800f2b1
 800f1f4:	0800f2b1 	.word	0x0800f2b1
 800f1f8:	0800f2b1 	.word	0x0800f2b1
 800f1fc:	0800f289 	.word	0x0800f289
 800f200:	0800f2b1 	.word	0x0800f2b1
 800f204:	0800f2b1 	.word	0x0800f2b1
 800f208:	0800f2b1 	.word	0x0800f2b1
 800f20c:	0800f2b1 	.word	0x0800f2b1
 800f210:	0800f2b1 	.word	0x0800f2b1
 800f214:	0800f2b1 	.word	0x0800f2b1
 800f218:	0800f2b1 	.word	0x0800f2b1
 800f21c:	0800f291 	.word	0x0800f291
 800f220:	0800f2b1 	.word	0x0800f2b1
 800f224:	0800f2b1 	.word	0x0800f2b1
 800f228:	0800f2b1 	.word	0x0800f2b1
 800f22c:	0800f2b1 	.word	0x0800f2b1
 800f230:	0800f2b1 	.word	0x0800f2b1
 800f234:	0800f2b1 	.word	0x0800f2b1
 800f238:	0800f2b1 	.word	0x0800f2b1
 800f23c:	0800f299 	.word	0x0800f299
 800f240:	0800f2b1 	.word	0x0800f2b1
 800f244:	0800f2b1 	.word	0x0800f2b1
 800f248:	0800f2b1 	.word	0x0800f2b1
 800f24c:	0800f2b1 	.word	0x0800f2b1
 800f250:	0800f2b1 	.word	0x0800f2b1
 800f254:	0800f2b1 	.word	0x0800f2b1
 800f258:	0800f2b1 	.word	0x0800f2b1
 800f25c:	0800f2a1 	.word	0x0800f2a1
 800f260:	0800f2b1 	.word	0x0800f2b1
 800f264:	0800f2b1 	.word	0x0800f2b1
 800f268:	0800f2b1 	.word	0x0800f2b1
 800f26c:	0800f2b1 	.word	0x0800f2b1
 800f270:	0800f2b1 	.word	0x0800f2b1
 800f274:	0800f2b1 	.word	0x0800f2b1
 800f278:	0800f2b1 	.word	0x0800f2b1
 800f27c:	0800f2a9 	.word	0x0800f2a9
 800f280:	2301      	movs	r3, #1
 800f282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f286:	e1c0      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f288:	2304      	movs	r3, #4
 800f28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f28e:	e1bc      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f290:	2308      	movs	r3, #8
 800f292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f296:	e1b8      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f298:	2310      	movs	r3, #16
 800f29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f29e:	e1b4      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f2a0:	2320      	movs	r3, #32
 800f2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2a6:	e1b0      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f2a8:	2340      	movs	r3, #64	@ 0x40
 800f2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2ae:	e1ac      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f2b0:	2380      	movs	r3, #128	@ 0x80
 800f2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2b6:	e1a8      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a75      	ldr	r2, [pc, #468]	@ (800f494 <UART_SetConfig+0x638>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d130      	bne.n	800f324 <UART_SetConfig+0x4c8>
 800f2c2:	4b73      	ldr	r3, [pc, #460]	@ (800f490 <UART_SetConfig+0x634>)
 800f2c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2c6:	f003 0307 	and.w	r3, r3, #7
 800f2ca:	2b05      	cmp	r3, #5
 800f2cc:	d826      	bhi.n	800f31c <UART_SetConfig+0x4c0>
 800f2ce:	a201      	add	r2, pc, #4	@ (adr r2, 800f2d4 <UART_SetConfig+0x478>)
 800f2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2d4:	0800f2ed 	.word	0x0800f2ed
 800f2d8:	0800f2f5 	.word	0x0800f2f5
 800f2dc:	0800f2fd 	.word	0x0800f2fd
 800f2e0:	0800f305 	.word	0x0800f305
 800f2e4:	0800f30d 	.word	0x0800f30d
 800f2e8:	0800f315 	.word	0x0800f315
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2f2:	e18a      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f2f4:	2304      	movs	r3, #4
 800f2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2fa:	e186      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f2fc:	2308      	movs	r3, #8
 800f2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f302:	e182      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f304:	2310      	movs	r3, #16
 800f306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f30a:	e17e      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f30c:	2320      	movs	r3, #32
 800f30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f312:	e17a      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f314:	2340      	movs	r3, #64	@ 0x40
 800f316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f31a:	e176      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f31c:	2380      	movs	r3, #128	@ 0x80
 800f31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f322:	e172      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a5b      	ldr	r2, [pc, #364]	@ (800f498 <UART_SetConfig+0x63c>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d130      	bne.n	800f390 <UART_SetConfig+0x534>
 800f32e:	4b58      	ldr	r3, [pc, #352]	@ (800f490 <UART_SetConfig+0x634>)
 800f330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f332:	f003 0307 	and.w	r3, r3, #7
 800f336:	2b05      	cmp	r3, #5
 800f338:	d826      	bhi.n	800f388 <UART_SetConfig+0x52c>
 800f33a:	a201      	add	r2, pc, #4	@ (adr r2, 800f340 <UART_SetConfig+0x4e4>)
 800f33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f340:	0800f359 	.word	0x0800f359
 800f344:	0800f361 	.word	0x0800f361
 800f348:	0800f369 	.word	0x0800f369
 800f34c:	0800f371 	.word	0x0800f371
 800f350:	0800f379 	.word	0x0800f379
 800f354:	0800f381 	.word	0x0800f381
 800f358:	2300      	movs	r3, #0
 800f35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f35e:	e154      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f360:	2304      	movs	r3, #4
 800f362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f366:	e150      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f368:	2308      	movs	r3, #8
 800f36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f36e:	e14c      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f370:	2310      	movs	r3, #16
 800f372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f376:	e148      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f378:	2320      	movs	r3, #32
 800f37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f37e:	e144      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f380:	2340      	movs	r3, #64	@ 0x40
 800f382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f386:	e140      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f388:	2380      	movs	r3, #128	@ 0x80
 800f38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f38e:	e13c      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	4a41      	ldr	r2, [pc, #260]	@ (800f49c <UART_SetConfig+0x640>)
 800f396:	4293      	cmp	r3, r2
 800f398:	f040 8082 	bne.w	800f4a0 <UART_SetConfig+0x644>
 800f39c:	4b3c      	ldr	r3, [pc, #240]	@ (800f490 <UART_SetConfig+0x634>)
 800f39e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f3a4:	2b28      	cmp	r3, #40	@ 0x28
 800f3a6:	d86d      	bhi.n	800f484 <UART_SetConfig+0x628>
 800f3a8:	a201      	add	r2, pc, #4	@ (adr r2, 800f3b0 <UART_SetConfig+0x554>)
 800f3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ae:	bf00      	nop
 800f3b0:	0800f455 	.word	0x0800f455
 800f3b4:	0800f485 	.word	0x0800f485
 800f3b8:	0800f485 	.word	0x0800f485
 800f3bc:	0800f485 	.word	0x0800f485
 800f3c0:	0800f485 	.word	0x0800f485
 800f3c4:	0800f485 	.word	0x0800f485
 800f3c8:	0800f485 	.word	0x0800f485
 800f3cc:	0800f485 	.word	0x0800f485
 800f3d0:	0800f45d 	.word	0x0800f45d
 800f3d4:	0800f485 	.word	0x0800f485
 800f3d8:	0800f485 	.word	0x0800f485
 800f3dc:	0800f485 	.word	0x0800f485
 800f3e0:	0800f485 	.word	0x0800f485
 800f3e4:	0800f485 	.word	0x0800f485
 800f3e8:	0800f485 	.word	0x0800f485
 800f3ec:	0800f485 	.word	0x0800f485
 800f3f0:	0800f465 	.word	0x0800f465
 800f3f4:	0800f485 	.word	0x0800f485
 800f3f8:	0800f485 	.word	0x0800f485
 800f3fc:	0800f485 	.word	0x0800f485
 800f400:	0800f485 	.word	0x0800f485
 800f404:	0800f485 	.word	0x0800f485
 800f408:	0800f485 	.word	0x0800f485
 800f40c:	0800f485 	.word	0x0800f485
 800f410:	0800f46d 	.word	0x0800f46d
 800f414:	0800f485 	.word	0x0800f485
 800f418:	0800f485 	.word	0x0800f485
 800f41c:	0800f485 	.word	0x0800f485
 800f420:	0800f485 	.word	0x0800f485
 800f424:	0800f485 	.word	0x0800f485
 800f428:	0800f485 	.word	0x0800f485
 800f42c:	0800f485 	.word	0x0800f485
 800f430:	0800f475 	.word	0x0800f475
 800f434:	0800f485 	.word	0x0800f485
 800f438:	0800f485 	.word	0x0800f485
 800f43c:	0800f485 	.word	0x0800f485
 800f440:	0800f485 	.word	0x0800f485
 800f444:	0800f485 	.word	0x0800f485
 800f448:	0800f485 	.word	0x0800f485
 800f44c:	0800f485 	.word	0x0800f485
 800f450:	0800f47d 	.word	0x0800f47d
 800f454:	2301      	movs	r3, #1
 800f456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f45a:	e0d6      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f45c:	2304      	movs	r3, #4
 800f45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f462:	e0d2      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f464:	2308      	movs	r3, #8
 800f466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f46a:	e0ce      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f46c:	2310      	movs	r3, #16
 800f46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f472:	e0ca      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f474:	2320      	movs	r3, #32
 800f476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f47a:	e0c6      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f47c:	2340      	movs	r3, #64	@ 0x40
 800f47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f482:	e0c2      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f484:	2380      	movs	r3, #128	@ 0x80
 800f486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f48a:	e0be      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f48c:	40011400 	.word	0x40011400
 800f490:	58024400 	.word	0x58024400
 800f494:	40007800 	.word	0x40007800
 800f498:	40007c00 	.word	0x40007c00
 800f49c:	40011800 	.word	0x40011800
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	4aad      	ldr	r2, [pc, #692]	@ (800f75c <UART_SetConfig+0x900>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d176      	bne.n	800f598 <UART_SetConfig+0x73c>
 800f4aa:	4bad      	ldr	r3, [pc, #692]	@ (800f760 <UART_SetConfig+0x904>)
 800f4ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f4b2:	2b28      	cmp	r3, #40	@ 0x28
 800f4b4:	d86c      	bhi.n	800f590 <UART_SetConfig+0x734>
 800f4b6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4bc <UART_SetConfig+0x660>)
 800f4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4bc:	0800f561 	.word	0x0800f561
 800f4c0:	0800f591 	.word	0x0800f591
 800f4c4:	0800f591 	.word	0x0800f591
 800f4c8:	0800f591 	.word	0x0800f591
 800f4cc:	0800f591 	.word	0x0800f591
 800f4d0:	0800f591 	.word	0x0800f591
 800f4d4:	0800f591 	.word	0x0800f591
 800f4d8:	0800f591 	.word	0x0800f591
 800f4dc:	0800f569 	.word	0x0800f569
 800f4e0:	0800f591 	.word	0x0800f591
 800f4e4:	0800f591 	.word	0x0800f591
 800f4e8:	0800f591 	.word	0x0800f591
 800f4ec:	0800f591 	.word	0x0800f591
 800f4f0:	0800f591 	.word	0x0800f591
 800f4f4:	0800f591 	.word	0x0800f591
 800f4f8:	0800f591 	.word	0x0800f591
 800f4fc:	0800f571 	.word	0x0800f571
 800f500:	0800f591 	.word	0x0800f591
 800f504:	0800f591 	.word	0x0800f591
 800f508:	0800f591 	.word	0x0800f591
 800f50c:	0800f591 	.word	0x0800f591
 800f510:	0800f591 	.word	0x0800f591
 800f514:	0800f591 	.word	0x0800f591
 800f518:	0800f591 	.word	0x0800f591
 800f51c:	0800f579 	.word	0x0800f579
 800f520:	0800f591 	.word	0x0800f591
 800f524:	0800f591 	.word	0x0800f591
 800f528:	0800f591 	.word	0x0800f591
 800f52c:	0800f591 	.word	0x0800f591
 800f530:	0800f591 	.word	0x0800f591
 800f534:	0800f591 	.word	0x0800f591
 800f538:	0800f591 	.word	0x0800f591
 800f53c:	0800f581 	.word	0x0800f581
 800f540:	0800f591 	.word	0x0800f591
 800f544:	0800f591 	.word	0x0800f591
 800f548:	0800f591 	.word	0x0800f591
 800f54c:	0800f591 	.word	0x0800f591
 800f550:	0800f591 	.word	0x0800f591
 800f554:	0800f591 	.word	0x0800f591
 800f558:	0800f591 	.word	0x0800f591
 800f55c:	0800f589 	.word	0x0800f589
 800f560:	2301      	movs	r3, #1
 800f562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f566:	e050      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f568:	2304      	movs	r3, #4
 800f56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f56e:	e04c      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f570:	2308      	movs	r3, #8
 800f572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f576:	e048      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f578:	2310      	movs	r3, #16
 800f57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57e:	e044      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f580:	2320      	movs	r3, #32
 800f582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f586:	e040      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f588:	2340      	movs	r3, #64	@ 0x40
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f58e:	e03c      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f590:	2380      	movs	r3, #128	@ 0x80
 800f592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f596:	e038      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4a71      	ldr	r2, [pc, #452]	@ (800f764 <UART_SetConfig+0x908>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d130      	bne.n	800f604 <UART_SetConfig+0x7a8>
 800f5a2:	4b6f      	ldr	r3, [pc, #444]	@ (800f760 <UART_SetConfig+0x904>)
 800f5a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5a6:	f003 0307 	and.w	r3, r3, #7
 800f5aa:	2b05      	cmp	r3, #5
 800f5ac:	d826      	bhi.n	800f5fc <UART_SetConfig+0x7a0>
 800f5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f5b4 <UART_SetConfig+0x758>)
 800f5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b4:	0800f5cd 	.word	0x0800f5cd
 800f5b8:	0800f5d5 	.word	0x0800f5d5
 800f5bc:	0800f5dd 	.word	0x0800f5dd
 800f5c0:	0800f5e5 	.word	0x0800f5e5
 800f5c4:	0800f5ed 	.word	0x0800f5ed
 800f5c8:	0800f5f5 	.word	0x0800f5f5
 800f5cc:	2302      	movs	r3, #2
 800f5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5d2:	e01a      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f5d4:	2304      	movs	r3, #4
 800f5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5da:	e016      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f5dc:	2308      	movs	r3, #8
 800f5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5e2:	e012      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f5e4:	2310      	movs	r3, #16
 800f5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ea:	e00e      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f5ec:	2320      	movs	r3, #32
 800f5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5f2:	e00a      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f5f4:	2340      	movs	r3, #64	@ 0x40
 800f5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5fa:	e006      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f5fc:	2380      	movs	r3, #128	@ 0x80
 800f5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f602:	e002      	b.n	800f60a <UART_SetConfig+0x7ae>
 800f604:	2380      	movs	r3, #128	@ 0x80
 800f606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	4a55      	ldr	r2, [pc, #340]	@ (800f764 <UART_SetConfig+0x908>)
 800f610:	4293      	cmp	r3, r2
 800f612:	f040 80f8 	bne.w	800f806 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f616:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f61a:	2b20      	cmp	r3, #32
 800f61c:	dc46      	bgt.n	800f6ac <UART_SetConfig+0x850>
 800f61e:	2b02      	cmp	r3, #2
 800f620:	db75      	blt.n	800f70e <UART_SetConfig+0x8b2>
 800f622:	3b02      	subs	r3, #2
 800f624:	2b1e      	cmp	r3, #30
 800f626:	d872      	bhi.n	800f70e <UART_SetConfig+0x8b2>
 800f628:	a201      	add	r2, pc, #4	@ (adr r2, 800f630 <UART_SetConfig+0x7d4>)
 800f62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f62e:	bf00      	nop
 800f630:	0800f6b3 	.word	0x0800f6b3
 800f634:	0800f70f 	.word	0x0800f70f
 800f638:	0800f6bb 	.word	0x0800f6bb
 800f63c:	0800f70f 	.word	0x0800f70f
 800f640:	0800f70f 	.word	0x0800f70f
 800f644:	0800f70f 	.word	0x0800f70f
 800f648:	0800f6cb 	.word	0x0800f6cb
 800f64c:	0800f70f 	.word	0x0800f70f
 800f650:	0800f70f 	.word	0x0800f70f
 800f654:	0800f70f 	.word	0x0800f70f
 800f658:	0800f70f 	.word	0x0800f70f
 800f65c:	0800f70f 	.word	0x0800f70f
 800f660:	0800f70f 	.word	0x0800f70f
 800f664:	0800f70f 	.word	0x0800f70f
 800f668:	0800f6db 	.word	0x0800f6db
 800f66c:	0800f70f 	.word	0x0800f70f
 800f670:	0800f70f 	.word	0x0800f70f
 800f674:	0800f70f 	.word	0x0800f70f
 800f678:	0800f70f 	.word	0x0800f70f
 800f67c:	0800f70f 	.word	0x0800f70f
 800f680:	0800f70f 	.word	0x0800f70f
 800f684:	0800f70f 	.word	0x0800f70f
 800f688:	0800f70f 	.word	0x0800f70f
 800f68c:	0800f70f 	.word	0x0800f70f
 800f690:	0800f70f 	.word	0x0800f70f
 800f694:	0800f70f 	.word	0x0800f70f
 800f698:	0800f70f 	.word	0x0800f70f
 800f69c:	0800f70f 	.word	0x0800f70f
 800f6a0:	0800f70f 	.word	0x0800f70f
 800f6a4:	0800f70f 	.word	0x0800f70f
 800f6a8:	0800f701 	.word	0x0800f701
 800f6ac:	2b40      	cmp	r3, #64	@ 0x40
 800f6ae:	d02a      	beq.n	800f706 <UART_SetConfig+0x8aa>
 800f6b0:	e02d      	b.n	800f70e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f6b2:	f7fb ff37 	bl	800b524 <HAL_RCCEx_GetD3PCLK1Freq>
 800f6b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f6b8:	e02f      	b.n	800f71a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fb ff46 	bl	800b550 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6c8:	e027      	b.n	800f71a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6ca:	f107 0318 	add.w	r3, r7, #24
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fc f892 	bl	800b7f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6d8:	e01f      	b.n	800f71a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6da:	4b21      	ldr	r3, [pc, #132]	@ (800f760 <UART_SetConfig+0x904>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f003 0320 	and.w	r3, r3, #32
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d009      	beq.n	800f6fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f6e6:	4b1e      	ldr	r3, [pc, #120]	@ (800f760 <UART_SetConfig+0x904>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	08db      	lsrs	r3, r3, #3
 800f6ec:	f003 0303 	and.w	r3, r3, #3
 800f6f0:	4a1d      	ldr	r2, [pc, #116]	@ (800f768 <UART_SetConfig+0x90c>)
 800f6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800f6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f6f8:	e00f      	b.n	800f71a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f6fa:	4b1b      	ldr	r3, [pc, #108]	@ (800f768 <UART_SetConfig+0x90c>)
 800f6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6fe:	e00c      	b.n	800f71a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f700:	4b1a      	ldr	r3, [pc, #104]	@ (800f76c <UART_SetConfig+0x910>)
 800f702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f704:	e009      	b.n	800f71a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f70c:	e005      	b.n	800f71a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f70e:	2300      	movs	r3, #0
 800f710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f712:	2301      	movs	r3, #1
 800f714:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f718:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f000 81ee 	beq.w	800fafe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f726:	4a12      	ldr	r2, [pc, #72]	@ (800f770 <UART_SetConfig+0x914>)
 800f728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f72c:	461a      	mov	r2, r3
 800f72e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f730:	fbb3 f3f2 	udiv	r3, r3, r2
 800f734:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	685a      	ldr	r2, [r3, #4]
 800f73a:	4613      	mov	r3, r2
 800f73c:	005b      	lsls	r3, r3, #1
 800f73e:	4413      	add	r3, r2
 800f740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f742:	429a      	cmp	r2, r3
 800f744:	d305      	bcc.n	800f752 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f74c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f74e:	429a      	cmp	r2, r3
 800f750:	d910      	bls.n	800f774 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f752:	2301      	movs	r3, #1
 800f754:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f758:	e1d1      	b.n	800fafe <UART_SetConfig+0xca2>
 800f75a:	bf00      	nop
 800f75c:	40011c00 	.word	0x40011c00
 800f760:	58024400 	.word	0x58024400
 800f764:	58000c00 	.word	0x58000c00
 800f768:	03d09000 	.word	0x03d09000
 800f76c:	003d0900 	.word	0x003d0900
 800f770:	08014fdc 	.word	0x08014fdc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f776:	2200      	movs	r2, #0
 800f778:	60bb      	str	r3, [r7, #8]
 800f77a:	60fa      	str	r2, [r7, #12]
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f780:	4ac0      	ldr	r2, [pc, #768]	@ (800fa84 <UART_SetConfig+0xc28>)
 800f782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f786:	b29b      	uxth	r3, r3
 800f788:	2200      	movs	r2, #0
 800f78a:	603b      	str	r3, [r7, #0]
 800f78c:	607a      	str	r2, [r7, #4]
 800f78e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f796:	f7f0 fe13 	bl	80003c0 <__aeabi_uldivmod>
 800f79a:	4602      	mov	r2, r0
 800f79c:	460b      	mov	r3, r1
 800f79e:	4610      	mov	r0, r2
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	f04f 0200 	mov.w	r2, #0
 800f7a6:	f04f 0300 	mov.w	r3, #0
 800f7aa:	020b      	lsls	r3, r1, #8
 800f7ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f7b0:	0202      	lsls	r2, r0, #8
 800f7b2:	6979      	ldr	r1, [r7, #20]
 800f7b4:	6849      	ldr	r1, [r1, #4]
 800f7b6:	0849      	lsrs	r1, r1, #1
 800f7b8:	2000      	movs	r0, #0
 800f7ba:	460c      	mov	r4, r1
 800f7bc:	4605      	mov	r5, r0
 800f7be:	eb12 0804 	adds.w	r8, r2, r4
 800f7c2:	eb43 0905 	adc.w	r9, r3, r5
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	685b      	ldr	r3, [r3, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	469a      	mov	sl, r3
 800f7ce:	4693      	mov	fp, r2
 800f7d0:	4652      	mov	r2, sl
 800f7d2:	465b      	mov	r3, fp
 800f7d4:	4640      	mov	r0, r8
 800f7d6:	4649      	mov	r1, r9
 800f7d8:	f7f0 fdf2 	bl	80003c0 <__aeabi_uldivmod>
 800f7dc:	4602      	mov	r2, r0
 800f7de:	460b      	mov	r3, r1
 800f7e0:	4613      	mov	r3, r2
 800f7e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f7ea:	d308      	bcc.n	800f7fe <UART_SetConfig+0x9a2>
 800f7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f7f2:	d204      	bcs.n	800f7fe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f7fa:	60da      	str	r2, [r3, #12]
 800f7fc:	e17f      	b.n	800fafe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f7fe:	2301      	movs	r3, #1
 800f800:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f804:	e17b      	b.n	800fafe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	69db      	ldr	r3, [r3, #28]
 800f80a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f80e:	f040 80bd 	bne.w	800f98c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f812:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f816:	2b20      	cmp	r3, #32
 800f818:	dc48      	bgt.n	800f8ac <UART_SetConfig+0xa50>
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	db7b      	blt.n	800f916 <UART_SetConfig+0xaba>
 800f81e:	2b20      	cmp	r3, #32
 800f820:	d879      	bhi.n	800f916 <UART_SetConfig+0xaba>
 800f822:	a201      	add	r2, pc, #4	@ (adr r2, 800f828 <UART_SetConfig+0x9cc>)
 800f824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f828:	0800f8b3 	.word	0x0800f8b3
 800f82c:	0800f8bb 	.word	0x0800f8bb
 800f830:	0800f917 	.word	0x0800f917
 800f834:	0800f917 	.word	0x0800f917
 800f838:	0800f8c3 	.word	0x0800f8c3
 800f83c:	0800f917 	.word	0x0800f917
 800f840:	0800f917 	.word	0x0800f917
 800f844:	0800f917 	.word	0x0800f917
 800f848:	0800f8d3 	.word	0x0800f8d3
 800f84c:	0800f917 	.word	0x0800f917
 800f850:	0800f917 	.word	0x0800f917
 800f854:	0800f917 	.word	0x0800f917
 800f858:	0800f917 	.word	0x0800f917
 800f85c:	0800f917 	.word	0x0800f917
 800f860:	0800f917 	.word	0x0800f917
 800f864:	0800f917 	.word	0x0800f917
 800f868:	0800f8e3 	.word	0x0800f8e3
 800f86c:	0800f917 	.word	0x0800f917
 800f870:	0800f917 	.word	0x0800f917
 800f874:	0800f917 	.word	0x0800f917
 800f878:	0800f917 	.word	0x0800f917
 800f87c:	0800f917 	.word	0x0800f917
 800f880:	0800f917 	.word	0x0800f917
 800f884:	0800f917 	.word	0x0800f917
 800f888:	0800f917 	.word	0x0800f917
 800f88c:	0800f917 	.word	0x0800f917
 800f890:	0800f917 	.word	0x0800f917
 800f894:	0800f917 	.word	0x0800f917
 800f898:	0800f917 	.word	0x0800f917
 800f89c:	0800f917 	.word	0x0800f917
 800f8a0:	0800f917 	.word	0x0800f917
 800f8a4:	0800f917 	.word	0x0800f917
 800f8a8:	0800f909 	.word	0x0800f909
 800f8ac:	2b40      	cmp	r3, #64	@ 0x40
 800f8ae:	d02e      	beq.n	800f90e <UART_SetConfig+0xab2>
 800f8b0:	e031      	b.n	800f916 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f8b2:	f7f9 ff99 	bl	80097e8 <HAL_RCC_GetPCLK1Freq>
 800f8b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f8b8:	e033      	b.n	800f922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f8ba:	f7f9 ffab 	bl	8009814 <HAL_RCC_GetPCLK2Freq>
 800f8be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f8c0:	e02f      	b.n	800f922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7fb fe42 	bl	800b550 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8d0:	e027      	b.n	800f922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8d2:	f107 0318 	add.w	r3, r7, #24
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7fb ff8e 	bl	800b7f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8e0:	e01f      	b.n	800f922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f8e2:	4b69      	ldr	r3, [pc, #420]	@ (800fa88 <UART_SetConfig+0xc2c>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f003 0320 	and.w	r3, r3, #32
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d009      	beq.n	800f902 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f8ee:	4b66      	ldr	r3, [pc, #408]	@ (800fa88 <UART_SetConfig+0xc2c>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	08db      	lsrs	r3, r3, #3
 800f8f4:	f003 0303 	and.w	r3, r3, #3
 800f8f8:	4a64      	ldr	r2, [pc, #400]	@ (800fa8c <UART_SetConfig+0xc30>)
 800f8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800f8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f900:	e00f      	b.n	800f922 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f902:	4b62      	ldr	r3, [pc, #392]	@ (800fa8c <UART_SetConfig+0xc30>)
 800f904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f906:	e00c      	b.n	800f922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f908:	4b61      	ldr	r3, [pc, #388]	@ (800fa90 <UART_SetConfig+0xc34>)
 800f90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f90c:	e009      	b.n	800f922 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f90e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f914:	e005      	b.n	800f922 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f916:	2300      	movs	r3, #0
 800f918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f91a:	2301      	movs	r3, #1
 800f91c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f924:	2b00      	cmp	r3, #0
 800f926:	f000 80ea 	beq.w	800fafe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f92e:	4a55      	ldr	r2, [pc, #340]	@ (800fa84 <UART_SetConfig+0xc28>)
 800f930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f934:	461a      	mov	r2, r3
 800f936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f938:	fbb3 f3f2 	udiv	r3, r3, r2
 800f93c:	005a      	lsls	r2, r3, #1
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	085b      	lsrs	r3, r3, #1
 800f944:	441a      	add	r2, r3
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f94e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f952:	2b0f      	cmp	r3, #15
 800f954:	d916      	bls.n	800f984 <UART_SetConfig+0xb28>
 800f956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f95c:	d212      	bcs.n	800f984 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f95e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f960:	b29b      	uxth	r3, r3
 800f962:	f023 030f 	bic.w	r3, r3, #15
 800f966:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f96a:	085b      	lsrs	r3, r3, #1
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	f003 0307 	and.w	r3, r3, #7
 800f972:	b29a      	uxth	r2, r3
 800f974:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f976:	4313      	orrs	r3, r2
 800f978:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f980:	60da      	str	r2, [r3, #12]
 800f982:	e0bc      	b.n	800fafe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f984:	2301      	movs	r3, #1
 800f986:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f98a:	e0b8      	b.n	800fafe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f98c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f990:	2b20      	cmp	r3, #32
 800f992:	dc4b      	bgt.n	800fa2c <UART_SetConfig+0xbd0>
 800f994:	2b00      	cmp	r3, #0
 800f996:	f2c0 8087 	blt.w	800faa8 <UART_SetConfig+0xc4c>
 800f99a:	2b20      	cmp	r3, #32
 800f99c:	f200 8084 	bhi.w	800faa8 <UART_SetConfig+0xc4c>
 800f9a0:	a201      	add	r2, pc, #4	@ (adr r2, 800f9a8 <UART_SetConfig+0xb4c>)
 800f9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a6:	bf00      	nop
 800f9a8:	0800fa33 	.word	0x0800fa33
 800f9ac:	0800fa3b 	.word	0x0800fa3b
 800f9b0:	0800faa9 	.word	0x0800faa9
 800f9b4:	0800faa9 	.word	0x0800faa9
 800f9b8:	0800fa43 	.word	0x0800fa43
 800f9bc:	0800faa9 	.word	0x0800faa9
 800f9c0:	0800faa9 	.word	0x0800faa9
 800f9c4:	0800faa9 	.word	0x0800faa9
 800f9c8:	0800fa53 	.word	0x0800fa53
 800f9cc:	0800faa9 	.word	0x0800faa9
 800f9d0:	0800faa9 	.word	0x0800faa9
 800f9d4:	0800faa9 	.word	0x0800faa9
 800f9d8:	0800faa9 	.word	0x0800faa9
 800f9dc:	0800faa9 	.word	0x0800faa9
 800f9e0:	0800faa9 	.word	0x0800faa9
 800f9e4:	0800faa9 	.word	0x0800faa9
 800f9e8:	0800fa63 	.word	0x0800fa63
 800f9ec:	0800faa9 	.word	0x0800faa9
 800f9f0:	0800faa9 	.word	0x0800faa9
 800f9f4:	0800faa9 	.word	0x0800faa9
 800f9f8:	0800faa9 	.word	0x0800faa9
 800f9fc:	0800faa9 	.word	0x0800faa9
 800fa00:	0800faa9 	.word	0x0800faa9
 800fa04:	0800faa9 	.word	0x0800faa9
 800fa08:	0800faa9 	.word	0x0800faa9
 800fa0c:	0800faa9 	.word	0x0800faa9
 800fa10:	0800faa9 	.word	0x0800faa9
 800fa14:	0800faa9 	.word	0x0800faa9
 800fa18:	0800faa9 	.word	0x0800faa9
 800fa1c:	0800faa9 	.word	0x0800faa9
 800fa20:	0800faa9 	.word	0x0800faa9
 800fa24:	0800faa9 	.word	0x0800faa9
 800fa28:	0800fa9b 	.word	0x0800fa9b
 800fa2c:	2b40      	cmp	r3, #64	@ 0x40
 800fa2e:	d037      	beq.n	800faa0 <UART_SetConfig+0xc44>
 800fa30:	e03a      	b.n	800faa8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa32:	f7f9 fed9 	bl	80097e8 <HAL_RCC_GetPCLK1Freq>
 800fa36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fa38:	e03c      	b.n	800fab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa3a:	f7f9 feeb 	bl	8009814 <HAL_RCC_GetPCLK2Freq>
 800fa3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fa40:	e038      	b.n	800fab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7fb fd82 	bl	800b550 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fa4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa50:	e030      	b.n	800fab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa52:	f107 0318 	add.w	r3, r7, #24
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fb fece 	bl	800b7f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa60:	e028      	b.n	800fab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa62:	4b09      	ldr	r3, [pc, #36]	@ (800fa88 <UART_SetConfig+0xc2c>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f003 0320 	and.w	r3, r3, #32
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d012      	beq.n	800fa94 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa6e:	4b06      	ldr	r3, [pc, #24]	@ (800fa88 <UART_SetConfig+0xc2c>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	08db      	lsrs	r3, r3, #3
 800fa74:	f003 0303 	and.w	r3, r3, #3
 800fa78:	4a04      	ldr	r2, [pc, #16]	@ (800fa8c <UART_SetConfig+0xc30>)
 800fa7a:	fa22 f303 	lsr.w	r3, r2, r3
 800fa7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa80:	e018      	b.n	800fab4 <UART_SetConfig+0xc58>
 800fa82:	bf00      	nop
 800fa84:	08014fdc 	.word	0x08014fdc
 800fa88:	58024400 	.word	0x58024400
 800fa8c:	03d09000 	.word	0x03d09000
 800fa90:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fa94:	4b24      	ldr	r3, [pc, #144]	@ (800fb28 <UART_SetConfig+0xccc>)
 800fa96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa98:	e00c      	b.n	800fab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa9a:	4b24      	ldr	r3, [pc, #144]	@ (800fb2c <UART_SetConfig+0xcd0>)
 800fa9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa9e:	e009      	b.n	800fab4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800faa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800faa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800faa6:	e005      	b.n	800fab4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800faa8:	2300      	movs	r3, #0
 800faaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800faac:	2301      	movs	r3, #1
 800faae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fab2:	bf00      	nop
    }

    if (pclk != 0U)
 800fab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d021      	beq.n	800fafe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fabe:	4a1c      	ldr	r2, [pc, #112]	@ (800fb30 <UART_SetConfig+0xcd4>)
 800fac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fac4:	461a      	mov	r2, r3
 800fac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fac8:	fbb3 f2f2 	udiv	r2, r3, r2
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	085b      	lsrs	r3, r3, #1
 800fad2:	441a      	add	r2, r3
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	fbb2 f3f3 	udiv	r3, r2, r3
 800fadc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae0:	2b0f      	cmp	r3, #15
 800fae2:	d909      	bls.n	800faf8 <UART_SetConfig+0xc9c>
 800fae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800faea:	d205      	bcs.n	800faf8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800faec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faee:	b29a      	uxth	r2, r3
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	60da      	str	r2, [r3, #12]
 800faf6:	e002      	b.n	800fafe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800faf8:	2301      	movs	r3, #1
 800fafa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	2201      	movs	r2, #1
 800fb02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	2201      	movs	r2, #1
 800fb0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	2200      	movs	r2, #0
 800fb12:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	2200      	movs	r2, #0
 800fb18:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fb1a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3748      	adds	r7, #72	@ 0x48
 800fb22:	46bd      	mov	sp, r7
 800fb24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fb28:	03d09000 	.word	0x03d09000
 800fb2c:	003d0900 	.word	0x003d0900
 800fb30:	08014fdc 	.word	0x08014fdc

0800fb34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b083      	sub	sp, #12
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb40:	f003 0308 	and.w	r3, r3, #8
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d00a      	beq.n	800fb5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	430a      	orrs	r2, r1
 800fb5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb62:	f003 0301 	and.w	r3, r3, #1
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d00a      	beq.n	800fb80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	430a      	orrs	r2, r1
 800fb7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb84:	f003 0302 	and.w	r3, r3, #2
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d00a      	beq.n	800fba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	430a      	orrs	r2, r1
 800fba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fba6:	f003 0304 	and.w	r3, r3, #4
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d00a      	beq.n	800fbc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	430a      	orrs	r2, r1
 800fbc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbc8:	f003 0310 	and.w	r3, r3, #16
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d00a      	beq.n	800fbe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	689b      	ldr	r3, [r3, #8]
 800fbd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	430a      	orrs	r2, r1
 800fbe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbea:	f003 0320 	and.w	r3, r3, #32
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d00a      	beq.n	800fc08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	430a      	orrs	r2, r1
 800fc06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d01a      	beq.n	800fc4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	430a      	orrs	r2, r1
 800fc28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fc32:	d10a      	bne.n	800fc4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	430a      	orrs	r2, r1
 800fc48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d00a      	beq.n	800fc6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	430a      	orrs	r2, r1
 800fc6a:	605a      	str	r2, [r3, #4]
  }
}
 800fc6c:	bf00      	nop
 800fc6e:	370c      	adds	r7, #12
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr

0800fc78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b098      	sub	sp, #96	@ 0x60
 800fc7c:	af02      	add	r7, sp, #8
 800fc7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2200      	movs	r2, #0
 800fc84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fc88:	f7f2 ff90 	bl	8002bac <HAL_GetTick>
 800fc8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f003 0308 	and.w	r3, r3, #8
 800fc98:	2b08      	cmp	r3, #8
 800fc9a:	d12f      	bne.n	800fcfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fca0:	9300      	str	r3, [sp, #0]
 800fca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fca4:	2200      	movs	r2, #0
 800fca6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f000 f88e 	bl	800fdcc <UART_WaitOnFlagUntilTimeout>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d022      	beq.n	800fcfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcbe:	e853 3f00 	ldrex	r3, [r3]
 800fcc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fcc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fcca:	653b      	str	r3, [r7, #80]	@ 0x50
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcd4:	647b      	str	r3, [r7, #68]	@ 0x44
 800fcd6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fcda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fcdc:	e841 2300 	strex	r3, r2, [r1]
 800fce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d1e6      	bne.n	800fcb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2220      	movs	r2, #32
 800fcec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fcf8:	2303      	movs	r3, #3
 800fcfa:	e063      	b.n	800fdc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	f003 0304 	and.w	r3, r3, #4
 800fd06:	2b04      	cmp	r3, #4
 800fd08:	d149      	bne.n	800fd9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd12:	2200      	movs	r2, #0
 800fd14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 f857 	bl	800fdcc <UART_WaitOnFlagUntilTimeout>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d03c      	beq.n	800fd9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd2c:	e853 3f00 	ldrex	r3, [r3]
 800fd30:	623b      	str	r3, [r7, #32]
   return(result);
 800fd32:	6a3b      	ldr	r3, [r7, #32]
 800fd34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fd38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	461a      	mov	r2, r3
 800fd40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd42:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd4a:	e841 2300 	strex	r3, r2, [r1]
 800fd4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fd50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d1e6      	bne.n	800fd24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	3308      	adds	r3, #8
 800fd5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	e853 3f00 	ldrex	r3, [r3]
 800fd64:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	f023 0301 	bic.w	r3, r3, #1
 800fd6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	3308      	adds	r3, #8
 800fd74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fd76:	61fa      	str	r2, [r7, #28]
 800fd78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd7a:	69b9      	ldr	r1, [r7, #24]
 800fd7c:	69fa      	ldr	r2, [r7, #28]
 800fd7e:	e841 2300 	strex	r3, r2, [r1]
 800fd82:	617b      	str	r3, [r7, #20]
   return(result);
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1e5      	bne.n	800fd56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2220      	movs	r2, #32
 800fd8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2200      	movs	r2, #0
 800fd96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd9a:	2303      	movs	r3, #3
 800fd9c:	e012      	b.n	800fdc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2220      	movs	r2, #32
 800fda2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2220      	movs	r2, #32
 800fdaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fdc2:	2300      	movs	r3, #0
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3758      	adds	r7, #88	@ 0x58
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}

0800fdcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b084      	sub	sp, #16
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	60f8      	str	r0, [r7, #12]
 800fdd4:	60b9      	str	r1, [r7, #8]
 800fdd6:	603b      	str	r3, [r7, #0]
 800fdd8:	4613      	mov	r3, r2
 800fdda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fddc:	e04f      	b.n	800fe7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fdde:	69bb      	ldr	r3, [r7, #24]
 800fde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fde4:	d04b      	beq.n	800fe7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fde6:	f7f2 fee1 	bl	8002bac <HAL_GetTick>
 800fdea:	4602      	mov	r2, r0
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	1ad3      	subs	r3, r2, r3
 800fdf0:	69ba      	ldr	r2, [r7, #24]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d302      	bcc.n	800fdfc <UART_WaitOnFlagUntilTimeout+0x30>
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d101      	bne.n	800fe00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fdfc:	2303      	movs	r3, #3
 800fdfe:	e04e      	b.n	800fe9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f003 0304 	and.w	r3, r3, #4
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d037      	beq.n	800fe7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	2b80      	cmp	r3, #128	@ 0x80
 800fe12:	d034      	beq.n	800fe7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	2b40      	cmp	r3, #64	@ 0x40
 800fe18:	d031      	beq.n	800fe7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	69db      	ldr	r3, [r3, #28]
 800fe20:	f003 0308 	and.w	r3, r3, #8
 800fe24:	2b08      	cmp	r3, #8
 800fe26:	d110      	bne.n	800fe4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2208      	movs	r2, #8
 800fe2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fe30:	68f8      	ldr	r0, [r7, #12]
 800fe32:	f000 f839 	bl	800fea8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2208      	movs	r2, #8
 800fe3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	2200      	movs	r2, #0
 800fe42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fe46:	2301      	movs	r3, #1
 800fe48:	e029      	b.n	800fe9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	69db      	ldr	r3, [r3, #28]
 800fe50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fe54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fe58:	d111      	bne.n	800fe7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fe62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fe64:	68f8      	ldr	r0, [r7, #12]
 800fe66:	f000 f81f 	bl	800fea8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2220      	movs	r2, #32
 800fe6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	2200      	movs	r2, #0
 800fe76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fe7a:	2303      	movs	r3, #3
 800fe7c:	e00f      	b.n	800fe9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	69da      	ldr	r2, [r3, #28]
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	4013      	ands	r3, r2
 800fe88:	68ba      	ldr	r2, [r7, #8]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	bf0c      	ite	eq
 800fe8e:	2301      	moveq	r3, #1
 800fe90:	2300      	movne	r3, #0
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	461a      	mov	r2, r3
 800fe96:	79fb      	ldrb	r3, [r7, #7]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d0a0      	beq.n	800fdde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fe9c:	2300      	movs	r3, #0
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3710      	adds	r7, #16
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
	...

0800fea8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b095      	sub	sp, #84	@ 0x54
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800feb8:	e853 3f00 	ldrex	r3, [r3]
 800febc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800febe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	461a      	mov	r2, r3
 800fecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fece:	643b      	str	r3, [r7, #64]	@ 0x40
 800fed0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fed4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fed6:	e841 2300 	strex	r3, r2, [r1]
 800feda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d1e6      	bne.n	800feb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	3308      	adds	r3, #8
 800fee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feea:	6a3b      	ldr	r3, [r7, #32]
 800feec:	e853 3f00 	ldrex	r3, [r3]
 800fef0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fef2:	69fa      	ldr	r2, [r7, #28]
 800fef4:	4b1e      	ldr	r3, [pc, #120]	@ (800ff70 <UART_EndRxTransfer+0xc8>)
 800fef6:	4013      	ands	r3, r2
 800fef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	3308      	adds	r3, #8
 800ff00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ff02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ff04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ff08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff0a:	e841 2300 	strex	r3, r2, [r1]
 800ff0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ff10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d1e5      	bne.n	800fee2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff1a:	2b01      	cmp	r3, #1
 800ff1c:	d118      	bne.n	800ff50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	e853 3f00 	ldrex	r3, [r3]
 800ff2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	f023 0310 	bic.w	r3, r3, #16
 800ff32:	647b      	str	r3, [r7, #68]	@ 0x44
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	461a      	mov	r2, r3
 800ff3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ff3c:	61bb      	str	r3, [r7, #24]
 800ff3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff40:	6979      	ldr	r1, [r7, #20]
 800ff42:	69ba      	ldr	r2, [r7, #24]
 800ff44:	e841 2300 	strex	r3, r2, [r1]
 800ff48:	613b      	str	r3, [r7, #16]
   return(result);
 800ff4a:	693b      	ldr	r3, [r7, #16]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d1e6      	bne.n	800ff1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2220      	movs	r2, #32
 800ff54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2200      	movs	r2, #0
 800ff62:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ff64:	bf00      	nop
 800ff66:	3754      	adds	r7, #84	@ 0x54
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr
 800ff70:	effffffe 	.word	0xeffffffe

0800ff74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b085      	sub	sp, #20
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff82:	2b01      	cmp	r3, #1
 800ff84:	d101      	bne.n	800ff8a <HAL_UARTEx_DisableFifoMode+0x16>
 800ff86:	2302      	movs	r3, #2
 800ff88:	e027      	b.n	800ffda <HAL_UARTEx_DisableFifoMode+0x66>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2224      	movs	r2, #36	@ 0x24
 800ff96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	681a      	ldr	r2, [r3, #0]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	f022 0201 	bic.w	r2, r2, #1
 800ffb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ffb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	68fa      	ldr	r2, [r7, #12]
 800ffc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2220      	movs	r2, #32
 800ffcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ffd8:	2300      	movs	r3, #0
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3714      	adds	r7, #20
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffe6:	b580      	push	{r7, lr}
 800ffe8:	b084      	sub	sp, #16
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
 800ffee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d101      	bne.n	800fffe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fffa:	2302      	movs	r3, #2
 800fffc:	e02d      	b.n	801005a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2201      	movs	r2, #1
 8010002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2224      	movs	r2, #36	@ 0x24
 801000a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f022 0201 	bic.w	r2, r2, #1
 8010024:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	689b      	ldr	r3, [r3, #8]
 801002c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	683a      	ldr	r2, [r7, #0]
 8010036:	430a      	orrs	r2, r1
 8010038:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 f850 	bl	80100e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	68fa      	ldr	r2, [r7, #12]
 8010046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2220      	movs	r2, #32
 801004c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010058:	2300      	movs	r3, #0
}
 801005a:	4618      	mov	r0, r3
 801005c:	3710      	adds	r7, #16
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010062:	b580      	push	{r7, lr}
 8010064:	b084      	sub	sp, #16
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
 801006a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010072:	2b01      	cmp	r3, #1
 8010074:	d101      	bne.n	801007a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010076:	2302      	movs	r3, #2
 8010078:	e02d      	b.n	80100d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2201      	movs	r2, #1
 801007e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2224      	movs	r2, #36	@ 0x24
 8010086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	681a      	ldr	r2, [r3, #0]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f022 0201 	bic.w	r2, r2, #1
 80100a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	689b      	ldr	r3, [r3, #8]
 80100a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	683a      	ldr	r2, [r7, #0]
 80100b2:	430a      	orrs	r2, r1
 80100b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f000 f812 	bl	80100e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	68fa      	ldr	r2, [r7, #12]
 80100c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2220      	movs	r2, #32
 80100c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2200      	movs	r2, #0
 80100d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80100d4:	2300      	movs	r3, #0
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
	...

080100e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b085      	sub	sp, #20
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d108      	bne.n	8010102 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2201      	movs	r2, #1
 80100f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2201      	movs	r2, #1
 80100fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010100:	e031      	b.n	8010166 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010102:	2310      	movs	r3, #16
 8010104:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010106:	2310      	movs	r3, #16
 8010108:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	0e5b      	lsrs	r3, r3, #25
 8010112:	b2db      	uxtb	r3, r3
 8010114:	f003 0307 	and.w	r3, r3, #7
 8010118:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	0f5b      	lsrs	r3, r3, #29
 8010122:	b2db      	uxtb	r3, r3
 8010124:	f003 0307 	and.w	r3, r3, #7
 8010128:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801012a:	7bbb      	ldrb	r3, [r7, #14]
 801012c:	7b3a      	ldrb	r2, [r7, #12]
 801012e:	4911      	ldr	r1, [pc, #68]	@ (8010174 <UARTEx_SetNbDataToProcess+0x94>)
 8010130:	5c8a      	ldrb	r2, [r1, r2]
 8010132:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010136:	7b3a      	ldrb	r2, [r7, #12]
 8010138:	490f      	ldr	r1, [pc, #60]	@ (8010178 <UARTEx_SetNbDataToProcess+0x98>)
 801013a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801013c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010140:	b29a      	uxth	r2, r3
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010148:	7bfb      	ldrb	r3, [r7, #15]
 801014a:	7b7a      	ldrb	r2, [r7, #13]
 801014c:	4909      	ldr	r1, [pc, #36]	@ (8010174 <UARTEx_SetNbDataToProcess+0x94>)
 801014e:	5c8a      	ldrb	r2, [r1, r2]
 8010150:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010154:	7b7a      	ldrb	r2, [r7, #13]
 8010156:	4908      	ldr	r1, [pc, #32]	@ (8010178 <UARTEx_SetNbDataToProcess+0x98>)
 8010158:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801015a:	fb93 f3f2 	sdiv	r3, r3, r2
 801015e:	b29a      	uxth	r2, r3
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010166:	bf00      	nop
 8010168:	3714      	adds	r7, #20
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop
 8010174:	08014ff4 	.word	0x08014ff4
 8010178:	08014ffc 	.word	0x08014ffc

0801017c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801017c:	b084      	sub	sp, #16
 801017e:	b480      	push	{r7}
 8010180:	b085      	sub	sp, #20
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
 8010186:	f107 001c 	add.w	r0, r7, #28
 801018a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801018e:	2300      	movs	r3, #0
 8010190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8010192:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010194:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010196:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 801019a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801019c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 801019e:	431a      	orrs	r2, r3
             Init.ClockDiv
 80101a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80101a2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80101a4:	68fa      	ldr	r2, [r7, #12]
 80101a6:	4313      	orrs	r3, r2
 80101a8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	685a      	ldr	r2, [r3, #4]
 80101ae:	4b07      	ldr	r3, [pc, #28]	@ (80101cc <SDMMC_Init+0x50>)
 80101b0:	4013      	ands	r3, r2
 80101b2:	68fa      	ldr	r2, [r7, #12]
 80101b4:	431a      	orrs	r2, r3
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80101ba:	2300      	movs	r3, #0
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3714      	adds	r7, #20
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	b004      	add	sp, #16
 80101c8:	4770      	bx	lr
 80101ca:	bf00      	nop
 80101cc:	ffc02c00 	.word	0xffc02c00

080101d0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b083      	sub	sp, #12
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80101de:	4618      	mov	r0, r3
 80101e0:	370c      	adds	r7, #12
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr

080101ea <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80101ea:	b480      	push	{r7}
 80101ec:	b083      	sub	sp, #12
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
 80101f2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	681a      	ldr	r2, [r3, #0]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80101fe:	2300      	movs	r3, #0
}
 8010200:	4618      	mov	r0, r3
 8010202:	370c      	adds	r7, #12
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr

0801020c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801020c:	b480      	push	{r7}
 801020e:	b083      	sub	sp, #12
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	f043 0203 	orr.w	r2, r3, #3
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010220:	2300      	movs	r3, #0
}
 8010222:	4618      	mov	r0, r3
 8010224:	370c      	adds	r7, #12
 8010226:	46bd      	mov	sp, r7
 8010228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022c:	4770      	bx	lr

0801022e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801022e:	b480      	push	{r7}
 8010230:	b083      	sub	sp, #12
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f003 0303 	and.w	r3, r3, #3
}
 801023e:	4618      	mov	r0, r3
 8010240:	370c      	adds	r7, #12
 8010242:	46bd      	mov	sp, r7
 8010244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010248:	4770      	bx	lr
	...

0801024c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801024c:	b480      	push	{r7}
 801024e:	b085      	sub	sp, #20
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010256:	2300      	movs	r3, #0
 8010258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801026a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010270:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010276:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010278:	68fa      	ldr	r2, [r7, #12]
 801027a:	4313      	orrs	r3, r2
 801027c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	68da      	ldr	r2, [r3, #12]
 8010282:	4b06      	ldr	r3, [pc, #24]	@ (801029c <SDMMC_SendCommand+0x50>)
 8010284:	4013      	ands	r3, r2
 8010286:	68fa      	ldr	r2, [r7, #12]
 8010288:	431a      	orrs	r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801028e:	2300      	movs	r3, #0
}
 8010290:	4618      	mov	r0, r3
 8010292:	3714      	adds	r7, #20
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr
 801029c:	fffee0c0 	.word	0xfffee0c0

080102a0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	b2db      	uxtb	r3, r3
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	370c      	adds	r7, #12
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr

080102ba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80102ba:	b480      	push	{r7}
 80102bc:	b085      	sub	sp, #20
 80102be:	af00      	add	r7, sp, #0
 80102c0:	6078      	str	r0, [r7, #4]
 80102c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	3314      	adds	r3, #20
 80102c8:	461a      	mov	r2, r3
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	4413      	add	r3, r2
 80102ce:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3714      	adds	r7, #20
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr

080102e0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80102e0:	b480      	push	{r7}
 80102e2:	b085      	sub	sp, #20
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80102ea:	2300      	movs	r3, #0
 80102ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	685a      	ldr	r2, [r3, #4]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010306:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 801030c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8010312:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010314:	68fa      	ldr	r2, [r7, #12]
 8010316:	4313      	orrs	r3, r2
 8010318:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801031e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	431a      	orrs	r2, r3
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801032a:	2300      	movs	r3, #0

}
 801032c:	4618      	mov	r0, r3
 801032e:	3714      	adds	r7, #20
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b088      	sub	sp, #32
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010346:	2310      	movs	r3, #16
 8010348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801034a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801034e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010350:	2300      	movs	r3, #0
 8010352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010358:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801035a:	f107 0308 	add.w	r3, r7, #8
 801035e:	4619      	mov	r1, r3
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f7ff ff73 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010366:	f241 3288 	movw	r2, #5000	@ 0x1388
 801036a:	2110      	movs	r1, #16
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f000 fa5f 	bl	8010830 <SDMMC_GetCmdResp1>
 8010372:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010374:	69fb      	ldr	r3, [r7, #28]
}
 8010376:	4618      	mov	r0, r3
 8010378:	3720      	adds	r7, #32
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}

0801037e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801037e:	b580      	push	{r7, lr}
 8010380:	b088      	sub	sp, #32
 8010382:	af00      	add	r7, sp, #0
 8010384:	6078      	str	r0, [r7, #4]
 8010386:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801038c:	2311      	movs	r3, #17
 801038e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010396:	2300      	movs	r3, #0
 8010398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801039a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801039e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103a0:	f107 0308 	add.w	r3, r7, #8
 80103a4:	4619      	mov	r1, r3
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f7ff ff50 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80103ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103b0:	2111      	movs	r1, #17
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f000 fa3c 	bl	8010830 <SDMMC_GetCmdResp1>
 80103b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103ba:	69fb      	ldr	r3, [r7, #28]
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3720      	adds	r7, #32
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b088      	sub	sp, #32
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80103d2:	2312      	movs	r3, #18
 80103d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103dc:	2300      	movs	r3, #0
 80103de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103e6:	f107 0308 	add.w	r3, r7, #8
 80103ea:	4619      	mov	r1, r3
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f7ff ff2d 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80103f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103f6:	2112      	movs	r1, #18
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 fa19 	bl	8010830 <SDMMC_GetCmdResp1>
 80103fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010400:	69fb      	ldr	r3, [r7, #28]
}
 8010402:	4618      	mov	r0, r3
 8010404:	3720      	adds	r7, #32
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}

0801040a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801040a:	b580      	push	{r7, lr}
 801040c:	b088      	sub	sp, #32
 801040e:	af00      	add	r7, sp, #0
 8010410:	6078      	str	r0, [r7, #4]
 8010412:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010418:	2318      	movs	r3, #24
 801041a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801041c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010422:	2300      	movs	r3, #0
 8010424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010426:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801042a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801042c:	f107 0308 	add.w	r3, r7, #8
 8010430:	4619      	mov	r1, r3
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7ff ff0a 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010438:	f241 3288 	movw	r2, #5000	@ 0x1388
 801043c:	2118      	movs	r1, #24
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f000 f9f6 	bl	8010830 <SDMMC_GetCmdResp1>
 8010444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010446:	69fb      	ldr	r3, [r7, #28]
}
 8010448:	4618      	mov	r0, r3
 801044a:	3720      	adds	r7, #32
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b088      	sub	sp, #32
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801045e:	2319      	movs	r3, #25
 8010460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010462:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010468:	2300      	movs	r3, #0
 801046a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801046c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010470:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010472:	f107 0308 	add.w	r3, r7, #8
 8010476:	4619      	mov	r1, r3
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f7ff fee7 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801047e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010482:	2119      	movs	r1, #25
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f000 f9d3 	bl	8010830 <SDMMC_GetCmdResp1>
 801048a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801048c:	69fb      	ldr	r3, [r7, #28]
}
 801048e:	4618      	mov	r0, r3
 8010490:	3720      	adds	r7, #32
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
	...

08010498 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b088      	sub	sp, #32
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80104a0:	2300      	movs	r3, #0
 80104a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80104a4:	230c      	movs	r3, #12
 80104a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80104ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104ae:	2300      	movs	r3, #0
 80104b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104b6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	68db      	ldr	r3, [r3, #12]
 80104c8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104d0:	f107 0308 	add.w	r3, r7, #8
 80104d4:	4619      	mov	r1, r3
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f7ff feb8 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80104dc:	4a0b      	ldr	r2, [pc, #44]	@ (801050c <SDMMC_CmdStopTransfer+0x74>)
 80104de:	210c      	movs	r1, #12
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 f9a5 	bl	8010830 <SDMMC_GetCmdResp1>
 80104e6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	68db      	ldr	r3, [r3, #12]
 80104ec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80104f4:	69fb      	ldr	r3, [r7, #28]
 80104f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80104fa:	d101      	bne.n	8010500 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80104fc:	2300      	movs	r3, #0
 80104fe:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010500:	69fb      	ldr	r3, [r7, #28]
}
 8010502:	4618      	mov	r0, r3
 8010504:	3720      	adds	r7, #32
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}
 801050a:	bf00      	nop
 801050c:	05f5e100 	.word	0x05f5e100

08010510 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b088      	sub	sp, #32
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801051e:	2307      	movs	r3, #7
 8010520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010522:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010528:	2300      	movs	r3, #0
 801052a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801052c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010530:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010532:	f107 0308 	add.w	r3, r7, #8
 8010536:	4619      	mov	r1, r3
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f7ff fe87 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801053e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010542:	2107      	movs	r1, #7
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f000 f973 	bl	8010830 <SDMMC_GetCmdResp1>
 801054a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801054c:	69fb      	ldr	r3, [r7, #28]
}
 801054e:	4618      	mov	r0, r3
 8010550:	3720      	adds	r7, #32
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}

08010556 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010556:	b580      	push	{r7, lr}
 8010558:	b088      	sub	sp, #32
 801055a:	af00      	add	r7, sp, #0
 801055c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801055e:	2300      	movs	r3, #0
 8010560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010562:	2300      	movs	r3, #0
 8010564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010566:	2300      	movs	r3, #0
 8010568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801056a:	2300      	movs	r3, #0
 801056c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801056e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010572:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010574:	f107 0308 	add.w	r3, r7, #8
 8010578:	4619      	mov	r1, r3
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f7ff fe66 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f000 fb97 	bl	8010cb4 <SDMMC_GetCmdError>
 8010586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010588:	69fb      	ldr	r3, [r7, #28]
}
 801058a:	4618      	mov	r0, r3
 801058c:	3720      	adds	r7, #32
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010592:	b580      	push	{r7, lr}
 8010594:	b088      	sub	sp, #32
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801059a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801059e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80105a0:	2308      	movs	r3, #8
 80105a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80105a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105aa:	2300      	movs	r3, #0
 80105ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105b4:	f107 0308 	add.w	r3, r7, #8
 80105b8:	4619      	mov	r1, r3
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f7ff fe46 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f000 fb29 	bl	8010c18 <SDMMC_GetCmdResp7>
 80105c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105c8:	69fb      	ldr	r3, [r7, #28]
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3720      	adds	r7, #32
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b088      	sub	sp, #32
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
 80105da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80105e0:	2337      	movs	r3, #55	@ 0x37
 80105e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80105e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105ea:	2300      	movs	r3, #0
 80105ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105f4:	f107 0308 	add.w	r3, r7, #8
 80105f8:	4619      	mov	r1, r3
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f7ff fe26 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010604:	2137      	movs	r1, #55	@ 0x37
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f000 f912 	bl	8010830 <SDMMC_GetCmdResp1>
 801060c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801060e:	69fb      	ldr	r3, [r7, #28]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3720      	adds	r7, #32
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b088      	sub	sp, #32
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010626:	2329      	movs	r3, #41	@ 0x29
 8010628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801062a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801062e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010630:	2300      	movs	r3, #0
 8010632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010638:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801063a:	f107 0308 	add.w	r3, r7, #8
 801063e:	4619      	mov	r1, r3
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f7ff fe03 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 fa2e 	bl	8010aa8 <SDMMC_GetCmdResp3>
 801064c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801064e:	69fb      	ldr	r3, [r7, #28]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3720      	adds	r7, #32
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b088      	sub	sp, #32
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010666:	2306      	movs	r3, #6
 8010668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801066a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801066e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010670:	2300      	movs	r3, #0
 8010672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010678:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801067a:	f107 0308 	add.w	r3, r7, #8
 801067e:	4619      	mov	r1, r3
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f7ff fde3 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010686:	f241 3288 	movw	r2, #5000	@ 0x1388
 801068a:	2106      	movs	r1, #6
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f000 f8cf 	bl	8010830 <SDMMC_GetCmdResp1>
 8010692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010694:	69fb      	ldr	r3, [r7, #28]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3720      	adds	r7, #32
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}

0801069e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801069e:	b580      	push	{r7, lr}
 80106a0:	b088      	sub	sp, #32
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80106a6:	2300      	movs	r3, #0
 80106a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80106aa:	2333      	movs	r3, #51	@ 0x33
 80106ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80106ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80106b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106b4:	2300      	movs	r3, #0
 80106b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80106bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106be:	f107 0308 	add.w	r3, r7, #8
 80106c2:	4619      	mov	r1, r3
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f7ff fdc1 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80106ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80106ce:	2133      	movs	r1, #51	@ 0x33
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f000 f8ad 	bl	8010830 <SDMMC_GetCmdResp1>
 80106d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106d8:	69fb      	ldr	r3, [r7, #28]
}
 80106da:	4618      	mov	r0, r3
 80106dc:	3720      	adds	r7, #32
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}

080106e2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80106e2:	b580      	push	{r7, lr}
 80106e4:	b088      	sub	sp, #32
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80106ea:	2300      	movs	r3, #0
 80106ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80106ee:	2302      	movs	r3, #2
 80106f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80106f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80106f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106f8:	2300      	movs	r3, #0
 80106fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010700:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010702:	f107 0308 	add.w	r3, r7, #8
 8010706:	4619      	mov	r1, r3
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f7ff fd9f 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f000 f980 	bl	8010a14 <SDMMC_GetCmdResp2>
 8010714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010716:	69fb      	ldr	r3, [r7, #28]
}
 8010718:	4618      	mov	r0, r3
 801071a:	3720      	adds	r7, #32
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}

08010720 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b088      	sub	sp, #32
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
 8010728:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801072e:	2309      	movs	r3, #9
 8010730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010732:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010738:	2300      	movs	r3, #0
 801073a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010742:	f107 0308 	add.w	r3, r7, #8
 8010746:	4619      	mov	r1, r3
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f7ff fd7f 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f000 f960 	bl	8010a14 <SDMMC_GetCmdResp2>
 8010754:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010756:	69fb      	ldr	r3, [r7, #28]
}
 8010758:	4618      	mov	r0, r3
 801075a:	3720      	adds	r7, #32
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b088      	sub	sp, #32
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801076a:	2300      	movs	r3, #0
 801076c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801076e:	2303      	movs	r3, #3
 8010770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010778:	2300      	movs	r3, #0
 801077a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801077c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010780:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010782:	f107 0308 	add.w	r3, r7, #8
 8010786:	4619      	mov	r1, r3
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f7ff fd5f 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801078e:	683a      	ldr	r2, [r7, #0]
 8010790:	2103      	movs	r1, #3
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f000 f9c8 	bl	8010b28 <SDMMC_GetCmdResp6>
 8010798:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801079a:	69fb      	ldr	r3, [r7, #28]
}
 801079c:	4618      	mov	r0, r3
 801079e:	3720      	adds	r7, #32
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b088      	sub	sp, #32
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80107b2:	230d      	movs	r3, #13
 80107b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80107ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107bc:	2300      	movs	r3, #0
 80107be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80107c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107c6:	f107 0308 	add.w	r3, r7, #8
 80107ca:	4619      	mov	r1, r3
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f7ff fd3d 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80107d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107d6:	210d      	movs	r1, #13
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f000 f829 	bl	8010830 <SDMMC_GetCmdResp1>
 80107de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107e0:	69fb      	ldr	r3, [r7, #28]
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3720      	adds	r7, #32
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}

080107ea <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80107ea:	b580      	push	{r7, lr}
 80107ec:	b088      	sub	sp, #32
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80107f2:	2300      	movs	r3, #0
 80107f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80107f6:	230d      	movs	r3, #13
 80107f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80107fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010800:	2300      	movs	r3, #0
 8010802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801080a:	f107 0308 	add.w	r3, r7, #8
 801080e:	4619      	mov	r1, r3
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f7ff fd1b 	bl	801024c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010816:	f241 3288 	movw	r2, #5000	@ 0x1388
 801081a:	210d      	movs	r1, #13
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f000 f807 	bl	8010830 <SDMMC_GetCmdResp1>
 8010822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010824:	69fb      	ldr	r3, [r7, #28]
}
 8010826:	4618      	mov	r0, r3
 8010828:	3720      	adds	r7, #32
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
	...

08010830 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b088      	sub	sp, #32
 8010834:	af00      	add	r7, sp, #0
 8010836:	60f8      	str	r0, [r7, #12]
 8010838:	460b      	mov	r3, r1
 801083a:	607a      	str	r2, [r7, #4]
 801083c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801083e:	4b70      	ldr	r3, [pc, #448]	@ (8010a00 <SDMMC_GetCmdResp1+0x1d0>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	4a70      	ldr	r2, [pc, #448]	@ (8010a04 <SDMMC_GetCmdResp1+0x1d4>)
 8010844:	fba2 2303 	umull	r2, r3, r2, r3
 8010848:	0a5a      	lsrs	r2, r3, #9
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	fb02 f303 	mul.w	r3, r2, r3
 8010850:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	1e5a      	subs	r2, r3, #1
 8010856:	61fa      	str	r2, [r7, #28]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d102      	bne.n	8010862 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801085c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010860:	e0c9      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010866:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010868:	69ba      	ldr	r2, [r7, #24]
 801086a:	4b67      	ldr	r3, [pc, #412]	@ (8010a08 <SDMMC_GetCmdResp1+0x1d8>)
 801086c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801086e:	2b00      	cmp	r3, #0
 8010870:	d0ef      	beq.n	8010852 <SDMMC_GetCmdResp1+0x22>
 8010872:	69bb      	ldr	r3, [r7, #24]
 8010874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010878:	2b00      	cmp	r3, #0
 801087a:	d1ea      	bne.n	8010852 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010880:	f003 0304 	and.w	r3, r3, #4
 8010884:	2b00      	cmp	r3, #0
 8010886:	d004      	beq.n	8010892 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2204      	movs	r2, #4
 801088c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801088e:	2304      	movs	r3, #4
 8010890:	e0b1      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010896:	f003 0301 	and.w	r3, r3, #1
 801089a:	2b00      	cmp	r3, #0
 801089c:	d004      	beq.n	80108a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	2201      	movs	r2, #1
 80108a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108a4:	2301      	movs	r3, #1
 80108a6:	e0a6      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	4a58      	ldr	r2, [pc, #352]	@ (8010a0c <SDMMC_GetCmdResp1+0x1dc>)
 80108ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80108ae:	68f8      	ldr	r0, [r7, #12]
 80108b0:	f7ff fcf6 	bl	80102a0 <SDMMC_GetCommandResponse>
 80108b4:	4603      	mov	r3, r0
 80108b6:	461a      	mov	r2, r3
 80108b8:	7afb      	ldrb	r3, [r7, #11]
 80108ba:	4293      	cmp	r3, r2
 80108bc:	d001      	beq.n	80108c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108be:	2301      	movs	r3, #1
 80108c0:	e099      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80108c2:	2100      	movs	r1, #0
 80108c4:	68f8      	ldr	r0, [r7, #12]
 80108c6:	f7ff fcf8 	bl	80102ba <SDMMC_GetResponse>
 80108ca:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80108cc:	697a      	ldr	r2, [r7, #20]
 80108ce:	4b50      	ldr	r3, [pc, #320]	@ (8010a10 <SDMMC_GetCmdResp1+0x1e0>)
 80108d0:	4013      	ands	r3, r2
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d101      	bne.n	80108da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80108d6:	2300      	movs	r3, #0
 80108d8:	e08d      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	da02      	bge.n	80108e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80108e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80108e4:	e087      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d001      	beq.n	80108f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80108f0:	2340      	movs	r3, #64	@ 0x40
 80108f2:	e080      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d001      	beq.n	8010902 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80108fe:	2380      	movs	r3, #128	@ 0x80
 8010900:	e079      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010908:	2b00      	cmp	r3, #0
 801090a:	d002      	beq.n	8010912 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801090c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010910:	e071      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010918:	2b00      	cmp	r3, #0
 801091a:	d002      	beq.n	8010922 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801091c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010920:	e069      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010928:	2b00      	cmp	r3, #0
 801092a:	d002      	beq.n	8010932 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801092c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010930:	e061      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010938:	2b00      	cmp	r3, #0
 801093a:	d002      	beq.n	8010942 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801093c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010940:	e059      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801094c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010950:	e051      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801095c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010960:	e049      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010968:	2b00      	cmp	r3, #0
 801096a:	d002      	beq.n	8010972 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801096c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010970:	e041      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010978:	2b00      	cmp	r3, #0
 801097a:	d002      	beq.n	8010982 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801097c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010980:	e039      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010988:	2b00      	cmp	r3, #0
 801098a:	d002      	beq.n	8010992 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801098c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010990:	e031      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010998:	2b00      	cmp	r3, #0
 801099a:	d002      	beq.n	80109a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801099c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80109a0:	e029      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d002      	beq.n	80109b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80109ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80109b0:	e021      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d002      	beq.n	80109c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80109bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80109c0:	e019      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d002      	beq.n	80109d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80109cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80109d0:	e011      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d002      	beq.n	80109e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80109dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80109e0:	e009      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	f003 0308 	and.w	r3, r3, #8
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d002      	beq.n	80109f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80109ec:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80109f0:	e001      	b.n	80109f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3720      	adds	r7, #32
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	2400000c 	.word	0x2400000c
 8010a04:	10624dd3 	.word	0x10624dd3
 8010a08:	00200045 	.word	0x00200045
 8010a0c:	002000c5 	.word	0x002000c5
 8010a10:	fdffe008 	.word	0xfdffe008

08010a14 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010a14:	b480      	push	{r7}
 8010a16:	b085      	sub	sp, #20
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8010a9c <SDMMC_GetCmdResp2+0x88>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	4a1f      	ldr	r2, [pc, #124]	@ (8010aa0 <SDMMC_GetCmdResp2+0x8c>)
 8010a22:	fba2 2303 	umull	r2, r3, r2, r3
 8010a26:	0a5b      	lsrs	r3, r3, #9
 8010a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a2c:	fb02 f303 	mul.w	r3, r2, r3
 8010a30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	1e5a      	subs	r2, r3, #1
 8010a36:	60fa      	str	r2, [r7, #12]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d102      	bne.n	8010a42 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010a40:	e026      	b.n	8010a90 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a46:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d0ef      	beq.n	8010a32 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d1ea      	bne.n	8010a32 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a60:	f003 0304 	and.w	r3, r3, #4
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d004      	beq.n	8010a72 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2204      	movs	r2, #4
 8010a6c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a6e:	2304      	movs	r3, #4
 8010a70:	e00e      	b.n	8010a90 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a76:	f003 0301 	and.w	r3, r3, #1
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d004      	beq.n	8010a88 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2201      	movs	r2, #1
 8010a82:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a84:	2301      	movs	r3, #1
 8010a86:	e003      	b.n	8010a90 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	4a06      	ldr	r2, [pc, #24]	@ (8010aa4 <SDMMC_GetCmdResp2+0x90>)
 8010a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a8e:	2300      	movs	r3, #0
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3714      	adds	r7, #20
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr
 8010a9c:	2400000c 	.word	0x2400000c
 8010aa0:	10624dd3 	.word	0x10624dd3
 8010aa4:	002000c5 	.word	0x002000c5

08010aa8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b085      	sub	sp, #20
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8010b1c <SDMMC_GetCmdResp3+0x74>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8010b20 <SDMMC_GetCmdResp3+0x78>)
 8010ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8010aba:	0a5b      	lsrs	r3, r3, #9
 8010abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ac0:	fb02 f303 	mul.w	r3, r2, r3
 8010ac4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	1e5a      	subs	r2, r3, #1
 8010aca:	60fa      	str	r2, [r7, #12]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d102      	bne.n	8010ad6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ad0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010ad4:	e01b      	b.n	8010b0e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ada:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d0ef      	beq.n	8010ac6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d1ea      	bne.n	8010ac6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010af4:	f003 0304 	and.w	r3, r3, #4
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d004      	beq.n	8010b06 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2204      	movs	r2, #4
 8010b00:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b02:	2304      	movs	r3, #4
 8010b04:	e003      	b.n	8010b0e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	4a06      	ldr	r2, [pc, #24]	@ (8010b24 <SDMMC_GetCmdResp3+0x7c>)
 8010b0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010b0c:	2300      	movs	r3, #0
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3714      	adds	r7, #20
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr
 8010b1a:	bf00      	nop
 8010b1c:	2400000c 	.word	0x2400000c
 8010b20:	10624dd3 	.word	0x10624dd3
 8010b24:	002000c5 	.word	0x002000c5

08010b28 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b088      	sub	sp, #32
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	460b      	mov	r3, r1
 8010b32:	607a      	str	r2, [r7, #4]
 8010b34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010b36:	4b35      	ldr	r3, [pc, #212]	@ (8010c0c <SDMMC_GetCmdResp6+0xe4>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4a35      	ldr	r2, [pc, #212]	@ (8010c10 <SDMMC_GetCmdResp6+0xe8>)
 8010b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8010b40:	0a5b      	lsrs	r3, r3, #9
 8010b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010b46:	fb02 f303 	mul.w	r3, r2, r3
 8010b4a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	1e5a      	subs	r2, r3, #1
 8010b50:	61fa      	str	r2, [r7, #28]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d102      	bne.n	8010b5c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b56:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010b5a:	e052      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b60:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b62:	69bb      	ldr	r3, [r7, #24]
 8010b64:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d0ef      	beq.n	8010b4c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010b6c:	69bb      	ldr	r3, [r7, #24]
 8010b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d1ea      	bne.n	8010b4c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b7a:	f003 0304 	and.w	r3, r3, #4
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d004      	beq.n	8010b8c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2204      	movs	r2, #4
 8010b86:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b88:	2304      	movs	r3, #4
 8010b8a:	e03a      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b90:	f003 0301 	and.w	r3, r3, #1
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d004      	beq.n	8010ba2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	e02f      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010ba2:	68f8      	ldr	r0, [r7, #12]
 8010ba4:	f7ff fb7c 	bl	80102a0 <SDMMC_GetCommandResponse>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	461a      	mov	r2, r3
 8010bac:	7afb      	ldrb	r3, [r7, #11]
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d001      	beq.n	8010bb6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	e025      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	4a16      	ldr	r2, [pc, #88]	@ (8010c14 <SDMMC_GetCmdResp6+0xec>)
 8010bba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010bbc:	2100      	movs	r1, #0
 8010bbe:	68f8      	ldr	r0, [r7, #12]
 8010bc0:	f7ff fb7b 	bl	80102ba <SDMMC_GetResponse>
 8010bc4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d106      	bne.n	8010bde <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	0c1b      	lsrs	r3, r3, #16
 8010bd4:	b29a      	uxth	r2, r3
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	e011      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d002      	beq.n	8010bee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010be8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010bec:	e009      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010bfc:	e001      	b.n	8010c02 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010bfe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3720      	adds	r7, #32
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	2400000c 	.word	0x2400000c
 8010c10:	10624dd3 	.word	0x10624dd3
 8010c14:	002000c5 	.word	0x002000c5

08010c18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010c18:	b480      	push	{r7}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c20:	4b22      	ldr	r3, [pc, #136]	@ (8010cac <SDMMC_GetCmdResp7+0x94>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	4a22      	ldr	r2, [pc, #136]	@ (8010cb0 <SDMMC_GetCmdResp7+0x98>)
 8010c26:	fba2 2303 	umull	r2, r3, r2, r3
 8010c2a:	0a5b      	lsrs	r3, r3, #9
 8010c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c30:	fb02 f303 	mul.w	r3, r2, r3
 8010c34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	1e5a      	subs	r2, r3, #1
 8010c3a:	60fa      	str	r2, [r7, #12]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d102      	bne.n	8010c46 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c40:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010c44:	e02c      	b.n	8010ca0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c4a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d0ef      	beq.n	8010c36 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d1ea      	bne.n	8010c36 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c64:	f003 0304 	and.w	r3, r3, #4
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d004      	beq.n	8010c76 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2204      	movs	r2, #4
 8010c70:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c72:	2304      	movs	r3, #4
 8010c74:	e014      	b.n	8010ca0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c7a:	f003 0301 	and.w	r3, r3, #1
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d004      	beq.n	8010c8c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2201      	movs	r2, #1
 8010c86:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c88:	2301      	movs	r3, #1
 8010c8a:	e009      	b.n	8010ca0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2240      	movs	r2, #64	@ 0x40
 8010c9c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010c9e:	2300      	movs	r3, #0

}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3714      	adds	r7, #20
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010caa:	4770      	bx	lr
 8010cac:	2400000c 	.word	0x2400000c
 8010cb0:	10624dd3 	.word	0x10624dd3

08010cb4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b085      	sub	sp, #20
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010cbc:	4b11      	ldr	r3, [pc, #68]	@ (8010d04 <SDMMC_GetCmdError+0x50>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	4a11      	ldr	r2, [pc, #68]	@ (8010d08 <SDMMC_GetCmdError+0x54>)
 8010cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8010cc6:	0a5b      	lsrs	r3, r3, #9
 8010cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ccc:	fb02 f303 	mul.w	r3, r2, r3
 8010cd0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	1e5a      	subs	r2, r3, #1
 8010cd6:	60fa      	str	r2, [r7, #12]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d102      	bne.n	8010ce2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010cdc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010ce0:	e009      	b.n	8010cf6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d0f1      	beq.n	8010cd2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	4a06      	ldr	r2, [pc, #24]	@ (8010d0c <SDMMC_GetCmdError+0x58>)
 8010cf2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010cf4:	2300      	movs	r3, #0
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3714      	adds	r7, #20
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d00:	4770      	bx	lr
 8010d02:	bf00      	nop
 8010d04:	2400000c 	.word	0x2400000c
 8010d08:	10624dd3 	.word	0x10624dd3
 8010d0c:	002000c5 	.word	0x002000c5

08010d10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010d14:	4904      	ldr	r1, [pc, #16]	@ (8010d28 <MX_FATFS_Init+0x18>)
 8010d16:	4805      	ldr	r0, [pc, #20]	@ (8010d2c <MX_FATFS_Init+0x1c>)
 8010d18:	f003 f98a 	bl	8014030 <FATFS_LinkDriver>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	461a      	mov	r2, r3
 8010d20:	4b03      	ldr	r3, [pc, #12]	@ (8010d30 <MX_FATFS_Init+0x20>)
 8010d22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010d24:	bf00      	nop
 8010d26:	bd80      	pop	{r7, pc}
 8010d28:	24001824 	.word	0x24001824
 8010d2c:	08015004 	.word	0x08015004
 8010d30:	24001820 	.word	0x24001820

08010d34 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010d34:	b480      	push	{r7}
 8010d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010d38:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d42:	4770      	bx	lr

08010d44 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b082      	sub	sp, #8
 8010d48:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010d4e:	f000 f885 	bl	8010e5c <BSP_SD_IsDetected>
 8010d52:	4603      	mov	r3, r0
 8010d54:	2b01      	cmp	r3, #1
 8010d56:	d001      	beq.n	8010d5c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010d58:	2302      	movs	r3, #2
 8010d5a:	e012      	b.n	8010d82 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010d5c:	480b      	ldr	r0, [pc, #44]	@ (8010d8c <BSP_SD_Init+0x48>)
 8010d5e:	f7fb f955 	bl	800c00c <HAL_SD_Init>
 8010d62:	4603      	mov	r3, r0
 8010d64:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010d66:	79fb      	ldrb	r3, [r7, #7]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d109      	bne.n	8010d80 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010d6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010d70:	4806      	ldr	r0, [pc, #24]	@ (8010d8c <BSP_SD_Init+0x48>)
 8010d72:	f7fc f80b 	bl	800cd8c <HAL_SD_ConfigWideBusOperation>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d001      	beq.n	8010d80 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010d80:	79fb      	ldrb	r3, [r7, #7]
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	2400032c 	.word	0x2400032c

08010d90 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b086      	sub	sp, #24
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	60f8      	str	r0, [r7, #12]
 8010d98:	60b9      	str	r1, [r7, #8]
 8010d9a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	68ba      	ldr	r2, [r7, #8]
 8010da4:	68f9      	ldr	r1, [r7, #12]
 8010da6:	4806      	ldr	r0, [pc, #24]	@ (8010dc0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010da8:	f7fb fa50 	bl	800c24c <HAL_SD_ReadBlocks_DMA>
 8010dac:	4603      	mov	r3, r0
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d001      	beq.n	8010db6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010db2:	2301      	movs	r3, #1
 8010db4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3718      	adds	r7, #24
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	2400032c 	.word	0x2400032c

08010dc4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b086      	sub	sp, #24
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	68ba      	ldr	r2, [r7, #8]
 8010dd8:	68f9      	ldr	r1, [r7, #12]
 8010dda:	4806      	ldr	r0, [pc, #24]	@ (8010df4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010ddc:	f7fb fade 	bl	800c39c <HAL_SD_WriteBlocks_DMA>
 8010de0:	4603      	mov	r3, r0
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d001      	beq.n	8010dea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010de6:	2301      	movs	r3, #1
 8010de8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3718      	adds	r7, #24
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}
 8010df4:	2400032c 	.word	0x2400032c

08010df8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010dfc:	4805      	ldr	r0, [pc, #20]	@ (8010e14 <BSP_SD_GetCardState+0x1c>)
 8010dfe:	f7fc f8d7 	bl	800cfb0 <HAL_SD_GetCardState>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b04      	cmp	r3, #4
 8010e06:	bf14      	ite	ne
 8010e08:	2301      	movne	r3, #1
 8010e0a:	2300      	moveq	r3, #0
 8010e0c:	b2db      	uxtb	r3, r3
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	bd80      	pop	{r7, pc}
 8010e12:	bf00      	nop
 8010e14:	2400032c 	.word	0x2400032c

08010e18 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010e20:	6879      	ldr	r1, [r7, #4]
 8010e22:	4803      	ldr	r0, [pc, #12]	@ (8010e30 <BSP_SD_GetCardInfo+0x18>)
 8010e24:	f7fb ff86 	bl	800cd34 <HAL_SD_GetCardInfo>
}
 8010e28:	bf00      	nop
 8010e2a:	3708      	adds	r7, #8
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}
 8010e30:	2400032c 	.word	0x2400032c

08010e34 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010e3c:	f000 f9a0 	bl	8011180 <BSP_SD_WriteCpltCallback>
}
 8010e40:	bf00      	nop
 8010e42:	3708      	adds	r7, #8
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010e50:	f000 f9a2 	bl	8011198 <BSP_SD_ReadCpltCallback>
}
 8010e54:	bf00      	nop
 8010e56:	3708      	adds	r7, #8
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010e62:	2301      	movs	r3, #1
 8010e64:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010e66:	f000 f80b 	bl	8010e80 <BSP_PlatformIsDetected>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d101      	bne.n	8010e74 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010e70:	2300      	movs	r3, #0
 8010e72:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010e74:	79fb      	ldrb	r3, [r7, #7]
 8010e76:	b2db      	uxtb	r3, r3
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3708      	adds	r7, #8
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010e86:	2301      	movs	r3, #1
 8010e88:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010e8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010e8e:	4806      	ldr	r0, [pc, #24]	@ (8010ea8 <BSP_PlatformIsDetected+0x28>)
 8010e90:	f7f7 fd04 	bl	800889c <HAL_GPIO_ReadPin>
 8010e94:	4603      	mov	r3, r0
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d001      	beq.n	8010e9e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010e9e:	79fb      	ldrb	r3, [r7, #7]
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3708      	adds	r7, #8
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	58021400 	.word	0x58021400

08010eac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b084      	sub	sp, #16
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010eb4:	f7f1 fe7a 	bl	8002bac <HAL_GetTick>
 8010eb8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010eba:	e006      	b.n	8010eca <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010ebc:	f7ff ff9c 	bl	8010df8 <BSP_SD_GetCardState>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d101      	bne.n	8010eca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	e009      	b.n	8010ede <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010eca:	f7f1 fe6f 	bl	8002bac <HAL_GetTick>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	1ad3      	subs	r3, r2, r3
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d8f0      	bhi.n	8010ebc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3710      	adds	r7, #16
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
	...

08010ee8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	4603      	mov	r3, r0
 8010ef0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8010f20 <SD_CheckStatus+0x38>)
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010ef8:	f7ff ff7e 	bl	8010df8 <BSP_SD_GetCardState>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d107      	bne.n	8010f12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010f02:	4b07      	ldr	r3, [pc, #28]	@ (8010f20 <SD_CheckStatus+0x38>)
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	b2db      	uxtb	r3, r3
 8010f08:	f023 0301 	bic.w	r3, r3, #1
 8010f0c:	b2da      	uxtb	r2, r3
 8010f0e:	4b04      	ldr	r3, [pc, #16]	@ (8010f20 <SD_CheckStatus+0x38>)
 8010f10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010f12:	4b03      	ldr	r3, [pc, #12]	@ (8010f20 <SD_CheckStatus+0x38>)
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	b2db      	uxtb	r3, r3
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3708      	adds	r7, #8
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	24000019 	.word	0x24000019

08010f24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010f2e:	f7ff ff09 	bl	8010d44 <BSP_SD_Init>
 8010f32:	4603      	mov	r3, r0
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d107      	bne.n	8010f48 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010f38:	79fb      	ldrb	r3, [r7, #7]
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7ff ffd4 	bl	8010ee8 <SD_CheckStatus>
 8010f40:	4603      	mov	r3, r0
 8010f42:	461a      	mov	r2, r3
 8010f44:	4b04      	ldr	r3, [pc, #16]	@ (8010f58 <SD_initialize+0x34>)
 8010f46:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010f48:	4b03      	ldr	r3, [pc, #12]	@ (8010f58 <SD_initialize+0x34>)
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	b2db      	uxtb	r3, r3
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3708      	adds	r7, #8
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop
 8010f58:	24000019 	.word	0x24000019

08010f5c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	4603      	mov	r3, r0
 8010f64:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010f66:	79fb      	ldrb	r3, [r7, #7]
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7ff ffbd 	bl	8010ee8 <SD_CheckStatus>
 8010f6e:	4603      	mov	r3, r0
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	3708      	adds	r7, #8
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}

08010f78 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b086      	sub	sp, #24
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	60b9      	str	r1, [r7, #8]
 8010f80:	607a      	str	r2, [r7, #4]
 8010f82:	603b      	str	r3, [r7, #0]
 8010f84:	4603      	mov	r3, r0
 8010f86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010f8c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010f90:	f7ff ff8c 	bl	8010eac <SD_CheckStatusWithTimeout>
 8010f94:	4603      	mov	r3, r0
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	da01      	bge.n	8010f9e <SD_read+0x26>
  {
    return res;
 8010f9a:	7dfb      	ldrb	r3, [r7, #23]
 8010f9c:	e03b      	b.n	8011016 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010f9e:	683a      	ldr	r2, [r7, #0]
 8010fa0:	6879      	ldr	r1, [r7, #4]
 8010fa2:	68b8      	ldr	r0, [r7, #8]
 8010fa4:	f7ff fef4 	bl	8010d90 <BSP_SD_ReadBlocks_DMA>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d132      	bne.n	8011014 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010fae:	4b1c      	ldr	r3, [pc, #112]	@ (8011020 <SD_read+0xa8>)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010fb4:	f7f1 fdfa 	bl	8002bac <HAL_GetTick>
 8010fb8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010fba:	bf00      	nop
 8010fbc:	4b18      	ldr	r3, [pc, #96]	@ (8011020 <SD_read+0xa8>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d108      	bne.n	8010fd6 <SD_read+0x5e>
 8010fc4:	f7f1 fdf2 	bl	8002bac <HAL_GetTick>
 8010fc8:	4602      	mov	r2, r0
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	1ad3      	subs	r3, r2, r3
 8010fce:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	d9f2      	bls.n	8010fbc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010fd6:	4b12      	ldr	r3, [pc, #72]	@ (8011020 <SD_read+0xa8>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d102      	bne.n	8010fe4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	75fb      	strb	r3, [r7, #23]
 8010fe2:	e017      	b.n	8011014 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8011020 <SD_read+0xa8>)
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010fea:	f7f1 fddf 	bl	8002bac <HAL_GetTick>
 8010fee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ff0:	e007      	b.n	8011002 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010ff2:	f7ff ff01 	bl	8010df8 <BSP_SD_GetCardState>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d102      	bne.n	8011002 <SD_read+0x8a>
          {
            res = RES_OK;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011000:	e008      	b.n	8011014 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011002:	f7f1 fdd3 	bl	8002bac <HAL_GetTick>
 8011006:	4602      	mov	r2, r0
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	1ad3      	subs	r3, r2, r3
 801100c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011010:	4293      	cmp	r3, r2
 8011012:	d9ee      	bls.n	8010ff2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011014:	7dfb      	ldrb	r3, [r7, #23]
}
 8011016:	4618      	mov	r0, r3
 8011018:	3718      	adds	r7, #24
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	24001830 	.word	0x24001830

08011024 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b086      	sub	sp, #24
 8011028:	af00      	add	r7, sp, #0
 801102a:	60b9      	str	r1, [r7, #8]
 801102c:	607a      	str	r2, [r7, #4]
 801102e:	603b      	str	r3, [r7, #0]
 8011030:	4603      	mov	r3, r0
 8011032:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011034:	2301      	movs	r3, #1
 8011036:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011038:	4b24      	ldr	r3, [pc, #144]	@ (80110cc <SD_write+0xa8>)
 801103a:	2200      	movs	r2, #0
 801103c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801103e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011042:	f7ff ff33 	bl	8010eac <SD_CheckStatusWithTimeout>
 8011046:	4603      	mov	r3, r0
 8011048:	2b00      	cmp	r3, #0
 801104a:	da01      	bge.n	8011050 <SD_write+0x2c>
  {
    return res;
 801104c:	7dfb      	ldrb	r3, [r7, #23]
 801104e:	e038      	b.n	80110c2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011050:	683a      	ldr	r2, [r7, #0]
 8011052:	6879      	ldr	r1, [r7, #4]
 8011054:	68b8      	ldr	r0, [r7, #8]
 8011056:	f7ff feb5 	bl	8010dc4 <BSP_SD_WriteBlocks_DMA>
 801105a:	4603      	mov	r3, r0
 801105c:	2b00      	cmp	r3, #0
 801105e:	d12f      	bne.n	80110c0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011060:	f7f1 fda4 	bl	8002bac <HAL_GetTick>
 8011064:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011066:	bf00      	nop
 8011068:	4b18      	ldr	r3, [pc, #96]	@ (80110cc <SD_write+0xa8>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d108      	bne.n	8011082 <SD_write+0x5e>
 8011070:	f7f1 fd9c 	bl	8002bac <HAL_GetTick>
 8011074:	4602      	mov	r2, r0
 8011076:	693b      	ldr	r3, [r7, #16]
 8011078:	1ad3      	subs	r3, r2, r3
 801107a:	f247 522f 	movw	r2, #29999	@ 0x752f
 801107e:	4293      	cmp	r3, r2
 8011080:	d9f2      	bls.n	8011068 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8011082:	4b12      	ldr	r3, [pc, #72]	@ (80110cc <SD_write+0xa8>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d102      	bne.n	8011090 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801108a:	2301      	movs	r3, #1
 801108c:	75fb      	strb	r3, [r7, #23]
 801108e:	e017      	b.n	80110c0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011090:	4b0e      	ldr	r3, [pc, #56]	@ (80110cc <SD_write+0xa8>)
 8011092:	2200      	movs	r2, #0
 8011094:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011096:	f7f1 fd89 	bl	8002bac <HAL_GetTick>
 801109a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801109c:	e007      	b.n	80110ae <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801109e:	f7ff feab 	bl	8010df8 <BSP_SD_GetCardState>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d102      	bne.n	80110ae <SD_write+0x8a>
          {
            res = RES_OK;
 80110a8:	2300      	movs	r3, #0
 80110aa:	75fb      	strb	r3, [r7, #23]
            break;
 80110ac:	e008      	b.n	80110c0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80110ae:	f7f1 fd7d 	bl	8002bac <HAL_GetTick>
 80110b2:	4602      	mov	r2, r0
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	1ad3      	subs	r3, r2, r3
 80110b8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80110bc:	4293      	cmp	r3, r2
 80110be:	d9ee      	bls.n	801109e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80110c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3718      	adds	r7, #24
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	2400182c 	.word	0x2400182c

080110d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b08c      	sub	sp, #48	@ 0x30
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	4603      	mov	r3, r0
 80110d8:	603a      	str	r2, [r7, #0]
 80110da:	71fb      	strb	r3, [r7, #7]
 80110dc:	460b      	mov	r3, r1
 80110de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80110e0:	2301      	movs	r3, #1
 80110e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80110e6:	4b25      	ldr	r3, [pc, #148]	@ (801117c <SD_ioctl+0xac>)
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	f003 0301 	and.w	r3, r3, #1
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d001      	beq.n	80110f8 <SD_ioctl+0x28>
 80110f4:	2303      	movs	r3, #3
 80110f6:	e03c      	b.n	8011172 <SD_ioctl+0xa2>

  switch (cmd)
 80110f8:	79bb      	ldrb	r3, [r7, #6]
 80110fa:	2b03      	cmp	r3, #3
 80110fc:	d834      	bhi.n	8011168 <SD_ioctl+0x98>
 80110fe:	a201      	add	r2, pc, #4	@ (adr r2, 8011104 <SD_ioctl+0x34>)
 8011100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011104:	08011115 	.word	0x08011115
 8011108:	0801111d 	.word	0x0801111d
 801110c:	08011135 	.word	0x08011135
 8011110:	0801114f 	.word	0x0801114f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011114:	2300      	movs	r3, #0
 8011116:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801111a:	e028      	b.n	801116e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801111c:	f107 0308 	add.w	r3, r7, #8
 8011120:	4618      	mov	r0, r3
 8011122:	f7ff fe79 	bl	8010e18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011126:	6a3a      	ldr	r2, [r7, #32]
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801112c:	2300      	movs	r3, #0
 801112e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011132:	e01c      	b.n	801116e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011134:	f107 0308 	add.w	r3, r7, #8
 8011138:	4618      	mov	r0, r3
 801113a:	f7ff fe6d 	bl	8010e18 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011140:	b29a      	uxth	r2, r3
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011146:	2300      	movs	r3, #0
 8011148:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801114c:	e00f      	b.n	801116e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801114e:	f107 0308 	add.w	r3, r7, #8
 8011152:	4618      	mov	r0, r3
 8011154:	f7ff fe60 	bl	8010e18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801115a:	0a5a      	lsrs	r2, r3, #9
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011160:	2300      	movs	r3, #0
 8011162:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011166:	e002      	b.n	801116e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011168:	2304      	movs	r3, #4
 801116a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801116e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011172:	4618      	mov	r0, r3
 8011174:	3730      	adds	r7, #48	@ 0x30
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
 801117a:	bf00      	nop
 801117c:	24000019 	.word	0x24000019

08011180 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011180:	b480      	push	{r7}
 8011182:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011184:	4b03      	ldr	r3, [pc, #12]	@ (8011194 <BSP_SD_WriteCpltCallback+0x14>)
 8011186:	2201      	movs	r2, #1
 8011188:	601a      	str	r2, [r3, #0]
}
 801118a:	bf00      	nop
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr
 8011194:	2400182c 	.word	0x2400182c

08011198 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011198:	b480      	push	{r7}
 801119a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801119c:	4b03      	ldr	r3, [pc, #12]	@ (80111ac <BSP_SD_ReadCpltCallback+0x14>)
 801119e:	2201      	movs	r2, #1
 80111a0:	601a      	str	r2, [r3, #0]
}
 80111a2:	bf00      	nop
 80111a4:	46bd      	mov	sp, r7
 80111a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111aa:	4770      	bx	lr
 80111ac:	24001830 	.word	0x24001830

080111b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	4603      	mov	r3, r0
 80111b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80111ba:	79fb      	ldrb	r3, [r7, #7]
 80111bc:	4a08      	ldr	r2, [pc, #32]	@ (80111e0 <disk_status+0x30>)
 80111be:	009b      	lsls	r3, r3, #2
 80111c0:	4413      	add	r3, r2
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	79fa      	ldrb	r2, [r7, #7]
 80111c8:	4905      	ldr	r1, [pc, #20]	@ (80111e0 <disk_status+0x30>)
 80111ca:	440a      	add	r2, r1
 80111cc:	7a12      	ldrb	r2, [r2, #8]
 80111ce:	4610      	mov	r0, r2
 80111d0:	4798      	blx	r3
 80111d2:	4603      	mov	r3, r0
 80111d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80111d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3710      	adds	r7, #16
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}
 80111e0:	24001a5c 	.word	0x24001a5c

080111e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b084      	sub	sp, #16
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	4603      	mov	r3, r0
 80111ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80111ee:	2300      	movs	r3, #0
 80111f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80111f2:	79fb      	ldrb	r3, [r7, #7]
 80111f4:	4a0e      	ldr	r2, [pc, #56]	@ (8011230 <disk_initialize+0x4c>)
 80111f6:	5cd3      	ldrb	r3, [r2, r3]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d114      	bne.n	8011226 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80111fc:	79fb      	ldrb	r3, [r7, #7]
 80111fe:	4a0c      	ldr	r2, [pc, #48]	@ (8011230 <disk_initialize+0x4c>)
 8011200:	009b      	lsls	r3, r3, #2
 8011202:	4413      	add	r3, r2
 8011204:	685b      	ldr	r3, [r3, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	79fa      	ldrb	r2, [r7, #7]
 801120a:	4909      	ldr	r1, [pc, #36]	@ (8011230 <disk_initialize+0x4c>)
 801120c:	440a      	add	r2, r1
 801120e:	7a12      	ldrb	r2, [r2, #8]
 8011210:	4610      	mov	r0, r2
 8011212:	4798      	blx	r3
 8011214:	4603      	mov	r3, r0
 8011216:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8011218:	7bfb      	ldrb	r3, [r7, #15]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d103      	bne.n	8011226 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801121e:	79fb      	ldrb	r3, [r7, #7]
 8011220:	4a03      	ldr	r2, [pc, #12]	@ (8011230 <disk_initialize+0x4c>)
 8011222:	2101      	movs	r1, #1
 8011224:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8011226:	7bfb      	ldrb	r3, [r7, #15]
}
 8011228:	4618      	mov	r0, r3
 801122a:	3710      	adds	r7, #16
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}
 8011230:	24001a5c 	.word	0x24001a5c

08011234 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011234:	b590      	push	{r4, r7, lr}
 8011236:	b087      	sub	sp, #28
 8011238:	af00      	add	r7, sp, #0
 801123a:	60b9      	str	r1, [r7, #8]
 801123c:	607a      	str	r2, [r7, #4]
 801123e:	603b      	str	r3, [r7, #0]
 8011240:	4603      	mov	r3, r0
 8011242:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011244:	7bfb      	ldrb	r3, [r7, #15]
 8011246:	4a0a      	ldr	r2, [pc, #40]	@ (8011270 <disk_read+0x3c>)
 8011248:	009b      	lsls	r3, r3, #2
 801124a:	4413      	add	r3, r2
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	689c      	ldr	r4, [r3, #8]
 8011250:	7bfb      	ldrb	r3, [r7, #15]
 8011252:	4a07      	ldr	r2, [pc, #28]	@ (8011270 <disk_read+0x3c>)
 8011254:	4413      	add	r3, r2
 8011256:	7a18      	ldrb	r0, [r3, #8]
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	687a      	ldr	r2, [r7, #4]
 801125c:	68b9      	ldr	r1, [r7, #8]
 801125e:	47a0      	blx	r4
 8011260:	4603      	mov	r3, r0
 8011262:	75fb      	strb	r3, [r7, #23]
  return res;
 8011264:	7dfb      	ldrb	r3, [r7, #23]
}
 8011266:	4618      	mov	r0, r3
 8011268:	371c      	adds	r7, #28
 801126a:	46bd      	mov	sp, r7
 801126c:	bd90      	pop	{r4, r7, pc}
 801126e:	bf00      	nop
 8011270:	24001a5c 	.word	0x24001a5c

08011274 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011274:	b590      	push	{r4, r7, lr}
 8011276:	b087      	sub	sp, #28
 8011278:	af00      	add	r7, sp, #0
 801127a:	60b9      	str	r1, [r7, #8]
 801127c:	607a      	str	r2, [r7, #4]
 801127e:	603b      	str	r3, [r7, #0]
 8011280:	4603      	mov	r3, r0
 8011282:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011284:	7bfb      	ldrb	r3, [r7, #15]
 8011286:	4a0a      	ldr	r2, [pc, #40]	@ (80112b0 <disk_write+0x3c>)
 8011288:	009b      	lsls	r3, r3, #2
 801128a:	4413      	add	r3, r2
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	68dc      	ldr	r4, [r3, #12]
 8011290:	7bfb      	ldrb	r3, [r7, #15]
 8011292:	4a07      	ldr	r2, [pc, #28]	@ (80112b0 <disk_write+0x3c>)
 8011294:	4413      	add	r3, r2
 8011296:	7a18      	ldrb	r0, [r3, #8]
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	68b9      	ldr	r1, [r7, #8]
 801129e:	47a0      	blx	r4
 80112a0:	4603      	mov	r3, r0
 80112a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80112a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	371c      	adds	r7, #28
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd90      	pop	{r4, r7, pc}
 80112ae:	bf00      	nop
 80112b0:	24001a5c 	.word	0x24001a5c

080112b4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	4603      	mov	r3, r0
 80112bc:	603a      	str	r2, [r7, #0]
 80112be:	71fb      	strb	r3, [r7, #7]
 80112c0:	460b      	mov	r3, r1
 80112c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80112c4:	79fb      	ldrb	r3, [r7, #7]
 80112c6:	4a09      	ldr	r2, [pc, #36]	@ (80112ec <disk_ioctl+0x38>)
 80112c8:	009b      	lsls	r3, r3, #2
 80112ca:	4413      	add	r3, r2
 80112cc:	685b      	ldr	r3, [r3, #4]
 80112ce:	691b      	ldr	r3, [r3, #16]
 80112d0:	79fa      	ldrb	r2, [r7, #7]
 80112d2:	4906      	ldr	r1, [pc, #24]	@ (80112ec <disk_ioctl+0x38>)
 80112d4:	440a      	add	r2, r1
 80112d6:	7a10      	ldrb	r0, [r2, #8]
 80112d8:	79b9      	ldrb	r1, [r7, #6]
 80112da:	683a      	ldr	r2, [r7, #0]
 80112dc:	4798      	blx	r3
 80112de:	4603      	mov	r3, r0
 80112e0:	73fb      	strb	r3, [r7, #15]
  return res;
 80112e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3710      	adds	r7, #16
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}
 80112ec:	24001a5c 	.word	0x24001a5c

080112f0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80112f0:	b480      	push	{r7}
 80112f2:	b085      	sub	sp, #20
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	3301      	adds	r3, #1
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011300:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011304:	021b      	lsls	r3, r3, #8
 8011306:	b21a      	sxth	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	b21b      	sxth	r3, r3
 801130e:	4313      	orrs	r3, r2
 8011310:	b21b      	sxth	r3, r3
 8011312:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011314:	89fb      	ldrh	r3, [r7, #14]
}
 8011316:	4618      	mov	r0, r3
 8011318:	3714      	adds	r7, #20
 801131a:	46bd      	mov	sp, r7
 801131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011320:	4770      	bx	lr

08011322 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011322:	b480      	push	{r7}
 8011324:	b085      	sub	sp, #20
 8011326:	af00      	add	r7, sp, #0
 8011328:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	3303      	adds	r3, #3
 801132e:	781b      	ldrb	r3, [r3, #0]
 8011330:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	021b      	lsls	r3, r3, #8
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	3202      	adds	r2, #2
 801133a:	7812      	ldrb	r2, [r2, #0]
 801133c:	4313      	orrs	r3, r2
 801133e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	021b      	lsls	r3, r3, #8
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	3201      	adds	r2, #1
 8011348:	7812      	ldrb	r2, [r2, #0]
 801134a:	4313      	orrs	r3, r2
 801134c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	021b      	lsls	r3, r3, #8
 8011352:	687a      	ldr	r2, [r7, #4]
 8011354:	7812      	ldrb	r2, [r2, #0]
 8011356:	4313      	orrs	r3, r2
 8011358:	60fb      	str	r3, [r7, #12]
	return rv;
 801135a:	68fb      	ldr	r3, [r7, #12]
}
 801135c:	4618      	mov	r0, r3
 801135e:	3714      	adds	r7, #20
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr

08011368 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011368:	b480      	push	{r7}
 801136a:	b083      	sub	sp, #12
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	460b      	mov	r3, r1
 8011372:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	1c5a      	adds	r2, r3, #1
 8011378:	607a      	str	r2, [r7, #4]
 801137a:	887a      	ldrh	r2, [r7, #2]
 801137c:	b2d2      	uxtb	r2, r2
 801137e:	701a      	strb	r2, [r3, #0]
 8011380:	887b      	ldrh	r3, [r7, #2]
 8011382:	0a1b      	lsrs	r3, r3, #8
 8011384:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	1c5a      	adds	r2, r3, #1
 801138a:	607a      	str	r2, [r7, #4]
 801138c:	887a      	ldrh	r2, [r7, #2]
 801138e:	b2d2      	uxtb	r2, r2
 8011390:	701a      	strb	r2, [r3, #0]
}
 8011392:	bf00      	nop
 8011394:	370c      	adds	r7, #12
 8011396:	46bd      	mov	sp, r7
 8011398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139c:	4770      	bx	lr

0801139e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801139e:	b480      	push	{r7}
 80113a0:	b083      	sub	sp, #12
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	6078      	str	r0, [r7, #4]
 80113a6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	1c5a      	adds	r2, r3, #1
 80113ac:	607a      	str	r2, [r7, #4]
 80113ae:	683a      	ldr	r2, [r7, #0]
 80113b0:	b2d2      	uxtb	r2, r2
 80113b2:	701a      	strb	r2, [r3, #0]
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	0a1b      	lsrs	r3, r3, #8
 80113b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	1c5a      	adds	r2, r3, #1
 80113be:	607a      	str	r2, [r7, #4]
 80113c0:	683a      	ldr	r2, [r7, #0]
 80113c2:	b2d2      	uxtb	r2, r2
 80113c4:	701a      	strb	r2, [r3, #0]
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	0a1b      	lsrs	r3, r3, #8
 80113ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	1c5a      	adds	r2, r3, #1
 80113d0:	607a      	str	r2, [r7, #4]
 80113d2:	683a      	ldr	r2, [r7, #0]
 80113d4:	b2d2      	uxtb	r2, r2
 80113d6:	701a      	strb	r2, [r3, #0]
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	0a1b      	lsrs	r3, r3, #8
 80113dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	1c5a      	adds	r2, r3, #1
 80113e2:	607a      	str	r2, [r7, #4]
 80113e4:	683a      	ldr	r2, [r7, #0]
 80113e6:	b2d2      	uxtb	r2, r2
 80113e8:	701a      	strb	r2, [r3, #0]
}
 80113ea:	bf00      	nop
 80113ec:	370c      	adds	r7, #12
 80113ee:	46bd      	mov	sp, r7
 80113f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f4:	4770      	bx	lr

080113f6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80113f6:	b480      	push	{r7}
 80113f8:	b087      	sub	sp, #28
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	60f8      	str	r0, [r7, #12]
 80113fe:	60b9      	str	r1, [r7, #8]
 8011400:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00d      	beq.n	801142c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011410:	693a      	ldr	r2, [r7, #16]
 8011412:	1c53      	adds	r3, r2, #1
 8011414:	613b      	str	r3, [r7, #16]
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	1c59      	adds	r1, r3, #1
 801141a:	6179      	str	r1, [r7, #20]
 801141c:	7812      	ldrb	r2, [r2, #0]
 801141e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	3b01      	subs	r3, #1
 8011424:	607b      	str	r3, [r7, #4]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d1f1      	bne.n	8011410 <mem_cpy+0x1a>
	}
}
 801142c:	bf00      	nop
 801142e:	371c      	adds	r7, #28
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr

08011438 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011438:	b480      	push	{r7}
 801143a:	b087      	sub	sp, #28
 801143c:	af00      	add	r7, sp, #0
 801143e:	60f8      	str	r0, [r7, #12]
 8011440:	60b9      	str	r1, [r7, #8]
 8011442:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	1c5a      	adds	r2, r3, #1
 801144c:	617a      	str	r2, [r7, #20]
 801144e:	68ba      	ldr	r2, [r7, #8]
 8011450:	b2d2      	uxtb	r2, r2
 8011452:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	3b01      	subs	r3, #1
 8011458:	607b      	str	r3, [r7, #4]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d1f3      	bne.n	8011448 <mem_set+0x10>
}
 8011460:	bf00      	nop
 8011462:	bf00      	nop
 8011464:	371c      	adds	r7, #28
 8011466:	46bd      	mov	sp, r7
 8011468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146c:	4770      	bx	lr

0801146e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801146e:	b480      	push	{r7}
 8011470:	b089      	sub	sp, #36	@ 0x24
 8011472:	af00      	add	r7, sp, #0
 8011474:	60f8      	str	r0, [r7, #12]
 8011476:	60b9      	str	r1, [r7, #8]
 8011478:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	61fb      	str	r3, [r7, #28]
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011482:	2300      	movs	r3, #0
 8011484:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	1c5a      	adds	r2, r3, #1
 801148a:	61fa      	str	r2, [r7, #28]
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	4619      	mov	r1, r3
 8011490:	69bb      	ldr	r3, [r7, #24]
 8011492:	1c5a      	adds	r2, r3, #1
 8011494:	61ba      	str	r2, [r7, #24]
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	1acb      	subs	r3, r1, r3
 801149a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	3b01      	subs	r3, #1
 80114a0:	607b      	str	r3, [r7, #4]
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d002      	beq.n	80114ae <mem_cmp+0x40>
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d0eb      	beq.n	8011486 <mem_cmp+0x18>

	return r;
 80114ae:	697b      	ldr	r3, [r7, #20]
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	3724      	adds	r7, #36	@ 0x24
 80114b4:	46bd      	mov	sp, r7
 80114b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ba:	4770      	bx	lr

080114bc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80114bc:	b480      	push	{r7}
 80114be:	b083      	sub	sp, #12
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80114c6:	e002      	b.n	80114ce <chk_chr+0x12>
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	3301      	adds	r3, #1
 80114cc:	607b      	str	r3, [r7, #4]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d005      	beq.n	80114e2 <chk_chr+0x26>
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	461a      	mov	r2, r3
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	4293      	cmp	r3, r2
 80114e0:	d1f2      	bne.n	80114c8 <chk_chr+0xc>
	return *str;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	781b      	ldrb	r3, [r3, #0]
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	370c      	adds	r7, #12
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr
	...

080114f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80114f4:	b480      	push	{r7}
 80114f6:	b085      	sub	sp, #20
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80114fe:	2300      	movs	r3, #0
 8011500:	60bb      	str	r3, [r7, #8]
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	60fb      	str	r3, [r7, #12]
 8011506:	e029      	b.n	801155c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011508:	4a27      	ldr	r2, [pc, #156]	@ (80115a8 <chk_lock+0xb4>)
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	011b      	lsls	r3, r3, #4
 801150e:	4413      	add	r3, r2
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d01d      	beq.n	8011552 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011516:	4a24      	ldr	r2, [pc, #144]	@ (80115a8 <chk_lock+0xb4>)
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	011b      	lsls	r3, r3, #4
 801151c:	4413      	add	r3, r2
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	429a      	cmp	r2, r3
 8011526:	d116      	bne.n	8011556 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011528:	4a1f      	ldr	r2, [pc, #124]	@ (80115a8 <chk_lock+0xb4>)
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	011b      	lsls	r3, r3, #4
 801152e:	4413      	add	r3, r2
 8011530:	3304      	adds	r3, #4
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011538:	429a      	cmp	r2, r3
 801153a:	d10c      	bne.n	8011556 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801153c:	4a1a      	ldr	r2, [pc, #104]	@ (80115a8 <chk_lock+0xb4>)
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	011b      	lsls	r3, r3, #4
 8011542:	4413      	add	r3, r2
 8011544:	3308      	adds	r3, #8
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801154c:	429a      	cmp	r2, r3
 801154e:	d102      	bne.n	8011556 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011550:	e007      	b.n	8011562 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011552:	2301      	movs	r3, #1
 8011554:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	3301      	adds	r3, #1
 801155a:	60fb      	str	r3, [r7, #12]
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2b01      	cmp	r3, #1
 8011560:	d9d2      	bls.n	8011508 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	2b02      	cmp	r3, #2
 8011566:	d109      	bne.n	801157c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d102      	bne.n	8011574 <chk_lock+0x80>
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	2b02      	cmp	r3, #2
 8011572:	d101      	bne.n	8011578 <chk_lock+0x84>
 8011574:	2300      	movs	r3, #0
 8011576:	e010      	b.n	801159a <chk_lock+0xa6>
 8011578:	2312      	movs	r3, #18
 801157a:	e00e      	b.n	801159a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d108      	bne.n	8011594 <chk_lock+0xa0>
 8011582:	4a09      	ldr	r2, [pc, #36]	@ (80115a8 <chk_lock+0xb4>)
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	011b      	lsls	r3, r3, #4
 8011588:	4413      	add	r3, r2
 801158a:	330c      	adds	r3, #12
 801158c:	881b      	ldrh	r3, [r3, #0]
 801158e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011592:	d101      	bne.n	8011598 <chk_lock+0xa4>
 8011594:	2310      	movs	r3, #16
 8011596:	e000      	b.n	801159a <chk_lock+0xa6>
 8011598:	2300      	movs	r3, #0
}
 801159a:	4618      	mov	r0, r3
 801159c:	3714      	adds	r7, #20
 801159e:	46bd      	mov	sp, r7
 80115a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a4:	4770      	bx	lr
 80115a6:	bf00      	nop
 80115a8:	2400183c 	.word	0x2400183c

080115ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80115ac:	b480      	push	{r7}
 80115ae:	b083      	sub	sp, #12
 80115b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80115b2:	2300      	movs	r3, #0
 80115b4:	607b      	str	r3, [r7, #4]
 80115b6:	e002      	b.n	80115be <enq_lock+0x12>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	3301      	adds	r3, #1
 80115bc:	607b      	str	r3, [r7, #4]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	d806      	bhi.n	80115d2 <enq_lock+0x26>
 80115c4:	4a09      	ldr	r2, [pc, #36]	@ (80115ec <enq_lock+0x40>)
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	011b      	lsls	r3, r3, #4
 80115ca:	4413      	add	r3, r2
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d1f2      	bne.n	80115b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2b02      	cmp	r3, #2
 80115d6:	bf14      	ite	ne
 80115d8:	2301      	movne	r3, #1
 80115da:	2300      	moveq	r3, #0
 80115dc:	b2db      	uxtb	r3, r3
}
 80115de:	4618      	mov	r0, r3
 80115e0:	370c      	adds	r7, #12
 80115e2:	46bd      	mov	sp, r7
 80115e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e8:	4770      	bx	lr
 80115ea:	bf00      	nop
 80115ec:	2400183c 	.word	0x2400183c

080115f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80115f0:	b480      	push	{r7}
 80115f2:	b085      	sub	sp, #20
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80115fa:	2300      	movs	r3, #0
 80115fc:	60fb      	str	r3, [r7, #12]
 80115fe:	e01f      	b.n	8011640 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011600:	4a41      	ldr	r2, [pc, #260]	@ (8011708 <inc_lock+0x118>)
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	011b      	lsls	r3, r3, #4
 8011606:	4413      	add	r3, r2
 8011608:	681a      	ldr	r2, [r3, #0]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	429a      	cmp	r2, r3
 8011610:	d113      	bne.n	801163a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011612:	4a3d      	ldr	r2, [pc, #244]	@ (8011708 <inc_lock+0x118>)
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	011b      	lsls	r3, r3, #4
 8011618:	4413      	add	r3, r2
 801161a:	3304      	adds	r3, #4
 801161c:	681a      	ldr	r2, [r3, #0]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011622:	429a      	cmp	r2, r3
 8011624:	d109      	bne.n	801163a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011626:	4a38      	ldr	r2, [pc, #224]	@ (8011708 <inc_lock+0x118>)
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	011b      	lsls	r3, r3, #4
 801162c:	4413      	add	r3, r2
 801162e:	3308      	adds	r3, #8
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011636:	429a      	cmp	r2, r3
 8011638:	d006      	beq.n	8011648 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	3301      	adds	r3, #1
 801163e:	60fb      	str	r3, [r7, #12]
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	2b01      	cmp	r3, #1
 8011644:	d9dc      	bls.n	8011600 <inc_lock+0x10>
 8011646:	e000      	b.n	801164a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011648:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	2b02      	cmp	r3, #2
 801164e:	d132      	bne.n	80116b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011650:	2300      	movs	r3, #0
 8011652:	60fb      	str	r3, [r7, #12]
 8011654:	e002      	b.n	801165c <inc_lock+0x6c>
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	3301      	adds	r3, #1
 801165a:	60fb      	str	r3, [r7, #12]
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	2b01      	cmp	r3, #1
 8011660:	d806      	bhi.n	8011670 <inc_lock+0x80>
 8011662:	4a29      	ldr	r2, [pc, #164]	@ (8011708 <inc_lock+0x118>)
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	011b      	lsls	r3, r3, #4
 8011668:	4413      	add	r3, r2
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d1f2      	bne.n	8011656 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2b02      	cmp	r3, #2
 8011674:	d101      	bne.n	801167a <inc_lock+0x8a>
 8011676:	2300      	movs	r3, #0
 8011678:	e040      	b.n	80116fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	4922      	ldr	r1, [pc, #136]	@ (8011708 <inc_lock+0x118>)
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	011b      	lsls	r3, r3, #4
 8011684:	440b      	add	r3, r1
 8011686:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	689a      	ldr	r2, [r3, #8]
 801168c:	491e      	ldr	r1, [pc, #120]	@ (8011708 <inc_lock+0x118>)
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	011b      	lsls	r3, r3, #4
 8011692:	440b      	add	r3, r1
 8011694:	3304      	adds	r3, #4
 8011696:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	695a      	ldr	r2, [r3, #20]
 801169c:	491a      	ldr	r1, [pc, #104]	@ (8011708 <inc_lock+0x118>)
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	011b      	lsls	r3, r3, #4
 80116a2:	440b      	add	r3, r1
 80116a4:	3308      	adds	r3, #8
 80116a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80116a8:	4a17      	ldr	r2, [pc, #92]	@ (8011708 <inc_lock+0x118>)
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	011b      	lsls	r3, r3, #4
 80116ae:	4413      	add	r3, r2
 80116b0:	330c      	adds	r3, #12
 80116b2:	2200      	movs	r2, #0
 80116b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d009      	beq.n	80116d0 <inc_lock+0xe0>
 80116bc:	4a12      	ldr	r2, [pc, #72]	@ (8011708 <inc_lock+0x118>)
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	011b      	lsls	r3, r3, #4
 80116c2:	4413      	add	r3, r2
 80116c4:	330c      	adds	r3, #12
 80116c6:	881b      	ldrh	r3, [r3, #0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d001      	beq.n	80116d0 <inc_lock+0xe0>
 80116cc:	2300      	movs	r3, #0
 80116ce:	e015      	b.n	80116fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d108      	bne.n	80116e8 <inc_lock+0xf8>
 80116d6:	4a0c      	ldr	r2, [pc, #48]	@ (8011708 <inc_lock+0x118>)
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	011b      	lsls	r3, r3, #4
 80116dc:	4413      	add	r3, r2
 80116de:	330c      	adds	r3, #12
 80116e0:	881b      	ldrh	r3, [r3, #0]
 80116e2:	3301      	adds	r3, #1
 80116e4:	b29a      	uxth	r2, r3
 80116e6:	e001      	b.n	80116ec <inc_lock+0xfc>
 80116e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80116ec:	4906      	ldr	r1, [pc, #24]	@ (8011708 <inc_lock+0x118>)
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	011b      	lsls	r3, r3, #4
 80116f2:	440b      	add	r3, r1
 80116f4:	330c      	adds	r3, #12
 80116f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	3301      	adds	r3, #1
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3714      	adds	r7, #20
 8011700:	46bd      	mov	sp, r7
 8011702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011706:	4770      	bx	lr
 8011708:	2400183c 	.word	0x2400183c

0801170c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801170c:	b480      	push	{r7}
 801170e:	b085      	sub	sp, #20
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	3b01      	subs	r3, #1
 8011718:	607b      	str	r3, [r7, #4]
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2b01      	cmp	r3, #1
 801171e:	d825      	bhi.n	801176c <dec_lock+0x60>
		n = Files[i].ctr;
 8011720:	4a17      	ldr	r2, [pc, #92]	@ (8011780 <dec_lock+0x74>)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	011b      	lsls	r3, r3, #4
 8011726:	4413      	add	r3, r2
 8011728:	330c      	adds	r3, #12
 801172a:	881b      	ldrh	r3, [r3, #0]
 801172c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801172e:	89fb      	ldrh	r3, [r7, #14]
 8011730:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011734:	d101      	bne.n	801173a <dec_lock+0x2e>
 8011736:	2300      	movs	r3, #0
 8011738:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801173a:	89fb      	ldrh	r3, [r7, #14]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d002      	beq.n	8011746 <dec_lock+0x3a>
 8011740:	89fb      	ldrh	r3, [r7, #14]
 8011742:	3b01      	subs	r3, #1
 8011744:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011746:	4a0e      	ldr	r2, [pc, #56]	@ (8011780 <dec_lock+0x74>)
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	011b      	lsls	r3, r3, #4
 801174c:	4413      	add	r3, r2
 801174e:	330c      	adds	r3, #12
 8011750:	89fa      	ldrh	r2, [r7, #14]
 8011752:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011754:	89fb      	ldrh	r3, [r7, #14]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d105      	bne.n	8011766 <dec_lock+0x5a>
 801175a:	4a09      	ldr	r2, [pc, #36]	@ (8011780 <dec_lock+0x74>)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	011b      	lsls	r3, r3, #4
 8011760:	4413      	add	r3, r2
 8011762:	2200      	movs	r2, #0
 8011764:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011766:	2300      	movs	r3, #0
 8011768:	737b      	strb	r3, [r7, #13]
 801176a:	e001      	b.n	8011770 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801176c:	2302      	movs	r3, #2
 801176e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011770:	7b7b      	ldrb	r3, [r7, #13]
}
 8011772:	4618      	mov	r0, r3
 8011774:	3714      	adds	r7, #20
 8011776:	46bd      	mov	sp, r7
 8011778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177c:	4770      	bx	lr
 801177e:	bf00      	nop
 8011780:	2400183c 	.word	0x2400183c

08011784 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011784:	b480      	push	{r7}
 8011786:	b085      	sub	sp, #20
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801178c:	2300      	movs	r3, #0
 801178e:	60fb      	str	r3, [r7, #12]
 8011790:	e010      	b.n	80117b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011792:	4a0d      	ldr	r2, [pc, #52]	@ (80117c8 <clear_lock+0x44>)
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	011b      	lsls	r3, r3, #4
 8011798:	4413      	add	r3, r2
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	687a      	ldr	r2, [r7, #4]
 801179e:	429a      	cmp	r2, r3
 80117a0:	d105      	bne.n	80117ae <clear_lock+0x2a>
 80117a2:	4a09      	ldr	r2, [pc, #36]	@ (80117c8 <clear_lock+0x44>)
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	011b      	lsls	r3, r3, #4
 80117a8:	4413      	add	r3, r2
 80117aa:	2200      	movs	r2, #0
 80117ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	3301      	adds	r3, #1
 80117b2:	60fb      	str	r3, [r7, #12]
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2b01      	cmp	r3, #1
 80117b8:	d9eb      	bls.n	8011792 <clear_lock+0xe>
	}
}
 80117ba:	bf00      	nop
 80117bc:	bf00      	nop
 80117be:	3714      	adds	r7, #20
 80117c0:	46bd      	mov	sp, r7
 80117c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c6:	4770      	bx	lr
 80117c8:	2400183c 	.word	0x2400183c

080117cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b086      	sub	sp, #24
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80117d4:	2300      	movs	r3, #0
 80117d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	78db      	ldrb	r3, [r3, #3]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d034      	beq.n	801184a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	7858      	ldrb	r0, [r3, #1]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80117f0:	2301      	movs	r3, #1
 80117f2:	697a      	ldr	r2, [r7, #20]
 80117f4:	f7ff fd3e 	bl	8011274 <disk_write>
 80117f8:	4603      	mov	r3, r0
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d002      	beq.n	8011804 <sync_window+0x38>
			res = FR_DISK_ERR;
 80117fe:	2301      	movs	r3, #1
 8011800:	73fb      	strb	r3, [r7, #15]
 8011802:	e022      	b.n	801184a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801180e:	697a      	ldr	r2, [r7, #20]
 8011810:	1ad2      	subs	r2, r2, r3
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6a1b      	ldr	r3, [r3, #32]
 8011816:	429a      	cmp	r2, r3
 8011818:	d217      	bcs.n	801184a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	789b      	ldrb	r3, [r3, #2]
 801181e:	613b      	str	r3, [r7, #16]
 8011820:	e010      	b.n	8011844 <sync_window+0x78>
					wsect += fs->fsize;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6a1b      	ldr	r3, [r3, #32]
 8011826:	697a      	ldr	r2, [r7, #20]
 8011828:	4413      	add	r3, r2
 801182a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	7858      	ldrb	r0, [r3, #1]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011836:	2301      	movs	r3, #1
 8011838:	697a      	ldr	r2, [r7, #20]
 801183a:	f7ff fd1b 	bl	8011274 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	3b01      	subs	r3, #1
 8011842:	613b      	str	r3, [r7, #16]
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	2b01      	cmp	r3, #1
 8011848:	d8eb      	bhi.n	8011822 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801184a:	7bfb      	ldrb	r3, [r7, #15]
}
 801184c:	4618      	mov	r0, r3
 801184e:	3718      	adds	r7, #24
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801185e:	2300      	movs	r3, #0
 8011860:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011866:	683a      	ldr	r2, [r7, #0]
 8011868:	429a      	cmp	r2, r3
 801186a:	d01b      	beq.n	80118a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f7ff ffad 	bl	80117cc <sync_window>
 8011872:	4603      	mov	r3, r0
 8011874:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011876:	7bfb      	ldrb	r3, [r7, #15]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d113      	bne.n	80118a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	7858      	ldrb	r0, [r3, #1]
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011886:	2301      	movs	r3, #1
 8011888:	683a      	ldr	r2, [r7, #0]
 801188a:	f7ff fcd3 	bl	8011234 <disk_read>
 801188e:	4603      	mov	r3, r0
 8011890:	2b00      	cmp	r3, #0
 8011892:	d004      	beq.n	801189e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011894:	f04f 33ff 	mov.w	r3, #4294967295
 8011898:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801189a:	2301      	movs	r3, #1
 801189c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	683a      	ldr	r2, [r7, #0]
 80118a2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80118a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3710      	adds	r7, #16
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
	...

080118b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f7ff ff87 	bl	80117cc <sync_window>
 80118be:	4603      	mov	r3, r0
 80118c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80118c2:	7bfb      	ldrb	r3, [r7, #15]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d159      	bne.n	801197c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	781b      	ldrb	r3, [r3, #0]
 80118cc:	2b03      	cmp	r3, #3
 80118ce:	d149      	bne.n	8011964 <sync_fs+0xb4>
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	791b      	ldrb	r3, [r3, #4]
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d145      	bne.n	8011964 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	899b      	ldrh	r3, [r3, #12]
 80118e2:	461a      	mov	r2, r3
 80118e4:	2100      	movs	r1, #0
 80118e6:	f7ff fda7 	bl	8011438 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	3338      	adds	r3, #56	@ 0x38
 80118ee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80118f2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7ff fd36 	bl	8011368 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	3338      	adds	r3, #56	@ 0x38
 8011900:	4921      	ldr	r1, [pc, #132]	@ (8011988 <sync_fs+0xd8>)
 8011902:	4618      	mov	r0, r3
 8011904:	f7ff fd4b 	bl	801139e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	3338      	adds	r3, #56	@ 0x38
 801190c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011910:	491e      	ldr	r1, [pc, #120]	@ (801198c <sync_fs+0xdc>)
 8011912:	4618      	mov	r0, r3
 8011914:	f7ff fd43 	bl	801139e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	3338      	adds	r3, #56	@ 0x38
 801191c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	699b      	ldr	r3, [r3, #24]
 8011924:	4619      	mov	r1, r3
 8011926:	4610      	mov	r0, r2
 8011928:	f7ff fd39 	bl	801139e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	3338      	adds	r3, #56	@ 0x38
 8011930:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	695b      	ldr	r3, [r3, #20]
 8011938:	4619      	mov	r1, r3
 801193a:	4610      	mov	r0, r2
 801193c:	f7ff fd2f 	bl	801139e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011944:	1c5a      	adds	r2, r3, #1
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	7858      	ldrb	r0, [r3, #1]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011958:	2301      	movs	r3, #1
 801195a:	f7ff fc8b 	bl	8011274 <disk_write>
			fs->fsi_flag = 0;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2200      	movs	r2, #0
 8011962:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	785b      	ldrb	r3, [r3, #1]
 8011968:	2200      	movs	r2, #0
 801196a:	2100      	movs	r1, #0
 801196c:	4618      	mov	r0, r3
 801196e:	f7ff fca1 	bl	80112b4 <disk_ioctl>
 8011972:	4603      	mov	r3, r0
 8011974:	2b00      	cmp	r3, #0
 8011976:	d001      	beq.n	801197c <sync_fs+0xcc>
 8011978:	2301      	movs	r3, #1
 801197a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801197c:	7bfb      	ldrb	r3, [r7, #15]
}
 801197e:	4618      	mov	r0, r3
 8011980:	3710      	adds	r7, #16
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}
 8011986:	bf00      	nop
 8011988:	41615252 	.word	0x41615252
 801198c:	61417272 	.word	0x61417272

08011990 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011990:	b480      	push	{r7}
 8011992:	b083      	sub	sp, #12
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	3b02      	subs	r3, #2
 801199e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	69db      	ldr	r3, [r3, #28]
 80119a4:	3b02      	subs	r3, #2
 80119a6:	683a      	ldr	r2, [r7, #0]
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d301      	bcc.n	80119b0 <clust2sect+0x20>
 80119ac:	2300      	movs	r3, #0
 80119ae:	e008      	b.n	80119c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	895b      	ldrh	r3, [r3, #10]
 80119b4:	461a      	mov	r2, r3
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	fb03 f202 	mul.w	r2, r3, r2
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119c0:	4413      	add	r3, r2
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	370c      	adds	r7, #12
 80119c6:	46bd      	mov	sp, r7
 80119c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119cc:	4770      	bx	lr

080119ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80119ce:	b580      	push	{r7, lr}
 80119d0:	b086      	sub	sp, #24
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	6078      	str	r0, [r7, #4]
 80119d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	d904      	bls.n	80119ee <get_fat+0x20>
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	69db      	ldr	r3, [r3, #28]
 80119e8:	683a      	ldr	r2, [r7, #0]
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d302      	bcc.n	80119f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80119ee:	2301      	movs	r3, #1
 80119f0:	617b      	str	r3, [r7, #20]
 80119f2:	e0ba      	b.n	8011b6a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80119f4:	f04f 33ff 	mov.w	r3, #4294967295
 80119f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	2b03      	cmp	r3, #3
 8011a00:	f000 8082 	beq.w	8011b08 <get_fat+0x13a>
 8011a04:	2b03      	cmp	r3, #3
 8011a06:	f300 80a6 	bgt.w	8011b56 <get_fat+0x188>
 8011a0a:	2b01      	cmp	r3, #1
 8011a0c:	d002      	beq.n	8011a14 <get_fat+0x46>
 8011a0e:	2b02      	cmp	r3, #2
 8011a10:	d055      	beq.n	8011abe <get_fat+0xf0>
 8011a12:	e0a0      	b.n	8011b56 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	60fb      	str	r3, [r7, #12]
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	085b      	lsrs	r3, r3, #1
 8011a1c:	68fa      	ldr	r2, [r7, #12]
 8011a1e:	4413      	add	r3, r2
 8011a20:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	899b      	ldrh	r3, [r3, #12]
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a32:	4413      	add	r3, r2
 8011a34:	4619      	mov	r1, r3
 8011a36:	6938      	ldr	r0, [r7, #16]
 8011a38:	f7ff ff0c 	bl	8011854 <move_window>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	f040 808c 	bne.w	8011b5c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	1c5a      	adds	r2, r3, #1
 8011a48:	60fa      	str	r2, [r7, #12]
 8011a4a:	693a      	ldr	r2, [r7, #16]
 8011a4c:	8992      	ldrh	r2, [r2, #12]
 8011a4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a52:	fb01 f202 	mul.w	r2, r1, r2
 8011a56:	1a9b      	subs	r3, r3, r2
 8011a58:	693a      	ldr	r2, [r7, #16]
 8011a5a:	4413      	add	r3, r2
 8011a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011a60:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	899b      	ldrh	r3, [r3, #12]
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a72:	4413      	add	r3, r2
 8011a74:	4619      	mov	r1, r3
 8011a76:	6938      	ldr	r0, [r7, #16]
 8011a78:	f7ff feec 	bl	8011854 <move_window>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d16e      	bne.n	8011b60 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	899b      	ldrh	r3, [r3, #12]
 8011a86:	461a      	mov	r2, r3
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a8e:	fb01 f202 	mul.w	r2, r1, r2
 8011a92:	1a9b      	subs	r3, r3, r2
 8011a94:	693a      	ldr	r2, [r7, #16]
 8011a96:	4413      	add	r3, r2
 8011a98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011a9c:	021b      	lsls	r3, r3, #8
 8011a9e:	68ba      	ldr	r2, [r7, #8]
 8011aa0:	4313      	orrs	r3, r2
 8011aa2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	f003 0301 	and.w	r3, r3, #1
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d002      	beq.n	8011ab4 <get_fat+0xe6>
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	091b      	lsrs	r3, r3, #4
 8011ab2:	e002      	b.n	8011aba <get_fat+0xec>
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011aba:	617b      	str	r3, [r7, #20]
			break;
 8011abc:	e055      	b.n	8011b6a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	899b      	ldrh	r3, [r3, #12]
 8011ac6:	085b      	lsrs	r3, r3, #1
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	4619      	mov	r1, r3
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ad2:	4413      	add	r3, r2
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	6938      	ldr	r0, [r7, #16]
 8011ad8:	f7ff febc 	bl	8011854 <move_window>
 8011adc:	4603      	mov	r3, r0
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d140      	bne.n	8011b64 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	005b      	lsls	r3, r3, #1
 8011aec:	693a      	ldr	r2, [r7, #16]
 8011aee:	8992      	ldrh	r2, [r2, #12]
 8011af0:	fbb3 f0f2 	udiv	r0, r3, r2
 8011af4:	fb00 f202 	mul.w	r2, r0, r2
 8011af8:	1a9b      	subs	r3, r3, r2
 8011afa:	440b      	add	r3, r1
 8011afc:	4618      	mov	r0, r3
 8011afe:	f7ff fbf7 	bl	80112f0 <ld_word>
 8011b02:	4603      	mov	r3, r0
 8011b04:	617b      	str	r3, [r7, #20]
			break;
 8011b06:	e030      	b.n	8011b6a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	899b      	ldrh	r3, [r3, #12]
 8011b10:	089b      	lsrs	r3, r3, #2
 8011b12:	b29b      	uxth	r3, r3
 8011b14:	4619      	mov	r1, r3
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b1c:	4413      	add	r3, r2
 8011b1e:	4619      	mov	r1, r3
 8011b20:	6938      	ldr	r0, [r7, #16]
 8011b22:	f7ff fe97 	bl	8011854 <move_window>
 8011b26:	4603      	mov	r3, r0
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d11d      	bne.n	8011b68 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	009b      	lsls	r3, r3, #2
 8011b36:	693a      	ldr	r2, [r7, #16]
 8011b38:	8992      	ldrh	r2, [r2, #12]
 8011b3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b3e:	fb00 f202 	mul.w	r2, r0, r2
 8011b42:	1a9b      	subs	r3, r3, r2
 8011b44:	440b      	add	r3, r1
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7ff fbeb 	bl	8011322 <ld_dword>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011b52:	617b      	str	r3, [r7, #20]
			break;
 8011b54:	e009      	b.n	8011b6a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011b56:	2301      	movs	r3, #1
 8011b58:	617b      	str	r3, [r7, #20]
 8011b5a:	e006      	b.n	8011b6a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011b5c:	bf00      	nop
 8011b5e:	e004      	b.n	8011b6a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011b60:	bf00      	nop
 8011b62:	e002      	b.n	8011b6a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011b64:	bf00      	nop
 8011b66:	e000      	b.n	8011b6a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011b68:	bf00      	nop
		}
	}

	return val;
 8011b6a:	697b      	ldr	r3, [r7, #20]
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3718      	adds	r7, #24
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}

08011b74 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011b74:	b590      	push	{r4, r7, lr}
 8011b76:	b089      	sub	sp, #36	@ 0x24
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011b80:	2302      	movs	r3, #2
 8011b82:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	2b01      	cmp	r3, #1
 8011b88:	f240 8109 	bls.w	8011d9e <put_fat+0x22a>
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	69db      	ldr	r3, [r3, #28]
 8011b90:	68ba      	ldr	r2, [r7, #8]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	f080 8103 	bcs.w	8011d9e <put_fat+0x22a>
		switch (fs->fs_type) {
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	781b      	ldrb	r3, [r3, #0]
 8011b9c:	2b03      	cmp	r3, #3
 8011b9e:	f000 80b6 	beq.w	8011d0e <put_fat+0x19a>
 8011ba2:	2b03      	cmp	r3, #3
 8011ba4:	f300 80fb 	bgt.w	8011d9e <put_fat+0x22a>
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	d003      	beq.n	8011bb4 <put_fat+0x40>
 8011bac:	2b02      	cmp	r3, #2
 8011bae:	f000 8083 	beq.w	8011cb8 <put_fat+0x144>
 8011bb2:	e0f4      	b.n	8011d9e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	61bb      	str	r3, [r7, #24]
 8011bb8:	69bb      	ldr	r3, [r7, #24]
 8011bba:	085b      	lsrs	r3, r3, #1
 8011bbc:	69ba      	ldr	r2, [r7, #24]
 8011bbe:	4413      	add	r3, r2
 8011bc0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	899b      	ldrh	r3, [r3, #12]
 8011bca:	4619      	mov	r1, r3
 8011bcc:	69bb      	ldr	r3, [r7, #24]
 8011bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bd2:	4413      	add	r3, r2
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	68f8      	ldr	r0, [r7, #12]
 8011bd8:	f7ff fe3c 	bl	8011854 <move_window>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011be0:	7ffb      	ldrb	r3, [r7, #31]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	f040 80d4 	bne.w	8011d90 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011bee:	69bb      	ldr	r3, [r7, #24]
 8011bf0:	1c5a      	adds	r2, r3, #1
 8011bf2:	61ba      	str	r2, [r7, #24]
 8011bf4:	68fa      	ldr	r2, [r7, #12]
 8011bf6:	8992      	ldrh	r2, [r2, #12]
 8011bf8:	fbb3 f0f2 	udiv	r0, r3, r2
 8011bfc:	fb00 f202 	mul.w	r2, r0, r2
 8011c00:	1a9b      	subs	r3, r3, r2
 8011c02:	440b      	add	r3, r1
 8011c04:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	f003 0301 	and.w	r3, r3, #1
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d00d      	beq.n	8011c2c <put_fat+0xb8>
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	b25b      	sxtb	r3, r3
 8011c16:	f003 030f 	and.w	r3, r3, #15
 8011c1a:	b25a      	sxtb	r2, r3
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	b25b      	sxtb	r3, r3
 8011c20:	011b      	lsls	r3, r3, #4
 8011c22:	b25b      	sxtb	r3, r3
 8011c24:	4313      	orrs	r3, r2
 8011c26:	b25b      	sxtb	r3, r3
 8011c28:	b2db      	uxtb	r3, r3
 8011c2a:	e001      	b.n	8011c30 <put_fat+0xbc>
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	b2db      	uxtb	r3, r3
 8011c30:	697a      	ldr	r2, [r7, #20]
 8011c32:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	2201      	movs	r2, #1
 8011c38:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	899b      	ldrh	r3, [r3, #12]
 8011c42:	4619      	mov	r1, r3
 8011c44:	69bb      	ldr	r3, [r7, #24]
 8011c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c4a:	4413      	add	r3, r2
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	68f8      	ldr	r0, [r7, #12]
 8011c50:	f7ff fe00 	bl	8011854 <move_window>
 8011c54:	4603      	mov	r3, r0
 8011c56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c58:	7ffb      	ldrb	r3, [r7, #31]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	f040 809a 	bne.w	8011d94 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	899b      	ldrh	r3, [r3, #12]
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	69bb      	ldr	r3, [r7, #24]
 8011c6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c72:	fb00 f202 	mul.w	r2, r0, r2
 8011c76:	1a9b      	subs	r3, r3, r2
 8011c78:	440b      	add	r3, r1
 8011c7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	f003 0301 	and.w	r3, r3, #1
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d003      	beq.n	8011c8e <put_fat+0x11a>
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	091b      	lsrs	r3, r3, #4
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	e00e      	b.n	8011cac <put_fat+0x138>
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	b25b      	sxtb	r3, r3
 8011c94:	f023 030f 	bic.w	r3, r3, #15
 8011c98:	b25a      	sxtb	r2, r3
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	0a1b      	lsrs	r3, r3, #8
 8011c9e:	b25b      	sxtb	r3, r3
 8011ca0:	f003 030f 	and.w	r3, r3, #15
 8011ca4:	b25b      	sxtb	r3, r3
 8011ca6:	4313      	orrs	r3, r2
 8011ca8:	b25b      	sxtb	r3, r3
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	697a      	ldr	r2, [r7, #20]
 8011cae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	2201      	movs	r2, #1
 8011cb4:	70da      	strb	r2, [r3, #3]
			break;
 8011cb6:	e072      	b.n	8011d9e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	899b      	ldrh	r3, [r3, #12]
 8011cc0:	085b      	lsrs	r3, r3, #1
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ccc:	4413      	add	r3, r2
 8011cce:	4619      	mov	r1, r3
 8011cd0:	68f8      	ldr	r0, [r7, #12]
 8011cd2:	f7ff fdbf 	bl	8011854 <move_window>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011cda:	7ffb      	ldrb	r3, [r7, #31]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d15b      	bne.n	8011d98 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	005b      	lsls	r3, r3, #1
 8011cea:	68fa      	ldr	r2, [r7, #12]
 8011cec:	8992      	ldrh	r2, [r2, #12]
 8011cee:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cf2:	fb00 f202 	mul.w	r2, r0, r2
 8011cf6:	1a9b      	subs	r3, r3, r2
 8011cf8:	440b      	add	r3, r1
 8011cfa:	687a      	ldr	r2, [r7, #4]
 8011cfc:	b292      	uxth	r2, r2
 8011cfe:	4611      	mov	r1, r2
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7ff fb31 	bl	8011368 <st_word>
			fs->wflag = 1;
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	2201      	movs	r2, #1
 8011d0a:	70da      	strb	r2, [r3, #3]
			break;
 8011d0c:	e047      	b.n	8011d9e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	899b      	ldrh	r3, [r3, #12]
 8011d16:	089b      	lsrs	r3, r3, #2
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d22:	4413      	add	r3, r2
 8011d24:	4619      	mov	r1, r3
 8011d26:	68f8      	ldr	r0, [r7, #12]
 8011d28:	f7ff fd94 	bl	8011854 <move_window>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011d30:	7ffb      	ldrb	r3, [r7, #31]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d132      	bne.n	8011d9c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	68fa      	ldr	r2, [r7, #12]
 8011d48:	8992      	ldrh	r2, [r2, #12]
 8011d4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d4e:	fb00 f202 	mul.w	r2, r0, r2
 8011d52:	1a9b      	subs	r3, r3, r2
 8011d54:	440b      	add	r3, r1
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7ff fae3 	bl	8011322 <ld_dword>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011d62:	4323      	orrs	r3, r4
 8011d64:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	009b      	lsls	r3, r3, #2
 8011d70:	68fa      	ldr	r2, [r7, #12]
 8011d72:	8992      	ldrh	r2, [r2, #12]
 8011d74:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d78:	fb00 f202 	mul.w	r2, r0, r2
 8011d7c:	1a9b      	subs	r3, r3, r2
 8011d7e:	440b      	add	r3, r1
 8011d80:	6879      	ldr	r1, [r7, #4]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7ff fb0b 	bl	801139e <st_dword>
			fs->wflag = 1;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	2201      	movs	r2, #1
 8011d8c:	70da      	strb	r2, [r3, #3]
			break;
 8011d8e:	e006      	b.n	8011d9e <put_fat+0x22a>
			if (res != FR_OK) break;
 8011d90:	bf00      	nop
 8011d92:	e004      	b.n	8011d9e <put_fat+0x22a>
			if (res != FR_OK) break;
 8011d94:	bf00      	nop
 8011d96:	e002      	b.n	8011d9e <put_fat+0x22a>
			if (res != FR_OK) break;
 8011d98:	bf00      	nop
 8011d9a:	e000      	b.n	8011d9e <put_fat+0x22a>
			if (res != FR_OK) break;
 8011d9c:	bf00      	nop
		}
	}
	return res;
 8011d9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3724      	adds	r7, #36	@ 0x24
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd90      	pop	{r4, r7, pc}

08011da8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b088      	sub	sp, #32
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	60f8      	str	r0, [r7, #12]
 8011db0:	60b9      	str	r1, [r7, #8]
 8011db2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011db4:	2300      	movs	r3, #0
 8011db6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	2b01      	cmp	r3, #1
 8011dc2:	d904      	bls.n	8011dce <remove_chain+0x26>
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	69db      	ldr	r3, [r3, #28]
 8011dc8:	68ba      	ldr	r2, [r7, #8]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d301      	bcc.n	8011dd2 <remove_chain+0x2a>
 8011dce:	2302      	movs	r3, #2
 8011dd0:	e04b      	b.n	8011e6a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d00c      	beq.n	8011df2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8011ddc:	6879      	ldr	r1, [r7, #4]
 8011dde:	69b8      	ldr	r0, [r7, #24]
 8011de0:	f7ff fec8 	bl	8011b74 <put_fat>
 8011de4:	4603      	mov	r3, r0
 8011de6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011de8:	7ffb      	ldrb	r3, [r7, #31]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d001      	beq.n	8011df2 <remove_chain+0x4a>
 8011dee:	7ffb      	ldrb	r3, [r7, #31]
 8011df0:	e03b      	b.n	8011e6a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011df2:	68b9      	ldr	r1, [r7, #8]
 8011df4:	68f8      	ldr	r0, [r7, #12]
 8011df6:	f7ff fdea 	bl	80119ce <get_fat>
 8011dfa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d031      	beq.n	8011e66 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011e02:	697b      	ldr	r3, [r7, #20]
 8011e04:	2b01      	cmp	r3, #1
 8011e06:	d101      	bne.n	8011e0c <remove_chain+0x64>
 8011e08:	2302      	movs	r3, #2
 8011e0a:	e02e      	b.n	8011e6a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e12:	d101      	bne.n	8011e18 <remove_chain+0x70>
 8011e14:	2301      	movs	r3, #1
 8011e16:	e028      	b.n	8011e6a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011e18:	2200      	movs	r2, #0
 8011e1a:	68b9      	ldr	r1, [r7, #8]
 8011e1c:	69b8      	ldr	r0, [r7, #24]
 8011e1e:	f7ff fea9 	bl	8011b74 <put_fat>
 8011e22:	4603      	mov	r3, r0
 8011e24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011e26:	7ffb      	ldrb	r3, [r7, #31]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d001      	beq.n	8011e30 <remove_chain+0x88>
 8011e2c:	7ffb      	ldrb	r3, [r7, #31]
 8011e2e:	e01c      	b.n	8011e6a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011e30:	69bb      	ldr	r3, [r7, #24]
 8011e32:	699a      	ldr	r2, [r3, #24]
 8011e34:	69bb      	ldr	r3, [r7, #24]
 8011e36:	69db      	ldr	r3, [r3, #28]
 8011e38:	3b02      	subs	r3, #2
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d20b      	bcs.n	8011e56 <remove_chain+0xae>
			fs->free_clst++;
 8011e3e:	69bb      	ldr	r3, [r7, #24]
 8011e40:	699b      	ldr	r3, [r3, #24]
 8011e42:	1c5a      	adds	r2, r3, #1
 8011e44:	69bb      	ldr	r3, [r7, #24]
 8011e46:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8011e48:	69bb      	ldr	r3, [r7, #24]
 8011e4a:	791b      	ldrb	r3, [r3, #4]
 8011e4c:	f043 0301 	orr.w	r3, r3, #1
 8011e50:	b2da      	uxtb	r2, r3
 8011e52:	69bb      	ldr	r3, [r7, #24]
 8011e54:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	69db      	ldr	r3, [r3, #28]
 8011e5e:	68ba      	ldr	r2, [r7, #8]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d3c6      	bcc.n	8011df2 <remove_chain+0x4a>
 8011e64:	e000      	b.n	8011e68 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011e66:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011e68:	2300      	movs	r3, #0
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	3720      	adds	r7, #32
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}

08011e72 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011e72:	b580      	push	{r7, lr}
 8011e74:	b088      	sub	sp, #32
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	6078      	str	r0, [r7, #4]
 8011e7a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d10d      	bne.n	8011ea4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	695b      	ldr	r3, [r3, #20]
 8011e8c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011e8e:	69bb      	ldr	r3, [r7, #24]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d004      	beq.n	8011e9e <create_chain+0x2c>
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	69db      	ldr	r3, [r3, #28]
 8011e98:	69ba      	ldr	r2, [r7, #24]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d31b      	bcc.n	8011ed6 <create_chain+0x64>
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	61bb      	str	r3, [r7, #24]
 8011ea2:	e018      	b.n	8011ed6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011ea4:	6839      	ldr	r1, [r7, #0]
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f7ff fd91 	bl	80119ce <get_fat>
 8011eac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	2b01      	cmp	r3, #1
 8011eb2:	d801      	bhi.n	8011eb8 <create_chain+0x46>
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	e070      	b.n	8011f9a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ebe:	d101      	bne.n	8011ec4 <create_chain+0x52>
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	e06a      	b.n	8011f9a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	69db      	ldr	r3, [r3, #28]
 8011ec8:	68fa      	ldr	r2, [r7, #12]
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d201      	bcs.n	8011ed2 <create_chain+0x60>
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	e063      	b.n	8011f9a <create_chain+0x128>
		scl = clst;
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011ed6:	69bb      	ldr	r3, [r7, #24]
 8011ed8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011eda:	69fb      	ldr	r3, [r7, #28]
 8011edc:	3301      	adds	r3, #1
 8011ede:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	69db      	ldr	r3, [r3, #28]
 8011ee4:	69fa      	ldr	r2, [r7, #28]
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d307      	bcc.n	8011efa <create_chain+0x88>
				ncl = 2;
 8011eea:	2302      	movs	r3, #2
 8011eec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011eee:	69fa      	ldr	r2, [r7, #28]
 8011ef0:	69bb      	ldr	r3, [r7, #24]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d901      	bls.n	8011efa <create_chain+0x88>
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	e04f      	b.n	8011f9a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011efa:	69f9      	ldr	r1, [r7, #28]
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f7ff fd66 	bl	80119ce <get_fat>
 8011f02:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d00e      	beq.n	8011f28 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	2b01      	cmp	r3, #1
 8011f0e:	d003      	beq.n	8011f18 <create_chain+0xa6>
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f16:	d101      	bne.n	8011f1c <create_chain+0xaa>
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	e03e      	b.n	8011f9a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011f1c:	69fa      	ldr	r2, [r7, #28]
 8011f1e:	69bb      	ldr	r3, [r7, #24]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d1da      	bne.n	8011eda <create_chain+0x68>
 8011f24:	2300      	movs	r3, #0
 8011f26:	e038      	b.n	8011f9a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011f28:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f2e:	69f9      	ldr	r1, [r7, #28]
 8011f30:	6938      	ldr	r0, [r7, #16]
 8011f32:	f7ff fe1f 	bl	8011b74 <put_fat>
 8011f36:	4603      	mov	r3, r0
 8011f38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011f3a:	7dfb      	ldrb	r3, [r7, #23]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d109      	bne.n	8011f54 <create_chain+0xe2>
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d006      	beq.n	8011f54 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011f46:	69fa      	ldr	r2, [r7, #28]
 8011f48:	6839      	ldr	r1, [r7, #0]
 8011f4a:	6938      	ldr	r0, [r7, #16]
 8011f4c:	f7ff fe12 	bl	8011b74 <put_fat>
 8011f50:	4603      	mov	r3, r0
 8011f52:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011f54:	7dfb      	ldrb	r3, [r7, #23]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d116      	bne.n	8011f88 <create_chain+0x116>
		fs->last_clst = ncl;
 8011f5a:	693b      	ldr	r3, [r7, #16]
 8011f5c:	69fa      	ldr	r2, [r7, #28]
 8011f5e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	699a      	ldr	r2, [r3, #24]
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	69db      	ldr	r3, [r3, #28]
 8011f68:	3b02      	subs	r3, #2
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d804      	bhi.n	8011f78 <create_chain+0x106>
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	699b      	ldr	r3, [r3, #24]
 8011f72:	1e5a      	subs	r2, r3, #1
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	791b      	ldrb	r3, [r3, #4]
 8011f7c:	f043 0301 	orr.w	r3, r3, #1
 8011f80:	b2da      	uxtb	r2, r3
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	711a      	strb	r2, [r3, #4]
 8011f86:	e007      	b.n	8011f98 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011f88:	7dfb      	ldrb	r3, [r7, #23]
 8011f8a:	2b01      	cmp	r3, #1
 8011f8c:	d102      	bne.n	8011f94 <create_chain+0x122>
 8011f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f92:	e000      	b.n	8011f96 <create_chain+0x124>
 8011f94:	2301      	movs	r3, #1
 8011f96:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011f98:	69fb      	ldr	r3, [r7, #28]
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3720      	adds	r7, #32
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}

08011fa2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011fa2:	b480      	push	{r7}
 8011fa4:	b087      	sub	sp, #28
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	6078      	str	r0, [r7, #4]
 8011faa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fb6:	3304      	adds	r3, #4
 8011fb8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	899b      	ldrh	r3, [r3, #12]
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fc6:	68fa      	ldr	r2, [r7, #12]
 8011fc8:	8952      	ldrh	r2, [r2, #10]
 8011fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011fd0:	693b      	ldr	r3, [r7, #16]
 8011fd2:	1d1a      	adds	r2, r3, #4
 8011fd4:	613a      	str	r2, [r7, #16]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d101      	bne.n	8011fe4 <clmt_clust+0x42>
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	e010      	b.n	8012006 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011fe4:	697a      	ldr	r2, [r7, #20]
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d307      	bcc.n	8011ffc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011fec:	697a      	ldr	r2, [r7, #20]
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	1ad3      	subs	r3, r2, r3
 8011ff2:	617b      	str	r3, [r7, #20]
 8011ff4:	693b      	ldr	r3, [r7, #16]
 8011ff6:	3304      	adds	r3, #4
 8011ff8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011ffa:	e7e9      	b.n	8011fd0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011ffc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	681a      	ldr	r2, [r3, #0]
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	4413      	add	r3, r2
}
 8012006:	4618      	mov	r0, r3
 8012008:	371c      	adds	r7, #28
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr

08012012 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012012:	b580      	push	{r7, lr}
 8012014:	b086      	sub	sp, #24
 8012016:	af00      	add	r7, sp, #0
 8012018:	6078      	str	r0, [r7, #4]
 801201a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012028:	d204      	bcs.n	8012034 <dir_sdi+0x22>
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	f003 031f 	and.w	r3, r3, #31
 8012030:	2b00      	cmp	r3, #0
 8012032:	d001      	beq.n	8012038 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012034:	2302      	movs	r3, #2
 8012036:	e071      	b.n	801211c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	683a      	ldr	r2, [r7, #0]
 801203c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	689b      	ldr	r3, [r3, #8]
 8012042:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d106      	bne.n	8012058 <dir_sdi+0x46>
 801204a:	693b      	ldr	r3, [r7, #16]
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	2b02      	cmp	r3, #2
 8012050:	d902      	bls.n	8012058 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012056:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d10c      	bne.n	8012078 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	095b      	lsrs	r3, r3, #5
 8012062:	693a      	ldr	r2, [r7, #16]
 8012064:	8912      	ldrh	r2, [r2, #8]
 8012066:	4293      	cmp	r3, r2
 8012068:	d301      	bcc.n	801206e <dir_sdi+0x5c>
 801206a:	2302      	movs	r3, #2
 801206c:	e056      	b.n	801211c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	61da      	str	r2, [r3, #28]
 8012076:	e02d      	b.n	80120d4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	895b      	ldrh	r3, [r3, #10]
 801207c:	461a      	mov	r2, r3
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	899b      	ldrh	r3, [r3, #12]
 8012082:	fb02 f303 	mul.w	r3, r2, r3
 8012086:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012088:	e019      	b.n	80120be <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6979      	ldr	r1, [r7, #20]
 801208e:	4618      	mov	r0, r3
 8012090:	f7ff fc9d 	bl	80119ce <get_fat>
 8012094:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	f1b3 3fff 	cmp.w	r3, #4294967295
 801209c:	d101      	bne.n	80120a2 <dir_sdi+0x90>
 801209e:	2301      	movs	r3, #1
 80120a0:	e03c      	b.n	801211c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	2b01      	cmp	r3, #1
 80120a6:	d904      	bls.n	80120b2 <dir_sdi+0xa0>
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	69db      	ldr	r3, [r3, #28]
 80120ac:	697a      	ldr	r2, [r7, #20]
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d301      	bcc.n	80120b6 <dir_sdi+0xa4>
 80120b2:	2302      	movs	r3, #2
 80120b4:	e032      	b.n	801211c <dir_sdi+0x10a>
			ofs -= csz;
 80120b6:	683a      	ldr	r2, [r7, #0]
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	1ad3      	subs	r3, r2, r3
 80120bc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80120be:	683a      	ldr	r2, [r7, #0]
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d2e1      	bcs.n	801208a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80120c6:	6979      	ldr	r1, [r7, #20]
 80120c8:	6938      	ldr	r0, [r7, #16]
 80120ca:	f7ff fc61 	bl	8011990 <clust2sect>
 80120ce:	4602      	mov	r2, r0
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	697a      	ldr	r2, [r7, #20]
 80120d8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	69db      	ldr	r3, [r3, #28]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d101      	bne.n	80120e6 <dir_sdi+0xd4>
 80120e2:	2302      	movs	r3, #2
 80120e4:	e01a      	b.n	801211c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	69da      	ldr	r2, [r3, #28]
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	899b      	ldrh	r3, [r3, #12]
 80120ee:	4619      	mov	r1, r3
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80120f6:	441a      	add	r2, r3
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	899b      	ldrh	r3, [r3, #12]
 8012106:	461a      	mov	r2, r3
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	fbb3 f0f2 	udiv	r0, r3, r2
 801210e:	fb00 f202 	mul.w	r2, r0, r2
 8012112:	1a9b      	subs	r3, r3, r2
 8012114:	18ca      	adds	r2, r1, r3
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801211a:	2300      	movs	r3, #0
}
 801211c:	4618      	mov	r0, r3
 801211e:	3718      	adds	r7, #24
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}

08012124 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b086      	sub	sp, #24
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	695b      	ldr	r3, [r3, #20]
 8012138:	3320      	adds	r3, #32
 801213a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	69db      	ldr	r3, [r3, #28]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d003      	beq.n	801214c <dir_next+0x28>
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801214a:	d301      	bcc.n	8012150 <dir_next+0x2c>
 801214c:	2304      	movs	r3, #4
 801214e:	e0bb      	b.n	80122c8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	899b      	ldrh	r3, [r3, #12]
 8012154:	461a      	mov	r2, r3
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	fbb3 f1f2 	udiv	r1, r3, r2
 801215c:	fb01 f202 	mul.w	r2, r1, r2
 8012160:	1a9b      	subs	r3, r3, r2
 8012162:	2b00      	cmp	r3, #0
 8012164:	f040 809d 	bne.w	80122a2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	69db      	ldr	r3, [r3, #28]
 801216c:	1c5a      	adds	r2, r3, #1
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	699b      	ldr	r3, [r3, #24]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d10b      	bne.n	8012192 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	095b      	lsrs	r3, r3, #5
 801217e:	68fa      	ldr	r2, [r7, #12]
 8012180:	8912      	ldrh	r2, [r2, #8]
 8012182:	4293      	cmp	r3, r2
 8012184:	f0c0 808d 	bcc.w	80122a2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2200      	movs	r2, #0
 801218c:	61da      	str	r2, [r3, #28]
 801218e:	2304      	movs	r3, #4
 8012190:	e09a      	b.n	80122c8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	899b      	ldrh	r3, [r3, #12]
 8012196:	461a      	mov	r2, r3
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	fbb3 f3f2 	udiv	r3, r3, r2
 801219e:	68fa      	ldr	r2, [r7, #12]
 80121a0:	8952      	ldrh	r2, [r2, #10]
 80121a2:	3a01      	subs	r2, #1
 80121a4:	4013      	ands	r3, r2
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d17b      	bne.n	80122a2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80121aa:	687a      	ldr	r2, [r7, #4]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	699b      	ldr	r3, [r3, #24]
 80121b0:	4619      	mov	r1, r3
 80121b2:	4610      	mov	r0, r2
 80121b4:	f7ff fc0b 	bl	80119ce <get_fat>
 80121b8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	2b01      	cmp	r3, #1
 80121be:	d801      	bhi.n	80121c4 <dir_next+0xa0>
 80121c0:	2302      	movs	r3, #2
 80121c2:	e081      	b.n	80122c8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ca:	d101      	bne.n	80121d0 <dir_next+0xac>
 80121cc:	2301      	movs	r3, #1
 80121ce:	e07b      	b.n	80122c8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	69db      	ldr	r3, [r3, #28]
 80121d4:	697a      	ldr	r2, [r7, #20]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d359      	bcc.n	801228e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d104      	bne.n	80121ea <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2200      	movs	r2, #0
 80121e4:	61da      	str	r2, [r3, #28]
 80121e6:	2304      	movs	r3, #4
 80121e8:	e06e      	b.n	80122c8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80121ea:	687a      	ldr	r2, [r7, #4]
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	699b      	ldr	r3, [r3, #24]
 80121f0:	4619      	mov	r1, r3
 80121f2:	4610      	mov	r0, r2
 80121f4:	f7ff fe3d 	bl	8011e72 <create_chain>
 80121f8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d101      	bne.n	8012204 <dir_next+0xe0>
 8012200:	2307      	movs	r3, #7
 8012202:	e061      	b.n	80122c8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	2b01      	cmp	r3, #1
 8012208:	d101      	bne.n	801220e <dir_next+0xea>
 801220a:	2302      	movs	r3, #2
 801220c:	e05c      	b.n	80122c8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012214:	d101      	bne.n	801221a <dir_next+0xf6>
 8012216:	2301      	movs	r3, #1
 8012218:	e056      	b.n	80122c8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801221a:	68f8      	ldr	r0, [r7, #12]
 801221c:	f7ff fad6 	bl	80117cc <sync_window>
 8012220:	4603      	mov	r3, r0
 8012222:	2b00      	cmp	r3, #0
 8012224:	d001      	beq.n	801222a <dir_next+0x106>
 8012226:	2301      	movs	r3, #1
 8012228:	e04e      	b.n	80122c8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	899b      	ldrh	r3, [r3, #12]
 8012234:	461a      	mov	r2, r3
 8012236:	2100      	movs	r1, #0
 8012238:	f7ff f8fe 	bl	8011438 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801223c:	2300      	movs	r3, #0
 801223e:	613b      	str	r3, [r7, #16]
 8012240:	6979      	ldr	r1, [r7, #20]
 8012242:	68f8      	ldr	r0, [r7, #12]
 8012244:	f7ff fba4 	bl	8011990 <clust2sect>
 8012248:	4602      	mov	r2, r0
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	635a      	str	r2, [r3, #52]	@ 0x34
 801224e:	e012      	b.n	8012276 <dir_next+0x152>
						fs->wflag = 1;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	2201      	movs	r2, #1
 8012254:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012256:	68f8      	ldr	r0, [r7, #12]
 8012258:	f7ff fab8 	bl	80117cc <sync_window>
 801225c:	4603      	mov	r3, r0
 801225e:	2b00      	cmp	r3, #0
 8012260:	d001      	beq.n	8012266 <dir_next+0x142>
 8012262:	2301      	movs	r3, #1
 8012264:	e030      	b.n	80122c8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	3301      	adds	r3, #1
 801226a:	613b      	str	r3, [r7, #16]
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012270:	1c5a      	adds	r2, r3, #1
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	635a      	str	r2, [r3, #52]	@ 0x34
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	895b      	ldrh	r3, [r3, #10]
 801227a:	461a      	mov	r2, r3
 801227c:	693b      	ldr	r3, [r7, #16]
 801227e:	4293      	cmp	r3, r2
 8012280:	d3e6      	bcc.n	8012250 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	1ad2      	subs	r2, r2, r3
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	697a      	ldr	r2, [r7, #20]
 8012292:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012294:	6979      	ldr	r1, [r7, #20]
 8012296:	68f8      	ldr	r0, [r7, #12]
 8012298:	f7ff fb7a 	bl	8011990 <clust2sect>
 801229c:	4602      	mov	r2, r0
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	68ba      	ldr	r2, [r7, #8]
 80122a6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	899b      	ldrh	r3, [r3, #12]
 80122b2:	461a      	mov	r2, r3
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80122ba:	fb00 f202 	mul.w	r2, r0, r2
 80122be:	1a9b      	subs	r3, r3, r2
 80122c0:	18ca      	adds	r2, r1, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80122c6:	2300      	movs	r3, #0
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	3718      	adds	r7, #24
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}

080122d0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b086      	sub	sp, #24
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80122e0:	2100      	movs	r1, #0
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f7ff fe95 	bl	8012012 <dir_sdi>
 80122e8:	4603      	mov	r3, r0
 80122ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80122ec:	7dfb      	ldrb	r3, [r7, #23]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d12b      	bne.n	801234a <dir_alloc+0x7a>
		n = 0;
 80122f2:	2300      	movs	r3, #0
 80122f4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	69db      	ldr	r3, [r3, #28]
 80122fa:	4619      	mov	r1, r3
 80122fc:	68f8      	ldr	r0, [r7, #12]
 80122fe:	f7ff faa9 	bl	8011854 <move_window>
 8012302:	4603      	mov	r3, r0
 8012304:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012306:	7dfb      	ldrb	r3, [r7, #23]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d11d      	bne.n	8012348 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6a1b      	ldr	r3, [r3, #32]
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	2be5      	cmp	r3, #229	@ 0xe5
 8012314:	d004      	beq.n	8012320 <dir_alloc+0x50>
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6a1b      	ldr	r3, [r3, #32]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d107      	bne.n	8012330 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012320:	693b      	ldr	r3, [r7, #16]
 8012322:	3301      	adds	r3, #1
 8012324:	613b      	str	r3, [r7, #16]
 8012326:	693a      	ldr	r2, [r7, #16]
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	429a      	cmp	r2, r3
 801232c:	d102      	bne.n	8012334 <dir_alloc+0x64>
 801232e:	e00c      	b.n	801234a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012330:	2300      	movs	r3, #0
 8012332:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012334:	2101      	movs	r1, #1
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f7ff fef4 	bl	8012124 <dir_next>
 801233c:	4603      	mov	r3, r0
 801233e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012340:	7dfb      	ldrb	r3, [r7, #23]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d0d7      	beq.n	80122f6 <dir_alloc+0x26>
 8012346:	e000      	b.n	801234a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012348:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801234a:	7dfb      	ldrb	r3, [r7, #23]
 801234c:	2b04      	cmp	r3, #4
 801234e:	d101      	bne.n	8012354 <dir_alloc+0x84>
 8012350:	2307      	movs	r3, #7
 8012352:	75fb      	strb	r3, [r7, #23]
	return res;
 8012354:	7dfb      	ldrb	r3, [r7, #23]
}
 8012356:	4618      	mov	r0, r3
 8012358:	3718      	adds	r7, #24
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}

0801235e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801235e:	b580      	push	{r7, lr}
 8012360:	b084      	sub	sp, #16
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
 8012366:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	331a      	adds	r3, #26
 801236c:	4618      	mov	r0, r3
 801236e:	f7fe ffbf 	bl	80112f0 <ld_word>
 8012372:	4603      	mov	r3, r0
 8012374:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	2b03      	cmp	r3, #3
 801237c:	d109      	bne.n	8012392 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	3314      	adds	r3, #20
 8012382:	4618      	mov	r0, r3
 8012384:	f7fe ffb4 	bl	80112f0 <ld_word>
 8012388:	4603      	mov	r3, r0
 801238a:	041b      	lsls	r3, r3, #16
 801238c:	68fa      	ldr	r2, [r7, #12]
 801238e:	4313      	orrs	r3, r2
 8012390:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012392:	68fb      	ldr	r3, [r7, #12]
}
 8012394:	4618      	mov	r0, r3
 8012396:	3710      	adds	r7, #16
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	60f8      	str	r0, [r7, #12]
 80123a4:	60b9      	str	r1, [r7, #8]
 80123a6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	331a      	adds	r3, #26
 80123ac:	687a      	ldr	r2, [r7, #4]
 80123ae:	b292      	uxth	r2, r2
 80123b0:	4611      	mov	r1, r2
 80123b2:	4618      	mov	r0, r3
 80123b4:	f7fe ffd8 	bl	8011368 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	2b03      	cmp	r3, #3
 80123be:	d109      	bne.n	80123d4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	f103 0214 	add.w	r2, r3, #20
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	0c1b      	lsrs	r3, r3, #16
 80123ca:	b29b      	uxth	r3, r3
 80123cc:	4619      	mov	r1, r3
 80123ce:	4610      	mov	r0, r2
 80123d0:	f7fe ffca 	bl	8011368 <st_word>
	}
}
 80123d4:	bf00      	nop
 80123d6:	3710      	adds	r7, #16
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80123dc:	b590      	push	{r4, r7, lr}
 80123de:	b087      	sub	sp, #28
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	331a      	adds	r3, #26
 80123ea:	4618      	mov	r0, r3
 80123ec:	f7fe ff80 	bl	80112f0 <ld_word>
 80123f0:	4603      	mov	r3, r0
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d001      	beq.n	80123fa <cmp_lfn+0x1e>
 80123f6:	2300      	movs	r3, #0
 80123f8:	e059      	b.n	80124ae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	781b      	ldrb	r3, [r3, #0]
 80123fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012402:	1e5a      	subs	r2, r3, #1
 8012404:	4613      	mov	r3, r2
 8012406:	005b      	lsls	r3, r3, #1
 8012408:	4413      	add	r3, r2
 801240a:	009b      	lsls	r3, r3, #2
 801240c:	4413      	add	r3, r2
 801240e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012410:	2301      	movs	r3, #1
 8012412:	81fb      	strh	r3, [r7, #14]
 8012414:	2300      	movs	r3, #0
 8012416:	613b      	str	r3, [r7, #16]
 8012418:	e033      	b.n	8012482 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801241a:	4a27      	ldr	r2, [pc, #156]	@ (80124b8 <cmp_lfn+0xdc>)
 801241c:	693b      	ldr	r3, [r7, #16]
 801241e:	4413      	add	r3, r2
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	461a      	mov	r2, r3
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	4413      	add	r3, r2
 8012428:	4618      	mov	r0, r3
 801242a:	f7fe ff61 	bl	80112f0 <ld_word>
 801242e:	4603      	mov	r3, r0
 8012430:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012432:	89fb      	ldrh	r3, [r7, #14]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d01a      	beq.n	801246e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	2bfe      	cmp	r3, #254	@ 0xfe
 801243c:	d812      	bhi.n	8012464 <cmp_lfn+0x88>
 801243e:	89bb      	ldrh	r3, [r7, #12]
 8012440:	4618      	mov	r0, r3
 8012442:	f001 fe41 	bl	80140c8 <ff_wtoupper>
 8012446:	4603      	mov	r3, r0
 8012448:	461c      	mov	r4, r3
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	1c5a      	adds	r2, r3, #1
 801244e:	617a      	str	r2, [r7, #20]
 8012450:	005b      	lsls	r3, r3, #1
 8012452:	687a      	ldr	r2, [r7, #4]
 8012454:	4413      	add	r3, r2
 8012456:	881b      	ldrh	r3, [r3, #0]
 8012458:	4618      	mov	r0, r3
 801245a:	f001 fe35 	bl	80140c8 <ff_wtoupper>
 801245e:	4603      	mov	r3, r0
 8012460:	429c      	cmp	r4, r3
 8012462:	d001      	beq.n	8012468 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012464:	2300      	movs	r3, #0
 8012466:	e022      	b.n	80124ae <cmp_lfn+0xd2>
			}
			wc = uc;
 8012468:	89bb      	ldrh	r3, [r7, #12]
 801246a:	81fb      	strh	r3, [r7, #14]
 801246c:	e006      	b.n	801247c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801246e:	89bb      	ldrh	r3, [r7, #12]
 8012470:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012474:	4293      	cmp	r3, r2
 8012476:	d001      	beq.n	801247c <cmp_lfn+0xa0>
 8012478:	2300      	movs	r3, #0
 801247a:	e018      	b.n	80124ae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	3301      	adds	r3, #1
 8012480:	613b      	str	r3, [r7, #16]
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	2b0c      	cmp	r3, #12
 8012486:	d9c8      	bls.n	801241a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	781b      	ldrb	r3, [r3, #0]
 801248c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012490:	2b00      	cmp	r3, #0
 8012492:	d00b      	beq.n	80124ac <cmp_lfn+0xd0>
 8012494:	89fb      	ldrh	r3, [r7, #14]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d008      	beq.n	80124ac <cmp_lfn+0xd0>
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	005b      	lsls	r3, r3, #1
 801249e:	687a      	ldr	r2, [r7, #4]
 80124a0:	4413      	add	r3, r2
 80124a2:	881b      	ldrh	r3, [r3, #0]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d001      	beq.n	80124ac <cmp_lfn+0xd0>
 80124a8:	2300      	movs	r3, #0
 80124aa:	e000      	b.n	80124ae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80124ac:	2301      	movs	r3, #1
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	371c      	adds	r7, #28
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd90      	pop	{r4, r7, pc}
 80124b6:	bf00      	nop
 80124b8:	08015098 	.word	0x08015098

080124bc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b088      	sub	sp, #32
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	60f8      	str	r0, [r7, #12]
 80124c4:	60b9      	str	r1, [r7, #8]
 80124c6:	4611      	mov	r1, r2
 80124c8:	461a      	mov	r2, r3
 80124ca:	460b      	mov	r3, r1
 80124cc:	71fb      	strb	r3, [r7, #7]
 80124ce:	4613      	mov	r3, r2
 80124d0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80124d2:	68bb      	ldr	r3, [r7, #8]
 80124d4:	330d      	adds	r3, #13
 80124d6:	79ba      	ldrb	r2, [r7, #6]
 80124d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	330b      	adds	r3, #11
 80124de:	220f      	movs	r2, #15
 80124e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	330c      	adds	r3, #12
 80124e6:	2200      	movs	r2, #0
 80124e8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	331a      	adds	r3, #26
 80124ee:	2100      	movs	r1, #0
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7fe ff39 	bl	8011368 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80124f6:	79fb      	ldrb	r3, [r7, #7]
 80124f8:	1e5a      	subs	r2, r3, #1
 80124fa:	4613      	mov	r3, r2
 80124fc:	005b      	lsls	r3, r3, #1
 80124fe:	4413      	add	r3, r2
 8012500:	009b      	lsls	r3, r3, #2
 8012502:	4413      	add	r3, r2
 8012504:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8012506:	2300      	movs	r3, #0
 8012508:	82fb      	strh	r3, [r7, #22]
 801250a:	2300      	movs	r3, #0
 801250c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801250e:	8afb      	ldrh	r3, [r7, #22]
 8012510:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012514:	4293      	cmp	r3, r2
 8012516:	d007      	beq.n	8012528 <put_lfn+0x6c>
 8012518:	69fb      	ldr	r3, [r7, #28]
 801251a:	1c5a      	adds	r2, r3, #1
 801251c:	61fa      	str	r2, [r7, #28]
 801251e:	005b      	lsls	r3, r3, #1
 8012520:	68fa      	ldr	r2, [r7, #12]
 8012522:	4413      	add	r3, r2
 8012524:	881b      	ldrh	r3, [r3, #0]
 8012526:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012528:	4a17      	ldr	r2, [pc, #92]	@ (8012588 <put_lfn+0xcc>)
 801252a:	69bb      	ldr	r3, [r7, #24]
 801252c:	4413      	add	r3, r2
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	461a      	mov	r2, r3
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	4413      	add	r3, r2
 8012536:	8afa      	ldrh	r2, [r7, #22]
 8012538:	4611      	mov	r1, r2
 801253a:	4618      	mov	r0, r3
 801253c:	f7fe ff14 	bl	8011368 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012540:	8afb      	ldrh	r3, [r7, #22]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d102      	bne.n	801254c <put_lfn+0x90>
 8012546:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801254a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801254c:	69bb      	ldr	r3, [r7, #24]
 801254e:	3301      	adds	r3, #1
 8012550:	61bb      	str	r3, [r7, #24]
 8012552:	69bb      	ldr	r3, [r7, #24]
 8012554:	2b0c      	cmp	r3, #12
 8012556:	d9da      	bls.n	801250e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012558:	8afb      	ldrh	r3, [r7, #22]
 801255a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801255e:	4293      	cmp	r3, r2
 8012560:	d006      	beq.n	8012570 <put_lfn+0xb4>
 8012562:	69fb      	ldr	r3, [r7, #28]
 8012564:	005b      	lsls	r3, r3, #1
 8012566:	68fa      	ldr	r2, [r7, #12]
 8012568:	4413      	add	r3, r2
 801256a:	881b      	ldrh	r3, [r3, #0]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d103      	bne.n	8012578 <put_lfn+0xbc>
 8012570:	79fb      	ldrb	r3, [r7, #7]
 8012572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012576:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	79fa      	ldrb	r2, [r7, #7]
 801257c:	701a      	strb	r2, [r3, #0]
}
 801257e:	bf00      	nop
 8012580:	3720      	adds	r7, #32
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}
 8012586:	bf00      	nop
 8012588:	08015098 	.word	0x08015098

0801258c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b08c      	sub	sp, #48	@ 0x30
 8012590:	af00      	add	r7, sp, #0
 8012592:	60f8      	str	r0, [r7, #12]
 8012594:	60b9      	str	r1, [r7, #8]
 8012596:	607a      	str	r2, [r7, #4]
 8012598:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801259a:	220b      	movs	r2, #11
 801259c:	68b9      	ldr	r1, [r7, #8]
 801259e:	68f8      	ldr	r0, [r7, #12]
 80125a0:	f7fe ff29 	bl	80113f6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	2b05      	cmp	r3, #5
 80125a8:	d929      	bls.n	80125fe <gen_numname+0x72>
		sr = seq;
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80125ae:	e020      	b.n	80125f2 <gen_numname+0x66>
			wc = *lfn++;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	1c9a      	adds	r2, r3, #2
 80125b4:	607a      	str	r2, [r7, #4]
 80125b6:	881b      	ldrh	r3, [r3, #0]
 80125b8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80125ba:	2300      	movs	r3, #0
 80125bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80125be:	e015      	b.n	80125ec <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80125c0:	69fb      	ldr	r3, [r7, #28]
 80125c2:	005a      	lsls	r2, r3, #1
 80125c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125c6:	f003 0301 	and.w	r3, r3, #1
 80125ca:	4413      	add	r3, r2
 80125cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80125ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125d0:	085b      	lsrs	r3, r3, #1
 80125d2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80125d4:	69fb      	ldr	r3, [r7, #28]
 80125d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d003      	beq.n	80125e6 <gen_numname+0x5a>
 80125de:	69fa      	ldr	r2, [r7, #28]
 80125e0:	4b30      	ldr	r3, [pc, #192]	@ (80126a4 <gen_numname+0x118>)
 80125e2:	4053      	eors	r3, r2
 80125e4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80125e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125e8:	3301      	adds	r3, #1
 80125ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80125ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125ee:	2b0f      	cmp	r3, #15
 80125f0:	d9e6      	bls.n	80125c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	881b      	ldrh	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d1da      	bne.n	80125b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80125fa:	69fb      	ldr	r3, [r7, #28]
 80125fc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80125fe:	2307      	movs	r3, #7
 8012600:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	b2db      	uxtb	r3, r3
 8012606:	f003 030f 	and.w	r3, r3, #15
 801260a:	b2db      	uxtb	r3, r3
 801260c:	3330      	adds	r3, #48	@ 0x30
 801260e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8012612:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012616:	2b39      	cmp	r3, #57	@ 0x39
 8012618:	d904      	bls.n	8012624 <gen_numname+0x98>
 801261a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801261e:	3307      	adds	r3, #7
 8012620:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8012624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012626:	1e5a      	subs	r2, r3, #1
 8012628:	62ba      	str	r2, [r7, #40]	@ 0x28
 801262a:	3330      	adds	r3, #48	@ 0x30
 801262c:	443b      	add	r3, r7
 801262e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8012632:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	091b      	lsrs	r3, r3, #4
 801263a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d1df      	bne.n	8012602 <gen_numname+0x76>
	ns[i] = '~';
 8012642:	f107 0214 	add.w	r2, r7, #20
 8012646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012648:	4413      	add	r3, r2
 801264a:	227e      	movs	r2, #126	@ 0x7e
 801264c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801264e:	2300      	movs	r3, #0
 8012650:	627b      	str	r3, [r7, #36]	@ 0x24
 8012652:	e002      	b.n	801265a <gen_numname+0xce>
 8012654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012656:	3301      	adds	r3, #1
 8012658:	627b      	str	r3, [r7, #36]	@ 0x24
 801265a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801265c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801265e:	429a      	cmp	r2, r3
 8012660:	d205      	bcs.n	801266e <gen_numname+0xe2>
 8012662:	68fa      	ldr	r2, [r7, #12]
 8012664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012666:	4413      	add	r3, r2
 8012668:	781b      	ldrb	r3, [r3, #0]
 801266a:	2b20      	cmp	r3, #32
 801266c:	d1f2      	bne.n	8012654 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801266e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012670:	2b07      	cmp	r3, #7
 8012672:	d807      	bhi.n	8012684 <gen_numname+0xf8>
 8012674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012676:	1c5a      	adds	r2, r3, #1
 8012678:	62ba      	str	r2, [r7, #40]	@ 0x28
 801267a:	3330      	adds	r3, #48	@ 0x30
 801267c:	443b      	add	r3, r7
 801267e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012682:	e000      	b.n	8012686 <gen_numname+0xfa>
 8012684:	2120      	movs	r1, #32
 8012686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012688:	1c5a      	adds	r2, r3, #1
 801268a:	627a      	str	r2, [r7, #36]	@ 0x24
 801268c:	68fa      	ldr	r2, [r7, #12]
 801268e:	4413      	add	r3, r2
 8012690:	460a      	mov	r2, r1
 8012692:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012696:	2b07      	cmp	r3, #7
 8012698:	d9e9      	bls.n	801266e <gen_numname+0xe2>
}
 801269a:	bf00      	nop
 801269c:	bf00      	nop
 801269e:	3730      	adds	r7, #48	@ 0x30
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	00011021 	.word	0x00011021

080126a8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80126a8:	b480      	push	{r7}
 80126aa:	b085      	sub	sp, #20
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80126b0:	2300      	movs	r3, #0
 80126b2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80126b4:	230b      	movs	r3, #11
 80126b6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80126b8:	7bfb      	ldrb	r3, [r7, #15]
 80126ba:	b2da      	uxtb	r2, r3
 80126bc:	0852      	lsrs	r2, r2, #1
 80126be:	01db      	lsls	r3, r3, #7
 80126c0:	4313      	orrs	r3, r2
 80126c2:	b2da      	uxtb	r2, r3
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	1c59      	adds	r1, r3, #1
 80126c8:	6079      	str	r1, [r7, #4]
 80126ca:	781b      	ldrb	r3, [r3, #0]
 80126cc:	4413      	add	r3, r2
 80126ce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80126d0:	68bb      	ldr	r3, [r7, #8]
 80126d2:	3b01      	subs	r3, #1
 80126d4:	60bb      	str	r3, [r7, #8]
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d1ed      	bne.n	80126b8 <sum_sfn+0x10>
	return sum;
 80126dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80126de:	4618      	mov	r0, r3
 80126e0:	3714      	adds	r7, #20
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr

080126ea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80126ea:	b580      	push	{r7, lr}
 80126ec:	b086      	sub	sp, #24
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80126f8:	2100      	movs	r1, #0
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f7ff fc89 	bl	8012012 <dir_sdi>
 8012700:	4603      	mov	r3, r0
 8012702:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012704:	7dfb      	ldrb	r3, [r7, #23]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d001      	beq.n	801270e <dir_find+0x24>
 801270a:	7dfb      	ldrb	r3, [r7, #23]
 801270c:	e0a9      	b.n	8012862 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801270e:	23ff      	movs	r3, #255	@ 0xff
 8012710:	753b      	strb	r3, [r7, #20]
 8012712:	7d3b      	ldrb	r3, [r7, #20]
 8012714:	757b      	strb	r3, [r7, #21]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f04f 32ff 	mov.w	r2, #4294967295
 801271c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	69db      	ldr	r3, [r3, #28]
 8012722:	4619      	mov	r1, r3
 8012724:	6938      	ldr	r0, [r7, #16]
 8012726:	f7ff f895 	bl	8011854 <move_window>
 801272a:	4603      	mov	r3, r0
 801272c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801272e:	7dfb      	ldrb	r3, [r7, #23]
 8012730:	2b00      	cmp	r3, #0
 8012732:	f040 8090 	bne.w	8012856 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	6a1b      	ldr	r3, [r3, #32]
 801273a:	781b      	ldrb	r3, [r3, #0]
 801273c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801273e:	7dbb      	ldrb	r3, [r7, #22]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d102      	bne.n	801274a <dir_find+0x60>
 8012744:	2304      	movs	r3, #4
 8012746:	75fb      	strb	r3, [r7, #23]
 8012748:	e08a      	b.n	8012860 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6a1b      	ldr	r3, [r3, #32]
 801274e:	330b      	adds	r3, #11
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012756:	73fb      	strb	r3, [r7, #15]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	7bfa      	ldrb	r2, [r7, #15]
 801275c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801275e:	7dbb      	ldrb	r3, [r7, #22]
 8012760:	2be5      	cmp	r3, #229	@ 0xe5
 8012762:	d007      	beq.n	8012774 <dir_find+0x8a>
 8012764:	7bfb      	ldrb	r3, [r7, #15]
 8012766:	f003 0308 	and.w	r3, r3, #8
 801276a:	2b00      	cmp	r3, #0
 801276c:	d009      	beq.n	8012782 <dir_find+0x98>
 801276e:	7bfb      	ldrb	r3, [r7, #15]
 8012770:	2b0f      	cmp	r3, #15
 8012772:	d006      	beq.n	8012782 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012774:	23ff      	movs	r3, #255	@ 0xff
 8012776:	757b      	strb	r3, [r7, #21]
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f04f 32ff 	mov.w	r2, #4294967295
 801277e:	631a      	str	r2, [r3, #48]	@ 0x30
 8012780:	e05e      	b.n	8012840 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012782:	7bfb      	ldrb	r3, [r7, #15]
 8012784:	2b0f      	cmp	r3, #15
 8012786:	d136      	bne.n	80127f6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801278e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012792:	2b00      	cmp	r3, #0
 8012794:	d154      	bne.n	8012840 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012796:	7dbb      	ldrb	r3, [r7, #22]
 8012798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801279c:	2b00      	cmp	r3, #0
 801279e:	d00d      	beq.n	80127bc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6a1b      	ldr	r3, [r3, #32]
 80127a4:	7b5b      	ldrb	r3, [r3, #13]
 80127a6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80127a8:	7dbb      	ldrb	r3, [r7, #22]
 80127aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80127ae:	75bb      	strb	r3, [r7, #22]
 80127b0:	7dbb      	ldrb	r3, [r7, #22]
 80127b2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	695a      	ldr	r2, [r3, #20]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80127bc:	7dba      	ldrb	r2, [r7, #22]
 80127be:	7d7b      	ldrb	r3, [r7, #21]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d115      	bne.n	80127f0 <dir_find+0x106>
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6a1b      	ldr	r3, [r3, #32]
 80127c8:	330d      	adds	r3, #13
 80127ca:	781b      	ldrb	r3, [r3, #0]
 80127cc:	7d3a      	ldrb	r2, [r7, #20]
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d10e      	bne.n	80127f0 <dir_find+0x106>
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	691a      	ldr	r2, [r3, #16]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6a1b      	ldr	r3, [r3, #32]
 80127da:	4619      	mov	r1, r3
 80127dc:	4610      	mov	r0, r2
 80127de:	f7ff fdfd 	bl	80123dc <cmp_lfn>
 80127e2:	4603      	mov	r3, r0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d003      	beq.n	80127f0 <dir_find+0x106>
 80127e8:	7d7b      	ldrb	r3, [r7, #21]
 80127ea:	3b01      	subs	r3, #1
 80127ec:	b2db      	uxtb	r3, r3
 80127ee:	e000      	b.n	80127f2 <dir_find+0x108>
 80127f0:	23ff      	movs	r3, #255	@ 0xff
 80127f2:	757b      	strb	r3, [r7, #21]
 80127f4:	e024      	b.n	8012840 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80127f6:	7d7b      	ldrb	r3, [r7, #21]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d109      	bne.n	8012810 <dir_find+0x126>
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	6a1b      	ldr	r3, [r3, #32]
 8012800:	4618      	mov	r0, r3
 8012802:	f7ff ff51 	bl	80126a8 <sum_sfn>
 8012806:	4603      	mov	r3, r0
 8012808:	461a      	mov	r2, r3
 801280a:	7d3b      	ldrb	r3, [r7, #20]
 801280c:	4293      	cmp	r3, r2
 801280e:	d024      	beq.n	801285a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012816:	f003 0301 	and.w	r3, r3, #1
 801281a:	2b00      	cmp	r3, #0
 801281c:	d10a      	bne.n	8012834 <dir_find+0x14a>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6a18      	ldr	r0, [r3, #32]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	3324      	adds	r3, #36	@ 0x24
 8012826:	220b      	movs	r2, #11
 8012828:	4619      	mov	r1, r3
 801282a:	f7fe fe20 	bl	801146e <mem_cmp>
 801282e:	4603      	mov	r3, r0
 8012830:	2b00      	cmp	r3, #0
 8012832:	d014      	beq.n	801285e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012834:	23ff      	movs	r3, #255	@ 0xff
 8012836:	757b      	strb	r3, [r7, #21]
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f04f 32ff 	mov.w	r2, #4294967295
 801283e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012840:	2100      	movs	r1, #0
 8012842:	6878      	ldr	r0, [r7, #4]
 8012844:	f7ff fc6e 	bl	8012124 <dir_next>
 8012848:	4603      	mov	r3, r0
 801284a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801284c:	7dfb      	ldrb	r3, [r7, #23]
 801284e:	2b00      	cmp	r3, #0
 8012850:	f43f af65 	beq.w	801271e <dir_find+0x34>
 8012854:	e004      	b.n	8012860 <dir_find+0x176>
		if (res != FR_OK) break;
 8012856:	bf00      	nop
 8012858:	e002      	b.n	8012860 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801285a:	bf00      	nop
 801285c:	e000      	b.n	8012860 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801285e:	bf00      	nop

	return res;
 8012860:	7dfb      	ldrb	r3, [r7, #23]
}
 8012862:	4618      	mov	r0, r3
 8012864:	3718      	adds	r7, #24
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}
	...

0801286c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b08c      	sub	sp, #48	@ 0x30
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012880:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8012884:	2b00      	cmp	r3, #0
 8012886:	d001      	beq.n	801288c <dir_register+0x20>
 8012888:	2306      	movs	r3, #6
 801288a:	e0e0      	b.n	8012a4e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801288c:	2300      	movs	r3, #0
 801288e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012890:	e002      	b.n	8012898 <dir_register+0x2c>
 8012892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012894:	3301      	adds	r3, #1
 8012896:	627b      	str	r3, [r7, #36]	@ 0x24
 8012898:	69fb      	ldr	r3, [r7, #28]
 801289a:	691a      	ldr	r2, [r3, #16]
 801289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801289e:	005b      	lsls	r3, r3, #1
 80128a0:	4413      	add	r3, r2
 80128a2:	881b      	ldrh	r3, [r3, #0]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d1f4      	bne.n	8012892 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80128ae:	f107 030c 	add.w	r3, r7, #12
 80128b2:	220c      	movs	r2, #12
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7fe fd9e 	bl	80113f6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80128ba:	7dfb      	ldrb	r3, [r7, #23]
 80128bc:	f003 0301 	and.w	r3, r3, #1
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d032      	beq.n	801292a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2240      	movs	r2, #64	@ 0x40
 80128c8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80128cc:	2301      	movs	r3, #1
 80128ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80128d0:	e016      	b.n	8012900 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80128d8:	69fb      	ldr	r3, [r7, #28]
 80128da:	691a      	ldr	r2, [r3, #16]
 80128dc:	f107 010c 	add.w	r1, r7, #12
 80128e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128e2:	f7ff fe53 	bl	801258c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f7ff feff 	bl	80126ea <dir_find>
 80128ec:	4603      	mov	r3, r0
 80128ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 80128f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d106      	bne.n	8012908 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80128fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128fc:	3301      	adds	r3, #1
 80128fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012902:	2b63      	cmp	r3, #99	@ 0x63
 8012904:	d9e5      	bls.n	80128d2 <dir_register+0x66>
 8012906:	e000      	b.n	801290a <dir_register+0x9e>
			if (res != FR_OK) break;
 8012908:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801290a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801290c:	2b64      	cmp	r3, #100	@ 0x64
 801290e:	d101      	bne.n	8012914 <dir_register+0xa8>
 8012910:	2307      	movs	r3, #7
 8012912:	e09c      	b.n	8012a4e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012914:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012918:	2b04      	cmp	r3, #4
 801291a:	d002      	beq.n	8012922 <dir_register+0xb6>
 801291c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012920:	e095      	b.n	8012a4e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012922:	7dfa      	ldrb	r2, [r7, #23]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801292a:	7dfb      	ldrb	r3, [r7, #23]
 801292c:	f003 0302 	and.w	r3, r3, #2
 8012930:	2b00      	cmp	r3, #0
 8012932:	d007      	beq.n	8012944 <dir_register+0xd8>
 8012934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012936:	330c      	adds	r3, #12
 8012938:	4a47      	ldr	r2, [pc, #284]	@ (8012a58 <dir_register+0x1ec>)
 801293a:	fba2 2303 	umull	r2, r3, r2, r3
 801293e:	089b      	lsrs	r3, r3, #2
 8012940:	3301      	adds	r3, #1
 8012942:	e000      	b.n	8012946 <dir_register+0xda>
 8012944:	2301      	movs	r3, #1
 8012946:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012948:	6a39      	ldr	r1, [r7, #32]
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f7ff fcc0 	bl	80122d0 <dir_alloc>
 8012950:	4603      	mov	r3, r0
 8012952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012956:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801295a:	2b00      	cmp	r3, #0
 801295c:	d148      	bne.n	80129f0 <dir_register+0x184>
 801295e:	6a3b      	ldr	r3, [r7, #32]
 8012960:	3b01      	subs	r3, #1
 8012962:	623b      	str	r3, [r7, #32]
 8012964:	6a3b      	ldr	r3, [r7, #32]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d042      	beq.n	80129f0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	695a      	ldr	r2, [r3, #20]
 801296e:	6a3b      	ldr	r3, [r7, #32]
 8012970:	015b      	lsls	r3, r3, #5
 8012972:	1ad3      	subs	r3, r2, r3
 8012974:	4619      	mov	r1, r3
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f7ff fb4b 	bl	8012012 <dir_sdi>
 801297c:	4603      	mov	r3, r0
 801297e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8012982:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012986:	2b00      	cmp	r3, #0
 8012988:	d132      	bne.n	80129f0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	3324      	adds	r3, #36	@ 0x24
 801298e:	4618      	mov	r0, r3
 8012990:	f7ff fe8a 	bl	80126a8 <sum_sfn>
 8012994:	4603      	mov	r3, r0
 8012996:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	69db      	ldr	r3, [r3, #28]
 801299c:	4619      	mov	r1, r3
 801299e:	69f8      	ldr	r0, [r7, #28]
 80129a0:	f7fe ff58 	bl	8011854 <move_window>
 80129a4:	4603      	mov	r3, r0
 80129a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80129aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d11d      	bne.n	80129ee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80129b2:	69fb      	ldr	r3, [r7, #28]
 80129b4:	6918      	ldr	r0, [r3, #16]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6a19      	ldr	r1, [r3, #32]
 80129ba:	6a3b      	ldr	r3, [r7, #32]
 80129bc:	b2da      	uxtb	r2, r3
 80129be:	7efb      	ldrb	r3, [r7, #27]
 80129c0:	f7ff fd7c 	bl	80124bc <put_lfn>
				fs->wflag = 1;
 80129c4:	69fb      	ldr	r3, [r7, #28]
 80129c6:	2201      	movs	r2, #1
 80129c8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80129ca:	2100      	movs	r1, #0
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	f7ff fba9 	bl	8012124 <dir_next>
 80129d2:	4603      	mov	r3, r0
 80129d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80129d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d107      	bne.n	80129f0 <dir_register+0x184>
 80129e0:	6a3b      	ldr	r3, [r7, #32]
 80129e2:	3b01      	subs	r3, #1
 80129e4:	623b      	str	r3, [r7, #32]
 80129e6:	6a3b      	ldr	r3, [r7, #32]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d1d5      	bne.n	8012998 <dir_register+0x12c>
 80129ec:	e000      	b.n	80129f0 <dir_register+0x184>
				if (res != FR_OK) break;
 80129ee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80129f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d128      	bne.n	8012a4a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	69db      	ldr	r3, [r3, #28]
 80129fc:	4619      	mov	r1, r3
 80129fe:	69f8      	ldr	r0, [r7, #28]
 8012a00:	f7fe ff28 	bl	8011854 <move_window>
 8012a04:	4603      	mov	r3, r0
 8012a06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8012a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d11b      	bne.n	8012a4a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6a1b      	ldr	r3, [r3, #32]
 8012a16:	2220      	movs	r2, #32
 8012a18:	2100      	movs	r1, #0
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f7fe fd0c 	bl	8011438 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6a18      	ldr	r0, [r3, #32]
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	3324      	adds	r3, #36	@ 0x24
 8012a28:	220b      	movs	r2, #11
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	f7fe fce3 	bl	80113f6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6a1b      	ldr	r3, [r3, #32]
 8012a3a:	330c      	adds	r3, #12
 8012a3c:	f002 0218 	and.w	r2, r2, #24
 8012a40:	b2d2      	uxtb	r2, r2
 8012a42:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012a44:	69fb      	ldr	r3, [r7, #28]
 8012a46:	2201      	movs	r2, #1
 8012a48:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012a4e:	4618      	mov	r0, r3
 8012a50:	3730      	adds	r7, #48	@ 0x30
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}
 8012a56:	bf00      	nop
 8012a58:	4ec4ec4f 	.word	0x4ec4ec4f

08012a5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b08a      	sub	sp, #40	@ 0x28
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	613b      	str	r3, [r7, #16]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	691b      	ldr	r3, [r3, #16]
 8012a72:	60fb      	str	r3, [r7, #12]
 8012a74:	2300      	movs	r3, #0
 8012a76:	617b      	str	r3, [r7, #20]
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012a7c:	69bb      	ldr	r3, [r7, #24]
 8012a7e:	1c5a      	adds	r2, r3, #1
 8012a80:	61ba      	str	r2, [r7, #24]
 8012a82:	693a      	ldr	r2, [r7, #16]
 8012a84:	4413      	add	r3, r2
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8012a8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a8c:	2b1f      	cmp	r3, #31
 8012a8e:	d940      	bls.n	8012b12 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012a90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a92:	2b2f      	cmp	r3, #47	@ 0x2f
 8012a94:	d006      	beq.n	8012aa4 <create_name+0x48>
 8012a96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a98:	2b5c      	cmp	r3, #92	@ 0x5c
 8012a9a:	d110      	bne.n	8012abe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012a9c:	e002      	b.n	8012aa4 <create_name+0x48>
 8012a9e:	69bb      	ldr	r3, [r7, #24]
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	61bb      	str	r3, [r7, #24]
 8012aa4:	693a      	ldr	r2, [r7, #16]
 8012aa6:	69bb      	ldr	r3, [r7, #24]
 8012aa8:	4413      	add	r3, r2
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	2b2f      	cmp	r3, #47	@ 0x2f
 8012aae:	d0f6      	beq.n	8012a9e <create_name+0x42>
 8012ab0:	693a      	ldr	r2, [r7, #16]
 8012ab2:	69bb      	ldr	r3, [r7, #24]
 8012ab4:	4413      	add	r3, r2
 8012ab6:	781b      	ldrb	r3, [r3, #0]
 8012ab8:	2b5c      	cmp	r3, #92	@ 0x5c
 8012aba:	d0f0      	beq.n	8012a9e <create_name+0x42>
			break;
 8012abc:	e02a      	b.n	8012b14 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	2bfe      	cmp	r3, #254	@ 0xfe
 8012ac2:	d901      	bls.n	8012ac8 <create_name+0x6c>
 8012ac4:	2306      	movs	r3, #6
 8012ac6:	e17d      	b.n	8012dc4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012ac8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012ace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ad0:	2101      	movs	r1, #1
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f001 fabc 	bl	8014050 <ff_convert>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012adc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d101      	bne.n	8012ae6 <create_name+0x8a>
 8012ae2:	2306      	movs	r3, #6
 8012ae4:	e16e      	b.n	8012dc4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012ae6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ae8:	2b7f      	cmp	r3, #127	@ 0x7f
 8012aea:	d809      	bhi.n	8012b00 <create_name+0xa4>
 8012aec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012aee:	4619      	mov	r1, r3
 8012af0:	488d      	ldr	r0, [pc, #564]	@ (8012d28 <create_name+0x2cc>)
 8012af2:	f7fe fce3 	bl	80114bc <chk_chr>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d001      	beq.n	8012b00 <create_name+0xa4>
 8012afc:	2306      	movs	r3, #6
 8012afe:	e161      	b.n	8012dc4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	1c5a      	adds	r2, r3, #1
 8012b04:	617a      	str	r2, [r7, #20]
 8012b06:	005b      	lsls	r3, r3, #1
 8012b08:	68fa      	ldr	r2, [r7, #12]
 8012b0a:	4413      	add	r3, r2
 8012b0c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012b0e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012b10:	e7b4      	b.n	8012a7c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8012b12:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012b14:	693a      	ldr	r2, [r7, #16]
 8012b16:	69bb      	ldr	r3, [r7, #24]
 8012b18:	441a      	add	r2, r3
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012b1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b20:	2b1f      	cmp	r3, #31
 8012b22:	d801      	bhi.n	8012b28 <create_name+0xcc>
 8012b24:	2304      	movs	r3, #4
 8012b26:	e000      	b.n	8012b2a <create_name+0xce>
 8012b28:	2300      	movs	r3, #0
 8012b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012b2e:	e011      	b.n	8012b54 <create_name+0xf8>
		w = lfn[di - 1];
 8012b30:	697a      	ldr	r2, [r7, #20]
 8012b32:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012b36:	4413      	add	r3, r2
 8012b38:	005b      	lsls	r3, r3, #1
 8012b3a:	68fa      	ldr	r2, [r7, #12]
 8012b3c:	4413      	add	r3, r2
 8012b3e:	881b      	ldrh	r3, [r3, #0]
 8012b40:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8012b42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b44:	2b20      	cmp	r3, #32
 8012b46:	d002      	beq.n	8012b4e <create_name+0xf2>
 8012b48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012b4c:	d106      	bne.n	8012b5c <create_name+0x100>
		di--;
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	3b01      	subs	r3, #1
 8012b52:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d1ea      	bne.n	8012b30 <create_name+0xd4>
 8012b5a:	e000      	b.n	8012b5e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8012b5c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	005b      	lsls	r3, r3, #1
 8012b62:	68fa      	ldr	r2, [r7, #12]
 8012b64:	4413      	add	r3, r2
 8012b66:	2200      	movs	r2, #0
 8012b68:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d101      	bne.n	8012b74 <create_name+0x118>
 8012b70:	2306      	movs	r3, #6
 8012b72:	e127      	b.n	8012dc4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	3324      	adds	r3, #36	@ 0x24
 8012b78:	220b      	movs	r2, #11
 8012b7a:	2120      	movs	r1, #32
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7fe fc5b 	bl	8011438 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012b82:	2300      	movs	r3, #0
 8012b84:	61bb      	str	r3, [r7, #24]
 8012b86:	e002      	b.n	8012b8e <create_name+0x132>
 8012b88:	69bb      	ldr	r3, [r7, #24]
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	61bb      	str	r3, [r7, #24]
 8012b8e:	69bb      	ldr	r3, [r7, #24]
 8012b90:	005b      	lsls	r3, r3, #1
 8012b92:	68fa      	ldr	r2, [r7, #12]
 8012b94:	4413      	add	r3, r2
 8012b96:	881b      	ldrh	r3, [r3, #0]
 8012b98:	2b20      	cmp	r3, #32
 8012b9a:	d0f5      	beq.n	8012b88 <create_name+0x12c>
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	005b      	lsls	r3, r3, #1
 8012ba0:	68fa      	ldr	r2, [r7, #12]
 8012ba2:	4413      	add	r3, r2
 8012ba4:	881b      	ldrh	r3, [r3, #0]
 8012ba6:	2b2e      	cmp	r3, #46	@ 0x2e
 8012ba8:	d0ee      	beq.n	8012b88 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012baa:	69bb      	ldr	r3, [r7, #24]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d009      	beq.n	8012bc4 <create_name+0x168>
 8012bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012bb4:	f043 0303 	orr.w	r3, r3, #3
 8012bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012bbc:	e002      	b.n	8012bc4 <create_name+0x168>
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	3b01      	subs	r3, #1
 8012bc2:	617b      	str	r3, [r7, #20]
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d009      	beq.n	8012bde <create_name+0x182>
 8012bca:	697a      	ldr	r2, [r7, #20]
 8012bcc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012bd0:	4413      	add	r3, r2
 8012bd2:	005b      	lsls	r3, r3, #1
 8012bd4:	68fa      	ldr	r2, [r7, #12]
 8012bd6:	4413      	add	r3, r2
 8012bd8:	881b      	ldrh	r3, [r3, #0]
 8012bda:	2b2e      	cmp	r3, #46	@ 0x2e
 8012bdc:	d1ef      	bne.n	8012bbe <create_name+0x162>

	i = b = 0; ni = 8;
 8012bde:	2300      	movs	r3, #0
 8012be0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012be4:	2300      	movs	r3, #0
 8012be6:	623b      	str	r3, [r7, #32]
 8012be8:	2308      	movs	r3, #8
 8012bea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012bec:	69bb      	ldr	r3, [r7, #24]
 8012bee:	1c5a      	adds	r2, r3, #1
 8012bf0:	61ba      	str	r2, [r7, #24]
 8012bf2:	005b      	lsls	r3, r3, #1
 8012bf4:	68fa      	ldr	r2, [r7, #12]
 8012bf6:	4413      	add	r3, r2
 8012bf8:	881b      	ldrh	r3, [r3, #0]
 8012bfa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012bfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	f000 8090 	beq.w	8012d24 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012c04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c06:	2b20      	cmp	r3, #32
 8012c08:	d006      	beq.n	8012c18 <create_name+0x1bc>
 8012c0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8012c0e:	d10a      	bne.n	8012c26 <create_name+0x1ca>
 8012c10:	69ba      	ldr	r2, [r7, #24]
 8012c12:	697b      	ldr	r3, [r7, #20]
 8012c14:	429a      	cmp	r2, r3
 8012c16:	d006      	beq.n	8012c26 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8012c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c1c:	f043 0303 	orr.w	r3, r3, #3
 8012c20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012c24:	e07d      	b.n	8012d22 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012c26:	6a3a      	ldr	r2, [r7, #32]
 8012c28:	69fb      	ldr	r3, [r7, #28]
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	d203      	bcs.n	8012c36 <create_name+0x1da>
 8012c2e:	69ba      	ldr	r2, [r7, #24]
 8012c30:	697b      	ldr	r3, [r7, #20]
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d123      	bne.n	8012c7e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8012c36:	69fb      	ldr	r3, [r7, #28]
 8012c38:	2b0b      	cmp	r3, #11
 8012c3a:	d106      	bne.n	8012c4a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8012c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c40:	f043 0303 	orr.w	r3, r3, #3
 8012c44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012c48:	e075      	b.n	8012d36 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8012c4a:	69ba      	ldr	r2, [r7, #24]
 8012c4c:	697b      	ldr	r3, [r7, #20]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d005      	beq.n	8012c5e <create_name+0x202>
 8012c52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c56:	f043 0303 	orr.w	r3, r3, #3
 8012c5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8012c5e:	69ba      	ldr	r2, [r7, #24]
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d866      	bhi.n	8012d34 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	61bb      	str	r3, [r7, #24]
 8012c6a:	2308      	movs	r3, #8
 8012c6c:	623b      	str	r3, [r7, #32]
 8012c6e:	230b      	movs	r3, #11
 8012c70:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012c72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012c76:	009b      	lsls	r3, r3, #2
 8012c78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012c7c:	e051      	b.n	8012d22 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8012c7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c80:	2b7f      	cmp	r3, #127	@ 0x7f
 8012c82:	d914      	bls.n	8012cae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012c84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c86:	2100      	movs	r1, #0
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f001 f9e1 	bl	8014050 <ff_convert>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012c92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d004      	beq.n	8012ca2 <create_name+0x246>
 8012c98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c9a:	3b80      	subs	r3, #128	@ 0x80
 8012c9c:	4a23      	ldr	r2, [pc, #140]	@ (8012d2c <create_name+0x2d0>)
 8012c9e:	5cd3      	ldrb	r3, [r2, r3]
 8012ca0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012ca6:	f043 0302 	orr.w	r3, r3, #2
 8012caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012cae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d007      	beq.n	8012cc4 <create_name+0x268>
 8012cb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012cb6:	4619      	mov	r1, r3
 8012cb8:	481d      	ldr	r0, [pc, #116]	@ (8012d30 <create_name+0x2d4>)
 8012cba:	f7fe fbff 	bl	80114bc <chk_chr>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d008      	beq.n	8012cd6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012cc4:	235f      	movs	r3, #95	@ 0x5f
 8012cc6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012ccc:	f043 0303 	orr.w	r3, r3, #3
 8012cd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012cd4:	e01b      	b.n	8012d0e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012cd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012cd8:	2b40      	cmp	r3, #64	@ 0x40
 8012cda:	d909      	bls.n	8012cf0 <create_name+0x294>
 8012cdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012cde:	2b5a      	cmp	r3, #90	@ 0x5a
 8012ce0:	d806      	bhi.n	8012cf0 <create_name+0x294>
					b |= 2;
 8012ce2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012ce6:	f043 0302 	orr.w	r3, r3, #2
 8012cea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012cee:	e00e      	b.n	8012d0e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012cf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012cf2:	2b60      	cmp	r3, #96	@ 0x60
 8012cf4:	d90b      	bls.n	8012d0e <create_name+0x2b2>
 8012cf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012cf8:	2b7a      	cmp	r3, #122	@ 0x7a
 8012cfa:	d808      	bhi.n	8012d0e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d00:	f043 0301 	orr.w	r3, r3, #1
 8012d04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012d08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012d0a:	3b20      	subs	r3, #32
 8012d0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012d0e:	6a3b      	ldr	r3, [r7, #32]
 8012d10:	1c5a      	adds	r2, r3, #1
 8012d12:	623a      	str	r2, [r7, #32]
 8012d14:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012d16:	b2d1      	uxtb	r1, r2
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	4413      	add	r3, r2
 8012d1c:	460a      	mov	r2, r1
 8012d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8012d22:	e763      	b.n	8012bec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8012d24:	bf00      	nop
 8012d26:	e006      	b.n	8012d36 <create_name+0x2da>
 8012d28:	08014f6c 	.word	0x08014f6c
 8012d2c:	08015018 	.word	0x08015018
 8012d30:	08014f78 	.word	0x08014f78
			if (si > di) break;			/* No extension */
 8012d34:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012d3c:	2be5      	cmp	r3, #229	@ 0xe5
 8012d3e:	d103      	bne.n	8012d48 <create_name+0x2ec>
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2205      	movs	r2, #5
 8012d44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8012d48:	69fb      	ldr	r3, [r7, #28]
 8012d4a:	2b08      	cmp	r3, #8
 8012d4c:	d104      	bne.n	8012d58 <create_name+0x2fc>
 8012d4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d52:	009b      	lsls	r3, r3, #2
 8012d54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012d58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d5c:	f003 030c 	and.w	r3, r3, #12
 8012d60:	2b0c      	cmp	r3, #12
 8012d62:	d005      	beq.n	8012d70 <create_name+0x314>
 8012d64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d68:	f003 0303 	and.w	r3, r3, #3
 8012d6c:	2b03      	cmp	r3, #3
 8012d6e:	d105      	bne.n	8012d7c <create_name+0x320>
 8012d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d74:	f043 0302 	orr.w	r3, r3, #2
 8012d78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d80:	f003 0302 	and.w	r3, r3, #2
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d117      	bne.n	8012db8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012d88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d8c:	f003 0303 	and.w	r3, r3, #3
 8012d90:	2b01      	cmp	r3, #1
 8012d92:	d105      	bne.n	8012da0 <create_name+0x344>
 8012d94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d98:	f043 0310 	orr.w	r3, r3, #16
 8012d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012da0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012da4:	f003 030c 	and.w	r3, r3, #12
 8012da8:	2b04      	cmp	r3, #4
 8012daa:	d105      	bne.n	8012db8 <create_name+0x35c>
 8012dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012db0:	f043 0308 	orr.w	r3, r3, #8
 8012db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8012dbe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8012dc2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3728      	adds	r7, #40	@ 0x28
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b086      	sub	sp, #24
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012de0:	e002      	b.n	8012de8 <follow_path+0x1c>
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	3301      	adds	r3, #1
 8012de6:	603b      	str	r3, [r7, #0]
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	2b2f      	cmp	r3, #47	@ 0x2f
 8012dee:	d0f8      	beq.n	8012de2 <follow_path+0x16>
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	2b5c      	cmp	r3, #92	@ 0x5c
 8012df6:	d0f4      	beq.n	8012de2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	2b1f      	cmp	r3, #31
 8012e04:	d80a      	bhi.n	8012e1c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2280      	movs	r2, #128	@ 0x80
 8012e0a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8012e0e:	2100      	movs	r1, #0
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f7ff f8fe 	bl	8012012 <dir_sdi>
 8012e16:	4603      	mov	r3, r0
 8012e18:	75fb      	strb	r3, [r7, #23]
 8012e1a:	e048      	b.n	8012eae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012e1c:	463b      	mov	r3, r7
 8012e1e:	4619      	mov	r1, r3
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f7ff fe1b 	bl	8012a5c <create_name>
 8012e26:	4603      	mov	r3, r0
 8012e28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012e2a:	7dfb      	ldrb	r3, [r7, #23]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d139      	bne.n	8012ea4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f7ff fc5a 	bl	80126ea <dir_find>
 8012e36:	4603      	mov	r3, r0
 8012e38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012e40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012e42:	7dfb      	ldrb	r3, [r7, #23]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d00a      	beq.n	8012e5e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012e48:	7dfb      	ldrb	r3, [r7, #23]
 8012e4a:	2b04      	cmp	r3, #4
 8012e4c:	d12c      	bne.n	8012ea8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012e4e:	7afb      	ldrb	r3, [r7, #11]
 8012e50:	f003 0304 	and.w	r3, r3, #4
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d127      	bne.n	8012ea8 <follow_path+0xdc>
 8012e58:	2305      	movs	r3, #5
 8012e5a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012e5c:	e024      	b.n	8012ea8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012e5e:	7afb      	ldrb	r3, [r7, #11]
 8012e60:	f003 0304 	and.w	r3, r3, #4
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d121      	bne.n	8012eac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	799b      	ldrb	r3, [r3, #6]
 8012e6c:	f003 0310 	and.w	r3, r3, #16
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d102      	bne.n	8012e7a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012e74:	2305      	movs	r3, #5
 8012e76:	75fb      	strb	r3, [r7, #23]
 8012e78:	e019      	b.n	8012eae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	695b      	ldr	r3, [r3, #20]
 8012e84:	68fa      	ldr	r2, [r7, #12]
 8012e86:	8992      	ldrh	r2, [r2, #12]
 8012e88:	fbb3 f0f2 	udiv	r0, r3, r2
 8012e8c:	fb00 f202 	mul.w	r2, r0, r2
 8012e90:	1a9b      	subs	r3, r3, r2
 8012e92:	440b      	add	r3, r1
 8012e94:	4619      	mov	r1, r3
 8012e96:	68f8      	ldr	r0, [r7, #12]
 8012e98:	f7ff fa61 	bl	801235e <ld_clust>
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012ea2:	e7bb      	b.n	8012e1c <follow_path+0x50>
			if (res != FR_OK) break;
 8012ea4:	bf00      	nop
 8012ea6:	e002      	b.n	8012eae <follow_path+0xe2>
				break;
 8012ea8:	bf00      	nop
 8012eaa:	e000      	b.n	8012eae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012eac:	bf00      	nop
			}
		}
	}

	return res;
 8012eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3718      	adds	r7, #24
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}

08012eb8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012eb8:	b480      	push	{r7}
 8012eba:	b087      	sub	sp, #28
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ec4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d031      	beq.n	8012f32 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	617b      	str	r3, [r7, #20]
 8012ed4:	e002      	b.n	8012edc <get_ldnumber+0x24>
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	3301      	adds	r3, #1
 8012eda:	617b      	str	r3, [r7, #20]
 8012edc:	697b      	ldr	r3, [r7, #20]
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	2b1f      	cmp	r3, #31
 8012ee2:	d903      	bls.n	8012eec <get_ldnumber+0x34>
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	781b      	ldrb	r3, [r3, #0]
 8012ee8:	2b3a      	cmp	r3, #58	@ 0x3a
 8012eea:	d1f4      	bne.n	8012ed6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	2b3a      	cmp	r3, #58	@ 0x3a
 8012ef2:	d11c      	bne.n	8012f2e <get_ldnumber+0x76>
			tp = *path;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	1c5a      	adds	r2, r3, #1
 8012efe:	60fa      	str	r2, [r7, #12]
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	3b30      	subs	r3, #48	@ 0x30
 8012f04:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012f06:	68bb      	ldr	r3, [r7, #8]
 8012f08:	2b09      	cmp	r3, #9
 8012f0a:	d80e      	bhi.n	8012f2a <get_ldnumber+0x72>
 8012f0c:	68fa      	ldr	r2, [r7, #12]
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d10a      	bne.n	8012f2a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d107      	bne.n	8012f2a <get_ldnumber+0x72>
					vol = (int)i;
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	3301      	adds	r3, #1
 8012f22:	617b      	str	r3, [r7, #20]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	697a      	ldr	r2, [r7, #20]
 8012f28:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	e002      	b.n	8012f34 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012f2e:	2300      	movs	r3, #0
 8012f30:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012f32:	693b      	ldr	r3, [r7, #16]
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	371c      	adds	r7, #28
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3e:	4770      	bx	lr

08012f40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
 8012f48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	70da      	strb	r2, [r3, #3]
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f04f 32ff 	mov.w	r2, #4294967295
 8012f56:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012f58:	6839      	ldr	r1, [r7, #0]
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f7fe fc7a 	bl	8011854 <move_window>
 8012f60:	4603      	mov	r3, r0
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d001      	beq.n	8012f6a <check_fs+0x2a>
 8012f66:	2304      	movs	r3, #4
 8012f68:	e038      	b.n	8012fdc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	3338      	adds	r3, #56	@ 0x38
 8012f6e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7fe f9bc 	bl	80112f0 <ld_word>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d001      	beq.n	8012f88 <check_fs+0x48>
 8012f84:	2303      	movs	r3, #3
 8012f86:	e029      	b.n	8012fdc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012f8e:	2be9      	cmp	r3, #233	@ 0xe9
 8012f90:	d009      	beq.n	8012fa6 <check_fs+0x66>
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012f98:	2beb      	cmp	r3, #235	@ 0xeb
 8012f9a:	d11e      	bne.n	8012fda <check_fs+0x9a>
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8012fa2:	2b90      	cmp	r3, #144	@ 0x90
 8012fa4:	d119      	bne.n	8012fda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	3338      	adds	r3, #56	@ 0x38
 8012faa:	3336      	adds	r3, #54	@ 0x36
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7fe f9b8 	bl	8011322 <ld_dword>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8012fe4 <check_fs+0xa4>)
 8012fba:	4293      	cmp	r3, r2
 8012fbc:	d101      	bne.n	8012fc2 <check_fs+0x82>
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	e00c      	b.n	8012fdc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	3338      	adds	r3, #56	@ 0x38
 8012fc6:	3352      	adds	r3, #82	@ 0x52
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7fe f9aa 	bl	8011322 <ld_dword>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	4a05      	ldr	r2, [pc, #20]	@ (8012fe8 <check_fs+0xa8>)
 8012fd2:	4293      	cmp	r3, r2
 8012fd4:	d101      	bne.n	8012fda <check_fs+0x9a>
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	e000      	b.n	8012fdc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012fda:	2302      	movs	r3, #2
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3708      	adds	r7, #8
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}
 8012fe4:	00544146 	.word	0x00544146
 8012fe8:	33544146 	.word	0x33544146

08012fec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b096      	sub	sp, #88	@ 0x58
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	60f8      	str	r0, [r7, #12]
 8012ff4:	60b9      	str	r1, [r7, #8]
 8012ff6:	4613      	mov	r3, r2
 8012ff8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013000:	68f8      	ldr	r0, [r7, #12]
 8013002:	f7ff ff59 	bl	8012eb8 <get_ldnumber>
 8013006:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801300a:	2b00      	cmp	r3, #0
 801300c:	da01      	bge.n	8013012 <find_volume+0x26>
 801300e:	230b      	movs	r3, #11
 8013010:	e27f      	b.n	8013512 <find_volume+0x526>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013012:	4a9e      	ldr	r2, [pc, #632]	@ (801328c <find_volume+0x2a0>)
 8013014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801301a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801301c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801301e:	2b00      	cmp	r3, #0
 8013020:	d101      	bne.n	8013026 <find_volume+0x3a>
 8013022:	230c      	movs	r3, #12
 8013024:	e275      	b.n	8013512 <find_volume+0x526>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801302a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801302c:	79fb      	ldrb	r3, [r7, #7]
 801302e:	f023 0301 	bic.w	r3, r3, #1
 8013032:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d01a      	beq.n	8013072 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801303c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801303e:	785b      	ldrb	r3, [r3, #1]
 8013040:	4618      	mov	r0, r3
 8013042:	f7fe f8b5 	bl	80111b0 <disk_status>
 8013046:	4603      	mov	r3, r0
 8013048:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801304c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013050:	f003 0301 	and.w	r3, r3, #1
 8013054:	2b00      	cmp	r3, #0
 8013056:	d10c      	bne.n	8013072 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013058:	79fb      	ldrb	r3, [r7, #7]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d007      	beq.n	801306e <find_volume+0x82>
 801305e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013062:	f003 0304 	and.w	r3, r3, #4
 8013066:	2b00      	cmp	r3, #0
 8013068:	d001      	beq.n	801306e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801306a:	230a      	movs	r3, #10
 801306c:	e251      	b.n	8013512 <find_volume+0x526>
			}
			return FR_OK;				/* The file system object is valid */
 801306e:	2300      	movs	r3, #0
 8013070:	e24f      	b.n	8013512 <find_volume+0x526>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013074:	2200      	movs	r2, #0
 8013076:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013078:	4a85      	ldr	r2, [pc, #532]	@ (8013290 <find_volume+0x2a4>)
 801307a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801307c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013082:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013086:	785b      	ldrb	r3, [r3, #1]
 8013088:	4618      	mov	r0, r3
 801308a:	f7fe f8ab 	bl	80111e4 <disk_initialize>
 801308e:	4603      	mov	r3, r0
 8013090:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013094:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013098:	f003 0301 	and.w	r3, r3, #1
 801309c:	2b00      	cmp	r3, #0
 801309e:	d001      	beq.n	80130a4 <find_volume+0xb8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80130a0:	2303      	movs	r3, #3
 80130a2:	e236      	b.n	8013512 <find_volume+0x526>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80130a4:	79fb      	ldrb	r3, [r7, #7]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d007      	beq.n	80130ba <find_volume+0xce>
 80130aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80130ae:	f003 0304 	and.w	r3, r3, #4
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d001      	beq.n	80130ba <find_volume+0xce>
		return FR_WRITE_PROTECTED;
 80130b6:	230a      	movs	r3, #10
 80130b8:	e22b      	b.n	8013512 <find_volume+0x526>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80130ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130bc:	7858      	ldrb	r0, [r3, #1]
 80130be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130c0:	330c      	adds	r3, #12
 80130c2:	461a      	mov	r2, r3
 80130c4:	2102      	movs	r1, #2
 80130c6:	f7fe f8f5 	bl	80112b4 <disk_ioctl>
 80130ca:	4603      	mov	r3, r0
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d001      	beq.n	80130d4 <find_volume+0xe8>
 80130d0:	2301      	movs	r3, #1
 80130d2:	e21e      	b.n	8013512 <find_volume+0x526>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80130d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130d6:	899b      	ldrh	r3, [r3, #12]
 80130d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80130dc:	d80d      	bhi.n	80130fa <find_volume+0x10e>
 80130de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130e0:	899b      	ldrh	r3, [r3, #12]
 80130e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80130e6:	d308      	bcc.n	80130fa <find_volume+0x10e>
 80130e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130ea:	899b      	ldrh	r3, [r3, #12]
 80130ec:	461a      	mov	r2, r3
 80130ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130f0:	899b      	ldrh	r3, [r3, #12]
 80130f2:	3b01      	subs	r3, #1
 80130f4:	4013      	ands	r3, r2
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d001      	beq.n	80130fe <find_volume+0x112>
 80130fa:	2301      	movs	r3, #1
 80130fc:	e209      	b.n	8013512 <find_volume+0x526>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80130fe:	2300      	movs	r3, #0
 8013100:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013102:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013104:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013106:	f7ff ff1b 	bl	8012f40 <check_fs>
 801310a:	4603      	mov	r3, r0
 801310c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013110:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013114:	2b02      	cmp	r3, #2
 8013116:	d00a      	beq.n	801312e <find_volume+0x142>
 8013118:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801311c:	2b01      	cmp	r3, #1
 801311e:	d85b      	bhi.n	80131d8 <find_volume+0x1ec>
 8013120:	4a5b      	ldr	r2, [pc, #364]	@ (8013290 <find_volume+0x2a4>)
 8013122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013124:	005b      	lsls	r3, r3, #1
 8013126:	4413      	add	r3, r2
 8013128:	785b      	ldrb	r3, [r3, #1]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d054      	beq.n	80131d8 <find_volume+0x1ec>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801312e:	2300      	movs	r3, #0
 8013130:	643b      	str	r3, [r7, #64]	@ 0x40
 8013132:	e01e      	b.n	8013172 <find_volume+0x186>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013136:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801313a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801313c:	011b      	lsls	r3, r3, #4
 801313e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8013142:	4413      	add	r3, r2
 8013144:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013148:	3304      	adds	r3, #4
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d006      	beq.n	801315e <find_volume+0x172>
 8013150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013152:	3308      	adds	r3, #8
 8013154:	4618      	mov	r0, r3
 8013156:	f7fe f8e4 	bl	8011322 <ld_dword>
 801315a:	4602      	mov	r2, r0
 801315c:	e000      	b.n	8013160 <find_volume+0x174>
 801315e:	2200      	movs	r2, #0
 8013160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013162:	009b      	lsls	r3, r3, #2
 8013164:	3358      	adds	r3, #88	@ 0x58
 8013166:	443b      	add	r3, r7
 8013168:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801316c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801316e:	3301      	adds	r3, #1
 8013170:	643b      	str	r3, [r7, #64]	@ 0x40
 8013172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013174:	2b03      	cmp	r3, #3
 8013176:	d9dd      	bls.n	8013134 <find_volume+0x148>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013178:	4a45      	ldr	r2, [pc, #276]	@ (8013290 <find_volume+0x2a4>)
 801317a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801317c:	005b      	lsls	r3, r3, #1
 801317e:	4413      	add	r3, r2
 8013180:	785b      	ldrb	r3, [r3, #1]
 8013182:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8013184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013186:	2b00      	cmp	r3, #0
 8013188:	d002      	beq.n	8013190 <find_volume+0x1a4>
 801318a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801318c:	3b01      	subs	r3, #1
 801318e:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	3358      	adds	r3, #88	@ 0x58
 8013196:	443b      	add	r3, r7
 8013198:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801319c:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801319e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d005      	beq.n	80131b0 <find_volume+0x1c4>
 80131a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80131a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80131a8:	f7ff feca 	bl	8012f40 <check_fs>
 80131ac:	4603      	mov	r3, r0
 80131ae:	e000      	b.n	80131b2 <find_volume+0x1c6>
 80131b0:	2303      	movs	r3, #3
 80131b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80131b6:	4a36      	ldr	r2, [pc, #216]	@ (8013290 <find_volume+0x2a4>)
 80131b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131ba:	005b      	lsls	r3, r3, #1
 80131bc:	4413      	add	r3, r2
 80131be:	785b      	ldrb	r3, [r3, #1]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d109      	bne.n	80131d8 <find_volume+0x1ec>
 80131c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80131c8:	2b01      	cmp	r3, #1
 80131ca:	d905      	bls.n	80131d8 <find_volume+0x1ec>
 80131cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80131ce:	3301      	adds	r3, #1
 80131d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80131d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80131d4:	2b03      	cmp	r3, #3
 80131d6:	d9db      	bls.n	8013190 <find_volume+0x1a4>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80131d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80131dc:	2b04      	cmp	r3, #4
 80131de:	d101      	bne.n	80131e4 <find_volume+0x1f8>
 80131e0:	2301      	movs	r3, #1
 80131e2:	e196      	b.n	8013512 <find_volume+0x526>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80131e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80131e8:	2b01      	cmp	r3, #1
 80131ea:	d901      	bls.n	80131f0 <find_volume+0x204>
 80131ec:	230d      	movs	r3, #13
 80131ee:	e190      	b.n	8013512 <find_volume+0x526>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80131f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131f2:	3338      	adds	r3, #56	@ 0x38
 80131f4:	330b      	adds	r3, #11
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7fe f87a 	bl	80112f0 <ld_word>
 80131fc:	4603      	mov	r3, r0
 80131fe:	461a      	mov	r2, r3
 8013200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013202:	899b      	ldrh	r3, [r3, #12]
 8013204:	429a      	cmp	r2, r3
 8013206:	d001      	beq.n	801320c <find_volume+0x220>
 8013208:	230d      	movs	r3, #13
 801320a:	e182      	b.n	8013512 <find_volume+0x526>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801320c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801320e:	3338      	adds	r3, #56	@ 0x38
 8013210:	3316      	adds	r3, #22
 8013212:	4618      	mov	r0, r3
 8013214:	f7fe f86c 	bl	80112f0 <ld_word>
 8013218:	4603      	mov	r3, r0
 801321a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801321c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801321e:	2b00      	cmp	r3, #0
 8013220:	d106      	bne.n	8013230 <find_volume+0x244>
 8013222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013224:	3338      	adds	r3, #56	@ 0x38
 8013226:	3324      	adds	r3, #36	@ 0x24
 8013228:	4618      	mov	r0, r3
 801322a:	f7fe f87a 	bl	8011322 <ld_dword>
 801322e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8013230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013232:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013234:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013238:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801323c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801323e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013242:	789b      	ldrb	r3, [r3, #2]
 8013244:	2b01      	cmp	r3, #1
 8013246:	d005      	beq.n	8013254 <find_volume+0x268>
 8013248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801324a:	789b      	ldrb	r3, [r3, #2]
 801324c:	2b02      	cmp	r3, #2
 801324e:	d001      	beq.n	8013254 <find_volume+0x268>
 8013250:	230d      	movs	r3, #13
 8013252:	e15e      	b.n	8013512 <find_volume+0x526>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013256:	789b      	ldrb	r3, [r3, #2]
 8013258:	461a      	mov	r2, r3
 801325a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801325c:	fb02 f303 	mul.w	r3, r2, r3
 8013260:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013264:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013268:	461a      	mov	r2, r3
 801326a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801326c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801326e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013270:	895b      	ldrh	r3, [r3, #10]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d008      	beq.n	8013288 <find_volume+0x29c>
 8013276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013278:	895b      	ldrh	r3, [r3, #10]
 801327a:	461a      	mov	r2, r3
 801327c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801327e:	895b      	ldrh	r3, [r3, #10]
 8013280:	3b01      	subs	r3, #1
 8013282:	4013      	ands	r3, r2
 8013284:	2b00      	cmp	r3, #0
 8013286:	d005      	beq.n	8013294 <find_volume+0x2a8>
 8013288:	230d      	movs	r3, #13
 801328a:	e142      	b.n	8013512 <find_volume+0x526>
 801328c:	24001834 	.word	0x24001834
 8013290:	24001828 	.word	0x24001828

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013296:	3338      	adds	r3, #56	@ 0x38
 8013298:	3311      	adds	r3, #17
 801329a:	4618      	mov	r0, r3
 801329c:	f7fe f828 	bl	80112f0 <ld_word>
 80132a0:	4603      	mov	r3, r0
 80132a2:	461a      	mov	r2, r3
 80132a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80132a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132aa:	891b      	ldrh	r3, [r3, #8]
 80132ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80132ae:	8992      	ldrh	r2, [r2, #12]
 80132b0:	0952      	lsrs	r2, r2, #5
 80132b2:	b292      	uxth	r2, r2
 80132b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80132b8:	fb01 f202 	mul.w	r2, r1, r2
 80132bc:	1a9b      	subs	r3, r3, r2
 80132be:	b29b      	uxth	r3, r3
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d001      	beq.n	80132c8 <find_volume+0x2dc>
 80132c4:	230d      	movs	r3, #13
 80132c6:	e124      	b.n	8013512 <find_volume+0x526>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80132c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132ca:	3338      	adds	r3, #56	@ 0x38
 80132cc:	3313      	adds	r3, #19
 80132ce:	4618      	mov	r0, r3
 80132d0:	f7fe f80e 	bl	80112f0 <ld_word>
 80132d4:	4603      	mov	r3, r0
 80132d6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80132d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d106      	bne.n	80132ec <find_volume+0x300>
 80132de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132e0:	3338      	adds	r3, #56	@ 0x38
 80132e2:	3320      	adds	r3, #32
 80132e4:	4618      	mov	r0, r3
 80132e6:	f7fe f81c 	bl	8011322 <ld_dword>
 80132ea:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80132ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132ee:	3338      	adds	r3, #56	@ 0x38
 80132f0:	330e      	adds	r3, #14
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7fd fffc 	bl	80112f0 <ld_word>
 80132f8:	4603      	mov	r3, r0
 80132fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80132fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d101      	bne.n	8013306 <find_volume+0x31a>
 8013302:	230d      	movs	r3, #13
 8013304:	e105      	b.n	8013512 <find_volume+0x526>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013306:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801330a:	4413      	add	r3, r2
 801330c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801330e:	8911      	ldrh	r1, [r2, #8]
 8013310:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013312:	8992      	ldrh	r2, [r2, #12]
 8013314:	0952      	lsrs	r2, r2, #5
 8013316:	b292      	uxth	r2, r2
 8013318:	fbb1 f2f2 	udiv	r2, r1, r2
 801331c:	b292      	uxth	r2, r2
 801331e:	4413      	add	r3, r2
 8013320:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013326:	429a      	cmp	r2, r3
 8013328:	d201      	bcs.n	801332e <find_volume+0x342>
 801332a:	230d      	movs	r3, #13
 801332c:	e0f1      	b.n	8013512 <find_volume+0x526>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801332e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013332:	1ad3      	subs	r3, r2, r3
 8013334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013336:	8952      	ldrh	r2, [r2, #10]
 8013338:	fbb3 f3f2 	udiv	r3, r3, r2
 801333c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013340:	2b00      	cmp	r3, #0
 8013342:	d101      	bne.n	8013348 <find_volume+0x35c>
 8013344:	230d      	movs	r3, #13
 8013346:	e0e4      	b.n	8013512 <find_volume+0x526>
		fmt = FS_FAT32;
 8013348:	2303      	movs	r3, #3
 801334a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801334e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013350:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013354:	4293      	cmp	r3, r2
 8013356:	d802      	bhi.n	801335e <find_volume+0x372>
 8013358:	2302      	movs	r3, #2
 801335a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013360:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013364:	4293      	cmp	r3, r2
 8013366:	d802      	bhi.n	801336e <find_volume+0x382>
 8013368:	2301      	movs	r3, #1
 801336a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013370:	1c9a      	adds	r2, r3, #2
 8013372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013374:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013378:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801337a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801337c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801337e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013380:	441a      	add	r2, r3
 8013382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013384:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8013386:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801338a:	441a      	add	r2, r3
 801338c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801338e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8013390:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013394:	2b03      	cmp	r3, #3
 8013396:	d11e      	bne.n	80133d6 <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801339a:	3338      	adds	r3, #56	@ 0x38
 801339c:	332a      	adds	r3, #42	@ 0x2a
 801339e:	4618      	mov	r0, r3
 80133a0:	f7fd ffa6 	bl	80112f0 <ld_word>
 80133a4:	4603      	mov	r3, r0
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d001      	beq.n	80133ae <find_volume+0x3c2>
 80133aa:	230d      	movs	r3, #13
 80133ac:	e0b1      	b.n	8013512 <find_volume+0x526>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80133ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b0:	891b      	ldrh	r3, [r3, #8]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d001      	beq.n	80133ba <find_volume+0x3ce>
 80133b6:	230d      	movs	r3, #13
 80133b8:	e0ab      	b.n	8013512 <find_volume+0x526>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80133ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133bc:	3338      	adds	r3, #56	@ 0x38
 80133be:	332c      	adds	r3, #44	@ 0x2c
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7fd ffae 	bl	8011322 <ld_dword>
 80133c6:	4602      	mov	r2, r0
 80133c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ca:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80133cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ce:	69db      	ldr	r3, [r3, #28]
 80133d0:	009b      	lsls	r3, r3, #2
 80133d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80133d4:	e01f      	b.n	8013416 <find_volume+0x42a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80133d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133d8:	891b      	ldrh	r3, [r3, #8]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d101      	bne.n	80133e2 <find_volume+0x3f6>
 80133de:	230d      	movs	r3, #13
 80133e0:	e097      	b.n	8013512 <find_volume+0x526>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80133e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80133e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80133e8:	441a      	add	r2, r3
 80133ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ec:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80133ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80133f2:	2b02      	cmp	r3, #2
 80133f4:	d103      	bne.n	80133fe <find_volume+0x412>
 80133f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133f8:	69db      	ldr	r3, [r3, #28]
 80133fa:	005b      	lsls	r3, r3, #1
 80133fc:	e00a      	b.n	8013414 <find_volume+0x428>
 80133fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013400:	69da      	ldr	r2, [r3, #28]
 8013402:	4613      	mov	r3, r2
 8013404:	005b      	lsls	r3, r3, #1
 8013406:	4413      	add	r3, r2
 8013408:	085a      	lsrs	r2, r3, #1
 801340a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801340c:	69db      	ldr	r3, [r3, #28]
 801340e:	f003 0301 	and.w	r3, r3, #1
 8013412:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013414:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013418:	6a1a      	ldr	r2, [r3, #32]
 801341a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801341c:	899b      	ldrh	r3, [r3, #12]
 801341e:	4619      	mov	r1, r3
 8013420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013422:	440b      	add	r3, r1
 8013424:	3b01      	subs	r3, #1
 8013426:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013428:	8989      	ldrh	r1, [r1, #12]
 801342a:	fbb3 f3f1 	udiv	r3, r3, r1
 801342e:	429a      	cmp	r2, r3
 8013430:	d201      	bcs.n	8013436 <find_volume+0x44a>
 8013432:	230d      	movs	r3, #13
 8013434:	e06d      	b.n	8013512 <find_volume+0x526>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013438:	f04f 32ff 	mov.w	r2, #4294967295
 801343c:	619a      	str	r2, [r3, #24]
 801343e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013440:	699a      	ldr	r2, [r3, #24]
 8013442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013444:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8013446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013448:	2280      	movs	r2, #128	@ 0x80
 801344a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801344c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013450:	2b03      	cmp	r3, #3
 8013452:	d149      	bne.n	80134e8 <find_volume+0x4fc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013456:	3338      	adds	r3, #56	@ 0x38
 8013458:	3330      	adds	r3, #48	@ 0x30
 801345a:	4618      	mov	r0, r3
 801345c:	f7fd ff48 	bl	80112f0 <ld_word>
 8013460:	4603      	mov	r3, r0
 8013462:	2b01      	cmp	r3, #1
 8013464:	d140      	bne.n	80134e8 <find_volume+0x4fc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013468:	3301      	adds	r3, #1
 801346a:	4619      	mov	r1, r3
 801346c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801346e:	f7fe f9f1 	bl	8011854 <move_window>
 8013472:	4603      	mov	r3, r0
 8013474:	2b00      	cmp	r3, #0
 8013476:	d137      	bne.n	80134e8 <find_volume+0x4fc>
		{
			fs->fsi_flag = 0;
 8013478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801347a:	2200      	movs	r2, #0
 801347c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801347e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013480:	3338      	adds	r3, #56	@ 0x38
 8013482:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013486:	4618      	mov	r0, r3
 8013488:	f7fd ff32 	bl	80112f0 <ld_word>
 801348c:	4603      	mov	r3, r0
 801348e:	461a      	mov	r2, r3
 8013490:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013494:	429a      	cmp	r2, r3
 8013496:	d127      	bne.n	80134e8 <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801349a:	3338      	adds	r3, #56	@ 0x38
 801349c:	4618      	mov	r0, r3
 801349e:	f7fd ff40 	bl	8011322 <ld_dword>
 80134a2:	4603      	mov	r3, r0
 80134a4:	4a1d      	ldr	r2, [pc, #116]	@ (801351c <find_volume+0x530>)
 80134a6:	4293      	cmp	r3, r2
 80134a8:	d11e      	bne.n	80134e8 <find_volume+0x4fc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80134aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ac:	3338      	adds	r3, #56	@ 0x38
 80134ae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7fd ff35 	bl	8011322 <ld_dword>
 80134b8:	4603      	mov	r3, r0
 80134ba:	4a19      	ldr	r2, [pc, #100]	@ (8013520 <find_volume+0x534>)
 80134bc:	4293      	cmp	r3, r2
 80134be:	d113      	bne.n	80134e8 <find_volume+0x4fc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80134c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134c2:	3338      	adds	r3, #56	@ 0x38
 80134c4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7fd ff2a 	bl	8011322 <ld_dword>
 80134ce:	4602      	mov	r2, r0
 80134d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134d2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80134d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134d6:	3338      	adds	r3, #56	@ 0x38
 80134d8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80134dc:	4618      	mov	r0, r3
 80134de:	f7fd ff20 	bl	8011322 <ld_dword>
 80134e2:	4602      	mov	r2, r0
 80134e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134e6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80134e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ea:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80134ee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80134f0:	4b0c      	ldr	r3, [pc, #48]	@ (8013524 <find_volume+0x538>)
 80134f2:	881b      	ldrh	r3, [r3, #0]
 80134f4:	3301      	adds	r3, #1
 80134f6:	b29a      	uxth	r2, r3
 80134f8:	4b0a      	ldr	r3, [pc, #40]	@ (8013524 <find_volume+0x538>)
 80134fa:	801a      	strh	r2, [r3, #0]
 80134fc:	4b09      	ldr	r3, [pc, #36]	@ (8013524 <find_volume+0x538>)
 80134fe:	881a      	ldrh	r2, [r3, #0]
 8013500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013502:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8013504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013506:	4a08      	ldr	r2, [pc, #32]	@ (8013528 <find_volume+0x53c>)
 8013508:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801350a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801350c:	f7fe f93a 	bl	8011784 <clear_lock>
#endif
	return FR_OK;
 8013510:	2300      	movs	r3, #0
}
 8013512:	4618      	mov	r0, r3
 8013514:	3758      	adds	r7, #88	@ 0x58
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
 801351a:	bf00      	nop
 801351c:	41615252 	.word	0x41615252
 8013520:	61417272 	.word	0x61417272
 8013524:	24001838 	.word	0x24001838
 8013528:	2400185c 	.word	0x2400185c

0801352c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b084      	sub	sp, #16
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013536:	2309      	movs	r3, #9
 8013538:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d01c      	beq.n	801357a <validate+0x4e>
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d018      	beq.n	801357a <validate+0x4e>
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	781b      	ldrb	r3, [r3, #0]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d013      	beq.n	801357a <validate+0x4e>
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	889a      	ldrh	r2, [r3, #4]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	88db      	ldrh	r3, [r3, #6]
 801355c:	429a      	cmp	r2, r3
 801355e:	d10c      	bne.n	801357a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	785b      	ldrb	r3, [r3, #1]
 8013566:	4618      	mov	r0, r3
 8013568:	f7fd fe22 	bl	80111b0 <disk_status>
 801356c:	4603      	mov	r3, r0
 801356e:	f003 0301 	and.w	r3, r3, #1
 8013572:	2b00      	cmp	r3, #0
 8013574:	d101      	bne.n	801357a <validate+0x4e>
			res = FR_OK;
 8013576:	2300      	movs	r3, #0
 8013578:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801357a:	7bfb      	ldrb	r3, [r7, #15]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d102      	bne.n	8013586 <validate+0x5a>
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	e000      	b.n	8013588 <validate+0x5c>
 8013586:	2300      	movs	r3, #0
 8013588:	683a      	ldr	r2, [r7, #0]
 801358a:	6013      	str	r3, [r2, #0]
	return res;
 801358c:	7bfb      	ldrb	r3, [r7, #15]
}
 801358e:	4618      	mov	r0, r3
 8013590:	3710      	adds	r7, #16
 8013592:	46bd      	mov	sp, r7
 8013594:	bd80      	pop	{r7, pc}
	...

08013598 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b088      	sub	sp, #32
 801359c:	af00      	add	r7, sp, #0
 801359e:	60f8      	str	r0, [r7, #12]
 80135a0:	60b9      	str	r1, [r7, #8]
 80135a2:	4613      	mov	r3, r2
 80135a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80135aa:	f107 0310 	add.w	r3, r7, #16
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7ff fc82 	bl	8012eb8 <get_ldnumber>
 80135b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80135b6:	69fb      	ldr	r3, [r7, #28]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	da01      	bge.n	80135c0 <f_mount+0x28>
 80135bc:	230b      	movs	r3, #11
 80135be:	e02b      	b.n	8013618 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80135c0:	4a17      	ldr	r2, [pc, #92]	@ (8013620 <f_mount+0x88>)
 80135c2:	69fb      	ldr	r3, [r7, #28]
 80135c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80135ca:	69bb      	ldr	r3, [r7, #24]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d005      	beq.n	80135dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80135d0:	69b8      	ldr	r0, [r7, #24]
 80135d2:	f7fe f8d7 	bl	8011784 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80135d6:	69bb      	ldr	r3, [r7, #24]
 80135d8:	2200      	movs	r2, #0
 80135da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d002      	beq.n	80135e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	2200      	movs	r2, #0
 80135e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80135e8:	68fa      	ldr	r2, [r7, #12]
 80135ea:	490d      	ldr	r1, [pc, #52]	@ (8013620 <f_mount+0x88>)
 80135ec:	69fb      	ldr	r3, [r7, #28]
 80135ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d002      	beq.n	80135fe <f_mount+0x66>
 80135f8:	79fb      	ldrb	r3, [r7, #7]
 80135fa:	2b01      	cmp	r3, #1
 80135fc:	d001      	beq.n	8013602 <f_mount+0x6a>
 80135fe:	2300      	movs	r3, #0
 8013600:	e00a      	b.n	8013618 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013602:	f107 010c 	add.w	r1, r7, #12
 8013606:	f107 0308 	add.w	r3, r7, #8
 801360a:	2200      	movs	r2, #0
 801360c:	4618      	mov	r0, r3
 801360e:	f7ff fced 	bl	8012fec <find_volume>
 8013612:	4603      	mov	r3, r0
 8013614:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013616:	7dfb      	ldrb	r3, [r7, #23]
}
 8013618:	4618      	mov	r0, r3
 801361a:	3720      	adds	r7, #32
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}
 8013620:	24001834 	.word	0x24001834

08013624 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b09a      	sub	sp, #104	@ 0x68
 8013628:	af00      	add	r7, sp, #0
 801362a:	60f8      	str	r0, [r7, #12]
 801362c:	60b9      	str	r1, [r7, #8]
 801362e:	4613      	mov	r3, r2
 8013630:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d101      	bne.n	801363c <f_open+0x18>
 8013638:	2309      	movs	r3, #9
 801363a:	e1b7      	b.n	80139ac <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801363c:	79fb      	ldrb	r3, [r7, #7]
 801363e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013642:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013644:	79fa      	ldrb	r2, [r7, #7]
 8013646:	f107 0114 	add.w	r1, r7, #20
 801364a:	f107 0308 	add.w	r3, r7, #8
 801364e:	4618      	mov	r0, r3
 8013650:	f7ff fccc 	bl	8012fec <find_volume>
 8013654:	4603      	mov	r3, r0
 8013656:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801365a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801365e:	2b00      	cmp	r3, #0
 8013660:	f040 819b 	bne.w	801399a <f_open+0x376>
		dj.obj.fs = fs;
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013668:	68ba      	ldr	r2, [r7, #8]
 801366a:	f107 0318 	add.w	r3, r7, #24
 801366e:	4611      	mov	r1, r2
 8013670:	4618      	mov	r0, r3
 8013672:	f7ff fbab 	bl	8012dcc <follow_path>
 8013676:	4603      	mov	r3, r0
 8013678:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801367c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013680:	2b00      	cmp	r3, #0
 8013682:	d118      	bne.n	80136b6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013684:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013688:	b25b      	sxtb	r3, r3
 801368a:	2b00      	cmp	r3, #0
 801368c:	da03      	bge.n	8013696 <f_open+0x72>
				res = FR_INVALID_NAME;
 801368e:	2306      	movs	r3, #6
 8013690:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013694:	e00f      	b.n	80136b6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013696:	79fb      	ldrb	r3, [r7, #7]
 8013698:	2b01      	cmp	r3, #1
 801369a:	bf8c      	ite	hi
 801369c:	2301      	movhi	r3, #1
 801369e:	2300      	movls	r3, #0
 80136a0:	b2db      	uxtb	r3, r3
 80136a2:	461a      	mov	r2, r3
 80136a4:	f107 0318 	add.w	r3, r7, #24
 80136a8:	4611      	mov	r1, r2
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7fd ff22 	bl	80114f4 <chk_lock>
 80136b0:	4603      	mov	r3, r0
 80136b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80136b6:	79fb      	ldrb	r3, [r7, #7]
 80136b8:	f003 031c 	and.w	r3, r3, #28
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d07f      	beq.n	80137c0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80136c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d017      	beq.n	80136f8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80136c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80136cc:	2b04      	cmp	r3, #4
 80136ce:	d10e      	bne.n	80136ee <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80136d0:	f7fd ff6c 	bl	80115ac <enq_lock>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d006      	beq.n	80136e8 <f_open+0xc4>
 80136da:	f107 0318 	add.w	r3, r7, #24
 80136de:	4618      	mov	r0, r3
 80136e0:	f7ff f8c4 	bl	801286c <dir_register>
 80136e4:	4603      	mov	r3, r0
 80136e6:	e000      	b.n	80136ea <f_open+0xc6>
 80136e8:	2312      	movs	r3, #18
 80136ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80136ee:	79fb      	ldrb	r3, [r7, #7]
 80136f0:	f043 0308 	orr.w	r3, r3, #8
 80136f4:	71fb      	strb	r3, [r7, #7]
 80136f6:	e010      	b.n	801371a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80136f8:	7fbb      	ldrb	r3, [r7, #30]
 80136fa:	f003 0311 	and.w	r3, r3, #17
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d003      	beq.n	801370a <f_open+0xe6>
					res = FR_DENIED;
 8013702:	2307      	movs	r3, #7
 8013704:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013708:	e007      	b.n	801371a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801370a:	79fb      	ldrb	r3, [r7, #7]
 801370c:	f003 0304 	and.w	r3, r3, #4
 8013710:	2b00      	cmp	r3, #0
 8013712:	d002      	beq.n	801371a <f_open+0xf6>
 8013714:	2308      	movs	r3, #8
 8013716:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801371a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801371e:	2b00      	cmp	r3, #0
 8013720:	d168      	bne.n	80137f4 <f_open+0x1d0>
 8013722:	79fb      	ldrb	r3, [r7, #7]
 8013724:	f003 0308 	and.w	r3, r3, #8
 8013728:	2b00      	cmp	r3, #0
 801372a:	d063      	beq.n	80137f4 <f_open+0x1d0>
				dw = GET_FATTIME();
 801372c:	f7fd fb02 	bl	8010d34 <get_fattime>
 8013730:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013734:	330e      	adds	r3, #14
 8013736:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013738:	4618      	mov	r0, r3
 801373a:	f7fd fe30 	bl	801139e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801373e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013740:	3316      	adds	r3, #22
 8013742:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013744:	4618      	mov	r0, r3
 8013746:	f7fd fe2a 	bl	801139e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801374a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801374c:	330b      	adds	r3, #11
 801374e:	2220      	movs	r2, #32
 8013750:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013756:	4611      	mov	r1, r2
 8013758:	4618      	mov	r0, r3
 801375a:	f7fe fe00 	bl	801235e <ld_clust>
 801375e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013764:	2200      	movs	r2, #0
 8013766:	4618      	mov	r0, r3
 8013768:	f7fe fe18 	bl	801239c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801376c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801376e:	331c      	adds	r3, #28
 8013770:	2100      	movs	r1, #0
 8013772:	4618      	mov	r0, r3
 8013774:	f7fd fe13 	bl	801139e <st_dword>
					fs->wflag = 1;
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	2201      	movs	r2, #1
 801377c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801377e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013780:	2b00      	cmp	r3, #0
 8013782:	d037      	beq.n	80137f4 <f_open+0x1d0>
						dw = fs->winsect;
 8013784:	697b      	ldr	r3, [r7, #20]
 8013786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013788:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801378a:	f107 0318 	add.w	r3, r7, #24
 801378e:	2200      	movs	r2, #0
 8013790:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013792:	4618      	mov	r0, r3
 8013794:	f7fe fb08 	bl	8011da8 <remove_chain>
 8013798:	4603      	mov	r3, r0
 801379a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801379e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d126      	bne.n	80137f4 <f_open+0x1d0>
							res = move_window(fs, dw);
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7fe f852 	bl	8011854 <move_window>
 80137b0:	4603      	mov	r3, r0
 80137b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80137ba:	3a01      	subs	r2, #1
 80137bc:	615a      	str	r2, [r3, #20]
 80137be:	e019      	b.n	80137f4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80137c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d115      	bne.n	80137f4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80137c8:	7fbb      	ldrb	r3, [r7, #30]
 80137ca:	f003 0310 	and.w	r3, r3, #16
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d003      	beq.n	80137da <f_open+0x1b6>
					res = FR_NO_FILE;
 80137d2:	2304      	movs	r3, #4
 80137d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80137d8:	e00c      	b.n	80137f4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80137da:	79fb      	ldrb	r3, [r7, #7]
 80137dc:	f003 0302 	and.w	r3, r3, #2
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d007      	beq.n	80137f4 <f_open+0x1d0>
 80137e4:	7fbb      	ldrb	r3, [r7, #30]
 80137e6:	f003 0301 	and.w	r3, r3, #1
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d002      	beq.n	80137f4 <f_open+0x1d0>
						res = FR_DENIED;
 80137ee:	2307      	movs	r3, #7
 80137f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80137f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d126      	bne.n	801384a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80137fc:	79fb      	ldrb	r3, [r7, #7]
 80137fe:	f003 0308 	and.w	r3, r3, #8
 8013802:	2b00      	cmp	r3, #0
 8013804:	d003      	beq.n	801380e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8013806:	79fb      	ldrb	r3, [r7, #7]
 8013808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801380c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8013816:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801381c:	79fb      	ldrb	r3, [r7, #7]
 801381e:	2b01      	cmp	r3, #1
 8013820:	bf8c      	ite	hi
 8013822:	2301      	movhi	r3, #1
 8013824:	2300      	movls	r3, #0
 8013826:	b2db      	uxtb	r3, r3
 8013828:	461a      	mov	r2, r3
 801382a:	f107 0318 	add.w	r3, r7, #24
 801382e:	4611      	mov	r1, r2
 8013830:	4618      	mov	r0, r3
 8013832:	f7fd fedd 	bl	80115f0 <inc_lock>
 8013836:	4602      	mov	r2, r0
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	691b      	ldr	r3, [r3, #16]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d102      	bne.n	801384a <f_open+0x226>
 8013844:	2302      	movs	r3, #2
 8013846:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801384a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801384e:	2b00      	cmp	r3, #0
 8013850:	f040 80a3 	bne.w	801399a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013858:	4611      	mov	r1, r2
 801385a:	4618      	mov	r0, r3
 801385c:	f7fe fd7f 	bl	801235e <ld_clust>
 8013860:	4602      	mov	r2, r0
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013868:	331c      	adds	r3, #28
 801386a:	4618      	mov	r0, r3
 801386c:	f7fd fd59 	bl	8011322 <ld_dword>
 8013870:	4602      	mov	r2, r0
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	2200      	movs	r2, #0
 801387a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801387c:	697a      	ldr	r2, [r7, #20]
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	88da      	ldrh	r2, [r3, #6]
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	79fa      	ldrb	r2, [r7, #7]
 801388e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	2200      	movs	r2, #0
 8013894:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	2200      	movs	r2, #0
 801389a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	2200      	movs	r2, #0
 80138a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	3330      	adds	r3, #48	@ 0x30
 80138a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80138aa:	2100      	movs	r1, #0
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7fd fdc3 	bl	8011438 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80138b2:	79fb      	ldrb	r3, [r7, #7]
 80138b4:	f003 0320 	and.w	r3, r3, #32
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d06e      	beq.n	801399a <f_open+0x376>
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	68db      	ldr	r3, [r3, #12]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d06a      	beq.n	801399a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	68da      	ldr	r2, [r3, #12]
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80138cc:	697b      	ldr	r3, [r7, #20]
 80138ce:	895b      	ldrh	r3, [r3, #10]
 80138d0:	461a      	mov	r2, r3
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	899b      	ldrh	r3, [r3, #12]
 80138d6:	fb02 f303 	mul.w	r3, r2, r3
 80138da:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	689b      	ldr	r3, [r3, #8]
 80138e0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	68db      	ldr	r3, [r3, #12]
 80138e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80138e8:	e016      	b.n	8013918 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7fe f86d 	bl	80119ce <get_fat>
 80138f4:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80138f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80138f8:	2b01      	cmp	r3, #1
 80138fa:	d802      	bhi.n	8013902 <f_open+0x2de>
 80138fc:	2302      	movs	r3, #2
 80138fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013908:	d102      	bne.n	8013910 <f_open+0x2ec>
 801390a:	2301      	movs	r3, #1
 801390c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013910:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013914:	1ad3      	subs	r3, r2, r3
 8013916:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013918:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801391c:	2b00      	cmp	r3, #0
 801391e:	d103      	bne.n	8013928 <f_open+0x304>
 8013920:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013924:	429a      	cmp	r2, r3
 8013926:	d8e0      	bhi.n	80138ea <f_open+0x2c6>
				}
				fp->clust = clst;
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801392c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801392e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013932:	2b00      	cmp	r3, #0
 8013934:	d131      	bne.n	801399a <f_open+0x376>
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	899b      	ldrh	r3, [r3, #12]
 801393a:	461a      	mov	r2, r3
 801393c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801393e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013942:	fb01 f202 	mul.w	r2, r1, r2
 8013946:	1a9b      	subs	r3, r3, r2
 8013948:	2b00      	cmp	r3, #0
 801394a:	d026      	beq.n	801399a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013950:	4618      	mov	r0, r3
 8013952:	f7fe f81d 	bl	8011990 <clust2sect>
 8013956:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8013958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801395a:	2b00      	cmp	r3, #0
 801395c:	d103      	bne.n	8013966 <f_open+0x342>
						res = FR_INT_ERR;
 801395e:	2302      	movs	r3, #2
 8013960:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013964:	e019      	b.n	801399a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	899b      	ldrh	r3, [r3, #12]
 801396a:	461a      	mov	r2, r3
 801396c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801396e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013974:	441a      	add	r2, r3
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801397a:	697b      	ldr	r3, [r7, #20]
 801397c:	7858      	ldrb	r0, [r3, #1]
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	6a1a      	ldr	r2, [r3, #32]
 8013988:	2301      	movs	r3, #1
 801398a:	f7fd fc53 	bl	8011234 <disk_read>
 801398e:	4603      	mov	r3, r0
 8013990:	2b00      	cmp	r3, #0
 8013992:	d002      	beq.n	801399a <f_open+0x376>
 8013994:	2301      	movs	r3, #1
 8013996:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801399a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d002      	beq.n	80139a8 <f_open+0x384>
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	2200      	movs	r2, #0
 80139a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80139a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	3768      	adds	r7, #104	@ 0x68
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b08c      	sub	sp, #48	@ 0x30
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	60f8      	str	r0, [r7, #12]
 80139bc:	60b9      	str	r1, [r7, #8]
 80139be:	607a      	str	r2, [r7, #4]
 80139c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	2200      	movs	r2, #0
 80139ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	f107 0210 	add.w	r2, r7, #16
 80139d2:	4611      	mov	r1, r2
 80139d4:	4618      	mov	r0, r3
 80139d6:	f7ff fda9 	bl	801352c <validate>
 80139da:	4603      	mov	r3, r0
 80139dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80139e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d107      	bne.n	80139f8 <f_write+0x44>
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	7d5b      	ldrb	r3, [r3, #21]
 80139ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80139f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d002      	beq.n	80139fe <f_write+0x4a>
 80139f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80139fc:	e16a      	b.n	8013cd4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	7d1b      	ldrb	r3, [r3, #20]
 8013a02:	f003 0302 	and.w	r3, r3, #2
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d101      	bne.n	8013a0e <f_write+0x5a>
 8013a0a:	2307      	movs	r3, #7
 8013a0c:	e162      	b.n	8013cd4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	699a      	ldr	r2, [r3, #24]
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	441a      	add	r2, r3
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	699b      	ldr	r3, [r3, #24]
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	f080 814c 	bcs.w	8013cb8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	699b      	ldr	r3, [r3, #24]
 8013a24:	43db      	mvns	r3, r3
 8013a26:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013a28:	e146      	b.n	8013cb8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	699b      	ldr	r3, [r3, #24]
 8013a2e:	693a      	ldr	r2, [r7, #16]
 8013a30:	8992      	ldrh	r2, [r2, #12]
 8013a32:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a36:	fb01 f202 	mul.w	r2, r1, r2
 8013a3a:	1a9b      	subs	r3, r3, r2
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	f040 80f1 	bne.w	8013c24 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	699b      	ldr	r3, [r3, #24]
 8013a46:	693a      	ldr	r2, [r7, #16]
 8013a48:	8992      	ldrh	r2, [r2, #12]
 8013a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a4e:	693a      	ldr	r2, [r7, #16]
 8013a50:	8952      	ldrh	r2, [r2, #10]
 8013a52:	3a01      	subs	r2, #1
 8013a54:	4013      	ands	r3, r2
 8013a56:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013a58:	69bb      	ldr	r3, [r7, #24]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d143      	bne.n	8013ae6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	699b      	ldr	r3, [r3, #24]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d10c      	bne.n	8013a80 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	689b      	ldr	r3, [r3, #8]
 8013a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d11a      	bne.n	8013aa8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	2100      	movs	r1, #0
 8013a76:	4618      	mov	r0, r3
 8013a78:	f7fe f9fb 	bl	8011e72 <create_chain>
 8013a7c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013a7e:	e013      	b.n	8013aa8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d007      	beq.n	8013a98 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	699b      	ldr	r3, [r3, #24]
 8013a8c:	4619      	mov	r1, r3
 8013a8e:	68f8      	ldr	r0, [r7, #12]
 8013a90:	f7fe fa87 	bl	8011fa2 <clmt_clust>
 8013a94:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013a96:	e007      	b.n	8013aa8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013a98:	68fa      	ldr	r2, [r7, #12]
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	69db      	ldr	r3, [r3, #28]
 8013a9e:	4619      	mov	r1, r3
 8013aa0:	4610      	mov	r0, r2
 8013aa2:	f7fe f9e6 	bl	8011e72 <create_chain>
 8013aa6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	f000 8109 	beq.w	8013cc2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ab2:	2b01      	cmp	r3, #1
 8013ab4:	d104      	bne.n	8013ac0 <f_write+0x10c>
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2202      	movs	r2, #2
 8013aba:	755a      	strb	r2, [r3, #21]
 8013abc:	2302      	movs	r3, #2
 8013abe:	e109      	b.n	8013cd4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ac6:	d104      	bne.n	8013ad2 <f_write+0x11e>
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2201      	movs	r2, #1
 8013acc:	755a      	strb	r2, [r3, #21]
 8013ace:	2301      	movs	r3, #1
 8013ad0:	e100      	b.n	8013cd4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013ad6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	689b      	ldr	r3, [r3, #8]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d102      	bne.n	8013ae6 <f_write+0x132>
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013ae4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	7d1b      	ldrb	r3, [r3, #20]
 8013aea:	b25b      	sxtb	r3, r3
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	da18      	bge.n	8013b22 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013af0:	693b      	ldr	r3, [r7, #16]
 8013af2:	7858      	ldrb	r0, [r3, #1]
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	6a1a      	ldr	r2, [r3, #32]
 8013afe:	2301      	movs	r3, #1
 8013b00:	f7fd fbb8 	bl	8011274 <disk_write>
 8013b04:	4603      	mov	r3, r0
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d004      	beq.n	8013b14 <f_write+0x160>
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	2201      	movs	r2, #1
 8013b0e:	755a      	strb	r2, [r3, #21]
 8013b10:	2301      	movs	r3, #1
 8013b12:	e0df      	b.n	8013cd4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	7d1b      	ldrb	r3, [r3, #20]
 8013b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b1c:	b2da      	uxtb	r2, r3
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013b22:	693a      	ldr	r2, [r7, #16]
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	69db      	ldr	r3, [r3, #28]
 8013b28:	4619      	mov	r1, r3
 8013b2a:	4610      	mov	r0, r2
 8013b2c:	f7fd ff30 	bl	8011990 <clust2sect>
 8013b30:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d104      	bne.n	8013b42 <f_write+0x18e>
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2202      	movs	r2, #2
 8013b3c:	755a      	strb	r2, [r3, #21]
 8013b3e:	2302      	movs	r3, #2
 8013b40:	e0c8      	b.n	8013cd4 <f_write+0x320>
			sect += csect;
 8013b42:	697a      	ldr	r2, [r7, #20]
 8013b44:	69bb      	ldr	r3, [r7, #24]
 8013b46:	4413      	add	r3, r2
 8013b48:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	899b      	ldrh	r3, [r3, #12]
 8013b4e:	461a      	mov	r2, r3
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b56:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013b58:	6a3b      	ldr	r3, [r7, #32]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d043      	beq.n	8013be6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013b5e:	69ba      	ldr	r2, [r7, #24]
 8013b60:	6a3b      	ldr	r3, [r7, #32]
 8013b62:	4413      	add	r3, r2
 8013b64:	693a      	ldr	r2, [r7, #16]
 8013b66:	8952      	ldrh	r2, [r2, #10]
 8013b68:	4293      	cmp	r3, r2
 8013b6a:	d905      	bls.n	8013b78 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013b6c:	693b      	ldr	r3, [r7, #16]
 8013b6e:	895b      	ldrh	r3, [r3, #10]
 8013b70:	461a      	mov	r2, r3
 8013b72:	69bb      	ldr	r3, [r7, #24]
 8013b74:	1ad3      	subs	r3, r2, r3
 8013b76:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	7858      	ldrb	r0, [r3, #1]
 8013b7c:	6a3b      	ldr	r3, [r7, #32]
 8013b7e:	697a      	ldr	r2, [r7, #20]
 8013b80:	69f9      	ldr	r1, [r7, #28]
 8013b82:	f7fd fb77 	bl	8011274 <disk_write>
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d004      	beq.n	8013b96 <f_write+0x1e2>
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	2201      	movs	r2, #1
 8013b90:	755a      	strb	r2, [r3, #21]
 8013b92:	2301      	movs	r3, #1
 8013b94:	e09e      	b.n	8013cd4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	6a1a      	ldr	r2, [r3, #32]
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	1ad3      	subs	r3, r2, r3
 8013b9e:	6a3a      	ldr	r2, [r7, #32]
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	d918      	bls.n	8013bd6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	6a1a      	ldr	r2, [r3, #32]
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	1ad3      	subs	r3, r2, r3
 8013bb2:	693a      	ldr	r2, [r7, #16]
 8013bb4:	8992      	ldrh	r2, [r2, #12]
 8013bb6:	fb02 f303 	mul.w	r3, r2, r3
 8013bba:	69fa      	ldr	r2, [r7, #28]
 8013bbc:	18d1      	adds	r1, r2, r3
 8013bbe:	693b      	ldr	r3, [r7, #16]
 8013bc0:	899b      	ldrh	r3, [r3, #12]
 8013bc2:	461a      	mov	r2, r3
 8013bc4:	f7fd fc17 	bl	80113f6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	7d1b      	ldrb	r3, [r3, #20]
 8013bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013bd0:	b2da      	uxtb	r2, r3
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013bd6:	693b      	ldr	r3, [r7, #16]
 8013bd8:	899b      	ldrh	r3, [r3, #12]
 8013bda:	461a      	mov	r2, r3
 8013bdc:	6a3b      	ldr	r3, [r7, #32]
 8013bde:	fb02 f303 	mul.w	r3, r2, r3
 8013be2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013be4:	e04b      	b.n	8013c7e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	6a1b      	ldr	r3, [r3, #32]
 8013bea:	697a      	ldr	r2, [r7, #20]
 8013bec:	429a      	cmp	r2, r3
 8013bee:	d016      	beq.n	8013c1e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	699a      	ldr	r2, [r3, #24]
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013bf8:	429a      	cmp	r2, r3
 8013bfa:	d210      	bcs.n	8013c1e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013bfc:	693b      	ldr	r3, [r7, #16]
 8013bfe:	7858      	ldrb	r0, [r3, #1]
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013c06:	2301      	movs	r3, #1
 8013c08:	697a      	ldr	r2, [r7, #20]
 8013c0a:	f7fd fb13 	bl	8011234 <disk_read>
 8013c0e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d004      	beq.n	8013c1e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	2201      	movs	r2, #1
 8013c18:	755a      	strb	r2, [r3, #21]
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	e05a      	b.n	8013cd4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	697a      	ldr	r2, [r7, #20]
 8013c22:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	899b      	ldrh	r3, [r3, #12]
 8013c28:	4618      	mov	r0, r3
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	699b      	ldr	r3, [r3, #24]
 8013c2e:	693a      	ldr	r2, [r7, #16]
 8013c30:	8992      	ldrh	r2, [r2, #12]
 8013c32:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c36:	fb01 f202 	mul.w	r2, r1, r2
 8013c3a:	1a9b      	subs	r3, r3, r2
 8013c3c:	1ac3      	subs	r3, r0, r3
 8013c3e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	429a      	cmp	r2, r3
 8013c46:	d901      	bls.n	8013c4c <f_write+0x298>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	699b      	ldr	r3, [r3, #24]
 8013c56:	693a      	ldr	r2, [r7, #16]
 8013c58:	8992      	ldrh	r2, [r2, #12]
 8013c5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8013c5e:	fb00 f202 	mul.w	r2, r0, r2
 8013c62:	1a9b      	subs	r3, r3, r2
 8013c64:	440b      	add	r3, r1
 8013c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c68:	69f9      	ldr	r1, [r7, #28]
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7fd fbc3 	bl	80113f6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	7d1b      	ldrb	r3, [r3, #20]
 8013c74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013c78:	b2da      	uxtb	r2, r3
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013c7e:	69fa      	ldr	r2, [r7, #28]
 8013c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c82:	4413      	add	r3, r2
 8013c84:	61fb      	str	r3, [r7, #28]
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	699a      	ldr	r2, [r3, #24]
 8013c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c8c:	441a      	add	r2, r3
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	619a      	str	r2, [r3, #24]
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	68da      	ldr	r2, [r3, #12]
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	699b      	ldr	r3, [r3, #24]
 8013c9a:	429a      	cmp	r2, r3
 8013c9c:	bf38      	it	cc
 8013c9e:	461a      	movcc	r2, r3
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	60da      	str	r2, [r3, #12]
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	681a      	ldr	r2, [r3, #0]
 8013ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013caa:	441a      	add	r2, r3
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	601a      	str	r2, [r3, #0]
 8013cb0:	687a      	ldr	r2, [r7, #4]
 8013cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cb4:	1ad3      	subs	r3, r2, r3
 8013cb6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	f47f aeb5 	bne.w	8013a2a <f_write+0x76>
 8013cc0:	e000      	b.n	8013cc4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013cc2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	7d1b      	ldrb	r3, [r3, #20]
 8013cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ccc:	b2da      	uxtb	r2, r3
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013cd2:	2300      	movs	r3, #0
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3730      	adds	r7, #48	@ 0x30
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}

08013cdc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b086      	sub	sp, #24
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f107 0208 	add.w	r2, r7, #8
 8013cea:	4611      	mov	r1, r2
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7ff fc1d 	bl	801352c <validate>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013cf6:	7dfb      	ldrb	r3, [r7, #23]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d168      	bne.n	8013dce <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	7d1b      	ldrb	r3, [r3, #20]
 8013d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d062      	beq.n	8013dce <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	7d1b      	ldrb	r3, [r3, #20]
 8013d0c:	b25b      	sxtb	r3, r3
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	da15      	bge.n	8013d3e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	7858      	ldrb	r0, [r3, #1]
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	6a1a      	ldr	r2, [r3, #32]
 8013d20:	2301      	movs	r3, #1
 8013d22:	f7fd faa7 	bl	8011274 <disk_write>
 8013d26:	4603      	mov	r3, r0
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d001      	beq.n	8013d30 <f_sync+0x54>
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	e04f      	b.n	8013dd0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	7d1b      	ldrb	r3, [r3, #20]
 8013d34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013d38:	b2da      	uxtb	r2, r3
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013d3e:	f7fc fff9 	bl	8010d34 <get_fattime>
 8013d42:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013d44:	68ba      	ldr	r2, [r7, #8]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d4a:	4619      	mov	r1, r3
 8013d4c:	4610      	mov	r0, r2
 8013d4e:	f7fd fd81 	bl	8011854 <move_window>
 8013d52:	4603      	mov	r3, r0
 8013d54:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013d56:	7dfb      	ldrb	r3, [r7, #23]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d138      	bne.n	8013dce <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d60:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	330b      	adds	r3, #11
 8013d66:	781a      	ldrb	r2, [r3, #0]
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	330b      	adds	r3, #11
 8013d6c:	f042 0220 	orr.w	r2, r2, #32
 8013d70:	b2d2      	uxtb	r2, r2
 8013d72:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	6818      	ldr	r0, [r3, #0]
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	689b      	ldr	r3, [r3, #8]
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	68f9      	ldr	r1, [r7, #12]
 8013d80:	f7fe fb0c 	bl	801239c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	f103 021c 	add.w	r2, r3, #28
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	4619      	mov	r1, r3
 8013d90:	4610      	mov	r0, r2
 8013d92:	f7fd fb04 	bl	801139e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	3316      	adds	r3, #22
 8013d9a:	6939      	ldr	r1, [r7, #16]
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7fd fafe 	bl	801139e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	3312      	adds	r3, #18
 8013da6:	2100      	movs	r1, #0
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7fd fadd 	bl	8011368 <st_word>
					fs->wflag = 1;
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	2201      	movs	r2, #1
 8013db2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7fd fd7a 	bl	80118b0 <sync_fs>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	7d1b      	ldrb	r3, [r3, #20]
 8013dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013dc8:	b2da      	uxtb	r2, r3
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3718      	adds	r7, #24
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}

08013dd8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b084      	sub	sp, #16
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	f7ff ff7b 	bl	8013cdc <f_sync>
 8013de6:	4603      	mov	r3, r0
 8013de8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013dea:	7bfb      	ldrb	r3, [r7, #15]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d118      	bne.n	8013e22 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f107 0208 	add.w	r2, r7, #8
 8013df6:	4611      	mov	r1, r2
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7ff fb97 	bl	801352c <validate>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013e02:	7bfb      	ldrb	r3, [r7, #15]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d10c      	bne.n	8013e22 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	691b      	ldr	r3, [r3, #16]
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f7fd fc7d 	bl	801170c <dec_lock>
 8013e12:	4603      	mov	r3, r0
 8013e14:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013e16:	7bfb      	ldrb	r3, [r7, #15]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d102      	bne.n	8013e22 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3710      	adds	r7, #16
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}

08013e2c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b092      	sub	sp, #72	@ 0x48
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013e38:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8013e3c:	f107 030c 	add.w	r3, r7, #12
 8013e40:	2200      	movs	r2, #0
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7ff f8d2 	bl	8012fec <find_volume>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8013e4e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	f040 8099 	bne.w	8013f8a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8013e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8013e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e60:	699a      	ldr	r2, [r3, #24]
 8013e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e64:	69db      	ldr	r3, [r3, #28]
 8013e66:	3b02      	subs	r3, #2
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	d804      	bhi.n	8013e76 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8013e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e6e:	699a      	ldr	r2, [r3, #24]
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	601a      	str	r2, [r3, #0]
 8013e74:	e089      	b.n	8013f8a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8013e76:	2300      	movs	r3, #0
 8013e78:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8013e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e7c:	781b      	ldrb	r3, [r3, #0]
 8013e7e:	2b01      	cmp	r3, #1
 8013e80:	d128      	bne.n	8013ed4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8013e82:	2302      	movs	r3, #2
 8013e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e88:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8013e8a:	f107 0314 	add.w	r3, r7, #20
 8013e8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7fd fd9c 	bl	80119ce <get_fat>
 8013e96:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8013e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e9e:	d103      	bne.n	8013ea8 <f_getfree+0x7c>
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013ea6:	e063      	b.n	8013f70 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8013ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eaa:	2b01      	cmp	r3, #1
 8013eac:	d103      	bne.n	8013eb6 <f_getfree+0x8a>
 8013eae:	2302      	movs	r3, #2
 8013eb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013eb4:	e05c      	b.n	8013f70 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8013eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d102      	bne.n	8013ec2 <f_getfree+0x96>
 8013ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ebe:	3301      	adds	r3, #1
 8013ec0:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8013ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ec4:	3301      	adds	r3, #1
 8013ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eca:	69db      	ldr	r3, [r3, #28]
 8013ecc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013ece:	429a      	cmp	r2, r3
 8013ed0:	d3db      	bcc.n	8013e8a <f_getfree+0x5e>
 8013ed2:	e04d      	b.n	8013f70 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8013ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ed6:	69db      	ldr	r3, [r3, #28]
 8013ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ede:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8013ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d113      	bne.n	8013f16 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8013eee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ef2:	1c5a      	adds	r2, r3, #1
 8013ef4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	f7fd fcac 	bl	8011854 <move_window>
 8013efc:	4603      	mov	r3, r0
 8013efe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8013f02:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d131      	bne.n	8013f6e <f_getfree+0x142>
							p = fs->win;
 8013f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f0c:	3338      	adds	r3, #56	@ 0x38
 8013f0e:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8013f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f12:	899b      	ldrh	r3, [r3, #12]
 8013f14:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8013f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	2b02      	cmp	r3, #2
 8013f1c:	d10f      	bne.n	8013f3e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8013f1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013f20:	f7fd f9e6 	bl	80112f0 <ld_word>
 8013f24:	4603      	mov	r3, r0
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d102      	bne.n	8013f30 <f_getfree+0x104>
 8013f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013f2c:	3301      	adds	r3, #1
 8013f2e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8013f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f32:	3302      	adds	r3, #2
 8013f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8013f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f38:	3b02      	subs	r3, #2
 8013f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f3c:	e010      	b.n	8013f60 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8013f3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013f40:	f7fd f9ef 	bl	8011322 <ld_dword>
 8013f44:	4603      	mov	r3, r0
 8013f46:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d102      	bne.n	8013f54 <f_getfree+0x128>
 8013f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013f50:	3301      	adds	r3, #1
 8013f52:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8013f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f56:	3304      	adds	r3, #4
 8013f58:	633b      	str	r3, [r7, #48]	@ 0x30
 8013f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f5c:	3b04      	subs	r3, #4
 8013f5e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8013f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f62:	3b01      	subs	r3, #1
 8013f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d1bd      	bne.n	8013ee8 <f_getfree+0xbc>
 8013f6c:	e000      	b.n	8013f70 <f_getfree+0x144>
							if (res != FR_OK) break;
 8013f6e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013f74:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8013f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013f7a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8013f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f7e:	791a      	ldrb	r2, [r3, #4]
 8013f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f82:	f042 0201 	orr.w	r2, r2, #1
 8013f86:	b2d2      	uxtb	r2, r2
 8013f88:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8013f8a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3748      	adds	r7, #72	@ 0x48
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
	...

08013f98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b087      	sub	sp, #28
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	60f8      	str	r0, [r7, #12]
 8013fa0:	60b9      	str	r1, [r7, #8]
 8013fa2:	4613      	mov	r3, r2
 8013fa4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013faa:	2300      	movs	r3, #0
 8013fac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013fae:	4b1f      	ldr	r3, [pc, #124]	@ (801402c <FATFS_LinkDriverEx+0x94>)
 8013fb0:	7a5b      	ldrb	r3, [r3, #9]
 8013fb2:	b2db      	uxtb	r3, r3
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d131      	bne.n	801401c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013fb8:	4b1c      	ldr	r3, [pc, #112]	@ (801402c <FATFS_LinkDriverEx+0x94>)
 8013fba:	7a5b      	ldrb	r3, [r3, #9]
 8013fbc:	b2db      	uxtb	r3, r3
 8013fbe:	461a      	mov	r2, r3
 8013fc0:	4b1a      	ldr	r3, [pc, #104]	@ (801402c <FATFS_LinkDriverEx+0x94>)
 8013fc2:	2100      	movs	r1, #0
 8013fc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013fc6:	4b19      	ldr	r3, [pc, #100]	@ (801402c <FATFS_LinkDriverEx+0x94>)
 8013fc8:	7a5b      	ldrb	r3, [r3, #9]
 8013fca:	b2db      	uxtb	r3, r3
 8013fcc:	4a17      	ldr	r2, [pc, #92]	@ (801402c <FATFS_LinkDriverEx+0x94>)
 8013fce:	009b      	lsls	r3, r3, #2
 8013fd0:	4413      	add	r3, r2
 8013fd2:	68fa      	ldr	r2, [r7, #12]
 8013fd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013fd6:	4b15      	ldr	r3, [pc, #84]	@ (801402c <FATFS_LinkDriverEx+0x94>)
 8013fd8:	7a5b      	ldrb	r3, [r3, #9]
 8013fda:	b2db      	uxtb	r3, r3
 8013fdc:	461a      	mov	r2, r3
 8013fde:	4b13      	ldr	r3, [pc, #76]	@ (801402c <FATFS_LinkDriverEx+0x94>)
 8013fe0:	4413      	add	r3, r2
 8013fe2:	79fa      	ldrb	r2, [r7, #7]
 8013fe4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013fe6:	4b11      	ldr	r3, [pc, #68]	@ (801402c <FATFS_LinkDriverEx+0x94>)
 8013fe8:	7a5b      	ldrb	r3, [r3, #9]
 8013fea:	b2db      	uxtb	r3, r3
 8013fec:	1c5a      	adds	r2, r3, #1
 8013fee:	b2d1      	uxtb	r1, r2
 8013ff0:	4a0e      	ldr	r2, [pc, #56]	@ (801402c <FATFS_LinkDriverEx+0x94>)
 8013ff2:	7251      	strb	r1, [r2, #9]
 8013ff4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013ff6:	7dbb      	ldrb	r3, [r7, #22]
 8013ff8:	3330      	adds	r3, #48	@ 0x30
 8013ffa:	b2da      	uxtb	r2, r3
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	3301      	adds	r3, #1
 8014004:	223a      	movs	r2, #58	@ 0x3a
 8014006:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	3302      	adds	r3, #2
 801400c:	222f      	movs	r2, #47	@ 0x2f
 801400e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	3303      	adds	r3, #3
 8014014:	2200      	movs	r2, #0
 8014016:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014018:	2300      	movs	r3, #0
 801401a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801401c:	7dfb      	ldrb	r3, [r7, #23]
}
 801401e:	4618      	mov	r0, r3
 8014020:	371c      	adds	r7, #28
 8014022:	46bd      	mov	sp, r7
 8014024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014028:	4770      	bx	lr
 801402a:	bf00      	nop
 801402c:	24001a5c 	.word	0x24001a5c

08014030 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
 8014038:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801403a:	2200      	movs	r2, #0
 801403c:	6839      	ldr	r1, [r7, #0]
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f7ff ffaa 	bl	8013f98 <FATFS_LinkDriverEx>
 8014044:	4603      	mov	r3, r0
}
 8014046:	4618      	mov	r0, r3
 8014048:	3708      	adds	r7, #8
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}
	...

08014050 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8014050:	b480      	push	{r7}
 8014052:	b085      	sub	sp, #20
 8014054:	af00      	add	r7, sp, #0
 8014056:	4603      	mov	r3, r0
 8014058:	6039      	str	r1, [r7, #0]
 801405a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801405c:	88fb      	ldrh	r3, [r7, #6]
 801405e:	2b7f      	cmp	r3, #127	@ 0x7f
 8014060:	d802      	bhi.n	8014068 <ff_convert+0x18>
		c = chr;
 8014062:	88fb      	ldrh	r3, [r7, #6]
 8014064:	81fb      	strh	r3, [r7, #14]
 8014066:	e025      	b.n	80140b4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d00b      	beq.n	8014086 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801406e:	88fb      	ldrh	r3, [r7, #6]
 8014070:	2bff      	cmp	r3, #255	@ 0xff
 8014072:	d805      	bhi.n	8014080 <ff_convert+0x30>
 8014074:	88fb      	ldrh	r3, [r7, #6]
 8014076:	3b80      	subs	r3, #128	@ 0x80
 8014078:	4a12      	ldr	r2, [pc, #72]	@ (80140c4 <ff_convert+0x74>)
 801407a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801407e:	e000      	b.n	8014082 <ff_convert+0x32>
 8014080:	2300      	movs	r3, #0
 8014082:	81fb      	strh	r3, [r7, #14]
 8014084:	e016      	b.n	80140b4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8014086:	2300      	movs	r3, #0
 8014088:	81fb      	strh	r3, [r7, #14]
 801408a:	e009      	b.n	80140a0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801408c:	89fb      	ldrh	r3, [r7, #14]
 801408e:	4a0d      	ldr	r2, [pc, #52]	@ (80140c4 <ff_convert+0x74>)
 8014090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014094:	88fa      	ldrh	r2, [r7, #6]
 8014096:	429a      	cmp	r2, r3
 8014098:	d006      	beq.n	80140a8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801409a:	89fb      	ldrh	r3, [r7, #14]
 801409c:	3301      	adds	r3, #1
 801409e:	81fb      	strh	r3, [r7, #14]
 80140a0:	89fb      	ldrh	r3, [r7, #14]
 80140a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80140a4:	d9f2      	bls.n	801408c <ff_convert+0x3c>
 80140a6:	e000      	b.n	80140aa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80140a8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80140aa:	89fb      	ldrh	r3, [r7, #14]
 80140ac:	3380      	adds	r3, #128	@ 0x80
 80140ae:	b29b      	uxth	r3, r3
 80140b0:	b2db      	uxtb	r3, r3
 80140b2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80140b4:	89fb      	ldrh	r3, [r7, #14]
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3714      	adds	r7, #20
 80140ba:	46bd      	mov	sp, r7
 80140bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c0:	4770      	bx	lr
 80140c2:	bf00      	nop
 80140c4:	080150a8 	.word	0x080150a8

080140c8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80140c8:	b480      	push	{r7}
 80140ca:	b087      	sub	sp, #28
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	4603      	mov	r3, r0
 80140d0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80140d2:	88fb      	ldrh	r3, [r7, #6]
 80140d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80140d8:	d201      	bcs.n	80140de <ff_wtoupper+0x16>
 80140da:	4b3e      	ldr	r3, [pc, #248]	@ (80141d4 <ff_wtoupper+0x10c>)
 80140dc:	e000      	b.n	80140e0 <ff_wtoupper+0x18>
 80140de:	4b3e      	ldr	r3, [pc, #248]	@ (80141d8 <ff_wtoupper+0x110>)
 80140e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80140e2:	697b      	ldr	r3, [r7, #20]
 80140e4:	1c9a      	adds	r2, r3, #2
 80140e6:	617a      	str	r2, [r7, #20]
 80140e8:	881b      	ldrh	r3, [r3, #0]
 80140ea:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80140ec:	8a7b      	ldrh	r3, [r7, #18]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d068      	beq.n	80141c4 <ff_wtoupper+0xfc>
 80140f2:	88fa      	ldrh	r2, [r7, #6]
 80140f4:	8a7b      	ldrh	r3, [r7, #18]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d364      	bcc.n	80141c4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	1c9a      	adds	r2, r3, #2
 80140fe:	617a      	str	r2, [r7, #20]
 8014100:	881b      	ldrh	r3, [r3, #0]
 8014102:	823b      	strh	r3, [r7, #16]
 8014104:	8a3b      	ldrh	r3, [r7, #16]
 8014106:	0a1b      	lsrs	r3, r3, #8
 8014108:	81fb      	strh	r3, [r7, #14]
 801410a:	8a3b      	ldrh	r3, [r7, #16]
 801410c:	b2db      	uxtb	r3, r3
 801410e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8014110:	88fa      	ldrh	r2, [r7, #6]
 8014112:	8a79      	ldrh	r1, [r7, #18]
 8014114:	8a3b      	ldrh	r3, [r7, #16]
 8014116:	440b      	add	r3, r1
 8014118:	429a      	cmp	r2, r3
 801411a:	da49      	bge.n	80141b0 <ff_wtoupper+0xe8>
			switch (cmd) {
 801411c:	89fb      	ldrh	r3, [r7, #14]
 801411e:	2b08      	cmp	r3, #8
 8014120:	d84f      	bhi.n	80141c2 <ff_wtoupper+0xfa>
 8014122:	a201      	add	r2, pc, #4	@ (adr r2, 8014128 <ff_wtoupper+0x60>)
 8014124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014128:	0801414d 	.word	0x0801414d
 801412c:	0801415f 	.word	0x0801415f
 8014130:	08014175 	.word	0x08014175
 8014134:	0801417d 	.word	0x0801417d
 8014138:	08014185 	.word	0x08014185
 801413c:	0801418d 	.word	0x0801418d
 8014140:	08014195 	.word	0x08014195
 8014144:	0801419d 	.word	0x0801419d
 8014148:	080141a5 	.word	0x080141a5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801414c:	88fa      	ldrh	r2, [r7, #6]
 801414e:	8a7b      	ldrh	r3, [r7, #18]
 8014150:	1ad3      	subs	r3, r2, r3
 8014152:	005b      	lsls	r3, r3, #1
 8014154:	697a      	ldr	r2, [r7, #20]
 8014156:	4413      	add	r3, r2
 8014158:	881b      	ldrh	r3, [r3, #0]
 801415a:	80fb      	strh	r3, [r7, #6]
 801415c:	e027      	b.n	80141ae <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801415e:	88fa      	ldrh	r2, [r7, #6]
 8014160:	8a7b      	ldrh	r3, [r7, #18]
 8014162:	1ad3      	subs	r3, r2, r3
 8014164:	b29b      	uxth	r3, r3
 8014166:	f003 0301 	and.w	r3, r3, #1
 801416a:	b29b      	uxth	r3, r3
 801416c:	88fa      	ldrh	r2, [r7, #6]
 801416e:	1ad3      	subs	r3, r2, r3
 8014170:	80fb      	strh	r3, [r7, #6]
 8014172:	e01c      	b.n	80141ae <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014174:	88fb      	ldrh	r3, [r7, #6]
 8014176:	3b10      	subs	r3, #16
 8014178:	80fb      	strh	r3, [r7, #6]
 801417a:	e018      	b.n	80141ae <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801417c:	88fb      	ldrh	r3, [r7, #6]
 801417e:	3b20      	subs	r3, #32
 8014180:	80fb      	strh	r3, [r7, #6]
 8014182:	e014      	b.n	80141ae <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014184:	88fb      	ldrh	r3, [r7, #6]
 8014186:	3b30      	subs	r3, #48	@ 0x30
 8014188:	80fb      	strh	r3, [r7, #6]
 801418a:	e010      	b.n	80141ae <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801418c:	88fb      	ldrh	r3, [r7, #6]
 801418e:	3b1a      	subs	r3, #26
 8014190:	80fb      	strh	r3, [r7, #6]
 8014192:	e00c      	b.n	80141ae <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8014194:	88fb      	ldrh	r3, [r7, #6]
 8014196:	3308      	adds	r3, #8
 8014198:	80fb      	strh	r3, [r7, #6]
 801419a:	e008      	b.n	80141ae <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801419c:	88fb      	ldrh	r3, [r7, #6]
 801419e:	3b50      	subs	r3, #80	@ 0x50
 80141a0:	80fb      	strh	r3, [r7, #6]
 80141a2:	e004      	b.n	80141ae <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80141a4:	88fb      	ldrh	r3, [r7, #6]
 80141a6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80141aa:	80fb      	strh	r3, [r7, #6]
 80141ac:	bf00      	nop
			}
			break;
 80141ae:	e008      	b.n	80141c2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80141b0:	89fb      	ldrh	r3, [r7, #14]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d195      	bne.n	80140e2 <ff_wtoupper+0x1a>
 80141b6:	8a3b      	ldrh	r3, [r7, #16]
 80141b8:	005b      	lsls	r3, r3, #1
 80141ba:	697a      	ldr	r2, [r7, #20]
 80141bc:	4413      	add	r3, r2
 80141be:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80141c0:	e78f      	b.n	80140e2 <ff_wtoupper+0x1a>
			break;
 80141c2:	bf00      	nop
	}

	return chr;
 80141c4:	88fb      	ldrh	r3, [r7, #6]
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	371c      	adds	r7, #28
 80141ca:	46bd      	mov	sp, r7
 80141cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d0:	4770      	bx	lr
 80141d2:	bf00      	nop
 80141d4:	080151a8 	.word	0x080151a8
 80141d8:	0801539c 	.word	0x0801539c

080141dc <siprintf>:
 80141dc:	b40e      	push	{r1, r2, r3}
 80141de:	b510      	push	{r4, lr}
 80141e0:	b09d      	sub	sp, #116	@ 0x74
 80141e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80141e4:	9002      	str	r0, [sp, #8]
 80141e6:	9006      	str	r0, [sp, #24]
 80141e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80141ec:	480a      	ldr	r0, [pc, #40]	@ (8014218 <siprintf+0x3c>)
 80141ee:	9107      	str	r1, [sp, #28]
 80141f0:	9104      	str	r1, [sp, #16]
 80141f2:	490a      	ldr	r1, [pc, #40]	@ (801421c <siprintf+0x40>)
 80141f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80141f8:	9105      	str	r1, [sp, #20]
 80141fa:	2400      	movs	r4, #0
 80141fc:	a902      	add	r1, sp, #8
 80141fe:	6800      	ldr	r0, [r0, #0]
 8014200:	9301      	str	r3, [sp, #4]
 8014202:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014204:	f000 f9a2 	bl	801454c <_svfiprintf_r>
 8014208:	9b02      	ldr	r3, [sp, #8]
 801420a:	701c      	strb	r4, [r3, #0]
 801420c:	b01d      	add	sp, #116	@ 0x74
 801420e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014212:	b003      	add	sp, #12
 8014214:	4770      	bx	lr
 8014216:	bf00      	nop
 8014218:	2400001c 	.word	0x2400001c
 801421c:	ffff0208 	.word	0xffff0208

08014220 <memset>:
 8014220:	4402      	add	r2, r0
 8014222:	4603      	mov	r3, r0
 8014224:	4293      	cmp	r3, r2
 8014226:	d100      	bne.n	801422a <memset+0xa>
 8014228:	4770      	bx	lr
 801422a:	f803 1b01 	strb.w	r1, [r3], #1
 801422e:	e7f9      	b.n	8014224 <memset+0x4>

08014230 <__errno>:
 8014230:	4b01      	ldr	r3, [pc, #4]	@ (8014238 <__errno+0x8>)
 8014232:	6818      	ldr	r0, [r3, #0]
 8014234:	4770      	bx	lr
 8014236:	bf00      	nop
 8014238:	2400001c 	.word	0x2400001c

0801423c <__libc_init_array>:
 801423c:	b570      	push	{r4, r5, r6, lr}
 801423e:	4d0d      	ldr	r5, [pc, #52]	@ (8014274 <__libc_init_array+0x38>)
 8014240:	4c0d      	ldr	r4, [pc, #52]	@ (8014278 <__libc_init_array+0x3c>)
 8014242:	1b64      	subs	r4, r4, r5
 8014244:	10a4      	asrs	r4, r4, #2
 8014246:	2600      	movs	r6, #0
 8014248:	42a6      	cmp	r6, r4
 801424a:	d109      	bne.n	8014260 <__libc_init_array+0x24>
 801424c:	4d0b      	ldr	r5, [pc, #44]	@ (801427c <__libc_init_array+0x40>)
 801424e:	4c0c      	ldr	r4, [pc, #48]	@ (8014280 <__libc_init_array+0x44>)
 8014250:	f000 fc64 	bl	8014b1c <_init>
 8014254:	1b64      	subs	r4, r4, r5
 8014256:	10a4      	asrs	r4, r4, #2
 8014258:	2600      	movs	r6, #0
 801425a:	42a6      	cmp	r6, r4
 801425c:	d105      	bne.n	801426a <__libc_init_array+0x2e>
 801425e:	bd70      	pop	{r4, r5, r6, pc}
 8014260:	f855 3b04 	ldr.w	r3, [r5], #4
 8014264:	4798      	blx	r3
 8014266:	3601      	adds	r6, #1
 8014268:	e7ee      	b.n	8014248 <__libc_init_array+0xc>
 801426a:	f855 3b04 	ldr.w	r3, [r5], #4
 801426e:	4798      	blx	r3
 8014270:	3601      	adds	r6, #1
 8014272:	e7f2      	b.n	801425a <__libc_init_array+0x1e>
 8014274:	08015494 	.word	0x08015494
 8014278:	08015494 	.word	0x08015494
 801427c:	08015494 	.word	0x08015494
 8014280:	08015498 	.word	0x08015498

08014284 <__retarget_lock_acquire_recursive>:
 8014284:	4770      	bx	lr

08014286 <__retarget_lock_release_recursive>:
 8014286:	4770      	bx	lr

08014288 <memcpy>:
 8014288:	440a      	add	r2, r1
 801428a:	4291      	cmp	r1, r2
 801428c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014290:	d100      	bne.n	8014294 <memcpy+0xc>
 8014292:	4770      	bx	lr
 8014294:	b510      	push	{r4, lr}
 8014296:	f811 4b01 	ldrb.w	r4, [r1], #1
 801429a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801429e:	4291      	cmp	r1, r2
 80142a0:	d1f9      	bne.n	8014296 <memcpy+0xe>
 80142a2:	bd10      	pop	{r4, pc}

080142a4 <_free_r>:
 80142a4:	b538      	push	{r3, r4, r5, lr}
 80142a6:	4605      	mov	r5, r0
 80142a8:	2900      	cmp	r1, #0
 80142aa:	d041      	beq.n	8014330 <_free_r+0x8c>
 80142ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142b0:	1f0c      	subs	r4, r1, #4
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	bfb8      	it	lt
 80142b6:	18e4      	addlt	r4, r4, r3
 80142b8:	f000 f8e0 	bl	801447c <__malloc_lock>
 80142bc:	4a1d      	ldr	r2, [pc, #116]	@ (8014334 <_free_r+0x90>)
 80142be:	6813      	ldr	r3, [r2, #0]
 80142c0:	b933      	cbnz	r3, 80142d0 <_free_r+0x2c>
 80142c2:	6063      	str	r3, [r4, #4]
 80142c4:	6014      	str	r4, [r2, #0]
 80142c6:	4628      	mov	r0, r5
 80142c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80142cc:	f000 b8dc 	b.w	8014488 <__malloc_unlock>
 80142d0:	42a3      	cmp	r3, r4
 80142d2:	d908      	bls.n	80142e6 <_free_r+0x42>
 80142d4:	6820      	ldr	r0, [r4, #0]
 80142d6:	1821      	adds	r1, r4, r0
 80142d8:	428b      	cmp	r3, r1
 80142da:	bf01      	itttt	eq
 80142dc:	6819      	ldreq	r1, [r3, #0]
 80142de:	685b      	ldreq	r3, [r3, #4]
 80142e0:	1809      	addeq	r1, r1, r0
 80142e2:	6021      	streq	r1, [r4, #0]
 80142e4:	e7ed      	b.n	80142c2 <_free_r+0x1e>
 80142e6:	461a      	mov	r2, r3
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	b10b      	cbz	r3, 80142f0 <_free_r+0x4c>
 80142ec:	42a3      	cmp	r3, r4
 80142ee:	d9fa      	bls.n	80142e6 <_free_r+0x42>
 80142f0:	6811      	ldr	r1, [r2, #0]
 80142f2:	1850      	adds	r0, r2, r1
 80142f4:	42a0      	cmp	r0, r4
 80142f6:	d10b      	bne.n	8014310 <_free_r+0x6c>
 80142f8:	6820      	ldr	r0, [r4, #0]
 80142fa:	4401      	add	r1, r0
 80142fc:	1850      	adds	r0, r2, r1
 80142fe:	4283      	cmp	r3, r0
 8014300:	6011      	str	r1, [r2, #0]
 8014302:	d1e0      	bne.n	80142c6 <_free_r+0x22>
 8014304:	6818      	ldr	r0, [r3, #0]
 8014306:	685b      	ldr	r3, [r3, #4]
 8014308:	6053      	str	r3, [r2, #4]
 801430a:	4408      	add	r0, r1
 801430c:	6010      	str	r0, [r2, #0]
 801430e:	e7da      	b.n	80142c6 <_free_r+0x22>
 8014310:	d902      	bls.n	8014318 <_free_r+0x74>
 8014312:	230c      	movs	r3, #12
 8014314:	602b      	str	r3, [r5, #0]
 8014316:	e7d6      	b.n	80142c6 <_free_r+0x22>
 8014318:	6820      	ldr	r0, [r4, #0]
 801431a:	1821      	adds	r1, r4, r0
 801431c:	428b      	cmp	r3, r1
 801431e:	bf04      	itt	eq
 8014320:	6819      	ldreq	r1, [r3, #0]
 8014322:	685b      	ldreq	r3, [r3, #4]
 8014324:	6063      	str	r3, [r4, #4]
 8014326:	bf04      	itt	eq
 8014328:	1809      	addeq	r1, r1, r0
 801432a:	6021      	streq	r1, [r4, #0]
 801432c:	6054      	str	r4, [r2, #4]
 801432e:	e7ca      	b.n	80142c6 <_free_r+0x22>
 8014330:	bd38      	pop	{r3, r4, r5, pc}
 8014332:	bf00      	nop
 8014334:	24001bac 	.word	0x24001bac

08014338 <sbrk_aligned>:
 8014338:	b570      	push	{r4, r5, r6, lr}
 801433a:	4e0f      	ldr	r6, [pc, #60]	@ (8014378 <sbrk_aligned+0x40>)
 801433c:	460c      	mov	r4, r1
 801433e:	6831      	ldr	r1, [r6, #0]
 8014340:	4605      	mov	r5, r0
 8014342:	b911      	cbnz	r1, 801434a <sbrk_aligned+0x12>
 8014344:	f000 fba4 	bl	8014a90 <_sbrk_r>
 8014348:	6030      	str	r0, [r6, #0]
 801434a:	4621      	mov	r1, r4
 801434c:	4628      	mov	r0, r5
 801434e:	f000 fb9f 	bl	8014a90 <_sbrk_r>
 8014352:	1c43      	adds	r3, r0, #1
 8014354:	d103      	bne.n	801435e <sbrk_aligned+0x26>
 8014356:	f04f 34ff 	mov.w	r4, #4294967295
 801435a:	4620      	mov	r0, r4
 801435c:	bd70      	pop	{r4, r5, r6, pc}
 801435e:	1cc4      	adds	r4, r0, #3
 8014360:	f024 0403 	bic.w	r4, r4, #3
 8014364:	42a0      	cmp	r0, r4
 8014366:	d0f8      	beq.n	801435a <sbrk_aligned+0x22>
 8014368:	1a21      	subs	r1, r4, r0
 801436a:	4628      	mov	r0, r5
 801436c:	f000 fb90 	bl	8014a90 <_sbrk_r>
 8014370:	3001      	adds	r0, #1
 8014372:	d1f2      	bne.n	801435a <sbrk_aligned+0x22>
 8014374:	e7ef      	b.n	8014356 <sbrk_aligned+0x1e>
 8014376:	bf00      	nop
 8014378:	24001ba8 	.word	0x24001ba8

0801437c <_malloc_r>:
 801437c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014380:	1ccd      	adds	r5, r1, #3
 8014382:	f025 0503 	bic.w	r5, r5, #3
 8014386:	3508      	adds	r5, #8
 8014388:	2d0c      	cmp	r5, #12
 801438a:	bf38      	it	cc
 801438c:	250c      	movcc	r5, #12
 801438e:	2d00      	cmp	r5, #0
 8014390:	4606      	mov	r6, r0
 8014392:	db01      	blt.n	8014398 <_malloc_r+0x1c>
 8014394:	42a9      	cmp	r1, r5
 8014396:	d904      	bls.n	80143a2 <_malloc_r+0x26>
 8014398:	230c      	movs	r3, #12
 801439a:	6033      	str	r3, [r6, #0]
 801439c:	2000      	movs	r0, #0
 801439e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014478 <_malloc_r+0xfc>
 80143a6:	f000 f869 	bl	801447c <__malloc_lock>
 80143aa:	f8d8 3000 	ldr.w	r3, [r8]
 80143ae:	461c      	mov	r4, r3
 80143b0:	bb44      	cbnz	r4, 8014404 <_malloc_r+0x88>
 80143b2:	4629      	mov	r1, r5
 80143b4:	4630      	mov	r0, r6
 80143b6:	f7ff ffbf 	bl	8014338 <sbrk_aligned>
 80143ba:	1c43      	adds	r3, r0, #1
 80143bc:	4604      	mov	r4, r0
 80143be:	d158      	bne.n	8014472 <_malloc_r+0xf6>
 80143c0:	f8d8 4000 	ldr.w	r4, [r8]
 80143c4:	4627      	mov	r7, r4
 80143c6:	2f00      	cmp	r7, #0
 80143c8:	d143      	bne.n	8014452 <_malloc_r+0xd6>
 80143ca:	2c00      	cmp	r4, #0
 80143cc:	d04b      	beq.n	8014466 <_malloc_r+0xea>
 80143ce:	6823      	ldr	r3, [r4, #0]
 80143d0:	4639      	mov	r1, r7
 80143d2:	4630      	mov	r0, r6
 80143d4:	eb04 0903 	add.w	r9, r4, r3
 80143d8:	f000 fb5a 	bl	8014a90 <_sbrk_r>
 80143dc:	4581      	cmp	r9, r0
 80143de:	d142      	bne.n	8014466 <_malloc_r+0xea>
 80143e0:	6821      	ldr	r1, [r4, #0]
 80143e2:	1a6d      	subs	r5, r5, r1
 80143e4:	4629      	mov	r1, r5
 80143e6:	4630      	mov	r0, r6
 80143e8:	f7ff ffa6 	bl	8014338 <sbrk_aligned>
 80143ec:	3001      	adds	r0, #1
 80143ee:	d03a      	beq.n	8014466 <_malloc_r+0xea>
 80143f0:	6823      	ldr	r3, [r4, #0]
 80143f2:	442b      	add	r3, r5
 80143f4:	6023      	str	r3, [r4, #0]
 80143f6:	f8d8 3000 	ldr.w	r3, [r8]
 80143fa:	685a      	ldr	r2, [r3, #4]
 80143fc:	bb62      	cbnz	r2, 8014458 <_malloc_r+0xdc>
 80143fe:	f8c8 7000 	str.w	r7, [r8]
 8014402:	e00f      	b.n	8014424 <_malloc_r+0xa8>
 8014404:	6822      	ldr	r2, [r4, #0]
 8014406:	1b52      	subs	r2, r2, r5
 8014408:	d420      	bmi.n	801444c <_malloc_r+0xd0>
 801440a:	2a0b      	cmp	r2, #11
 801440c:	d917      	bls.n	801443e <_malloc_r+0xc2>
 801440e:	1961      	adds	r1, r4, r5
 8014410:	42a3      	cmp	r3, r4
 8014412:	6025      	str	r5, [r4, #0]
 8014414:	bf18      	it	ne
 8014416:	6059      	strne	r1, [r3, #4]
 8014418:	6863      	ldr	r3, [r4, #4]
 801441a:	bf08      	it	eq
 801441c:	f8c8 1000 	streq.w	r1, [r8]
 8014420:	5162      	str	r2, [r4, r5]
 8014422:	604b      	str	r3, [r1, #4]
 8014424:	4630      	mov	r0, r6
 8014426:	f000 f82f 	bl	8014488 <__malloc_unlock>
 801442a:	f104 000b 	add.w	r0, r4, #11
 801442e:	1d23      	adds	r3, r4, #4
 8014430:	f020 0007 	bic.w	r0, r0, #7
 8014434:	1ac2      	subs	r2, r0, r3
 8014436:	bf1c      	itt	ne
 8014438:	1a1b      	subne	r3, r3, r0
 801443a:	50a3      	strne	r3, [r4, r2]
 801443c:	e7af      	b.n	801439e <_malloc_r+0x22>
 801443e:	6862      	ldr	r2, [r4, #4]
 8014440:	42a3      	cmp	r3, r4
 8014442:	bf0c      	ite	eq
 8014444:	f8c8 2000 	streq.w	r2, [r8]
 8014448:	605a      	strne	r2, [r3, #4]
 801444a:	e7eb      	b.n	8014424 <_malloc_r+0xa8>
 801444c:	4623      	mov	r3, r4
 801444e:	6864      	ldr	r4, [r4, #4]
 8014450:	e7ae      	b.n	80143b0 <_malloc_r+0x34>
 8014452:	463c      	mov	r4, r7
 8014454:	687f      	ldr	r7, [r7, #4]
 8014456:	e7b6      	b.n	80143c6 <_malloc_r+0x4a>
 8014458:	461a      	mov	r2, r3
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	42a3      	cmp	r3, r4
 801445e:	d1fb      	bne.n	8014458 <_malloc_r+0xdc>
 8014460:	2300      	movs	r3, #0
 8014462:	6053      	str	r3, [r2, #4]
 8014464:	e7de      	b.n	8014424 <_malloc_r+0xa8>
 8014466:	230c      	movs	r3, #12
 8014468:	6033      	str	r3, [r6, #0]
 801446a:	4630      	mov	r0, r6
 801446c:	f000 f80c 	bl	8014488 <__malloc_unlock>
 8014470:	e794      	b.n	801439c <_malloc_r+0x20>
 8014472:	6005      	str	r5, [r0, #0]
 8014474:	e7d6      	b.n	8014424 <_malloc_r+0xa8>
 8014476:	bf00      	nop
 8014478:	24001bac 	.word	0x24001bac

0801447c <__malloc_lock>:
 801447c:	4801      	ldr	r0, [pc, #4]	@ (8014484 <__malloc_lock+0x8>)
 801447e:	f7ff bf01 	b.w	8014284 <__retarget_lock_acquire_recursive>
 8014482:	bf00      	nop
 8014484:	24001ba4 	.word	0x24001ba4

08014488 <__malloc_unlock>:
 8014488:	4801      	ldr	r0, [pc, #4]	@ (8014490 <__malloc_unlock+0x8>)
 801448a:	f7ff befc 	b.w	8014286 <__retarget_lock_release_recursive>
 801448e:	bf00      	nop
 8014490:	24001ba4 	.word	0x24001ba4

08014494 <__ssputs_r>:
 8014494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014498:	688e      	ldr	r6, [r1, #8]
 801449a:	461f      	mov	r7, r3
 801449c:	42be      	cmp	r6, r7
 801449e:	680b      	ldr	r3, [r1, #0]
 80144a0:	4682      	mov	sl, r0
 80144a2:	460c      	mov	r4, r1
 80144a4:	4690      	mov	r8, r2
 80144a6:	d82d      	bhi.n	8014504 <__ssputs_r+0x70>
 80144a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80144ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80144b0:	d026      	beq.n	8014500 <__ssputs_r+0x6c>
 80144b2:	6965      	ldr	r5, [r4, #20]
 80144b4:	6909      	ldr	r1, [r1, #16]
 80144b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80144ba:	eba3 0901 	sub.w	r9, r3, r1
 80144be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80144c2:	1c7b      	adds	r3, r7, #1
 80144c4:	444b      	add	r3, r9
 80144c6:	106d      	asrs	r5, r5, #1
 80144c8:	429d      	cmp	r5, r3
 80144ca:	bf38      	it	cc
 80144cc:	461d      	movcc	r5, r3
 80144ce:	0553      	lsls	r3, r2, #21
 80144d0:	d527      	bpl.n	8014522 <__ssputs_r+0x8e>
 80144d2:	4629      	mov	r1, r5
 80144d4:	f7ff ff52 	bl	801437c <_malloc_r>
 80144d8:	4606      	mov	r6, r0
 80144da:	b360      	cbz	r0, 8014536 <__ssputs_r+0xa2>
 80144dc:	6921      	ldr	r1, [r4, #16]
 80144de:	464a      	mov	r2, r9
 80144e0:	f7ff fed2 	bl	8014288 <memcpy>
 80144e4:	89a3      	ldrh	r3, [r4, #12]
 80144e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80144ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80144ee:	81a3      	strh	r3, [r4, #12]
 80144f0:	6126      	str	r6, [r4, #16]
 80144f2:	6165      	str	r5, [r4, #20]
 80144f4:	444e      	add	r6, r9
 80144f6:	eba5 0509 	sub.w	r5, r5, r9
 80144fa:	6026      	str	r6, [r4, #0]
 80144fc:	60a5      	str	r5, [r4, #8]
 80144fe:	463e      	mov	r6, r7
 8014500:	42be      	cmp	r6, r7
 8014502:	d900      	bls.n	8014506 <__ssputs_r+0x72>
 8014504:	463e      	mov	r6, r7
 8014506:	6820      	ldr	r0, [r4, #0]
 8014508:	4632      	mov	r2, r6
 801450a:	4641      	mov	r1, r8
 801450c:	f000 faa6 	bl	8014a5c <memmove>
 8014510:	68a3      	ldr	r3, [r4, #8]
 8014512:	1b9b      	subs	r3, r3, r6
 8014514:	60a3      	str	r3, [r4, #8]
 8014516:	6823      	ldr	r3, [r4, #0]
 8014518:	4433      	add	r3, r6
 801451a:	6023      	str	r3, [r4, #0]
 801451c:	2000      	movs	r0, #0
 801451e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014522:	462a      	mov	r2, r5
 8014524:	f000 fac4 	bl	8014ab0 <_realloc_r>
 8014528:	4606      	mov	r6, r0
 801452a:	2800      	cmp	r0, #0
 801452c:	d1e0      	bne.n	80144f0 <__ssputs_r+0x5c>
 801452e:	6921      	ldr	r1, [r4, #16]
 8014530:	4650      	mov	r0, sl
 8014532:	f7ff feb7 	bl	80142a4 <_free_r>
 8014536:	230c      	movs	r3, #12
 8014538:	f8ca 3000 	str.w	r3, [sl]
 801453c:	89a3      	ldrh	r3, [r4, #12]
 801453e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014542:	81a3      	strh	r3, [r4, #12]
 8014544:	f04f 30ff 	mov.w	r0, #4294967295
 8014548:	e7e9      	b.n	801451e <__ssputs_r+0x8a>
	...

0801454c <_svfiprintf_r>:
 801454c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014550:	4698      	mov	r8, r3
 8014552:	898b      	ldrh	r3, [r1, #12]
 8014554:	061b      	lsls	r3, r3, #24
 8014556:	b09d      	sub	sp, #116	@ 0x74
 8014558:	4607      	mov	r7, r0
 801455a:	460d      	mov	r5, r1
 801455c:	4614      	mov	r4, r2
 801455e:	d510      	bpl.n	8014582 <_svfiprintf_r+0x36>
 8014560:	690b      	ldr	r3, [r1, #16]
 8014562:	b973      	cbnz	r3, 8014582 <_svfiprintf_r+0x36>
 8014564:	2140      	movs	r1, #64	@ 0x40
 8014566:	f7ff ff09 	bl	801437c <_malloc_r>
 801456a:	6028      	str	r0, [r5, #0]
 801456c:	6128      	str	r0, [r5, #16]
 801456e:	b930      	cbnz	r0, 801457e <_svfiprintf_r+0x32>
 8014570:	230c      	movs	r3, #12
 8014572:	603b      	str	r3, [r7, #0]
 8014574:	f04f 30ff 	mov.w	r0, #4294967295
 8014578:	b01d      	add	sp, #116	@ 0x74
 801457a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801457e:	2340      	movs	r3, #64	@ 0x40
 8014580:	616b      	str	r3, [r5, #20]
 8014582:	2300      	movs	r3, #0
 8014584:	9309      	str	r3, [sp, #36]	@ 0x24
 8014586:	2320      	movs	r3, #32
 8014588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801458c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014590:	2330      	movs	r3, #48	@ 0x30
 8014592:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014730 <_svfiprintf_r+0x1e4>
 8014596:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801459a:	f04f 0901 	mov.w	r9, #1
 801459e:	4623      	mov	r3, r4
 80145a0:	469a      	mov	sl, r3
 80145a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145a6:	b10a      	cbz	r2, 80145ac <_svfiprintf_r+0x60>
 80145a8:	2a25      	cmp	r2, #37	@ 0x25
 80145aa:	d1f9      	bne.n	80145a0 <_svfiprintf_r+0x54>
 80145ac:	ebba 0b04 	subs.w	fp, sl, r4
 80145b0:	d00b      	beq.n	80145ca <_svfiprintf_r+0x7e>
 80145b2:	465b      	mov	r3, fp
 80145b4:	4622      	mov	r2, r4
 80145b6:	4629      	mov	r1, r5
 80145b8:	4638      	mov	r0, r7
 80145ba:	f7ff ff6b 	bl	8014494 <__ssputs_r>
 80145be:	3001      	adds	r0, #1
 80145c0:	f000 80a7 	beq.w	8014712 <_svfiprintf_r+0x1c6>
 80145c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80145c6:	445a      	add	r2, fp
 80145c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80145ca:	f89a 3000 	ldrb.w	r3, [sl]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	f000 809f 	beq.w	8014712 <_svfiprintf_r+0x1c6>
 80145d4:	2300      	movs	r3, #0
 80145d6:	f04f 32ff 	mov.w	r2, #4294967295
 80145da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80145de:	f10a 0a01 	add.w	sl, sl, #1
 80145e2:	9304      	str	r3, [sp, #16]
 80145e4:	9307      	str	r3, [sp, #28]
 80145e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80145ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80145ec:	4654      	mov	r4, sl
 80145ee:	2205      	movs	r2, #5
 80145f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145f4:	484e      	ldr	r0, [pc, #312]	@ (8014730 <_svfiprintf_r+0x1e4>)
 80145f6:	f7eb fe93 	bl	8000320 <memchr>
 80145fa:	9a04      	ldr	r2, [sp, #16]
 80145fc:	b9d8      	cbnz	r0, 8014636 <_svfiprintf_r+0xea>
 80145fe:	06d0      	lsls	r0, r2, #27
 8014600:	bf44      	itt	mi
 8014602:	2320      	movmi	r3, #32
 8014604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014608:	0711      	lsls	r1, r2, #28
 801460a:	bf44      	itt	mi
 801460c:	232b      	movmi	r3, #43	@ 0x2b
 801460e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014612:	f89a 3000 	ldrb.w	r3, [sl]
 8014616:	2b2a      	cmp	r3, #42	@ 0x2a
 8014618:	d015      	beq.n	8014646 <_svfiprintf_r+0xfa>
 801461a:	9a07      	ldr	r2, [sp, #28]
 801461c:	4654      	mov	r4, sl
 801461e:	2000      	movs	r0, #0
 8014620:	f04f 0c0a 	mov.w	ip, #10
 8014624:	4621      	mov	r1, r4
 8014626:	f811 3b01 	ldrb.w	r3, [r1], #1
 801462a:	3b30      	subs	r3, #48	@ 0x30
 801462c:	2b09      	cmp	r3, #9
 801462e:	d94b      	bls.n	80146c8 <_svfiprintf_r+0x17c>
 8014630:	b1b0      	cbz	r0, 8014660 <_svfiprintf_r+0x114>
 8014632:	9207      	str	r2, [sp, #28]
 8014634:	e014      	b.n	8014660 <_svfiprintf_r+0x114>
 8014636:	eba0 0308 	sub.w	r3, r0, r8
 801463a:	fa09 f303 	lsl.w	r3, r9, r3
 801463e:	4313      	orrs	r3, r2
 8014640:	9304      	str	r3, [sp, #16]
 8014642:	46a2      	mov	sl, r4
 8014644:	e7d2      	b.n	80145ec <_svfiprintf_r+0xa0>
 8014646:	9b03      	ldr	r3, [sp, #12]
 8014648:	1d19      	adds	r1, r3, #4
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	9103      	str	r1, [sp, #12]
 801464e:	2b00      	cmp	r3, #0
 8014650:	bfbb      	ittet	lt
 8014652:	425b      	neglt	r3, r3
 8014654:	f042 0202 	orrlt.w	r2, r2, #2
 8014658:	9307      	strge	r3, [sp, #28]
 801465a:	9307      	strlt	r3, [sp, #28]
 801465c:	bfb8      	it	lt
 801465e:	9204      	strlt	r2, [sp, #16]
 8014660:	7823      	ldrb	r3, [r4, #0]
 8014662:	2b2e      	cmp	r3, #46	@ 0x2e
 8014664:	d10a      	bne.n	801467c <_svfiprintf_r+0x130>
 8014666:	7863      	ldrb	r3, [r4, #1]
 8014668:	2b2a      	cmp	r3, #42	@ 0x2a
 801466a:	d132      	bne.n	80146d2 <_svfiprintf_r+0x186>
 801466c:	9b03      	ldr	r3, [sp, #12]
 801466e:	1d1a      	adds	r2, r3, #4
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	9203      	str	r2, [sp, #12]
 8014674:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014678:	3402      	adds	r4, #2
 801467a:	9305      	str	r3, [sp, #20]
 801467c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014740 <_svfiprintf_r+0x1f4>
 8014680:	7821      	ldrb	r1, [r4, #0]
 8014682:	2203      	movs	r2, #3
 8014684:	4650      	mov	r0, sl
 8014686:	f7eb fe4b 	bl	8000320 <memchr>
 801468a:	b138      	cbz	r0, 801469c <_svfiprintf_r+0x150>
 801468c:	9b04      	ldr	r3, [sp, #16]
 801468e:	eba0 000a 	sub.w	r0, r0, sl
 8014692:	2240      	movs	r2, #64	@ 0x40
 8014694:	4082      	lsls	r2, r0
 8014696:	4313      	orrs	r3, r2
 8014698:	3401      	adds	r4, #1
 801469a:	9304      	str	r3, [sp, #16]
 801469c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146a0:	4824      	ldr	r0, [pc, #144]	@ (8014734 <_svfiprintf_r+0x1e8>)
 80146a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80146a6:	2206      	movs	r2, #6
 80146a8:	f7eb fe3a 	bl	8000320 <memchr>
 80146ac:	2800      	cmp	r0, #0
 80146ae:	d036      	beq.n	801471e <_svfiprintf_r+0x1d2>
 80146b0:	4b21      	ldr	r3, [pc, #132]	@ (8014738 <_svfiprintf_r+0x1ec>)
 80146b2:	bb1b      	cbnz	r3, 80146fc <_svfiprintf_r+0x1b0>
 80146b4:	9b03      	ldr	r3, [sp, #12]
 80146b6:	3307      	adds	r3, #7
 80146b8:	f023 0307 	bic.w	r3, r3, #7
 80146bc:	3308      	adds	r3, #8
 80146be:	9303      	str	r3, [sp, #12]
 80146c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146c2:	4433      	add	r3, r6
 80146c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80146c6:	e76a      	b.n	801459e <_svfiprintf_r+0x52>
 80146c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80146cc:	460c      	mov	r4, r1
 80146ce:	2001      	movs	r0, #1
 80146d0:	e7a8      	b.n	8014624 <_svfiprintf_r+0xd8>
 80146d2:	2300      	movs	r3, #0
 80146d4:	3401      	adds	r4, #1
 80146d6:	9305      	str	r3, [sp, #20]
 80146d8:	4619      	mov	r1, r3
 80146da:	f04f 0c0a 	mov.w	ip, #10
 80146de:	4620      	mov	r0, r4
 80146e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146e4:	3a30      	subs	r2, #48	@ 0x30
 80146e6:	2a09      	cmp	r2, #9
 80146e8:	d903      	bls.n	80146f2 <_svfiprintf_r+0x1a6>
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d0c6      	beq.n	801467c <_svfiprintf_r+0x130>
 80146ee:	9105      	str	r1, [sp, #20]
 80146f0:	e7c4      	b.n	801467c <_svfiprintf_r+0x130>
 80146f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80146f6:	4604      	mov	r4, r0
 80146f8:	2301      	movs	r3, #1
 80146fa:	e7f0      	b.n	80146de <_svfiprintf_r+0x192>
 80146fc:	ab03      	add	r3, sp, #12
 80146fe:	9300      	str	r3, [sp, #0]
 8014700:	462a      	mov	r2, r5
 8014702:	4b0e      	ldr	r3, [pc, #56]	@ (801473c <_svfiprintf_r+0x1f0>)
 8014704:	a904      	add	r1, sp, #16
 8014706:	4638      	mov	r0, r7
 8014708:	f3af 8000 	nop.w
 801470c:	1c42      	adds	r2, r0, #1
 801470e:	4606      	mov	r6, r0
 8014710:	d1d6      	bne.n	80146c0 <_svfiprintf_r+0x174>
 8014712:	89ab      	ldrh	r3, [r5, #12]
 8014714:	065b      	lsls	r3, r3, #25
 8014716:	f53f af2d 	bmi.w	8014574 <_svfiprintf_r+0x28>
 801471a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801471c:	e72c      	b.n	8014578 <_svfiprintf_r+0x2c>
 801471e:	ab03      	add	r3, sp, #12
 8014720:	9300      	str	r3, [sp, #0]
 8014722:	462a      	mov	r2, r5
 8014724:	4b05      	ldr	r3, [pc, #20]	@ (801473c <_svfiprintf_r+0x1f0>)
 8014726:	a904      	add	r1, sp, #16
 8014728:	4638      	mov	r0, r7
 801472a:	f000 f879 	bl	8014820 <_printf_i>
 801472e:	e7ed      	b.n	801470c <_svfiprintf_r+0x1c0>
 8014730:	08015458 	.word	0x08015458
 8014734:	08015462 	.word	0x08015462
 8014738:	00000000 	.word	0x00000000
 801473c:	08014495 	.word	0x08014495
 8014740:	0801545e 	.word	0x0801545e

08014744 <_printf_common>:
 8014744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014748:	4616      	mov	r6, r2
 801474a:	4698      	mov	r8, r3
 801474c:	688a      	ldr	r2, [r1, #8]
 801474e:	690b      	ldr	r3, [r1, #16]
 8014750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014754:	4293      	cmp	r3, r2
 8014756:	bfb8      	it	lt
 8014758:	4613      	movlt	r3, r2
 801475a:	6033      	str	r3, [r6, #0]
 801475c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014760:	4607      	mov	r7, r0
 8014762:	460c      	mov	r4, r1
 8014764:	b10a      	cbz	r2, 801476a <_printf_common+0x26>
 8014766:	3301      	adds	r3, #1
 8014768:	6033      	str	r3, [r6, #0]
 801476a:	6823      	ldr	r3, [r4, #0]
 801476c:	0699      	lsls	r1, r3, #26
 801476e:	bf42      	ittt	mi
 8014770:	6833      	ldrmi	r3, [r6, #0]
 8014772:	3302      	addmi	r3, #2
 8014774:	6033      	strmi	r3, [r6, #0]
 8014776:	6825      	ldr	r5, [r4, #0]
 8014778:	f015 0506 	ands.w	r5, r5, #6
 801477c:	d106      	bne.n	801478c <_printf_common+0x48>
 801477e:	f104 0a19 	add.w	sl, r4, #25
 8014782:	68e3      	ldr	r3, [r4, #12]
 8014784:	6832      	ldr	r2, [r6, #0]
 8014786:	1a9b      	subs	r3, r3, r2
 8014788:	42ab      	cmp	r3, r5
 801478a:	dc26      	bgt.n	80147da <_printf_common+0x96>
 801478c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014790:	6822      	ldr	r2, [r4, #0]
 8014792:	3b00      	subs	r3, #0
 8014794:	bf18      	it	ne
 8014796:	2301      	movne	r3, #1
 8014798:	0692      	lsls	r2, r2, #26
 801479a:	d42b      	bmi.n	80147f4 <_printf_common+0xb0>
 801479c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80147a0:	4641      	mov	r1, r8
 80147a2:	4638      	mov	r0, r7
 80147a4:	47c8      	blx	r9
 80147a6:	3001      	adds	r0, #1
 80147a8:	d01e      	beq.n	80147e8 <_printf_common+0xa4>
 80147aa:	6823      	ldr	r3, [r4, #0]
 80147ac:	6922      	ldr	r2, [r4, #16]
 80147ae:	f003 0306 	and.w	r3, r3, #6
 80147b2:	2b04      	cmp	r3, #4
 80147b4:	bf02      	ittt	eq
 80147b6:	68e5      	ldreq	r5, [r4, #12]
 80147b8:	6833      	ldreq	r3, [r6, #0]
 80147ba:	1aed      	subeq	r5, r5, r3
 80147bc:	68a3      	ldr	r3, [r4, #8]
 80147be:	bf0c      	ite	eq
 80147c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80147c4:	2500      	movne	r5, #0
 80147c6:	4293      	cmp	r3, r2
 80147c8:	bfc4      	itt	gt
 80147ca:	1a9b      	subgt	r3, r3, r2
 80147cc:	18ed      	addgt	r5, r5, r3
 80147ce:	2600      	movs	r6, #0
 80147d0:	341a      	adds	r4, #26
 80147d2:	42b5      	cmp	r5, r6
 80147d4:	d11a      	bne.n	801480c <_printf_common+0xc8>
 80147d6:	2000      	movs	r0, #0
 80147d8:	e008      	b.n	80147ec <_printf_common+0xa8>
 80147da:	2301      	movs	r3, #1
 80147dc:	4652      	mov	r2, sl
 80147de:	4641      	mov	r1, r8
 80147e0:	4638      	mov	r0, r7
 80147e2:	47c8      	blx	r9
 80147e4:	3001      	adds	r0, #1
 80147e6:	d103      	bne.n	80147f0 <_printf_common+0xac>
 80147e8:	f04f 30ff 	mov.w	r0, #4294967295
 80147ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147f0:	3501      	adds	r5, #1
 80147f2:	e7c6      	b.n	8014782 <_printf_common+0x3e>
 80147f4:	18e1      	adds	r1, r4, r3
 80147f6:	1c5a      	adds	r2, r3, #1
 80147f8:	2030      	movs	r0, #48	@ 0x30
 80147fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80147fe:	4422      	add	r2, r4
 8014800:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014804:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014808:	3302      	adds	r3, #2
 801480a:	e7c7      	b.n	801479c <_printf_common+0x58>
 801480c:	2301      	movs	r3, #1
 801480e:	4622      	mov	r2, r4
 8014810:	4641      	mov	r1, r8
 8014812:	4638      	mov	r0, r7
 8014814:	47c8      	blx	r9
 8014816:	3001      	adds	r0, #1
 8014818:	d0e6      	beq.n	80147e8 <_printf_common+0xa4>
 801481a:	3601      	adds	r6, #1
 801481c:	e7d9      	b.n	80147d2 <_printf_common+0x8e>
	...

08014820 <_printf_i>:
 8014820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014824:	7e0f      	ldrb	r7, [r1, #24]
 8014826:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014828:	2f78      	cmp	r7, #120	@ 0x78
 801482a:	4691      	mov	r9, r2
 801482c:	4680      	mov	r8, r0
 801482e:	460c      	mov	r4, r1
 8014830:	469a      	mov	sl, r3
 8014832:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014836:	d807      	bhi.n	8014848 <_printf_i+0x28>
 8014838:	2f62      	cmp	r7, #98	@ 0x62
 801483a:	d80a      	bhi.n	8014852 <_printf_i+0x32>
 801483c:	2f00      	cmp	r7, #0
 801483e:	f000 80d1 	beq.w	80149e4 <_printf_i+0x1c4>
 8014842:	2f58      	cmp	r7, #88	@ 0x58
 8014844:	f000 80b8 	beq.w	80149b8 <_printf_i+0x198>
 8014848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801484c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014850:	e03a      	b.n	80148c8 <_printf_i+0xa8>
 8014852:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014856:	2b15      	cmp	r3, #21
 8014858:	d8f6      	bhi.n	8014848 <_printf_i+0x28>
 801485a:	a101      	add	r1, pc, #4	@ (adr r1, 8014860 <_printf_i+0x40>)
 801485c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014860:	080148b9 	.word	0x080148b9
 8014864:	080148cd 	.word	0x080148cd
 8014868:	08014849 	.word	0x08014849
 801486c:	08014849 	.word	0x08014849
 8014870:	08014849 	.word	0x08014849
 8014874:	08014849 	.word	0x08014849
 8014878:	080148cd 	.word	0x080148cd
 801487c:	08014849 	.word	0x08014849
 8014880:	08014849 	.word	0x08014849
 8014884:	08014849 	.word	0x08014849
 8014888:	08014849 	.word	0x08014849
 801488c:	080149cb 	.word	0x080149cb
 8014890:	080148f7 	.word	0x080148f7
 8014894:	08014985 	.word	0x08014985
 8014898:	08014849 	.word	0x08014849
 801489c:	08014849 	.word	0x08014849
 80148a0:	080149ed 	.word	0x080149ed
 80148a4:	08014849 	.word	0x08014849
 80148a8:	080148f7 	.word	0x080148f7
 80148ac:	08014849 	.word	0x08014849
 80148b0:	08014849 	.word	0x08014849
 80148b4:	0801498d 	.word	0x0801498d
 80148b8:	6833      	ldr	r3, [r6, #0]
 80148ba:	1d1a      	adds	r2, r3, #4
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	6032      	str	r2, [r6, #0]
 80148c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80148c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80148c8:	2301      	movs	r3, #1
 80148ca:	e09c      	b.n	8014a06 <_printf_i+0x1e6>
 80148cc:	6833      	ldr	r3, [r6, #0]
 80148ce:	6820      	ldr	r0, [r4, #0]
 80148d0:	1d19      	adds	r1, r3, #4
 80148d2:	6031      	str	r1, [r6, #0]
 80148d4:	0606      	lsls	r6, r0, #24
 80148d6:	d501      	bpl.n	80148dc <_printf_i+0xbc>
 80148d8:	681d      	ldr	r5, [r3, #0]
 80148da:	e003      	b.n	80148e4 <_printf_i+0xc4>
 80148dc:	0645      	lsls	r5, r0, #25
 80148de:	d5fb      	bpl.n	80148d8 <_printf_i+0xb8>
 80148e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80148e4:	2d00      	cmp	r5, #0
 80148e6:	da03      	bge.n	80148f0 <_printf_i+0xd0>
 80148e8:	232d      	movs	r3, #45	@ 0x2d
 80148ea:	426d      	negs	r5, r5
 80148ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80148f0:	4858      	ldr	r0, [pc, #352]	@ (8014a54 <_printf_i+0x234>)
 80148f2:	230a      	movs	r3, #10
 80148f4:	e011      	b.n	801491a <_printf_i+0xfa>
 80148f6:	6821      	ldr	r1, [r4, #0]
 80148f8:	6833      	ldr	r3, [r6, #0]
 80148fa:	0608      	lsls	r0, r1, #24
 80148fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8014900:	d402      	bmi.n	8014908 <_printf_i+0xe8>
 8014902:	0649      	lsls	r1, r1, #25
 8014904:	bf48      	it	mi
 8014906:	b2ad      	uxthmi	r5, r5
 8014908:	2f6f      	cmp	r7, #111	@ 0x6f
 801490a:	4852      	ldr	r0, [pc, #328]	@ (8014a54 <_printf_i+0x234>)
 801490c:	6033      	str	r3, [r6, #0]
 801490e:	bf14      	ite	ne
 8014910:	230a      	movne	r3, #10
 8014912:	2308      	moveq	r3, #8
 8014914:	2100      	movs	r1, #0
 8014916:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801491a:	6866      	ldr	r6, [r4, #4]
 801491c:	60a6      	str	r6, [r4, #8]
 801491e:	2e00      	cmp	r6, #0
 8014920:	db05      	blt.n	801492e <_printf_i+0x10e>
 8014922:	6821      	ldr	r1, [r4, #0]
 8014924:	432e      	orrs	r6, r5
 8014926:	f021 0104 	bic.w	r1, r1, #4
 801492a:	6021      	str	r1, [r4, #0]
 801492c:	d04b      	beq.n	80149c6 <_printf_i+0x1a6>
 801492e:	4616      	mov	r6, r2
 8014930:	fbb5 f1f3 	udiv	r1, r5, r3
 8014934:	fb03 5711 	mls	r7, r3, r1, r5
 8014938:	5dc7      	ldrb	r7, [r0, r7]
 801493a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801493e:	462f      	mov	r7, r5
 8014940:	42bb      	cmp	r3, r7
 8014942:	460d      	mov	r5, r1
 8014944:	d9f4      	bls.n	8014930 <_printf_i+0x110>
 8014946:	2b08      	cmp	r3, #8
 8014948:	d10b      	bne.n	8014962 <_printf_i+0x142>
 801494a:	6823      	ldr	r3, [r4, #0]
 801494c:	07df      	lsls	r7, r3, #31
 801494e:	d508      	bpl.n	8014962 <_printf_i+0x142>
 8014950:	6923      	ldr	r3, [r4, #16]
 8014952:	6861      	ldr	r1, [r4, #4]
 8014954:	4299      	cmp	r1, r3
 8014956:	bfde      	ittt	le
 8014958:	2330      	movle	r3, #48	@ 0x30
 801495a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801495e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014962:	1b92      	subs	r2, r2, r6
 8014964:	6122      	str	r2, [r4, #16]
 8014966:	f8cd a000 	str.w	sl, [sp]
 801496a:	464b      	mov	r3, r9
 801496c:	aa03      	add	r2, sp, #12
 801496e:	4621      	mov	r1, r4
 8014970:	4640      	mov	r0, r8
 8014972:	f7ff fee7 	bl	8014744 <_printf_common>
 8014976:	3001      	adds	r0, #1
 8014978:	d14a      	bne.n	8014a10 <_printf_i+0x1f0>
 801497a:	f04f 30ff 	mov.w	r0, #4294967295
 801497e:	b004      	add	sp, #16
 8014980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014984:	6823      	ldr	r3, [r4, #0]
 8014986:	f043 0320 	orr.w	r3, r3, #32
 801498a:	6023      	str	r3, [r4, #0]
 801498c:	4832      	ldr	r0, [pc, #200]	@ (8014a58 <_printf_i+0x238>)
 801498e:	2778      	movs	r7, #120	@ 0x78
 8014990:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014994:	6823      	ldr	r3, [r4, #0]
 8014996:	6831      	ldr	r1, [r6, #0]
 8014998:	061f      	lsls	r7, r3, #24
 801499a:	f851 5b04 	ldr.w	r5, [r1], #4
 801499e:	d402      	bmi.n	80149a6 <_printf_i+0x186>
 80149a0:	065f      	lsls	r7, r3, #25
 80149a2:	bf48      	it	mi
 80149a4:	b2ad      	uxthmi	r5, r5
 80149a6:	6031      	str	r1, [r6, #0]
 80149a8:	07d9      	lsls	r1, r3, #31
 80149aa:	bf44      	itt	mi
 80149ac:	f043 0320 	orrmi.w	r3, r3, #32
 80149b0:	6023      	strmi	r3, [r4, #0]
 80149b2:	b11d      	cbz	r5, 80149bc <_printf_i+0x19c>
 80149b4:	2310      	movs	r3, #16
 80149b6:	e7ad      	b.n	8014914 <_printf_i+0xf4>
 80149b8:	4826      	ldr	r0, [pc, #152]	@ (8014a54 <_printf_i+0x234>)
 80149ba:	e7e9      	b.n	8014990 <_printf_i+0x170>
 80149bc:	6823      	ldr	r3, [r4, #0]
 80149be:	f023 0320 	bic.w	r3, r3, #32
 80149c2:	6023      	str	r3, [r4, #0]
 80149c4:	e7f6      	b.n	80149b4 <_printf_i+0x194>
 80149c6:	4616      	mov	r6, r2
 80149c8:	e7bd      	b.n	8014946 <_printf_i+0x126>
 80149ca:	6833      	ldr	r3, [r6, #0]
 80149cc:	6825      	ldr	r5, [r4, #0]
 80149ce:	6961      	ldr	r1, [r4, #20]
 80149d0:	1d18      	adds	r0, r3, #4
 80149d2:	6030      	str	r0, [r6, #0]
 80149d4:	062e      	lsls	r6, r5, #24
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	d501      	bpl.n	80149de <_printf_i+0x1be>
 80149da:	6019      	str	r1, [r3, #0]
 80149dc:	e002      	b.n	80149e4 <_printf_i+0x1c4>
 80149de:	0668      	lsls	r0, r5, #25
 80149e0:	d5fb      	bpl.n	80149da <_printf_i+0x1ba>
 80149e2:	8019      	strh	r1, [r3, #0]
 80149e4:	2300      	movs	r3, #0
 80149e6:	6123      	str	r3, [r4, #16]
 80149e8:	4616      	mov	r6, r2
 80149ea:	e7bc      	b.n	8014966 <_printf_i+0x146>
 80149ec:	6833      	ldr	r3, [r6, #0]
 80149ee:	1d1a      	adds	r2, r3, #4
 80149f0:	6032      	str	r2, [r6, #0]
 80149f2:	681e      	ldr	r6, [r3, #0]
 80149f4:	6862      	ldr	r2, [r4, #4]
 80149f6:	2100      	movs	r1, #0
 80149f8:	4630      	mov	r0, r6
 80149fa:	f7eb fc91 	bl	8000320 <memchr>
 80149fe:	b108      	cbz	r0, 8014a04 <_printf_i+0x1e4>
 8014a00:	1b80      	subs	r0, r0, r6
 8014a02:	6060      	str	r0, [r4, #4]
 8014a04:	6863      	ldr	r3, [r4, #4]
 8014a06:	6123      	str	r3, [r4, #16]
 8014a08:	2300      	movs	r3, #0
 8014a0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014a0e:	e7aa      	b.n	8014966 <_printf_i+0x146>
 8014a10:	6923      	ldr	r3, [r4, #16]
 8014a12:	4632      	mov	r2, r6
 8014a14:	4649      	mov	r1, r9
 8014a16:	4640      	mov	r0, r8
 8014a18:	47d0      	blx	sl
 8014a1a:	3001      	adds	r0, #1
 8014a1c:	d0ad      	beq.n	801497a <_printf_i+0x15a>
 8014a1e:	6823      	ldr	r3, [r4, #0]
 8014a20:	079b      	lsls	r3, r3, #30
 8014a22:	d413      	bmi.n	8014a4c <_printf_i+0x22c>
 8014a24:	68e0      	ldr	r0, [r4, #12]
 8014a26:	9b03      	ldr	r3, [sp, #12]
 8014a28:	4298      	cmp	r0, r3
 8014a2a:	bfb8      	it	lt
 8014a2c:	4618      	movlt	r0, r3
 8014a2e:	e7a6      	b.n	801497e <_printf_i+0x15e>
 8014a30:	2301      	movs	r3, #1
 8014a32:	4632      	mov	r2, r6
 8014a34:	4649      	mov	r1, r9
 8014a36:	4640      	mov	r0, r8
 8014a38:	47d0      	blx	sl
 8014a3a:	3001      	adds	r0, #1
 8014a3c:	d09d      	beq.n	801497a <_printf_i+0x15a>
 8014a3e:	3501      	adds	r5, #1
 8014a40:	68e3      	ldr	r3, [r4, #12]
 8014a42:	9903      	ldr	r1, [sp, #12]
 8014a44:	1a5b      	subs	r3, r3, r1
 8014a46:	42ab      	cmp	r3, r5
 8014a48:	dcf2      	bgt.n	8014a30 <_printf_i+0x210>
 8014a4a:	e7eb      	b.n	8014a24 <_printf_i+0x204>
 8014a4c:	2500      	movs	r5, #0
 8014a4e:	f104 0619 	add.w	r6, r4, #25
 8014a52:	e7f5      	b.n	8014a40 <_printf_i+0x220>
 8014a54:	08015469 	.word	0x08015469
 8014a58:	0801547a 	.word	0x0801547a

08014a5c <memmove>:
 8014a5c:	4288      	cmp	r0, r1
 8014a5e:	b510      	push	{r4, lr}
 8014a60:	eb01 0402 	add.w	r4, r1, r2
 8014a64:	d902      	bls.n	8014a6c <memmove+0x10>
 8014a66:	4284      	cmp	r4, r0
 8014a68:	4623      	mov	r3, r4
 8014a6a:	d807      	bhi.n	8014a7c <memmove+0x20>
 8014a6c:	1e43      	subs	r3, r0, #1
 8014a6e:	42a1      	cmp	r1, r4
 8014a70:	d008      	beq.n	8014a84 <memmove+0x28>
 8014a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014a7a:	e7f8      	b.n	8014a6e <memmove+0x12>
 8014a7c:	4402      	add	r2, r0
 8014a7e:	4601      	mov	r1, r0
 8014a80:	428a      	cmp	r2, r1
 8014a82:	d100      	bne.n	8014a86 <memmove+0x2a>
 8014a84:	bd10      	pop	{r4, pc}
 8014a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014a8e:	e7f7      	b.n	8014a80 <memmove+0x24>

08014a90 <_sbrk_r>:
 8014a90:	b538      	push	{r3, r4, r5, lr}
 8014a92:	4d06      	ldr	r5, [pc, #24]	@ (8014aac <_sbrk_r+0x1c>)
 8014a94:	2300      	movs	r3, #0
 8014a96:	4604      	mov	r4, r0
 8014a98:	4608      	mov	r0, r1
 8014a9a:	602b      	str	r3, [r5, #0]
 8014a9c:	f7ed ff28 	bl	80028f0 <_sbrk>
 8014aa0:	1c43      	adds	r3, r0, #1
 8014aa2:	d102      	bne.n	8014aaa <_sbrk_r+0x1a>
 8014aa4:	682b      	ldr	r3, [r5, #0]
 8014aa6:	b103      	cbz	r3, 8014aaa <_sbrk_r+0x1a>
 8014aa8:	6023      	str	r3, [r4, #0]
 8014aaa:	bd38      	pop	{r3, r4, r5, pc}
 8014aac:	24001ba0 	.word	0x24001ba0

08014ab0 <_realloc_r>:
 8014ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ab4:	4607      	mov	r7, r0
 8014ab6:	4614      	mov	r4, r2
 8014ab8:	460d      	mov	r5, r1
 8014aba:	b921      	cbnz	r1, 8014ac6 <_realloc_r+0x16>
 8014abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ac0:	4611      	mov	r1, r2
 8014ac2:	f7ff bc5b 	b.w	801437c <_malloc_r>
 8014ac6:	b92a      	cbnz	r2, 8014ad4 <_realloc_r+0x24>
 8014ac8:	f7ff fbec 	bl	80142a4 <_free_r>
 8014acc:	4625      	mov	r5, r4
 8014ace:	4628      	mov	r0, r5
 8014ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ad4:	f000 f81a 	bl	8014b0c <_malloc_usable_size_r>
 8014ad8:	4284      	cmp	r4, r0
 8014ada:	4606      	mov	r6, r0
 8014adc:	d802      	bhi.n	8014ae4 <_realloc_r+0x34>
 8014ade:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014ae2:	d8f4      	bhi.n	8014ace <_realloc_r+0x1e>
 8014ae4:	4621      	mov	r1, r4
 8014ae6:	4638      	mov	r0, r7
 8014ae8:	f7ff fc48 	bl	801437c <_malloc_r>
 8014aec:	4680      	mov	r8, r0
 8014aee:	b908      	cbnz	r0, 8014af4 <_realloc_r+0x44>
 8014af0:	4645      	mov	r5, r8
 8014af2:	e7ec      	b.n	8014ace <_realloc_r+0x1e>
 8014af4:	42b4      	cmp	r4, r6
 8014af6:	4622      	mov	r2, r4
 8014af8:	4629      	mov	r1, r5
 8014afa:	bf28      	it	cs
 8014afc:	4632      	movcs	r2, r6
 8014afe:	f7ff fbc3 	bl	8014288 <memcpy>
 8014b02:	4629      	mov	r1, r5
 8014b04:	4638      	mov	r0, r7
 8014b06:	f7ff fbcd 	bl	80142a4 <_free_r>
 8014b0a:	e7f1      	b.n	8014af0 <_realloc_r+0x40>

08014b0c <_malloc_usable_size_r>:
 8014b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b10:	1f18      	subs	r0, r3, #4
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	bfbc      	itt	lt
 8014b16:	580b      	ldrlt	r3, [r1, r0]
 8014b18:	18c0      	addlt	r0, r0, r3
 8014b1a:	4770      	bx	lr

08014b1c <_init>:
 8014b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b1e:	bf00      	nop
 8014b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b22:	bc08      	pop	{r3}
 8014b24:	469e      	mov	lr, r3
 8014b26:	4770      	bx	lr

08014b28 <_fini>:
 8014b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b2a:	bf00      	nop
 8014b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b2e:	bc08      	pop	{r3}
 8014b30:	469e      	mov	lr, r3
 8014b32:	4770      	bx	lr
