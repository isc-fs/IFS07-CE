
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb74  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800ee44  0800ee44  0000fe44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f194  0800f194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f19c  0800f19c  0001019c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f1a0  0800f1a0  000101a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800f1a4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008a0  2400006c  0800f210  0001106c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400090c  0800f210  0001190c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001106c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000245bf  00000000  00000000  0001109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003a37  00000000  00000000  00035659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001cf8  00000000  00000000  00039090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000168b  00000000  00000000  0003ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038f89  00000000  00000000  0003c413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023c10  00000000  00000000  0007539c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001789ee  00000000  00000000  00098fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021199a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000837c  00000000  00000000  002119e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  00219d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ee2c 	.word	0x0800ee2c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800ee2c 	.word	0x0800ee2c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f001 ffc0 	bl	8002674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f998 	bl	8000a28 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f8:	f000 fa04 	bl	8000b04 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 fdac 	bl	8001258 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000700:	f000 fa32 	bl	8000b68 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000704:	f000 fa98 	bl	8000c38 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000708:	f000 fb14 	bl	8000d34 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 800070c:	f000 fc2c 	bl	8000f68 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000710:	f000 fd56 	bl	80011c0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000714:	f000 fce0 	bl	80010d8 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000718:	f000 fd06 	bl	8001128 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 800071c:	f000 fc06 	bl	8000f2c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000720:	f00d fc40 	bl	800dfa4 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 8000724:	f000 fb84 	bl	8000e30 <MX_FDCAN3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, CTRL_FANS_Pin, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2110      	movs	r1, #16
 800072c:	4896      	ldr	r0, [pc, #600]	@ (8000988 <main+0x29c>)
 800072e:	f005 fa17 	bl	8005b60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, CTRL_PUMP_Pin, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	2102      	movs	r1, #2
 8000736:	4894      	ldr	r0, [pc, #592]	@ (8000988 <main+0x29c>)
 8000738:	f005 fa12 	bl	8005b60 <HAL_GPIO_WritePin>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800073c:	4893      	ldr	r0, [pc, #588]	@ (800098c <main+0x2a0>)
 800073e:	f004 f8e1 	bl	8004904 <HAL_FDCAN_Start>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d004      	beq.n	8000752 <main+0x66>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000748:	4891      	ldr	r0, [pc, #580]	@ (8000990 <main+0x2a4>)
 800074a:	f000 fe91 	bl	8001470 <print>
#endif
		Error_Handler();
 800074e:	f001 fa9b 	bl	8001c88 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000752:	2200      	movs	r2, #0
 8000754:	2101      	movs	r1, #1
 8000756:	488d      	ldr	r0, [pc, #564]	@ (800098c <main+0x2a0>)
 8000758:	f004 fac6 	bl	8004ce8 <HAL_FDCAN_ActivateNotification>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d004      	beq.n	800076c <main+0x80>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000762:	488c      	ldr	r0, [pc, #560]	@ (8000994 <main+0x2a8>)
 8000764:	f000 fe84 	bl	8001470 <print>
#endif
		Error_Handler();
 8000768:	f001 fa8e 	bl	8001c88 <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800076c:	488a      	ldr	r0, [pc, #552]	@ (8000998 <main+0x2ac>)
 800076e:	f004 f8c9 	bl	8004904 <HAL_FDCAN_Start>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d004      	beq.n	8000782 <main+0x96>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 8000778:	4888      	ldr	r0, [pc, #544]	@ (800099c <main+0x2b0>)
 800077a:	f000 fe79 	bl	8001470 <print>

#endif
		Error_Handler();
 800077e:	f001 fa83 	bl	8001c88 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000782:	2200      	movs	r2, #0
 8000784:	2101      	movs	r1, #1
 8000786:	4884      	ldr	r0, [pc, #528]	@ (8000998 <main+0x2ac>)
 8000788:	f004 faae 	bl	8004ce8 <HAL_FDCAN_ActivateNotification>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d004      	beq.n	800079c <main+0xb0>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 8000792:	4883      	ldr	r0, [pc, #524]	@ (80009a0 <main+0x2b4>)
 8000794:	f000 fe6c 	bl	8001470 <print>
#endif
		Error_Handler();
 8000798:	f001 fa76 	bl	8001c88 <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 800079c:	4881      	ldr	r0, [pc, #516]	@ (80009a4 <main+0x2b8>)
 800079e:	f004 f8b1 	bl	8004904 <HAL_FDCAN_Start>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d004      	beq.n	80007b2 <main+0xc6>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 80007a8:	487f      	ldr	r0, [pc, #508]	@ (80009a8 <main+0x2bc>)
 80007aa:	f000 fe61 	bl	8001470 <print>

#endif
		Error_Handler();
 80007ae:	f001 fa6b 	bl	8001c88 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80007b2:	2200      	movs	r2, #0
 80007b4:	2101      	movs	r1, #1
 80007b6:	487b      	ldr	r0, [pc, #492]	@ (80009a4 <main+0x2b8>)
 80007b8:	f004 fa96 	bl	8004ce8 <HAL_FDCAN_ActivateNotification>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d004      	beq.n	80007cc <main+0xe0>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 80007c2:	487a      	ldr	r0, [pc, #488]	@ (80009ac <main+0x2c0>)
 80007c4:	f000 fe54 	bl	8001470 <print>
#endif
		Error_Handler();
 80007c8:	f001 fa5e 	bl	8001c88 <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 80007cc:	4878      	ldr	r0, [pc, #480]	@ (80009b0 <main+0x2c4>)
 80007ce:	f000 fe4f 	bl	8001470 <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * preescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 80007d2:	4878      	ldr	r0, [pc, #480]	@ (80009b4 <main+0x2c8>)
 80007d4:	f00a fa20 	bl	800ac18 <HAL_TIM_Base_Start_IT>


	// Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0)
 80007d8:	e006      	b.n	80007e8 <main+0xfc>
	{
		//print("Solicitar tensión inversor");
		if (config_inv_lectura_v == 1)
 80007da:	4b77      	ldr	r3, [pc, #476]	@ (80009b8 <main+0x2cc>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d102      	bne.n	80007e8 <main+0xfc>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 80007e2:	4876      	ldr	r0, [pc, #472]	@ (80009bc <main+0x2d0>)
 80007e4:	f000 fe44 	bl	8001470 <print>
	while (config_inv_lectura_v == 0)
 80007e8:	4b73      	ldr	r3, [pc, #460]	@ (80009b8 <main+0x2cc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d0f4      	beq.n	80007da <main+0xee>
	}

#if !CALIBRATION

	// Estado STAND BY inversor
	while (state != 3)
 80007f0:	e006      	b.n	8000800 <main+0x114>
	{
		if (state == 3)
 80007f2:	4b73      	ldr	r3, [pc, #460]	@ (80009c0 <main+0x2d4>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d102      	bne.n	8000800 <main+0x114>
		{
#if DEBUG
			print("Precarga");
 80007fa:	4872      	ldr	r0, [pc, #456]	@ (80009c4 <main+0x2d8>)
 80007fc:	f000 fe38 	bl	8001470 <print>
	while (state != 3)
 8000800:	4b6f      	ldr	r3, [pc, #444]	@ (80009c0 <main+0x2d4>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d1f4      	bne.n	80007f2 <main+0x106>
#endif
		}
	}
	// PRE-CHARGE
	while (precarga_inv == 0)
 8000808:	e031      	b.n	800086e <main+0x182>
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 800080a:	4b6f      	ldr	r3, [pc, #444]	@ (80009c8 <main+0x2dc>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	496e      	ldr	r1, [pc, #440]	@ (80009cc <main+0x2e0>)
 8000812:	486f      	ldr	r0, [pc, #444]	@ (80009d0 <main+0x2e4>)
 8000814:	f00d fe6a 	bl	800e4ec <siprintf>
		print(TxBuffer);
 8000818:	486d      	ldr	r0, [pc, #436]	@ (80009d0 <main+0x2e4>)
 800081a:	f000 fe29 	bl	8001470 <print>
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800081e:	4b6d      	ldr	r3, [pc, #436]	@ (80009d4 <main+0x2e8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a6d      	ldr	r2, [pc, #436]	@ (80009d8 <main+0x2ec>)
 8000824:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8000826:	4b6c      	ldr	r3, [pc, #432]	@ (80009d8 <main+0x2ec>)
 8000828:	2202      	movs	r2, #2
 800082a:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 800082c:	4b6a      	ldr	r3, [pc, #424]	@ (80009d8 <main+0x2ec>)
 800082e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000832:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000834:	4b68      	ldr	r3, [pc, #416]	@ (80009d8 <main+0x2ec>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 800083a:	4b67      	ldr	r3, [pc, #412]	@ (80009d8 <main+0x2ec>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000840:	4b61      	ldr	r3, [pc, #388]	@ (80009c8 <main+0x2dc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b65      	ldr	r3, [pc, #404]	@ (80009dc <main+0x2f0>)
 8000848:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 800084a:	4b5f      	ldr	r3, [pc, #380]	@ (80009c8 <main+0x2dc>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	121b      	asrs	r3, r3, #8
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b62      	ldr	r3, [pc, #392]	@ (80009dc <main+0x2f0>)
 8000854:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000856:	4a61      	ldr	r2, [pc, #388]	@ (80009dc <main+0x2f0>)
 8000858:	495f      	ldr	r1, [pc, #380]	@ (80009d8 <main+0x2ec>)
 800085a:	484f      	ldr	r0, [pc, #316]	@ (8000998 <main+0x2ac>)
 800085c:	f004 f87d 	bl	800495a <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		if (precarga_inv == 1)
 8000860:	4b5f      	ldr	r3, [pc, #380]	@ (80009e0 <main+0x2f4>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d102      	bne.n	800086e <main+0x182>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 8000868:	485e      	ldr	r0, [pc, #376]	@ (80009e4 <main+0x2f8>)
 800086a:	f000 fe01 	bl	8001470 <print>
	while (precarga_inv == 0)
 800086e:	4b5c      	ldr	r3, [pc, #368]	@ (80009e0 <main+0x2f4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0c9      	beq.n	800080a <main+0x11e>
		//	precarga_inv = 1;
		//}
	}

#if DEBUG
	print("state : stand by");
 8000876:	485c      	ldr	r0, [pc, #368]	@ (80009e8 <main+0x2fc>)
 8000878:	f000 fdfa 	bl	8001470 <print>
#endif

	while (state != 4)
 800087c:	e037      	b.n	80008ee <main+0x202>
	{
		// Estado READY inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 800087e:	4b5b      	ldr	r3, [pc, #364]	@ (80009ec <main+0x300>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a5b      	ldr	r2, [pc, #364]	@ (80009f0 <main+0x304>)
 8000884:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8000886:	4b5a      	ldr	r3, [pc, #360]	@ (80009f0 <main+0x304>)
 8000888:	2203      	movs	r2, #3
 800088a:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 800088c:	4b58      	ldr	r3, [pc, #352]	@ (80009f0 <main+0x304>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 8000892:	4b58      	ldr	r3, [pc, #352]	@ (80009f4 <main+0x308>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000898:	4b56      	ldr	r3, [pc, #344]	@ (80009f4 <main+0x308>)
 800089a:	2200      	movs	r2, #0
 800089c:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x4;
 800089e:	4b55      	ldr	r3, [pc, #340]	@ (80009f4 <main+0x308>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80008a4:	4a53      	ldr	r2, [pc, #332]	@ (80009f4 <main+0x308>)
 80008a6:	4952      	ldr	r1, [pc, #328]	@ (80009f0 <main+0x304>)
 80008a8:	4838      	ldr	r0, [pc, #224]	@ (800098c <main+0x2a0>)
 80008aa:	f004 f856 	bl	800495a <HAL_FDCAN_AddMessageToTxFifoQ>

		TxHeader_Inv.Identifier = 0x362;
 80008ae:	4b50      	ldr	r3, [pc, #320]	@ (80009f0 <main+0x304>)
 80008b0:	f240 3262 	movw	r2, #866	@ 0x362
 80008b4:	601a      	str	r2, [r3, #0]
		TxHeader_Inv.DataLength = 4;
 80008b6:	4b4e      	ldr	r3, [pc, #312]	@ (80009f0 <main+0x304>)
 80008b8:	2204      	movs	r2, #4
 80008ba:	60da      	str	r2, [r3, #12]

		real_torque = 0;
 80008bc:	4b4e      	ldr	r3, [pc, #312]	@ (80009f8 <main+0x30c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	801a      	strh	r2, [r3, #0]

		TxData_Inv[0] = 0x0;
 80008c2:	4b4c      	ldr	r3, [pc, #304]	@ (80009f4 <main+0x308>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 80008c8:	4b4a      	ldr	r3, [pc, #296]	@ (80009f4 <main+0x308>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = real_torque;
 80008ce:	4b4a      	ldr	r3, [pc, #296]	@ (80009f8 <main+0x30c>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b47      	ldr	r3, [pc, #284]	@ (80009f4 <main+0x308>)
 80008d6:	709a      	strb	r2, [r3, #2]
		TxData_Inv[3] = 0x0;
 80008d8:	4b46      	ldr	r3, [pc, #280]	@ (80009f4 <main+0x308>)
 80008da:	2200      	movs	r2, #0
 80008dc:	70da      	strb	r2, [r3, #3]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80008de:	4a45      	ldr	r2, [pc, #276]	@ (80009f4 <main+0x308>)
 80008e0:	4943      	ldr	r1, [pc, #268]	@ (80009f0 <main+0x304>)
 80008e2:	482a      	ldr	r0, [pc, #168]	@ (800098c <main+0x2a0>)
 80008e4:	f004 f839 	bl	800495a <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(10);
 80008e8:	200a      	movs	r0, #10
 80008ea:	f001 ff55 	bl	8002798 <HAL_Delay>
	while (state != 4)
 80008ee:	4b34      	ldr	r3, [pc, #208]	@ (80009c0 <main+0x2d4>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d1c3      	bne.n	800087e <main+0x192>

	}

#if DEBUG
	print("state: ready");
 80008f6:	4841      	ldr	r0, [pc, #260]	@ (80009fc <main+0x310>)
 80008f8:	f000 fdba 	bl	8001470 <print>

#endif

#if !CALIBRATION
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	boton_arranque = 1; // VSV
 80008fc:	4b40      	ldr	r3, [pc, #256]	@ (8000a00 <main+0x314>)
 80008fe:	2201      	movs	r2, #1
 8000900:	601a      	str	r2, [r3, #0]
	while (boton_arranque == 0)
 8000902:	e027      	b.n	8000954 <main+0x268>
	{

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000904:	2180      	movs	r1, #128	@ 0x80
 8000906:	483f      	ldr	r0, [pc, #252]	@ (8000a04 <main+0x318>)
 8000908:	f005 f912 	bl	8005b30 <HAL_GPIO_ReadPin>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	4b3d      	ldr	r3, [pc, #244]	@ (8000a08 <main+0x31c>)
 8000912:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (start_button_act == 1 && start_button_ant == 0)
 8000914:	4b3c      	ldr	r3, [pc, #240]	@ (8000a08 <main+0x31c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d11b      	bne.n	8000954 <main+0x268>
 800091c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a0c <main+0x320>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d117      	bne.n	8000954 <main+0x268>
		{

#if DEBUG
			print("Botón Start + Freno:");
 8000924:	483a      	ldr	r0, [pc, #232]	@ (8000a10 <main+0x324>)
 8000926:	f000 fda3 	bl	8001470 <print>
			printValue(s_freno);
 800092a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a14 <main+0x328>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fdbc 	bl	80014ac <printValue>
#endif
			if (s_freno > UMBRAL_FRENO)
 8000934:	4b37      	ldr	r3, [pc, #220]	@ (8000a14 <main+0x328>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800093c:	4293      	cmp	r3, r2
 800093e:	dd06      	ble.n	800094e <main+0x262>
			{
				boton_arranque = 1;
 8000940:	4b2f      	ldr	r3, [pc, #188]	@ (8000a00 <main+0x314>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 8000946:	4834      	ldr	r0, [pc, #208]	@ (8000a18 <main+0x32c>)
 8000948:	f000 fd92 	bl	8001470 <print>
 800094c:	e002      	b.n	8000954 <main+0x268>
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 800094e:	4833      	ldr	r0, [pc, #204]	@ (8000a1c <main+0x330>)
 8000950:	f000 fd8e 	bl	8001470 <print>
	while (boton_arranque == 0)
 8000954:	4b2a      	ldr	r3, [pc, #168]	@ (8000a00 <main+0x314>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d0d3      	beq.n	8000904 <main+0x218>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 800095c:	4830      	ldr	r0, [pc, #192]	@ (8000a20 <main+0x334>)
 800095e:	f000 fd87 	bl	8001470 <print>
#endif
#if !CALIBRATION

	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 8000962:	2201      	movs	r2, #1
 8000964:	2102      	movs	r1, #2
 8000966:	4808      	ldr	r0, [pc, #32]	@ (8000988 <main+0x29c>)
 8000968:	f005 f8fa 	bl	8005b60 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800096c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000970:	f001 ff12 	bl	8002798 <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 8000974:	2200      	movs	r2, #0
 8000976:	2102      	movs	r1, #2
 8000978:	4803      	ldr	r0, [pc, #12]	@ (8000988 <main+0x29c>)
 800097a:	f005 f8f1 	bl	8005b60 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 800097e:	4829      	ldr	r0, [pc, #164]	@ (8000a24 <main+0x338>)
 8000980:	f000 fd76 	bl	8001470 <print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <main+0x298>
 8000988:	58020800 	.word	0x58020800
 800098c:	24000104 	.word	0x24000104
 8000990:	0800ee44 	.word	0x0800ee44
 8000994:	0800ee64 	.word	0x0800ee64
 8000998:	240001a4 	.word	0x240001a4
 800099c:	0800ee8c 	.word	0x0800ee8c
 80009a0:	0800eeac 	.word	0x0800eeac
 80009a4:	24000244 	.word	0x24000244
 80009a8:	0800eed4 	.word	0x0800eed4
 80009ac:	0800eef4 	.word	0x0800eef4
 80009b0:	0800ef1c 	.word	0x0800ef1c
 80009b4:	240003ac 	.word	0x240003ac
 80009b8:	2400008c 	.word	0x2400008c
 80009bc:	0800ef38 	.word	0x0800ef38
 80009c0:	2400062e 	.word	0x2400062e
 80009c4:	0800ef6c 	.word	0x0800ef6c
 80009c8:	24000610 	.word	0x24000610
 80009cc:	0800ef78 	.word	0x0800ef78
 80009d0:	240006a0 	.word	0x240006a0
 80009d4:	24000004 	.word	0x24000004
 80009d8:	2400056c 	.word	0x2400056c
 80009dc:	240005f0 	.word	0x240005f0
 80009e0:	24000088 	.word	0x24000088
 80009e4:	0800ef90 	.word	0x0800ef90
 80009e8:	0800efac 	.word	0x0800efac
 80009ec:	24000000 	.word	0x24000000
 80009f0:	24000520 	.word	0x24000520
 80009f4:	240005e0 	.word	0x240005e0
 80009f8:	2400062c 	.word	0x2400062c
 80009fc:	0800efc0 	.word	0x0800efc0
 8000a00:	24000090 	.word	0x24000090
 8000a04:	58021800 	.word	0x58021800
 8000a08:	24000608 	.word	0x24000608
 8000a0c:	2400060c 	.word	0x2400060c
 8000a10:	0800efd0 	.word	0x0800efd0
 8000a14:	24000620 	.word	0x24000620
 8000a18:	0800efe8 	.word	0x0800efe8
 8000a1c:	0800f008 	.word	0x0800f008
 8000a20:	0800f024 	.word	0x0800f024
 8000a24:	0800f034 	.word	0x0800f034

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09c      	sub	sp, #112	@ 0x70
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a32:	224c      	movs	r2, #76	@ 0x4c
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00d fd7a 	bl	800e530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2220      	movs	r2, #32
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00d fd74 	bl	800e530 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f005 f8a3 	bl	8005b94 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b2b      	ldr	r3, [pc, #172]	@ (8000b00 <SystemClock_Config+0xd8>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a2a      	ldr	r2, [pc, #168]	@ (8000b00 <SystemClock_Config+0xd8>)
 8000a58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b28      	ldr	r3, [pc, #160]	@ (8000b00 <SystemClock_Config+0xd8>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a6a:	bf00      	nop
 8000a6c:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <SystemClock_Config+0xd8>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a78:	d1f8      	bne.n	8000a6c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a84:	2302      	movs	r3, #2
 8000a86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000a90:	232c      	movs	r3, #44	@ 0x2c
 8000a92:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a94:	2301      	movs	r3, #1
 8000a96:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f005 f8a9 	bl	8005c08 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000abc:	f001 f8e4 	bl	8001c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	233f      	movs	r3, #63	@ 0x3f
 8000ac2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000acc:	2308      	movs	r3, #8
 8000ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ad0:	2340      	movs	r3, #64	@ 0x40
 8000ad2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ad4:	2340      	movs	r3, #64	@ 0x40
 8000ad6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000adc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ade:	2340      	movs	r3, #64	@ 0x40
 8000ae0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f005 fc68 	bl	80063bc <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000af2:	f001 f8c9 	bl	8001c88 <Error_Handler>
  }
}
 8000af6:	bf00      	nop
 8000af8:	3770      	adds	r7, #112	@ 0x70
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	58024800 	.word	0x58024800

08000b04 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0ae      	sub	sp, #184	@ 0xb8
 8000b08:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	22b8      	movs	r2, #184	@ 0xb8
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f00d fd0d 	bl	800e530 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000b16:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000b1a:	f04f 0300 	mov.w	r3, #0
 8000b1e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000b22:	2302      	movs	r3, #2
 8000b24:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000b26:	2310      	movs	r3, #16
 8000b28:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b36:	23c0      	movs	r3, #192	@ 0xc0
 8000b38:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000b42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b46:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4618      	mov	r0, r3
 8000b52:	f005 ffbf 	bl	8006ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000b5c:	f001 f894 	bl	8001c88 <Error_Handler>
  }
}
 8000b60:	bf00      	nop
 8000b62:	37b8      	adds	r7, #184	@ 0xb8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2224      	movs	r2, #36	@ 0x24
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00d fcdb 	bl	800e530 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000b7c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c30 <MX_ADC2_Init+0xc8>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b80:	4b2a      	ldr	r3, [pc, #168]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000b82:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b86:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b88:	4b28      	ldr	r3, [pc, #160]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b8e:	4b27      	ldr	r3, [pc, #156]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b94:	4b25      	ldr	r3, [pc, #148]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000b96:	2204      	movs	r2, #4
 8000b98:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b9a:	4b24      	ldr	r3, [pc, #144]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ba0:	4b22      	ldr	r3, [pc, #136]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bac:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000be0:	4812      	ldr	r0, [pc, #72]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000be2:	f002 f885 	bl	8002cf0 <HAL_ADC_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000bec:	f001 f84c 	bl	8001c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <MX_ADC2_Init+0xcc>)
 8000bf2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bfc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c00:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c02:	2304      	movs	r3, #4
 8000c04:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <MX_ADC2_Init+0xc4>)
 8000c16:	f002 fcc1 	bl	800359c <HAL_ADC_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000c20:	f001 f832 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	@ 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	24000094 	.word	0x24000094
 8000c30:	40022100 	.word	0x40022100
 8000c34:	25b00200 	.word	0x25b00200

08000c38 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c40:	4a3b      	ldr	r2, [pc, #236]	@ (8000d30 <MX_FDCAN1_Init+0xf8>)
 8000c42:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c44:	4b39      	ldr	r3, [pc, #228]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c4a:	4b38      	ldr	r3, [pc, #224]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000c50:	4b36      	ldr	r3, [pc, #216]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c56:	4b35      	ldr	r3, [pc, #212]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c5c:	4b33      	ldr	r3, [pc, #204]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000c62:	4b32      	ldr	r3, [pc, #200]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c64:	2206      	movs	r2, #6
 8000c66:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c68:	4b30      	ldr	r3, [pc, #192]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000c74:	4b2d      	ldr	r3, [pc, #180]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c76:	2205      	movs	r2, #5
 8000c78:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c80:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c86:	4b29      	ldr	r3, [pc, #164]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c8c:	4b27      	ldr	r3, [pc, #156]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000c92:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000c9e:	4b23      	ldr	r3, [pc, #140]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000ca4:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000cac:	2204      	movs	r2, #4
 8000cae:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000cb8:	2204      	movs	r2, #4
 8000cba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cda:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ce6:	4811      	ldr	r0, [pc, #68]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000ce8:	f003 fbb8 	bl	800445c <HAL_FDCAN_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000cf2:	f000 ffc9 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000d02:	2301      	movs	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <MX_FDCAN1_Init+0xf4>)
 8000d14:	f003 fd80 	bl	8004818 <HAL_FDCAN_ConfigFilter>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8000d1e:	f000 ffb3 	bl	8001c88 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3720      	adds	r7, #32
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	24000104 	.word	0x24000104
 8000d30:	4000a000 	.word	0x4000a000

08000d34 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d3c:	4a3b      	ldr	r2, [pc, #236]	@ (8000e2c <MX_FDCAN2_Init+0xf8>)
 8000d3e:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d40:	4b39      	ldr	r3, [pc, #228]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000d46:	4b38      	ldr	r3, [pc, #224]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000d4c:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d52:	4b35      	ldr	r3, [pc, #212]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d58:	4b33      	ldr	r3, [pc, #204]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000d5e:	4b32      	ldr	r3, [pc, #200]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d60:	2206      	movs	r2, #6
 8000d62:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000d64:	4b30      	ldr	r3, [pc, #192]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000d70:	4b2d      	ldr	r3, [pc, #180]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d72:	2205      	movs	r2, #5
 8000d74:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d76:	4b2c      	ldr	r3, [pc, #176]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000d82:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000d88:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000d8e:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000d94:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000d9a:	4b23      	ldr	r3, [pc, #140]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000da0:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000da2:	2210      	movs	r2, #16
 8000da4:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000da6:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000da8:	2204      	movs	r2, #4
 8000daa:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000dac:	4b1e      	ldr	r3, [pc, #120]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000dae:	2210      	movs	r2, #16
 8000db0:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000db2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000db4:	2204      	movs	r2, #4
 8000db6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000dd2:	2210      	movs	r2, #16
 8000dd4:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000dde:	2204      	movs	r2, #4
 8000de0:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000de2:	4811      	ldr	r0, [pc, #68]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000de4:	f003 fb3a 	bl	800445c <HAL_FDCAN_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000dee:	f000 ff4b 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000df2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000df6:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000e00:	2301      	movs	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_FDCAN2_Init+0xf4>)
 8000e12:	f003 fd01 	bl	8004818 <HAL_FDCAN_ConfigFilter>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8000e1c:	f000 ff34 	bl	8001c88 <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	240001a4 	.word	0x240001a4
 8000e2c:	4000a400 	.word	0x4000a400

08000e30 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000e36:	4b3b      	ldr	r3, [pc, #236]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e38:	4a3b      	ldr	r2, [pc, #236]	@ (8000f28 <MX_FDCAN3_Init+0xf8>)
 8000e3a:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e3c:	4b39      	ldr	r3, [pc, #228]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000e42:	4b38      	ldr	r3, [pc, #224]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000e48:	4b36      	ldr	r3, [pc, #216]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000e4e:	4b35      	ldr	r3, [pc, #212]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000e54:	4b33      	ldr	r3, [pc, #204]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 8000e5a:	4b32      	ldr	r3, [pc, #200]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e5c:	2206      	movs	r2, #6
 8000e5e:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000e60:	4b30      	ldr	r3, [pc, #192]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000e66:	4b2f      	ldr	r3, [pc, #188]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e6e:	2205      	movs	r2, #5
 8000e70:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000e72:	4b2c      	ldr	r3, [pc, #176]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000e78:	4b2a      	ldr	r3, [pc, #168]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000e7e:	4b29      	ldr	r3, [pc, #164]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000e84:	4b27      	ldr	r3, [pc, #156]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000e8a:	4b26      	ldr	r3, [pc, #152]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8000e90:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 8000e96:	4b23      	ldr	r3, [pc, #140]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 8000e9c:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000e9e:	2210      	movs	r2, #16
 8000ea0:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ea2:	4b20      	ldr	r3, [pc, #128]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000eaa:	2210      	movs	r2, #16
 8000eac:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000eae:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000ece:	2210      	movs	r2, #16
 8000ed0:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000ede:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000ee0:	f003 fabc 	bl	800445c <HAL_FDCAN_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 8000eea:	f000 fecd 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000eee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ef2:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000efc:	2301      	movs	r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_FDCAN3_Init+0xf4>)
 8000f0e:	f003 fc83 	bl	8004818 <HAL_FDCAN_ConfigFilter>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 8000f18:	f000 feb6 	bl	8001c88 <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	24000244 	.word	0x24000244
 8000f28:	4000d400 	.word	0x4000d400

08000f2c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f30:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <MX_SDMMC1_SD_Init+0x34>)
 8000f32:	4a0c      	ldr	r2, [pc, #48]	@ (8000f64 <MX_SDMMC1_SD_Init+0x38>)
 8000f34:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <MX_SDMMC1_SD_Init+0x34>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <MX_SDMMC1_SD_Init+0x34>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f42:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <MX_SDMMC1_SD_Init+0x34>)
 8000f44:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f48:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <MX_SDMMC1_SD_Init+0x34>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8000f50:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <MX_SDMMC1_SD_Init+0x34>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	240002e4 	.word	0x240002e4
 8000f64:	52007000 	.word	0x52007000

08000f68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b09c      	sub	sp, #112	@ 0x70
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2234      	movs	r2, #52	@ 0x34
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f00d fac4 	bl	800e530 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fa8:	4b49      	ldr	r3, [pc, #292]	@ (80010d0 <MX_TIM1_Init+0x168>)
 8000faa:	4a4a      	ldr	r2, [pc, #296]	@ (80010d4 <MX_TIM1_Init+0x16c>)
 8000fac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fae:	4b48      	ldr	r3, [pc, #288]	@ (80010d0 <MX_TIM1_Init+0x168>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b46      	ldr	r3, [pc, #280]	@ (80010d0 <MX_TIM1_Init+0x168>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fba:	4b45      	ldr	r3, [pc, #276]	@ (80010d0 <MX_TIM1_Init+0x168>)
 8000fbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc2:	4b43      	ldr	r3, [pc, #268]	@ (80010d0 <MX_TIM1_Init+0x168>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fc8:	4b41      	ldr	r3, [pc, #260]	@ (80010d0 <MX_TIM1_Init+0x168>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fce:	4b40      	ldr	r3, [pc, #256]	@ (80010d0 <MX_TIM1_Init+0x168>)
 8000fd0:	2280      	movs	r2, #128	@ 0x80
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fd4:	483e      	ldr	r0, [pc, #248]	@ (80010d0 <MX_TIM1_Init+0x168>)
 8000fd6:	f009 fdc7 	bl	800ab68 <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fe0:	f000 fe52 	bl	8001c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4837      	ldr	r0, [pc, #220]	@ (80010d0 <MX_TIM1_Init+0x168>)
 8000ff2:	f00a f913 	bl	800b21c <HAL_TIM_ConfigClockSource>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ffc:	f000 fe44 	bl	8001c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001000:	4833      	ldr	r0, [pc, #204]	@ (80010d0 <MX_TIM1_Init+0x168>)
 8001002:	f009 fe8f 	bl	800ad24 <HAL_TIM_PWM_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800100c:	f000 fe3c 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800101c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001020:	4619      	mov	r1, r3
 8001022:	482b      	ldr	r0, [pc, #172]	@ (80010d0 <MX_TIM1_Init+0x168>)
 8001024:	f00a fe40 	bl	800bca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800102e:	f000 fe2b 	bl	8001c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001032:	2360      	movs	r3, #96	@ 0x60
 8001034:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800103a:	2300      	movs	r3, #0
 800103c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800103e:	2300      	movs	r3, #0
 8001040:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800104e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001052:	2200      	movs	r2, #0
 8001054:	4619      	mov	r1, r3
 8001056:	481e      	ldr	r0, [pc, #120]	@ (80010d0 <MX_TIM1_Init+0x168>)
 8001058:	f009 ffcc 	bl	800aff4 <HAL_TIM_PWM_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001062:	f000 fe11 	bl	8001c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001066:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800106a:	2204      	movs	r2, #4
 800106c:	4619      	mov	r1, r3
 800106e:	4818      	ldr	r0, [pc, #96]	@ (80010d0 <MX_TIM1_Init+0x168>)
 8001070:	f009 ffc0 	bl	800aff4 <HAL_TIM_PWM_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800107a:	f000 fe05 	bl	8001c88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001092:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001096:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	@ (80010d0 <MX_TIM1_Init+0x168>)
 80010b4:	f00a fe94 	bl	800bde0 <HAL_TIMEx_ConfigBreakDeadTime>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80010be:	f000 fde3 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010c2:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <MX_TIM1_Init+0x168>)
 80010c4:	f001 f89e 	bl	8002204 <HAL_TIM_MspPostInit>

}
 80010c8:	bf00      	nop
 80010ca:	3770      	adds	r7, #112	@ 0x70
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	24000360 	.word	0x24000360
 80010d4:	40010000 	.word	0x40010000

080010d8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80010dc:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <MX_TIM16_Init+0x48>)
 80010de:	4a11      	ldr	r2, [pc, #68]	@ (8001124 <MX_TIM16_Init+0x4c>)
 80010e0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_TIM16_Init+0x48>)
 80010e4:	f44f 7204 	mov.w	r2, #528	@ 0x210
 80010e8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <MX_TIM16_Init+0x48>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 80010f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <MX_TIM16_Init+0x48>)
 80010f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010f6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <MX_TIM16_Init+0x48>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80010fe:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <MX_TIM16_Init+0x48>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <MX_TIM16_Init+0x48>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_TIM16_Init+0x48>)
 800110c:	f009 fd2c 	bl	800ab68 <HAL_TIM_Base_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001116:	f000 fdb7 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	240003ac 	.word	0x240003ac
 8001124:	40014400 	.word	0x40014400

08001128 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800112c:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 800112e:	4a23      	ldr	r2, [pc, #140]	@ (80011bc <MX_USART1_UART_Init+0x94>)
 8001130:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116a:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001170:	4811      	ldr	r0, [pc, #68]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 8001172:	f00a fedf 	bl	800bf34 <HAL_UART_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800117c:	f000 fd84 	bl	8001c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 8001184:	f00c f879 	bl	800d27a <HAL_UARTEx_SetTxFifoThreshold>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800118e:	f000 fd7b 	bl	8001c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001192:	2100      	movs	r1, #0
 8001194:	4808      	ldr	r0, [pc, #32]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 8001196:	f00c f8ae 	bl	800d2f6 <HAL_UARTEx_SetRxFifoThreshold>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011a0:	f000 fd72 	bl	8001c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <MX_USART1_UART_Init+0x90>)
 80011a6:	f00c f82f 	bl	800d208 <HAL_UARTEx_DisableFifoMode>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011b0:	f000 fd6a 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	240003f8 	.word	0x240003f8
 80011bc:	40011000 	.word	0x40011000

080011c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 80011c6:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <MX_USART2_UART_Init+0x94>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011de:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001208:	4811      	ldr	r0, [pc, #68]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 800120a:	f00a fe93 	bl	800bf34 <HAL_UART_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001214:	f000 fd38 	bl	8001c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001218:	2100      	movs	r1, #0
 800121a:	480d      	ldr	r0, [pc, #52]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 800121c:	f00c f82d 	bl	800d27a <HAL_UARTEx_SetTxFifoThreshold>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001226:	f000 fd2f 	bl	8001c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122a:	2100      	movs	r1, #0
 800122c:	4808      	ldr	r0, [pc, #32]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 800122e:	f00c f862 	bl	800d2f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001238:	f000 fd26 	bl	8001c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	@ (8001250 <MX_USART2_UART_Init+0x90>)
 800123e:	f00b ffe3 	bl	800d208 <HAL_UARTEx_DisableFifoMode>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001248:	f000 fd1e 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2400048c 	.word	0x2400048c
 8001254:	40004400 	.word	0x40004400

08001258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08e      	sub	sp, #56	@ 0x38
 800125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	4b7a      	ldr	r3, [pc, #488]	@ (8001458 <MX_GPIO_Init+0x200>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001274:	4a78      	ldr	r2, [pc, #480]	@ (8001458 <MX_GPIO_Init+0x200>)
 8001276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800127e:	4b76      	ldr	r3, [pc, #472]	@ (8001458 <MX_GPIO_Init+0x200>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001288:	623b      	str	r3, [r7, #32]
 800128a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128c:	4b72      	ldr	r3, [pc, #456]	@ (8001458 <MX_GPIO_Init+0x200>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	4a71      	ldr	r2, [pc, #452]	@ (8001458 <MX_GPIO_Init+0x200>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800129c:	4b6e      	ldr	r3, [pc, #440]	@ (8001458 <MX_GPIO_Init+0x200>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b6b      	ldr	r3, [pc, #428]	@ (8001458 <MX_GPIO_Init+0x200>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	4a69      	ldr	r2, [pc, #420]	@ (8001458 <MX_GPIO_Init+0x200>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ba:	4b67      	ldr	r3, [pc, #412]	@ (8001458 <MX_GPIO_Init+0x200>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b63      	ldr	r3, [pc, #396]	@ (8001458 <MX_GPIO_Init+0x200>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	4a62      	ldr	r2, [pc, #392]	@ (8001458 <MX_GPIO_Init+0x200>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001458 <MX_GPIO_Init+0x200>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001458 <MX_GPIO_Init+0x200>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ec:	4a5a      	ldr	r2, [pc, #360]	@ (8001458 <MX_GPIO_Init+0x200>)
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f6:	4b58      	ldr	r3, [pc, #352]	@ (8001458 <MX_GPIO_Init+0x200>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001304:	4b54      	ldr	r3, [pc, #336]	@ (8001458 <MX_GPIO_Init+0x200>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	4a53      	ldr	r2, [pc, #332]	@ (8001458 <MX_GPIO_Init+0x200>)
 800130c:	f043 0310 	orr.w	r3, r3, #16
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001314:	4b50      	ldr	r3, [pc, #320]	@ (8001458 <MX_GPIO_Init+0x200>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001322:	4b4d      	ldr	r3, [pc, #308]	@ (8001458 <MX_GPIO_Init+0x200>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001328:	4a4b      	ldr	r2, [pc, #300]	@ (8001458 <MX_GPIO_Init+0x200>)
 800132a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001332:	4b49      	ldr	r3, [pc, #292]	@ (8001458 <MX_GPIO_Init+0x200>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001340:	4b45      	ldr	r3, [pc, #276]	@ (8001458 <MX_GPIO_Init+0x200>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001346:	4a44      	ldr	r2, [pc, #272]	@ (8001458 <MX_GPIO_Init+0x200>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001350:	4b41      	ldr	r3, [pc, #260]	@ (8001458 <MX_GPIO_Init+0x200>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin|CTRL_FANS_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2113      	movs	r1, #19
 8001362:	483e      	ldr	r0, [pc, #248]	@ (800145c <MX_GPIO_Init+0x204>)
 8001364:	f004 fbfc 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTRL_PUMP_GPIO_Port, CTRL_PUMP_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2102      	movs	r1, #2
 800136c:	483c      	ldr	r0, [pc, #240]	@ (8001460 <MX_GPIO_Init+0x208>)
 800136e:	f004 fbf7 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001378:	483a      	ldr	r0, [pc, #232]	@ (8001464 <MX_GPIO_Init+0x20c>)
 800137a:	f004 fbf1 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin CTRL_FANS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin|CTRL_FANS_Pin;
 800137e:	2313      	movs	r3, #19
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001392:	4619      	mov	r1, r3
 8001394:	4831      	ldr	r0, [pc, #196]	@ (800145c <MX_GPIO_Init+0x204>)
 8001396:	f004 fa23 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SUSPENSION_RL_Pin */
  GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 800139a:	2320      	movs	r3, #32
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139e:	2303      	movs	r3, #3
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	482b      	ldr	r0, [pc, #172]	@ (800145c <MX_GPIO_Init+0x204>)
 80013ae:	f004 fa17 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SUSPENSION_RR_Pin */
  GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 80013b2:	2301      	movs	r3, #1
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	4826      	ldr	r0, [pc, #152]	@ (8001460 <MX_GPIO_Init+0x208>)
 80013c6:	f004 fa0b 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTRL_PUMP_Pin */
  GPIO_InitStruct.Pin = CTRL_PUMP_Pin;
 80013ca:	2302      	movs	r3, #2
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CTRL_PUMP_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	481f      	ldr	r0, [pc, #124]	@ (8001460 <MX_GPIO_Init+0x208>)
 80013e2:	f004 f9fd 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : S_FRENO_Pin */
  GPIO_InitStruct.Pin = S_FRENO_Pin;
 80013e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ec:	2303      	movs	r3, #3
 80013ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	481b      	ldr	r0, [pc, #108]	@ (8001468 <MX_GPIO_Init+0x210>)
 80013fc:	f004 f9f0 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 8001400:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	4814      	ldr	r0, [pc, #80]	@ (8001468 <MX_GPIO_Init+0x210>)
 8001416:	f004 f9e3 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 800141a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	480c      	ldr	r0, [pc, #48]	@ (8001464 <MX_GPIO_Init+0x20c>)
 8001434:	f004 f9d4 	bl	80057e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	4808      	ldr	r0, [pc, #32]	@ (800146c <MX_GPIO_Init+0x214>)
 800144c:	f004 f9c8 	bl	80057e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001450:	bf00      	nop
 8001452:	3738      	adds	r7, #56	@ 0x38
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	58024400 	.word	0x58024400
 800145c:	58020800 	.word	0x58020800
 8001460:	58020400 	.word	0x58020400
 8001464:	58021000 	.word	0x58021000
 8001468:	58021400 	.word	0x58021400
 800146c:	58021800 	.word	0x58021800

08001470 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4909      	ldr	r1, [pc, #36]	@ (80014a0 <print+0x30>)
 800147c:	4809      	ldr	r0, [pc, #36]	@ (80014a4 <print+0x34>)
 800147e:	f00d f835 	bl	800e4ec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8001482:	4808      	ldr	r0, [pc, #32]	@ (80014a4 <print+0x34>)
 8001484:	f7fe ff44 	bl	8000310 <strlen>
 8001488:	4603      	mov	r3, r0
 800148a:	b29a      	uxth	r2, r3
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	4904      	ldr	r1, [pc, #16]	@ (80014a4 <print+0x34>)
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <print+0x38>)
 8001494:	f00a fd9e 	bl	800bfd4 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	0800f044 	.word	0x0800f044
 80014a4:	2400063c 	.word	0x2400063c
 80014a8:	2400048c 	.word	0x2400048c

080014ac <printValue>:

void printValue(int value)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4909      	ldr	r1, [pc, #36]	@ (80014dc <printValue+0x30>)
 80014b8:	4809      	ldr	r0, [pc, #36]	@ (80014e0 <printValue+0x34>)
 80014ba:	f00d f817 	bl	800e4ec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 80014be:	4808      	ldr	r0, [pc, #32]	@ (80014e0 <printValue+0x34>)
 80014c0:	f7fe ff26 	bl	8000310 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
 80014cc:	4904      	ldr	r1, [pc, #16]	@ (80014e0 <printValue+0x34>)
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <printValue+0x38>)
 80014d0:	f00a fd80 	bl	800bfd4 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	0800f04c 	.word	0x0800f04c
 80014e0:	2400063c 	.word	0x2400063c
 80014e4:	2400048c 	.word	0x2400048c

080014e8 <printHex>:

void printHex(uint8_t value)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_msg, "0x%02X \n\r", value);
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4909      	ldr	r1, [pc, #36]	@ (800151c <printHex+0x34>)
 80014f8:	4809      	ldr	r0, [pc, #36]	@ (8001520 <printHex+0x38>)
 80014fa:	f00c fff7 	bl	800e4ec <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 80014fe:	4808      	ldr	r0, [pc, #32]	@ (8001520 <printHex+0x38>)
 8001500:	f7fe ff06 	bl	8000310 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	b29a      	uxth	r2, r3
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	4904      	ldr	r1, [pc, #16]	@ (8001520 <printHex+0x38>)
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <printHex+0x3c>)
 8001510:	f00a fd60 	bl	800bfd4 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	0800f054 	.word	0x0800f054
 8001520:	2400063c 	.word	0x2400063c
 8001524:	2400048c 	.word	0x2400048c

08001528 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80cf 	beq.w	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a68      	ldr	r2, [pc, #416]	@ (80016f8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d167      	bne.n	800162c <HAL_FDCAN_RxFifo0Callback+0xf0>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 800155c:	4b67      	ldr	r3, [pc, #412]	@ (80016fc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800155e:	4a68      	ldr	r2, [pc, #416]	@ (8001700 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001560:	2140      	movs	r1, #64	@ 0x40
 8001562:	4868      	ldr	r0, [pc, #416]	@ (8001704 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001564:	f003 fa54 	bl	8004a10 <HAL_FDCAN_GetRxMessage>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 80c0 	bne.w	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 8001570:	4b63      	ldr	r3, [pc, #396]	@ (8001700 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f240 4266 	movw	r2, #1126	@ 0x466
 8001578:	4293      	cmp	r3, r2
 800157a:	d041      	beq.n	8001600 <HAL_FDCAN_RxFifo0Callback+0xc4>
 800157c:	f240 4266 	movw	r2, #1126	@ 0x466
 8001580:	4293      	cmp	r3, r2
 8001582:	f200 80b5 	bhi.w	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
 8001586:	f240 4261 	movw	r2, #1121	@ 0x461
 800158a:	4293      	cmp	r3, r2
 800158c:	d004      	beq.n	8001598 <HAL_FDCAN_RxFifo0Callback+0x5c>
 800158e:	f240 4263 	movw	r2, #1123	@ 0x463
 8001592:	4293      	cmp	r3, r2
 8001594:	d01a      	beq.n	80015cc <HAL_FDCAN_RxFifo0Callback+0x90>

				}
			}
		}
	}
}
 8001596:	e0ab      	b.n	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					state = RxData_Inv[4] & 0xF;
 8001598:	4b58      	ldr	r3, [pc, #352]	@ (80016fc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800159a:	791b      	ldrb	r3, [r3, #4]
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b59      	ldr	r3, [pc, #356]	@ (8001708 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80015a4:	701a      	strb	r2, [r3, #0]
					if (state == 10 || state == 11)
 80015a6:	4b58      	ldr	r3, [pc, #352]	@ (8001708 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b0a      	cmp	r3, #10
 80015ac:	d004      	beq.n	80015b8 <HAL_FDCAN_RxFifo0Callback+0x7c>
 80015ae:	4b56      	ldr	r3, [pc, #344]	@ (8001708 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b0b      	cmp	r3, #11
 80015b4:	f040 8095 	bne.w	80016e2 <HAL_FDCAN_RxFifo0Callback+0x1a6>
						error = RxData_Inv[2];
 80015b8:	4b50      	ldr	r3, [pc, #320]	@ (80016fc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80015ba:	789a      	ldrb	r2, [r3, #2]
 80015bc:	4b53      	ldr	r3, [pc, #332]	@ (800170c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80015be:	701a      	strb	r2, [r3, #0]
						printHex(error);
 80015c0:	4b52      	ldr	r3, [pc, #328]	@ (800170c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff8f 	bl	80014e8 <printHex>
					break;
 80015ca:	e08a      	b.n	80016e2 <HAL_FDCAN_RxFifo0Callback+0x1a6>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 80015cc:	4b4b      	ldr	r3, [pc, #300]	@ (80016fc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80015ce:	79db      	ldrb	r3, [r3, #7]
 80015d0:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80015d4:	4b49      	ldr	r3, [pc, #292]	@ (80016fc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80015d6:	7a1b      	ldrb	r3, [r3, #8]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	4313      	orrs	r3, r2
 80015dc:	4a47      	ldr	r2, [pc, #284]	@ (80016fc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80015de:	7952      	ldrb	r2, [r2, #5]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	4a4b      	ldr	r2, [pc, #300]	@ (8001710 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80015e4:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 80015e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001710 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d079      	beq.n	80016e6 <HAL_FDCAN_RxFifo0Callback+0x1aa>
						e_machine_rpm |= 0xFFF0000;
 80015f2:	4b47      	ldr	r3, [pc, #284]	@ (8001710 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b47      	ldr	r3, [pc, #284]	@ (8001714 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	4a45      	ldr	r2, [pc, #276]	@ (8001710 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80015fc:	6013      	str	r3, [r2, #0]
					break;
 80015fe:	e072      	b.n	80016e6 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					if (RxHeader_Inv.DataLength == 6)
 8001600:	4b3f      	ldr	r3, [pc, #252]	@ (8001700 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b06      	cmp	r3, #6
 8001606:	d170      	bne.n	80016ea <HAL_FDCAN_RxFifo0Callback+0x1ae>
						if (config_inv_lectura_v == 0)
 8001608:	4b43      	ldr	r3, [pc, #268]	@ (8001718 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d103      	bne.n	8001618 <HAL_FDCAN_RxFifo0Callback+0xdc>
							config_inv_lectura_v = 1;
 8001610:	4b41      	ldr	r3, [pc, #260]	@ (8001718 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]
					break;
 8001616:	e068      	b.n	80016ea <HAL_FDCAN_RxFifo0Callback+0x1ae>
						else if (config_inv_lectura_v == 1)
 8001618:	4b3f      	ldr	r3, [pc, #252]	@ (8001718 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d164      	bne.n	80016ea <HAL_FDCAN_RxFifo0Callback+0x1ae>
							inv_dc_bus_voltage = RxData_Inv[2];
 8001620:	4b36      	ldr	r3, [pc, #216]	@ (80016fc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001622:	789b      	ldrb	r3, [r3, #2]
 8001624:	461a      	mov	r2, r3
 8001626:	4b3d      	ldr	r3, [pc, #244]	@ (800171c <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8001628:	601a      	str	r2, [r3, #0]
					break;
 800162a:	e05e      	b.n	80016ea <HAL_FDCAN_RxFifo0Callback+0x1ae>
		else if (hfdcan->Instance == FDCAN2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a3b      	ldr	r2, [pc, #236]	@ (8001720 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d126      	bne.n	8001684 <HAL_FDCAN_RxFifo0Callback+0x148>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 8001636:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001638:	4a3b      	ldr	r2, [pc, #236]	@ (8001728 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 800163a:	2140      	movs	r1, #64	@ 0x40
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f003 f9e7 	bl	8004a10 <HAL_FDCAN_GetRxMessage>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d153      	bne.n	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
				switch (RxHeader_Acu.Identifier)
 8001648:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b20      	cmp	r3, #32
 800164e:	d003      	beq.n	8001658 <HAL_FDCAN_RxFifo0Callback+0x11c>
 8001650:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001654:	d008      	beq.n	8001668 <HAL_FDCAN_RxFifo0Callback+0x12c>
}
 8001656:	e04b      	b.n	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					if (RxData_Acu[0] == 0)
 8001658:	4b32      	ldr	r3, [pc, #200]	@ (8001724 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d146      	bne.n	80016ee <HAL_FDCAN_RxFifo0Callback+0x1b2>
						precarga_inv = 1;
 8001660:	4b32      	ldr	r3, [pc, #200]	@ (800172c <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
					break;
 8001666:	e042      	b.n	80016ee <HAL_FDCAN_RxFifo0Callback+0x1b2>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 8001668:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	4a2d      	ldr	r2, [pc, #180]	@ (8001724 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001670:	7852      	ldrb	r2, [r2, #1]
 8001672:	4313      	orrs	r3, r2
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167c:	4b2c      	ldr	r3, [pc, #176]	@ (8001730 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 800167e:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001682:	e035      	b.n	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
		else if (hfdcan->Instance == FDCAN3)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a2a      	ldr	r2, [pc, #168]	@ (8001734 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d130      	bne.n	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 800168e:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 8001690:	4a2a      	ldr	r2, [pc, #168]	@ (800173c <HAL_FDCAN_RxFifo0Callback+0x200>)
 8001692:	2140      	movs	r1, #64	@ 0x40
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f003 f9bb 	bl	8004a10 <HAL_FDCAN_GetRxMessage>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d127      	bne.n	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
				switch (RxHeader_Dash.Identifier)
 80016a0:	4b26      	ldr	r3, [pc, #152]	@ (800173c <HAL_FDCAN_RxFifo0Callback+0x200>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f240 1233 	movw	r2, #307	@ 0x133
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d121      	bne.n	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 80016ac:	4b22      	ldr	r3, [pc, #136]	@ (8001738 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 80016b8:	785b      	ldrb	r3, [r3, #1]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b21b      	sxth	r3, r3
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001740 <HAL_FDCAN_RxFifo0Callback+0x204>)
 80016c4:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 80016c8:	789b      	ldrb	r3, [r3, #2]
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 80016d2:	78db      	ldrb	r3, [r3, #3]
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b21b      	sxth	r3, r3
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_FDCAN_RxFifo0Callback+0x208>)
 80016de:	801a      	strh	r2, [r3, #0]
}
 80016e0:	e006      	b.n	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					break;
 80016e2:	bf00      	nop
 80016e4:	e004      	b.n	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					break;
 80016e6:	bf00      	nop
 80016e8:	e002      	b.n	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					break;
 80016ea:	bf00      	nop
 80016ec:	e000      	b.n	80016f0 <HAL_FDCAN_RxFifo0Callback+0x1b4>
					break;
 80016ee:	bf00      	nop
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	4000a000 	.word	0x4000a000
 80016fc:	240005e8 	.word	0x240005e8
 8001700:	24000544 	.word	0x24000544
 8001704:	24000104 	.word	0x24000104
 8001708:	2400062e 	.word	0x2400062e
 800170c:	2400079a 	.word	0x2400079a
 8001710:	24000614 	.word	0x24000614
 8001714:	0fff0000 	.word	0x0fff0000
 8001718:	2400008c 	.word	0x2400008c
 800171c:	24000610 	.word	0x24000610
 8001720:	4000a400 	.word	0x4000a400
 8001724:	240005f8 	.word	0x240005f8
 8001728:	24000590 	.word	0x24000590
 800172c:	24000088 	.word	0x24000088
 8001730:	24000008 	.word	0x24000008
 8001734:	4000d400 	.word	0x4000d400
 8001738:	24000600 	.word	0x24000600
 800173c:	240005b8 	.word	0x240005b8
 8001740:	24000618 	.word	0x24000618
 8001744:	2400061a 	.word	0x2400061a

08001748 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a03      	ldr	r2, [pc, #12]	@ (8001764 <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 8001756:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	240001a4 	.word	0x240001a4

08001768 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 800176e:	4b8c      	ldr	r3, [pc, #560]	@ (80019a0 <setTorque+0x238>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800177e:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 8001782:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001786:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800178a:	ee17 3a90 	vmov	r3, s15
 800178e:	b29a      	uxth	r2, r3
 8001790:	4b84      	ldr	r3, [pc, #528]	@ (80019a4 <setTorque+0x23c>)
 8001792:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 8001794:	4b83      	ldr	r3, [pc, #524]	@ (80019a4 <setTorque+0x23c>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	2b64      	cmp	r3, #100	@ 0x64
 800179a:	d902      	bls.n	80017a2 <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 800179c:	4b81      	ldr	r3, [pc, #516]	@ (80019a4 <setTorque+0x23c>)
 800179e:	2264      	movs	r2, #100	@ 0x64
 80017a0:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 80017a2:	4b81      	ldr	r3, [pc, #516]	@ (80019a8 <setTorque+0x240>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80017b2:	ed9f 5b71 	vldr	d5, [pc, #452]	@ 8001978 <setTorque+0x210>
 80017b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80017be:	ee17 3a90 	vmov	r3, s15
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b79      	ldr	r3, [pc, #484]	@ (80019ac <setTorque+0x244>)
 80017c6:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 80017c8:	4b78      	ldr	r3, [pc, #480]	@ (80019ac <setTorque+0x244>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	2b64      	cmp	r3, #100	@ 0x64
 80017ce:	d902      	bls.n	80017d6 <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 80017d0:	4b76      	ldr	r3, [pc, #472]	@ (80019ac <setTorque+0x244>)
 80017d2:	2264      	movs	r2, #100	@ 0x64
 80017d4:	801a      	strh	r2, [r3, #0]
	printValue(s2_aceleracion_aux);
	print("");
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 80017d6:	4b73      	ldr	r3, [pc, #460]	@ (80019a4 <setTorque+0x23c>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d911      	bls.n	8001802 <setTorque+0x9a>
 80017de:	4b73      	ldr	r3, [pc, #460]	@ (80019ac <setTorque+0x244>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d90d      	bls.n	8001802 <setTorque+0x9a>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 80017e6:	4b6f      	ldr	r3, [pc, #444]	@ (80019a4 <setTorque+0x23c>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b6f      	ldr	r3, [pc, #444]	@ (80019ac <setTorque+0x244>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da00      	bge.n	80017f8 <setTorque+0x90>
 80017f6:	3301      	adds	r3, #1
 80017f8:	105b      	asrs	r3, r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b6c      	ldr	r3, [pc, #432]	@ (80019b0 <setTorque+0x248>)
 80017fe:	801a      	strh	r2, [r3, #0]
 8001800:	e002      	b.n	8001808 <setTorque+0xa0>
	}
	else
	{
		torque_total = 0;
 8001802:	4b6b      	ldr	r3, [pc, #428]	@ (80019b0 <setTorque+0x248>)
 8001804:	2200      	movs	r2, #0
 8001806:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 8001808:	4b69      	ldr	r3, [pc, #420]	@ (80019b0 <setTorque+0x248>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	2b09      	cmp	r3, #9
 800180e:	d803      	bhi.n	8001818 <setTorque+0xb0>
	{
		torque_total = 0;
 8001810:	4b67      	ldr	r3, [pc, #412]	@ (80019b0 <setTorque+0x248>)
 8001812:	2200      	movs	r2, #0
 8001814:	801a      	strh	r2, [r3, #0]
 8001816:	e006      	b.n	8001826 <setTorque+0xbe>
	}
	else if (torque_total > 90)
 8001818:	4b65      	ldr	r3, [pc, #404]	@ (80019b0 <setTorque+0x248>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	2b5a      	cmp	r3, #90	@ 0x5a
 800181e:	d902      	bls.n	8001826 <setTorque+0xbe>
	{
		torque_total = 100;
 8001820:	4b63      	ldr	r3, [pc, #396]	@ (80019b0 <setTorque+0x248>)
 8001822:	2264      	movs	r2, #100	@ 0x64
 8001824:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 8001826:	4b63      	ldr	r3, [pc, #396]	@ (80019b4 <setTorque+0x24c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800182e:	4293      	cmp	r3, r2
 8001830:	dd0a      	ble.n	8001848 <setTorque+0xe0>
 8001832:	4b5f      	ldr	r3, [pc, #380]	@ (80019b0 <setTorque+0x248>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	2b19      	cmp	r3, #25
 8001838:	d906      	bls.n	8001848 <setTorque+0xe0>
	{
		print("EV_2_3");
 800183a:	485f      	ldr	r0, [pc, #380]	@ (80019b8 <setTorque+0x250>)
 800183c:	f7ff fe18 	bl	8001470 <print>
		flag_EV_2_3 = 1;
 8001840:	4b5e      	ldr	r3, [pc, #376]	@ (80019bc <setTorque+0x254>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e00c      	b.n	8001862 <setTorque+0xfa>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 8001848:	4b5a      	ldr	r3, [pc, #360]	@ (80019b4 <setTorque+0x24c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001850:	4293      	cmp	r3, r2
 8001852:	dc06      	bgt.n	8001862 <setTorque+0xfa>
 8001854:	4b56      	ldr	r3, [pc, #344]	@ (80019b0 <setTorque+0x248>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	2b04      	cmp	r3, #4
 800185a:	d802      	bhi.n	8001862 <setTorque+0xfa>
	{
		flag_EV_2_3 = 0;
 800185c:	4b57      	ldr	r3, [pc, #348]	@ (80019bc <setTorque+0x254>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 8001862:	4b50      	ldr	r3, [pc, #320]	@ (80019a4 <setTorque+0x23c>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	4b50      	ldr	r3, [pc, #320]	@ (80019ac <setTorque+0x244>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	bfb8      	it	lt
 8001872:	425b      	neglt	r3, r3
 8001874:	2b0a      	cmp	r3, #10
 8001876:	dd06      	ble.n	8001886 <setTorque+0x11e>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 8001878:	4851      	ldr	r0, [pc, #324]	@ (80019c0 <setTorque+0x258>)
 800187a:	f7ff fdf9 	bl	8001470 <print>
		flag_T11_8_9 = 1;
 800187e:	4b51      	ldr	r3, [pc, #324]	@ (80019c4 <setTorque+0x25c>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	e007      	b.n	8001896 <setTorque+0x12e>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 8001886:	f000 ff7b 	bl	8002780 <HAL_GetTick>
 800188a:	4603      	mov	r3, r0
 800188c:	4a4e      	ldr	r2, [pc, #312]	@ (80019c8 <setTorque+0x260>)
 800188e:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001890:	4b4c      	ldr	r3, [pc, #304]	@ (80019c4 <setTorque+0x25c>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 8001896:	4b49      	ldr	r3, [pc, #292]	@ (80019bc <setTorque+0x254>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 800189c:	4b4b      	ldr	r3, [pc, #300]	@ (80019cc <setTorque+0x264>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80019d0 <setTorque+0x268>
 80018a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ae:	d53a      	bpl.n	8001926 <setTorque+0x1be>
	{
		if (v_celda_min > 2800)
 80018b0:	4b46      	ldr	r3, [pc, #280]	@ (80019cc <setTorque+0x264>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80019d4 <setTorque+0x26c>
 80018ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c2:	dd1f      	ble.n	8001904 <setTorque+0x19c>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 80018c4:	4b3a      	ldr	r3, [pc, #232]	@ (80019b0 <setTorque+0x248>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018d0:	4b3e      	ldr	r3, [pc, #248]	@ (80019cc <setTorque+0x264>)
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018da:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001980 <setTorque+0x218>
 80018de:	ee27 7b05 	vmul.f64	d7, d7, d5
 80018e2:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001988 <setTorque+0x220>
 80018e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80018ea:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018ee:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001990 <setTorque+0x228>
 80018f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018f6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80018fa:	ee17 2a90 	vmov	r2, s15
 80018fe:	4b36      	ldr	r3, [pc, #216]	@ (80019d8 <setTorque+0x270>)
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e015      	b.n	8001930 <setTorque+0x1c8>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 8001904:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <setTorque+0x248>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001910:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8001998 <setTorque+0x230>
 8001914:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001918:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800191c:	ee17 2a90 	vmov	r2, s15
 8001920:	4b2d      	ldr	r3, [pc, #180]	@ (80019d8 <setTorque+0x270>)
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e004      	b.n	8001930 <setTorque+0x1c8>
		}
	}
	else
	{
		torque_limitado = torque_total;
 8001926:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <setTorque+0x248>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	4b2a      	ldr	r3, [pc, #168]	@ (80019d8 <setTorque+0x270>)
 800192e:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8001930:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <setTorque+0x248>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	2b09      	cmp	r3, #9
 8001936:	d912      	bls.n	800195e <setTorque+0x1f6>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8001938:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <setTorque+0x248>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4613      	mov	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	4a25      	ldr	r2, [pc, #148]	@ (80019dc <setTorque+0x274>)
 8001948:	fb82 1203 	smull	r1, r2, r2, r3
 800194c:	441a      	add	r2, r3
 800194e:	1192      	asrs	r2, r2, #6
 8001950:	17db      	asrs	r3, r3, #31
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b1a      	subs	r3, #26
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <setTorque+0x248>)
 800195c:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <setTorque+0x248>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	43db      	mvns	r3, r3
 8001964:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	3301      	adds	r3, #1
 800196a:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 800196c:	88bb      	ldrh	r3, [r7, #4]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	33333334 	.word	0x33333334
 800197c:	401a3333 	.word	0x401a3333
 8001980:	a1cac083 	.word	0xa1cac083
 8001984:	3ff5b645 	.word	0x3ff5b645
 8001988:	00000000 	.word	0x00000000
 800198c:	40ad4c00 	.word	0x40ad4c00
 8001990:	00000000 	.word	0x00000000
 8001994:	408f4000 	.word	0x408f4000
 8001998:	9999999a 	.word	0x9999999a
 800199c:	3fa99999 	.word	0x3fa99999
 80019a0:	24000618 	.word	0x24000618
 80019a4:	2400061c 	.word	0x2400061c
 80019a8:	2400061a 	.word	0x2400061a
 80019ac:	2400061e 	.word	0x2400061e
 80019b0:	24000624 	.word	0x24000624
 80019b4:	24000620 	.word	0x24000620
 80019b8:	0800f060 	.word	0x0800f060
 80019bc:	24000634 	.word	0x24000634
 80019c0:	0800f068 	.word	0x0800f068
 80019c4:	24000638 	.word	0x24000638
 80019c8:	24000630 	.word	0x24000630
 80019cc:	24000008 	.word	0x24000008
 80019d0:	455ac000 	.word	0x455ac000
 80019d4:	452f0000 	.word	0x452f0000
 80019d8:	24000628 	.word	0x24000628
 80019dc:	b60b60b7 	.word	0xb60b60b7

080019e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a97      	ldr	r2, [pc, #604]	@ (8001c48 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	f040 8126 	bne.w	8001c3e <HAL_TIM_PeriodElapsedCallback+0x25e>

		// ---------- CONTROL DEL INVERSOR ----------

		//printHex(state);
		// Estado TORQUE
		if (state == 4 || state == 6)
 80019f2:	4b96      	ldr	r3, [pc, #600]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d003      	beq.n	8001a02 <HAL_TIM_PeriodElapsedCallback+0x22>
 80019fa:	4b94      	ldr	r3, [pc, #592]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d117      	bne.n	8001a32 <HAL_TIM_PeriodElapsedCallback+0x52>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001a02:	4b93      	ldr	r3, [pc, #588]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a93      	ldr	r2, [pc, #588]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001a08:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001a0a:	4b92      	ldr	r3, [pc, #584]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001a10:	4b90      	ldr	r3, [pc, #576]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001a16:	4b90      	ldr	r3, [pc, #576]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001a1c:	4b8e      	ldr	r3, [pc, #568]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001a22:	4b8d      	ldr	r3, [pc, #564]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001a24:	2206      	movs	r2, #6
 8001a26:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001a28:	4a8b      	ldr	r2, [pc, #556]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001a2a:	498a      	ldr	r1, [pc, #552]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001a2c:	488b      	ldr	r0, [pc, #556]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001a2e:	f002 ff94 	bl	800495a <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		switch (state)
 8001a32:	4b86      	ldr	r3, [pc, #536]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b0d      	cmp	r3, #13
 8001a38:	f200 8101 	bhi.w	8001c3e <HAL_TIM_PeriodElapsedCallback+0x25e>
 8001a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a44 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001a7d 	.word	0x08001a7d
 8001a48:	08001c3f 	.word	0x08001c3f
 8001a4c:	08001c3f 	.word	0x08001c3f
 8001a50:	08001aad 	.word	0x08001aad
 8001a54:	08001ae3 	.word	0x08001ae3
 8001a58:	08001c3f 	.word	0x08001c3f
 8001a5c:	08001b2b 	.word	0x08001b2b
 8001a60:	08001c3f 	.word	0x08001c3f
 8001a64:	08001c3f 	.word	0x08001c3f
 8001a68:	08001c3f 	.word	0x08001c3f
 8001a6c:	08001b8b 	.word	0x08001b8b
 8001a70:	08001bcb 	.word	0x08001bcb
 8001a74:	08001c3f 	.word	0x08001c3f
 8001a78:	08001c07 	.word	0x08001c07
		{
		case 0:
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001a7c:	4b74      	ldr	r3, [pc, #464]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a74      	ldr	r2, [pc, #464]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001a82:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001a84:	4b73      	ldr	r3, [pc, #460]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001a86:	2203      	movs	r2, #3
 8001a88:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001a8a:	4b72      	ldr	r3, [pc, #456]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001a90:	4b71      	ldr	r3, [pc, #452]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001a96:	4b70      	ldr	r3, [pc, #448]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x1;
 8001a9c:	4b6e      	ldr	r3, [pc, #440]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001aa2:	4a6d      	ldr	r2, [pc, #436]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001aa4:	496b      	ldr	r1, [pc, #428]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001aa6:	486d      	ldr	r0, [pc, #436]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001aa8:	f002 ff57 	bl	800495a <HAL_FDCAN_AddMessageToTxFifoQ>
		case 3:
#if DEBUG
			//print("state: standby");
#endif

			flag_react = 0;
 8001aac:	4b6c      	ldr	r3, [pc, #432]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001ab2:	4b67      	ldr	r3, [pc, #412]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a67      	ldr	r2, [pc, #412]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001ab8:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001aba:	4b66      	ldr	r3, [pc, #408]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001abc:	2203      	movs	r2, #3
 8001abe:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001ac0:	4b64      	ldr	r3, [pc, #400]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001ac6:	4b64      	ldr	r3, [pc, #400]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001acc:	4b62      	ldr	r3, [pc, #392]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x4;
 8001ad2:	4b61      	ldr	r3, [pc, #388]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001ad8:	4a5f      	ldr	r2, [pc, #380]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ada:	495e      	ldr	r1, [pc, #376]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001adc:	485f      	ldr	r0, [pc, #380]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ade:	f002 ff3c 	bl	800495a <HAL_FDCAN_AddMessageToTxFifoQ>
			//}

		case 4:

#if DEBUG
			print("state: ready");
 8001ae2:	4860      	ldr	r0, [pc, #384]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ae4:	f7ff fcc4 	bl	8001470 <print>
#endif
			TxHeader_Inv.Identifier = 0x362;
 8001ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001aea:	f240 3262 	movw	r2, #866	@ 0x362
 8001aee:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001af0:	4b58      	ldr	r3, [pc, #352]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001af2:	2204      	movs	r2, #4
 8001af4:	60da      	str	r2, [r3, #12]

			real_torque = 0;
 8001af6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	801a      	strh	r2, [r3, #0]

			TxData_Inv[0] = 0x0;
 8001afc:	4b56      	ldr	r3, [pc, #344]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001b02:	4b55      	ldr	r3, [pc, #340]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = real_torque;
 8001b08:	4b57      	ldr	r3, [pc, #348]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b52      	ldr	r3, [pc, #328]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b10:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0x0;
 8001b12:	4b51      	ldr	r3, [pc, #324]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b18:	4a4f      	ldr	r2, [pc, #316]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b1a:	494e      	ldr	r1, [pc, #312]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b1c:	484f      	ldr	r0, [pc, #316]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b1e:	f002 ff1c 	bl	800495a <HAL_FDCAN_AddMessageToTxFifoQ>
			flag_react = 0; // Reactivado
 8001b22:	4b4f      	ldr	r3, [pc, #316]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]

			break;
 8001b28:	e089      	b.n	8001c3e <HAL_TIM_PeriodElapsedCallback+0x25e>
		case 6:
			print("state: torque");
 8001b2a:	4850      	ldr	r0, [pc, #320]	@ (8001c6c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001b2c:	f7ff fca0 	bl	8001470 <print>

			// Request TORQUE inversor

			// flag_react = 1;

			real_torque = setTorque();
 8001b30:	f7ff fe1a 	bl	8001768 <setTorque>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b4b      	ldr	r3, [pc, #300]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001b3a:	801a      	strh	r2, [r3, #0]

			TxHeader_Inv.Identifier = 0x362;
 8001b3c:	4b45      	ldr	r3, [pc, #276]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b3e:	f240 3262 	movw	r2, #866	@ 0x362
 8001b42:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001b44:	4b43      	ldr	r3, [pc, #268]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b46:	2204      	movs	r2, #4
 8001b48:	60da      	str	r2, [r3, #12]

			// real_torque = 0;
			byte_torque_1 = real_torque & 0xFF;
 8001b4a:	4b47      	ldr	r3, [pc, #284]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b47      	ldr	r3, [pc, #284]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001b52:	701a      	strb	r2, [r3, #0]
			byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001b54:	4b44      	ldr	r3, [pc, #272]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b45      	ldr	r3, [pc, #276]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001b60:	701a      	strb	r2, [r3, #0]
			TxData_Inv[0] = 0x00;
 8001b62:	4b3d      	ldr	r3, [pc, #244]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x00;
 8001b68:	4b3b      	ldr	r3, [pc, #236]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	705a      	strb	r2, [r3, #1]
				if(frena > 500){
					acelera = 1;
					frena = 0;
				}
			}*/
			TxData_Inv[2] = byte_torque_1;
 8001b6e:	4b40      	ldr	r3, [pc, #256]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	4b39      	ldr	r3, [pc, #228]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b74:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = byte_torque_2;
 8001b76:	4b3f      	ldr	r3, [pc, #252]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	4b37      	ldr	r3, [pc, #220]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b7c:	70da      	strb	r2, [r3, #3]
			// TxData_Inv[2] = 0xFE;
			// TxData_Inv[3] = 0xFF;
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001b7e:	4a36      	ldr	r2, [pc, #216]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b80:	4934      	ldr	r1, [pc, #208]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b82:	4836      	ldr	r0, [pc, #216]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b84:	f002 fee9 	bl	800495a <HAL_FDCAN_AddMessageToTxFifoQ>
			//CAN_bus_off_check_reset(&hfdcan1);

			break;
 8001b88:	e059      	b.n	8001c3e <HAL_TIM_PeriodElapsedCallback+0x25e>

		case 10:
			print("state: soft fault");
 8001b8a:	483b      	ldr	r0, [pc, #236]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001b8c:	f7ff fc70 	bl	8001470 <print>
			printValue(error);
 8001b90:	4b3a      	ldr	r3, [pc, #232]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fc89 	bl	80014ac <printValue>

			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001ba0:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001bae:	4b2a      	ldr	r3, [pc, #168]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001bb4:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x13;
 8001bba:	4b27      	ldr	r3, [pc, #156]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bbc:	2213      	movs	r2, #19
 8001bbe:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001bc0:	4a25      	ldr	r2, [pc, #148]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bc2:	4924      	ldr	r1, [pc, #144]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001bc4:	4825      	ldr	r0, [pc, #148]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001bc6:	f002 fec8 	bl	800495a <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
												  TxData_Inv);
				}*/

		case 11:
			print("state: hard fault");
 8001bca:	482d      	ldr	r0, [pc, #180]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001bcc:	f7ff fc50 	bl	8001470 <print>
			flag_react = 1;
 8001bd0:	4b23      	ldr	r3, [pc, #140]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1e      	ldr	r2, [pc, #120]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001bdc:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001bde:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001be0:	2203      	movs	r2, #3
 8001be2:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001bea:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 13;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bf8:	220d      	movs	r2, #13
 8001bfa:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001bfc:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bfe:	4915      	ldr	r1, [pc, #84]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c00:	4816      	ldr	r0, [pc, #88]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c02:	f002 feaa 	bl	800495a <HAL_FDCAN_AddMessageToTxFifoQ>

		case 13:
			print("state: shutdown");
 8001c06:	481f      	ldr	r0, [pc, #124]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c08:	f7ff fc32 	bl	8001470 <print>
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a10      	ldr	r2, [pc, #64]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c12:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c16:	2203      	movs	r2, #3
 8001c18:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001c20:	4b0d      	ldr	r3, [pc, #52]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c26:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x1;
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c32:	4a09      	ldr	r2, [pc, #36]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c34:	4907      	ldr	r1, [pc, #28]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c36:	4809      	ldr	r0, [pc, #36]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c38:	f002 fe8f 	bl	800495a <HAL_FDCAN_AddMessageToTxFifoQ>


			break;
 8001c3c:	bf00      	nop
		}
#endif
	}
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	240003ac 	.word	0x240003ac
 8001c4c:	2400062e 	.word	0x2400062e
 8001c50:	24000000 	.word	0x24000000
 8001c54:	24000520 	.word	0x24000520
 8001c58:	240005e0 	.word	0x240005e0
 8001c5c:	24000104 	.word	0x24000104
 8001c60:	2400079b 	.word	0x2400079b
 8001c64:	0800efc0 	.word	0x0800efc0
 8001c68:	2400062c 	.word	0x2400062c
 8001c6c:	0800f070 	.word	0x0800f070
 8001c70:	24000626 	.word	0x24000626
 8001c74:	24000627 	.word	0x24000627
 8001c78:	0800f080 	.word	0x0800f080
 8001c7c:	2400079a 	.word	0x2400079a
 8001c80:	0800f094 	.word	0x0800f094
 8001c84:	0800f0a8 	.word	0x0800f0a8

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <Error_Handler+0x8>

08001c94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_MspInit+0x30>)
 8001c9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ca0:	4a08      	ldr	r2, [pc, #32]	@ (8001cc4 <HAL_MspInit+0x30>)
 8001ca2:	f043 0302 	orr.w	r3, r3, #2
 8001ca6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_MspInit+0x30>)
 8001cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	58024400 	.word	0x58024400

08001cc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	@ 0x30
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a37      	ldr	r2, [pc, #220]	@ (8001dc4 <HAL_ADC_MspInit+0xfc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d168      	bne.n	8001dbc <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001cea:	4b37      	ldr	r3, [pc, #220]	@ (8001dc8 <HAL_ADC_MspInit+0x100>)
 8001cec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001cf0:	4a35      	ldr	r2, [pc, #212]	@ (8001dc8 <HAL_ADC_MspInit+0x100>)
 8001cf2:	f043 0320 	orr.w	r3, r3, #32
 8001cf6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001cfa:	4b33      	ldr	r3, [pc, #204]	@ (8001dc8 <HAL_ADC_MspInit+0x100>)
 8001cfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d08:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc8 <HAL_ADC_MspInit+0x100>)
 8001d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0e:	4a2e      	ldr	r2, [pc, #184]	@ (8001dc8 <HAL_ADC_MspInit+0x100>)
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d18:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc8 <HAL_ADC_MspInit+0x100>)
 8001d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	4b28      	ldr	r3, [pc, #160]	@ (8001dc8 <HAL_ADC_MspInit+0x100>)
 8001d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d2c:	4a26      	ldr	r2, [pc, #152]	@ (8001dc8 <HAL_ADC_MspInit+0x100>)
 8001d2e:	f043 0302 	orr.w	r3, r3, #2
 8001d32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d36:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <HAL_ADC_MspInit+0x100>)
 8001d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d44:	4b20      	ldr	r3, [pc, #128]	@ (8001dc8 <HAL_ADC_MspInit+0x100>)
 8001d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc8 <HAL_ADC_MspInit+0x100>)
 8001d4c:	f043 0320 	orr.w	r3, r3, #32
 8001d50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d54:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc8 <HAL_ADC_MspInit+0x100>)
 8001d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ADC2_INP8
    PB0     ------> ADC2_INP9
    PF13     ------> ADC2_INP2
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 8001d62:	2320      	movs	r3, #32
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d66:	2303      	movs	r3, #3
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	4619      	mov	r1, r3
 8001d74:	4815      	ldr	r0, [pc, #84]	@ (8001dcc <HAL_ADC_MspInit+0x104>)
 8001d76:	f003 fd33 	bl	80057e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4810      	ldr	r0, [pc, #64]	@ (8001dd0 <HAL_ADC_MspInit+0x108>)
 8001d8e:	f003 fd27 	bl	80057e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 8001d92:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	480b      	ldr	r0, [pc, #44]	@ (8001dd4 <HAL_ADC_MspInit+0x10c>)
 8001da8:	f003 fd1a 	bl	80057e0 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2100      	movs	r1, #0
 8001db0:	2012      	movs	r0, #18
 8001db2:	f002 fb1e 	bl	80043f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001db6:	2012      	movs	r0, #18
 8001db8:	f002 fb35 	bl	8004426 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 8001dbc:	bf00      	nop
 8001dbe:	3730      	adds	r7, #48	@ 0x30
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40022100 	.word	0x40022100
 8001dc8:	58024400 	.word	0x58024400
 8001dcc:	58020800 	.word	0x58020800
 8001dd0:	58020400 	.word	0x58020400
 8001dd4:	58021400 	.word	0x58021400

08001dd8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0bc      	sub	sp, #240	@ 0xf0
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df0:	f107 0320 	add.w	r3, r7, #32
 8001df4:	22b8      	movs	r2, #184	@ 0xb8
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f00c fb99 	bl	800e530 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a8d      	ldr	r2, [pc, #564]	@ (8002038 <HAL_FDCAN_MspInit+0x260>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d157      	bne.n	8001eb8 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e08:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e1a:	f107 0320 	add.w	r3, r7, #32
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 fe58 	bl	8006ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8001e2a:	f7ff ff2d 	bl	8001c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e2e:	4b83      	ldr	r3, [pc, #524]	@ (800203c <HAL_FDCAN_MspInit+0x264>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	4a81      	ldr	r2, [pc, #516]	@ (800203c <HAL_FDCAN_MspInit+0x264>)
 8001e36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e38:	4b80      	ldr	r3, [pc, #512]	@ (800203c <HAL_FDCAN_MspInit+0x264>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d10e      	bne.n	8001e5e <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e40:	4b7f      	ldr	r3, [pc, #508]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001e42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001e46:	4a7e      	ldr	r2, [pc, #504]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001e50:	4b7b      	ldr	r3, [pc, #492]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001e52:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e5e:	4b78      	ldr	r3, [pc, #480]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e64:	4a76      	ldr	r2, [pc, #472]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001e66:	f043 0308 	orr.w	r3, r3, #8
 8001e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e6e:	4b74      	ldr	r3, [pc, #464]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001e94:	2309      	movs	r3, #9
 8001e96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e9a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4868      	ldr	r0, [pc, #416]	@ (8002044 <HAL_FDCAN_MspInit+0x26c>)
 8001ea2:	f003 fc9d 	bl	80057e0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	2013      	movs	r0, #19
 8001eac:	f002 faa1 	bl	80043f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001eb0:	2013      	movs	r0, #19
 8001eb2:	f002 fab8 	bl	8004426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001eb6:	e0ba      	b.n	800202e <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a62      	ldr	r2, [pc, #392]	@ (8002048 <HAL_FDCAN_MspInit+0x270>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d158      	bne.n	8001f74 <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ec2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed4:	f107 0320 	add.w	r3, r7, #32
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 fdfb 	bl	8006ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8001ee4:	f7ff fed0 	bl	8001c88 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001ee8:	4b54      	ldr	r3, [pc, #336]	@ (800203c <HAL_FDCAN_MspInit+0x264>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	4a53      	ldr	r2, [pc, #332]	@ (800203c <HAL_FDCAN_MspInit+0x264>)
 8001ef0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001ef2:	4b52      	ldr	r3, [pc, #328]	@ (800203c <HAL_FDCAN_MspInit+0x264>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d10e      	bne.n	8001f18 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001efa:	4b51      	ldr	r3, [pc, #324]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001efc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001f00:	4a4f      	ldr	r2, [pc, #316]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f06:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001f0a:	4b4d      	ldr	r3, [pc, #308]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001f0c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f18:	4b49      	ldr	r3, [pc, #292]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1e:	4a48      	ldr	r2, [pc, #288]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f28:	4b45      	ldr	r3, [pc, #276]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001f36:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001f50:	2309      	movs	r3, #9
 8001f52:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f56:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	483b      	ldr	r0, [pc, #236]	@ (800204c <HAL_FDCAN_MspInit+0x274>)
 8001f5e:	f003 fc3f 	bl	80057e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2102      	movs	r1, #2
 8001f66:	2014      	movs	r0, #20
 8001f68:	f002 fa43 	bl	80043f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001f6c:	2014      	movs	r0, #20
 8001f6e:	f002 fa5a 	bl	8004426 <HAL_NVIC_EnableIRQ>
}
 8001f72:	e05c      	b.n	800202e <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a35      	ldr	r2, [pc, #212]	@ (8002050 <HAL_FDCAN_MspInit+0x278>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d157      	bne.n	800202e <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f7e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f90:	f107 0320 	add.w	r3, r7, #32
 8001f94:	4618      	mov	r0, r3
 8001f96:	f004 fd9d 	bl	8006ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 8001fa0:	f7ff fe72 	bl	8001c88 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001fa4:	4b25      	ldr	r3, [pc, #148]	@ (800203c <HAL_FDCAN_MspInit+0x264>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4a24      	ldr	r2, [pc, #144]	@ (800203c <HAL_FDCAN_MspInit+0x264>)
 8001fac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001fae:	4b23      	ldr	r3, [pc, #140]	@ (800203c <HAL_FDCAN_MspInit+0x264>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d10e      	bne.n	8001fd4 <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fb6:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001fb8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001fbc:	4a20      	ldr	r2, [pc, #128]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001fc8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fda:	4a19      	ldr	r2, [pc, #100]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fe4:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <HAL_FDCAN_MspInit+0x268>)
 8001fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ff2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 800200c:	2302      	movs	r3, #2
 800200e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002012:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002016:	4619      	mov	r1, r3
 8002018:	480e      	ldr	r0, [pc, #56]	@ (8002054 <HAL_FDCAN_MspInit+0x27c>)
 800201a:	f003 fbe1 	bl	80057e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	209f      	movs	r0, #159	@ 0x9f
 8002024:	f002 f9e5 	bl	80043f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8002028:	209f      	movs	r0, #159	@ 0x9f
 800202a:	f002 f9fc 	bl	8004426 <HAL_NVIC_EnableIRQ>
}
 800202e:	bf00      	nop
 8002030:	37f0      	adds	r7, #240	@ 0xf0
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	4000a000 	.word	0x4000a000
 800203c:	2400079c 	.word	0x2400079c
 8002040:	58024400 	.word	0x58024400
 8002044:	58020c00 	.word	0x58020c00
 8002048:	4000a400 	.word	0x4000a400
 800204c:	58020400 	.word	0x58020400
 8002050:	4000d400 	.word	0x4000d400
 8002054:	58021800 	.word	0x58021800

08002058 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08c      	sub	sp, #48	@ 0x30
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a3e      	ldr	r2, [pc, #248]	@ (8002170 <HAL_SD_MspInit+0x118>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d175      	bne.n	8002166 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800207a:	4b3e      	ldr	r3, [pc, #248]	@ (8002174 <HAL_SD_MspInit+0x11c>)
 800207c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002080:	4a3c      	ldr	r2, [pc, #240]	@ (8002174 <HAL_SD_MspInit+0x11c>)
 8002082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002086:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800208a:	4b3a      	ldr	r3, [pc, #232]	@ (8002174 <HAL_SD_MspInit+0x11c>)
 800208c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002098:	4b36      	ldr	r3, [pc, #216]	@ (8002174 <HAL_SD_MspInit+0x11c>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209e:	4a35      	ldr	r2, [pc, #212]	@ (8002174 <HAL_SD_MspInit+0x11c>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020a8:	4b32      	ldr	r3, [pc, #200]	@ (8002174 <HAL_SD_MspInit+0x11c>)
 80020aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002174 <HAL_SD_MspInit+0x11c>)
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002174 <HAL_SD_MspInit+0x11c>)
 80020be:	f043 0308 	orr.w	r3, r3, #8
 80020c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002174 <HAL_SD_MspInit+0x11c>)
 80020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d4:	4b27      	ldr	r3, [pc, #156]	@ (8002174 <HAL_SD_MspInit+0x11c>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020da:	4a26      	ldr	r2, [pc, #152]	@ (8002174 <HAL_SD_MspInit+0x11c>)
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e4:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <HAL_SD_MspInit+0x11c>)
 80020e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80020f2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80020f6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002104:	230c      	movs	r3, #12
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	4619      	mov	r1, r3
 800210e:	481a      	ldr	r0, [pc, #104]	@ (8002178 <HAL_SD_MspInit+0x120>)
 8002110:	f003 fb66 	bl	80057e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002114:	2304      	movs	r3, #4
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002124:	230c      	movs	r3, #12
 8002126:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	4619      	mov	r1, r3
 800212e:	4813      	ldr	r0, [pc, #76]	@ (800217c <HAL_SD_MspInit+0x124>)
 8002130:	f003 fb56 	bl	80057e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002134:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 8002146:	2307      	movs	r3, #7
 8002148:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	4619      	mov	r1, r3
 8002150:	480b      	ldr	r0, [pc, #44]	@ (8002180 <HAL_SD_MspInit+0x128>)
 8002152:	f003 fb45 	bl	80057e0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2100      	movs	r1, #0
 800215a:	2031      	movs	r0, #49	@ 0x31
 800215c:	f002 f949 	bl	80043f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002160:	2031      	movs	r0, #49	@ 0x31
 8002162:	f002 f960 	bl	8004426 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002166:	bf00      	nop
 8002168:	3730      	adds	r7, #48	@ 0x30
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	52007000 	.word	0x52007000
 8002174:	58024400 	.word	0x58024400
 8002178:	58020800 	.word	0x58020800
 800217c:	58020c00 	.word	0x58020c00
 8002180:	58020400 	.word	0x58020400

08002184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a19      	ldr	r2, [pc, #100]	@ (80021f8 <HAL_TIM_Base_MspInit+0x74>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10f      	bne.n	80021b6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002196:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <HAL_TIM_Base_MspInit+0x78>)
 8002198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800219c:	4a17      	ldr	r2, [pc, #92]	@ (80021fc <HAL_TIM_Base_MspInit+0x78>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <HAL_TIM_Base_MspInit+0x78>)
 80021a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80021b4:	e01b      	b.n	80021ee <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a11      	ldr	r2, [pc, #68]	@ (8002200 <HAL_TIM_Base_MspInit+0x7c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d116      	bne.n	80021ee <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80021c0:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <HAL_TIM_Base_MspInit+0x78>)
 80021c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021c6:	4a0d      	ldr	r2, [pc, #52]	@ (80021fc <HAL_TIM_Base_MspInit+0x78>)
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021d0:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_TIM_Base_MspInit+0x78>)
 80021d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2075      	movs	r0, #117	@ 0x75
 80021e4:	f002 f905 	bl	80043f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80021e8:	2075      	movs	r0, #117	@ 0x75
 80021ea:	f002 f91c 	bl	8004426 <HAL_NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40010000 	.word	0x40010000
 80021fc:	58024400 	.word	0x58024400
 8002200:	40014400 	.word	0x40014400

08002204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a13      	ldr	r2, [pc, #76]	@ (8002270 <HAL_TIM_MspPostInit+0x6c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d11f      	bne.n	8002266 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002226:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <HAL_TIM_MspPostInit+0x70>)
 8002228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800222c:	4a11      	ldr	r2, [pc, #68]	@ (8002274 <HAL_TIM_MspPostInit+0x70>)
 800222e:	f043 0310 	orr.w	r3, r3, #16
 8002232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002236:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <HAL_TIM_MspPostInit+0x70>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 8002244:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002248:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002256:	2301      	movs	r3, #1
 8002258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	@ (8002278 <HAL_TIM_MspPostInit+0x74>)
 8002262:	f003 fabd 	bl	80057e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40010000 	.word	0x40010000
 8002274:	58024400 	.word	0x58024400
 8002278:	58021000 	.word	0x58021000

0800227c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b0ba      	sub	sp, #232	@ 0xe8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002294:	f107 0318 	add.w	r3, r7, #24
 8002298:	22b8      	movs	r2, #184	@ 0xb8
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f00c f947 	bl	800e530 <memset>
  if(huart->Instance==USART1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a4d      	ldr	r2, [pc, #308]	@ (80023dc <HAL_UART_MspInit+0x160>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d147      	bne.n	800233c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022ac:	f04f 0201 	mov.w	r2, #1
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022be:	f107 0318 	add.w	r3, r7, #24
 80022c2:	4618      	mov	r0, r3
 80022c4:	f004 fc06 	bl	8006ad4 <HAL_RCCEx_PeriphCLKConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80022ce:	f7ff fcdb 	bl	8001c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d2:	4b43      	ldr	r3, [pc, #268]	@ (80023e0 <HAL_UART_MspInit+0x164>)
 80022d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022d8:	4a41      	ldr	r2, [pc, #260]	@ (80023e0 <HAL_UART_MspInit+0x164>)
 80022da:	f043 0310 	orr.w	r3, r3, #16
 80022de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022e2:	4b3f      	ldr	r3, [pc, #252]	@ (80023e0 <HAL_UART_MspInit+0x164>)
 80022e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f0:	4b3b      	ldr	r3, [pc, #236]	@ (80023e0 <HAL_UART_MspInit+0x164>)
 80022f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f6:	4a3a      	ldr	r2, [pc, #232]	@ (80023e0 <HAL_UART_MspInit+0x164>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002300:	4b37      	ldr	r3, [pc, #220]	@ (80023e0 <HAL_UART_MspInit+0x164>)
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 800230e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002328:	2307      	movs	r3, #7
 800232a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002332:	4619      	mov	r1, r3
 8002334:	482b      	ldr	r0, [pc, #172]	@ (80023e4 <HAL_UART_MspInit+0x168>)
 8002336:	f003 fa53 	bl	80057e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800233a:	e04a      	b.n	80023d2 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a29      	ldr	r2, [pc, #164]	@ (80023e8 <HAL_UART_MspInit+0x16c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d145      	bne.n	80023d2 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002346:	f04f 0202 	mov.w	r2, #2
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002358:	f107 0318 	add.w	r3, r7, #24
 800235c:	4618      	mov	r0, r3
 800235e:	f004 fbb9 	bl	8006ad4 <HAL_RCCEx_PeriphCLKConfig>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002368:	f7ff fc8e 	bl	8001c88 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800236c:	4b1c      	ldr	r3, [pc, #112]	@ (80023e0 <HAL_UART_MspInit+0x164>)
 800236e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002372:	4a1b      	ldr	r2, [pc, #108]	@ (80023e0 <HAL_UART_MspInit+0x164>)
 8002374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002378:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800237c:	4b18      	ldr	r3, [pc, #96]	@ (80023e0 <HAL_UART_MspInit+0x164>)
 800237e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <HAL_UART_MspInit+0x164>)
 800238c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002390:	4a13      	ldr	r2, [pc, #76]	@ (80023e0 <HAL_UART_MspInit+0x164>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800239a:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_UART_MspInit+0x164>)
 800239c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023a8:	230c      	movs	r3, #12
 80023aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c0:	2307      	movs	r3, #7
 80023c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4805      	ldr	r0, [pc, #20]	@ (80023e4 <HAL_UART_MspInit+0x168>)
 80023ce:	f003 fa07 	bl	80057e0 <HAL_GPIO_Init>
}
 80023d2:	bf00      	nop
 80023d4:	37e8      	adds	r7, #232	@ 0xe8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40011000 	.word	0x40011000
 80023e0:	58024400 	.word	0x58024400
 80023e4:	58020000 	.word	0x58020000
 80023e8:	40004400 	.word	0x40004400

080023ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <NMI_Handler+0x4>

080023f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <HardFault_Handler+0x4>

080023fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <MemManage_Handler+0x4>

08002404 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <BusFault_Handler+0x4>

0800240c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <UsageFault_Handler+0x4>

08002414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002442:	f000 f989 	bl	8002758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8002450:	4802      	ldr	r0, [pc, #8]	@ (800245c <ADC_IRQHandler+0x10>)
 8002452:	f000 fe55 	bl	8003100 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	24000094 	.word	0x24000094

08002460 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002464:	4802      	ldr	r0, [pc, #8]	@ (8002470 <FDCAN1_IT0_IRQHandler+0x10>)
 8002466:	f002 fcb9 	bl	8004ddc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	24000104 	.word	0x24000104

08002474 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002478:	4802      	ldr	r0, [pc, #8]	@ (8002484 <FDCAN2_IT0_IRQHandler+0x10>)
 800247a:	f002 fcaf 	bl	8004ddc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	240001a4 	.word	0x240001a4

08002488 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800248c:	4802      	ldr	r0, [pc, #8]	@ (8002498 <SDMMC1_IRQHandler+0x10>)
 800248e:	f007 f977 	bl	8009780 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	240002e4 	.word	0x240002e4

0800249c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80024a0:	4802      	ldr	r0, [pc, #8]	@ (80024ac <TIM16_IRQHandler+0x10>)
 80024a2:	f008 fca0 	bl	800ade6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	240003ac 	.word	0x240003ac

080024b0 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80024b4:	4802      	ldr	r0, [pc, #8]	@ (80024c0 <FDCAN3_IT0_IRQHandler+0x10>)
 80024b6:	f002 fc91 	bl	8004ddc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	24000244 	.word	0x24000244

080024c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024cc:	4a14      	ldr	r2, [pc, #80]	@ (8002520 <_sbrk+0x5c>)
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <_sbrk+0x60>)
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d8:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <_sbrk+0x64>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d102      	bne.n	80024e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e0:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <_sbrk+0x64>)
 80024e2:	4a12      	ldr	r2, [pc, #72]	@ (800252c <_sbrk+0x68>)
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024e6:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <_sbrk+0x64>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d207      	bcs.n	8002504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f4:	f00c f824 	bl	800e540 <__errno>
 80024f8:	4603      	mov	r3, r0
 80024fa:	220c      	movs	r2, #12
 80024fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002502:	e009      	b.n	8002518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002504:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <_sbrk+0x64>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800250a:	4b07      	ldr	r3, [pc, #28]	@ (8002528 <_sbrk+0x64>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	4a05      	ldr	r2, [pc, #20]	@ (8002528 <_sbrk+0x64>)
 8002514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002516:	68fb      	ldr	r3, [r7, #12]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	24050000 	.word	0x24050000
 8002524:	00000400 	.word	0x00000400
 8002528:	240007a0 	.word	0x240007a0
 800252c:	24000910 	.word	0x24000910

08002530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002534:	4b32      	ldr	r3, [pc, #200]	@ (8002600 <SystemInit+0xd0>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253a:	4a31      	ldr	r2, [pc, #196]	@ (8002600 <SystemInit+0xd0>)
 800253c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002544:	4b2f      	ldr	r3, [pc, #188]	@ (8002604 <SystemInit+0xd4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	2b06      	cmp	r3, #6
 800254e:	d807      	bhi.n	8002560 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002550:	4b2c      	ldr	r3, [pc, #176]	@ (8002604 <SystemInit+0xd4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 030f 	bic.w	r3, r3, #15
 8002558:	4a2a      	ldr	r2, [pc, #168]	@ (8002604 <SystemInit+0xd4>)
 800255a:	f043 0307 	orr.w	r3, r3, #7
 800255e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002560:	4b29      	ldr	r3, [pc, #164]	@ (8002608 <SystemInit+0xd8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a28      	ldr	r2, [pc, #160]	@ (8002608 <SystemInit+0xd8>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800256c:	4b26      	ldr	r3, [pc, #152]	@ (8002608 <SystemInit+0xd8>)
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002572:	4b25      	ldr	r3, [pc, #148]	@ (8002608 <SystemInit+0xd8>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4924      	ldr	r1, [pc, #144]	@ (8002608 <SystemInit+0xd8>)
 8002578:	4b24      	ldr	r3, [pc, #144]	@ (800260c <SystemInit+0xdc>)
 800257a:	4013      	ands	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800257e:	4b21      	ldr	r3, [pc, #132]	@ (8002604 <SystemInit+0xd4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d007      	beq.n	800259a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800258a:	4b1e      	ldr	r3, [pc, #120]	@ (8002604 <SystemInit+0xd4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 030f 	bic.w	r3, r3, #15
 8002592:	4a1c      	ldr	r2, [pc, #112]	@ (8002604 <SystemInit+0xd4>)
 8002594:	f043 0307 	orr.w	r3, r3, #7
 8002598:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <SystemInit+0xd8>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025a0:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <SystemInit+0xd8>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025a6:	4b18      	ldr	r3, [pc, #96]	@ (8002608 <SystemInit+0xd8>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025ac:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <SystemInit+0xd8>)
 80025ae:	4a18      	ldr	r2, [pc, #96]	@ (8002610 <SystemInit+0xe0>)
 80025b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <SystemInit+0xd8>)
 80025b4:	4a17      	ldr	r2, [pc, #92]	@ (8002614 <SystemInit+0xe4>)
 80025b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <SystemInit+0xd8>)
 80025ba:	4a17      	ldr	r2, [pc, #92]	@ (8002618 <SystemInit+0xe8>)
 80025bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025be:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <SystemInit+0xd8>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80025c4:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <SystemInit+0xd8>)
 80025c6:	4a14      	ldr	r2, [pc, #80]	@ (8002618 <SystemInit+0xe8>)
 80025c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80025ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <SystemInit+0xd8>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80025d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <SystemInit+0xd8>)
 80025d2:	4a11      	ldr	r2, [pc, #68]	@ (8002618 <SystemInit+0xe8>)
 80025d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80025d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <SystemInit+0xd8>)
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <SystemInit+0xd8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a09      	ldr	r2, [pc, #36]	@ (8002608 <SystemInit+0xd8>)
 80025e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80025e8:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <SystemInit+0xd8>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025ee:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <SystemInit+0xec>)
 80025f0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80025f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00
 8002604:	52002000 	.word	0x52002000
 8002608:	58024400 	.word	0x58024400
 800260c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002610:	02020200 	.word	0x02020200
 8002614:	01ff0000 	.word	0x01ff0000
 8002618:	01010280 	.word	0x01010280
 800261c:	52004000 	.word	0x52004000

08002620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002658 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002624:	f7ff ff84 	bl	8002530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002628:	480c      	ldr	r0, [pc, #48]	@ (800265c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800262a:	490d      	ldr	r1, [pc, #52]	@ (8002660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800262c:	4a0d      	ldr	r2, [pc, #52]	@ (8002664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002630:	e002      	b.n	8002638 <LoopCopyDataInit>

08002632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002636:	3304      	adds	r3, #4

08002638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800263c:	d3f9      	bcc.n	8002632 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263e:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002640:	4c0a      	ldr	r4, [pc, #40]	@ (800266c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002644:	e001      	b.n	800264a <LoopFillZerobss>

08002646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002648:	3204      	adds	r2, #4

0800264a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800264c:	d3fb      	bcc.n	8002646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800264e:	f00b ff7d 	bl	800e54c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002652:	f7fe f84b 	bl	80006ec <main>
  bx  lr
 8002656:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002658:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800265c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002660:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002664:	0800f1a4 	.word	0x0800f1a4
  ldr r2, =_sbss
 8002668:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800266c:	2400090c 	.word	0x2400090c

08002670 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002670:	e7fe      	b.n	8002670 <ADC3_IRQHandler>
	...

08002674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267a:	2003      	movs	r0, #3
 800267c:	f001 feae 	bl	80043dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002680:	f004 f852 	bl	8006728 <HAL_RCC_GetSysClockFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <HAL_Init+0x68>)
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	4913      	ldr	r1, [pc, #76]	@ (80026e0 <HAL_Init+0x6c>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
 800269c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800269e:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <HAL_Init+0x68>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	4a0e      	ldr	r2, [pc, #56]	@ (80026e0 <HAL_Init+0x6c>)
 80026a8:	5cd3      	ldrb	r3, [r2, r3]
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
 80026b4:	4a0b      	ldr	r2, [pc, #44]	@ (80026e4 <HAL_Init+0x70>)
 80026b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026b8:	4a0b      	ldr	r2, [pc, #44]	@ (80026e8 <HAL_Init+0x74>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026be:	200f      	movs	r0, #15
 80026c0:	f000 f814 	bl	80026ec <HAL_InitTick>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e002      	b.n	80026d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026ce:	f7ff fae1 	bl	8001c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	58024400 	.word	0x58024400
 80026e0:	0800f104 	.word	0x0800f104
 80026e4:	24000010 	.word	0x24000010
 80026e8:	2400000c 	.word	0x2400000c

080026ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80026f4:	4b15      	ldr	r3, [pc, #84]	@ (800274c <HAL_InitTick+0x60>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e021      	b.n	8002744 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002700:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <HAL_InitTick+0x64>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b11      	ldr	r3, [pc, #68]	@ (800274c <HAL_InitTick+0x60>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	4619      	mov	r1, r3
 800270a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800270e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002712:	fbb2 f3f3 	udiv	r3, r2, r3
 8002716:	4618      	mov	r0, r3
 8002718:	f001 fe93 	bl	8004442 <HAL_SYSTICK_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e00e      	b.n	8002744 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b0f      	cmp	r3, #15
 800272a:	d80a      	bhi.n	8002742 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800272c:	2200      	movs	r2, #0
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	f001 fe5d 	bl	80043f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002738:	4a06      	ldr	r2, [pc, #24]	@ (8002754 <HAL_InitTick+0x68>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	24000018 	.word	0x24000018
 8002750:	2400000c 	.word	0x2400000c
 8002754:	24000014 	.word	0x24000014

08002758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800275c:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <HAL_IncTick+0x20>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4b06      	ldr	r3, [pc, #24]	@ (800277c <HAL_IncTick+0x24>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4413      	add	r3, r2
 8002768:	4a04      	ldr	r2, [pc, #16]	@ (800277c <HAL_IncTick+0x24>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	24000018 	.word	0x24000018
 800277c:	240007a4 	.word	0x240007a4

08002780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return uwTick;
 8002784:	4b03      	ldr	r3, [pc, #12]	@ (8002794 <HAL_GetTick+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	240007a4 	.word	0x240007a4

08002798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7ff ffee 	bl	8002780 <HAL_GetTick>
 80027a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d005      	beq.n	80027be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b2:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <HAL_Delay+0x44>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027be:	bf00      	nop
 80027c0:	f7ff ffde 	bl	8002780 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d8f7      	bhi.n	80027c0 <HAL_Delay+0x28>
  {
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	24000018 	.word	0x24000018

080027e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	609a      	str	r2, [r3, #8]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	609a      	str	r2, [r3, #8]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3360      	adds	r3, #96	@ 0x60
 800285a:	461a      	mov	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a10      	ldr	r2, [pc, #64]	@ (80028a8 <LL_ADC_SetOffset+0x60>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d10b      	bne.n	8002884 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	4313      	orrs	r3, r2
 800287a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002882:	e00b      	b.n	800289c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	430b      	orrs	r3, r1
 8002896:	431a      	orrs	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	601a      	str	r2, [r3, #0]
}
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	58026000 	.word	0x58026000

080028ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3360      	adds	r3, #96	@ 0x60
 80028ba:	461a      	mov	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	fa01 f303 	lsl.w	r3, r1, r3
 80028f8:	431a      	orrs	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	611a      	str	r2, [r3, #16]
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a0c      	ldr	r2, [pc, #48]	@ (800294c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00e      	beq.n	800293e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3360      	adds	r3, #96	@ 0x60
 8002924:	461a      	mov	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	431a      	orrs	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	601a      	str	r2, [r3, #0]
  }
}
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	58026000 	.word	0x58026000

08002950 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a0c      	ldr	r2, [pc, #48]	@ (8002990 <LL_ADC_SetOffsetSaturation+0x40>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d10e      	bne.n	8002982 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3360      	adds	r3, #96	@ 0x60
 8002968:	461a      	mov	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	431a      	orrs	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002982:	bf00      	nop
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	58026000 	.word	0x58026000

08002994 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4a0c      	ldr	r2, [pc, #48]	@ (80029d4 <LL_ADC_SetOffsetSign+0x40>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10e      	bne.n	80029c6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3360      	adds	r3, #96	@ 0x60
 80029ac:	461a      	mov	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	431a      	orrs	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	58026000 	.word	0x58026000

080029d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3360      	adds	r3, #96	@ 0x60
 80029e8:	461a      	mov	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002a28 <LL_ADC_SetOffsetState+0x50>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d108      	bne.n	8002a0c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002a0a:	e007      	b.n	8002a1c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	601a      	str	r2, [r3, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	58026000 	.word	0x58026000

08002a2c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3330      	adds	r3, #48	@ 0x30
 8002a62:	461a      	mov	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	4413      	add	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	211f      	movs	r1, #31
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	401a      	ands	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	f003 011f 	and.w	r1, r3, #31
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a9e:	bf00      	nop
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3314      	adds	r3, #20
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	0e5b      	lsrs	r3, r3, #25
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	4413      	add	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	0d1b      	lsrs	r3, r3, #20
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	2107      	movs	r1, #7
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	401a      	ands	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	0d1b      	lsrs	r3, r3, #20
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	431a      	orrs	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d115      	bne.n	8002b68 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0318 	and.w	r3, r3, #24
 8002b52:	4914      	ldr	r1, [pc, #80]	@ (8002ba4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002b54:	40d9      	lsrs	r1, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	400b      	ands	r3, r1
 8002b5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002b66:	e014      	b.n	8002b92 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b74:	43db      	mvns	r3, r3
 8002b76:	401a      	ands	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f003 0318 	and.w	r3, r3, #24
 8002b7e:	4909      	ldr	r1, [pc, #36]	@ (8002ba4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002b80:	40d9      	lsrs	r1, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	400b      	ands	r3, r1
 8002b86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	58026000 	.word	0x58026000
 8002ba4:	000fffff 	.word	0x000fffff

08002ba8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 031f 	and.w	r3, r3, #31
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6093      	str	r3, [r2, #8]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	5fffffc0 	.word	0x5fffffc0

08002c04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c18:	d101      	bne.n	8002c1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <LL_ADC_EnableInternalRegulator+0x24>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	6fffffc0 	.word	0x6fffffc0

08002c54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c68:	d101      	bne.n	8002c6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <LL_ADC_IsEnabled+0x18>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <LL_ADC_IsEnabled+0x1a>
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d101      	bne.n	8002cba <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d101      	bne.n	8002ce0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cf0:	b590      	push	{r4, r7, lr}
 8002cf2:	b089      	sub	sp, #36	@ 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e1ee      	b.n	80030e8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7fe ffd5 	bl	8001cc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff67 	bl	8002c04 <LL_ADC_IsDeepPowerDownEnabled>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff4d 	bl	8002be0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ff82 	bl	8002c54 <LL_ADC_IsInternalRegulatorEnabled>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d114      	bne.n	8002d80 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff ff66 	bl	8002c2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d60:	4b8e      	ldr	r3, [pc, #568]	@ (8002f9c <HAL_ADC_Init+0x2ac>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	4a8e      	ldr	r2, [pc, #568]	@ (8002fa0 <HAL_ADC_Init+0x2b0>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	099b      	lsrs	r3, r3, #6
 8002d6e:	3301      	adds	r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d72:	e002      	b.n	8002d7a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f9      	bne.n	8002d74 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff65 	bl	8002c54 <LL_ADC_IsInternalRegulatorEnabled>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10d      	bne.n	8002dac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d94:	f043 0210 	orr.w	r2, r3, #16
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002da0:	f043 0201 	orr.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff76 	bl	8002ca2 <LL_ADC_REG_IsConversionOngoing>
 8002db6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f040 8188 	bne.w	80030d6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f040 8184 	bne.w	80030d6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002dd6:	f043 0202 	orr.w	r2, r3, #2
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff ff4a 	bl	8002c7c <LL_ADC_IsEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d136      	bne.n	8002e5c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6c      	ldr	r2, [pc, #432]	@ (8002fa4 <HAL_ADC_Init+0x2b4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d004      	beq.n	8002e02 <HAL_ADC_Init+0x112>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a6a      	ldr	r2, [pc, #424]	@ (8002fa8 <HAL_ADC_Init+0x2b8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d10e      	bne.n	8002e20 <HAL_ADC_Init+0x130>
 8002e02:	4868      	ldr	r0, [pc, #416]	@ (8002fa4 <HAL_ADC_Init+0x2b4>)
 8002e04:	f7ff ff3a 	bl	8002c7c <LL_ADC_IsEnabled>
 8002e08:	4604      	mov	r4, r0
 8002e0a:	4867      	ldr	r0, [pc, #412]	@ (8002fa8 <HAL_ADC_Init+0x2b8>)
 8002e0c:	f7ff ff36 	bl	8002c7c <LL_ADC_IsEnabled>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4323      	orrs	r3, r4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e008      	b.n	8002e32 <HAL_ADC_Init+0x142>
 8002e20:	4862      	ldr	r0, [pc, #392]	@ (8002fac <HAL_ADC_Init+0x2bc>)
 8002e22:	f7ff ff2b 	bl	8002c7c <LL_ADC_IsEnabled>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d012      	beq.n	8002e5c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a5a      	ldr	r2, [pc, #360]	@ (8002fa4 <HAL_ADC_Init+0x2b4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d004      	beq.n	8002e4a <HAL_ADC_Init+0x15a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a58      	ldr	r2, [pc, #352]	@ (8002fa8 <HAL_ADC_Init+0x2b8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_Init+0x15e>
 8002e4a:	4a59      	ldr	r2, [pc, #356]	@ (8002fb0 <HAL_ADC_Init+0x2c0>)
 8002e4c:	e000      	b.n	8002e50 <HAL_ADC_Init+0x160>
 8002e4e:	4a59      	ldr	r2, [pc, #356]	@ (8002fb4 <HAL_ADC_Init+0x2c4>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f7ff fcc2 	bl	80027e0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a52      	ldr	r2, [pc, #328]	@ (8002fac <HAL_ADC_Init+0x2bc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d129      	bne.n	8002eba <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7e5b      	ldrb	r3, [r3, #25]
 8002e6a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e70:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002e76:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d013      	beq.n	8002ea8 <HAL_ADC_Init+0x1b8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d00d      	beq.n	8002ea4 <HAL_ADC_Init+0x1b4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b1c      	cmp	r3, #28
 8002e8e:	d007      	beq.n	8002ea0 <HAL_ADC_Init+0x1b0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b18      	cmp	r3, #24
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_Init+0x1ac>
 8002e98:	2318      	movs	r3, #24
 8002e9a:	e006      	b.n	8002eaa <HAL_ADC_Init+0x1ba>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e004      	b.n	8002eaa <HAL_ADC_Init+0x1ba>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	e002      	b.n	8002eaa <HAL_ADC_Init+0x1ba>
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	e000      	b.n	8002eaa <HAL_ADC_Init+0x1ba>
 8002ea8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002eaa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	e00e      	b.n	8002ed8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	7e5b      	ldrb	r3, [r3, #25]
 8002ebe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ec4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002eca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ed2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d106      	bne.n	8002ef0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	045b      	lsls	r3, r3, #17
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a26      	ldr	r2, [pc, #152]	@ (8002fac <HAL_ADC_Init+0x2bc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d115      	bne.n	8002f42 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	4b26      	ldr	r3, [pc, #152]	@ (8002fb8 <HAL_ADC_Init+0x2c8>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	69b9      	ldr	r1, [r7, #24]
 8002f26:	430b      	orrs	r3, r1
 8002f28:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	611a      	str	r2, [r3, #16]
 8002f40:	e009      	b.n	8002f56 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	4b1c      	ldr	r3, [pc, #112]	@ (8002fbc <HAL_ADC_Init+0x2cc>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	69b9      	ldr	r1, [r7, #24]
 8002f52:	430b      	orrs	r3, r1
 8002f54:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fea1 	bl	8002ca2 <LL_ADC_REG_IsConversionOngoing>
 8002f60:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff feae 	bl	8002cc8 <LL_ADC_INJ_IsConversionOngoing>
 8002f6c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 808e 	bne.w	8003092 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f040 808a 	bne.w	8003092 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <HAL_ADC_Init+0x2bc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d11b      	bne.n	8002fc0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7e1b      	ldrb	r3, [r3, #24]
 8002f8c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f94:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	e018      	b.n	8002fce <HAL_ADC_Init+0x2de>
 8002f9c:	2400000c 	.word	0x2400000c
 8002fa0:	053e2d63 	.word	0x053e2d63
 8002fa4:	40022000 	.word	0x40022000
 8002fa8:	40022100 	.word	0x40022100
 8002fac:	58026000 	.word	0x58026000
 8002fb0:	40022300 	.word	0x40022300
 8002fb4:	58026300 	.word	0x58026300
 8002fb8:	fff04007 	.word	0xfff04007
 8002fbc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7e1b      	ldrb	r3, [r3, #24]
 8002fc4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	4b46      	ldr	r3, [pc, #280]	@ (80030f0 <HAL_ADC_Init+0x400>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	69b9      	ldr	r1, [r7, #24]
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d137      	bne.n	800305c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a3f      	ldr	r2, [pc, #252]	@ (80030f4 <HAL_ADC_Init+0x404>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d116      	bne.n	800302a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	4b3d      	ldr	r3, [pc, #244]	@ (80030f8 <HAL_ADC_Init+0x408>)
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800300e:	4311      	orrs	r1, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003014:	4311      	orrs	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800301a:	430a      	orrs	r2, r1
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	611a      	str	r2, [r3, #16]
 8003028:	e020      	b.n	800306c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	4b32      	ldr	r3, [pc, #200]	@ (80030fc <HAL_ADC_Init+0x40c>)
 8003032:	4013      	ands	r3, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003038:	3a01      	subs	r2, #1
 800303a:	0411      	lsls	r1, r2, #16
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003040:	4311      	orrs	r1, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003046:	4311      	orrs	r1, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800304c:	430a      	orrs	r2, r1
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	611a      	str	r2, [r3, #16]
 800305a:	e007      	b.n	800306c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1b      	ldr	r2, [pc, #108]	@ (80030f4 <HAL_ADC_Init+0x404>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d002      	beq.n	8003092 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 ffb5 	bl	8003ffc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d10c      	bne.n	80030b4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	f023 010f 	bic.w	r1, r3, #15
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	1e5a      	subs	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80030b2:	e007      	b.n	80030c4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 020f 	bic.w	r2, r2, #15
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c8:	f023 0303 	bic.w	r3, r3, #3
 80030cc:	f043 0201 	orr.w	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	661a      	str	r2, [r3, #96]	@ 0x60
 80030d4:	e007      	b.n	80030e6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030da:	f043 0210 	orr.w	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3724      	adds	r7, #36	@ 0x24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd90      	pop	{r4, r7, pc}
 80030f0:	ffffbffc 	.word	0xffffbffc
 80030f4:	58026000 	.word	0x58026000
 80030f8:	fc00f81f 	.word	0xfc00f81f
 80030fc:	fc00f81e 	.word	0xfc00f81e

08003100 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	@ 0x28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003108:	2300      	movs	r3, #0
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a87      	ldr	r2, [pc, #540]	@ (8003340 <HAL_ADC_IRQHandler+0x240>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_ADC_IRQHandler+0x30>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a86      	ldr	r2, [pc, #536]	@ (8003344 <HAL_ADC_IRQHandler+0x244>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_ADC_IRQHandler+0x34>
 8003130:	4b85      	ldr	r3, [pc, #532]	@ (8003348 <HAL_ADC_IRQHandler+0x248>)
 8003132:	e000      	b.n	8003136 <HAL_ADC_IRQHandler+0x36>
 8003134:	4b85      	ldr	r3, [pc, #532]	@ (800334c <HAL_ADC_IRQHandler+0x24c>)
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fd36 	bl	8002ba8 <LL_ADC_GetMultimode>
 800313c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d017      	beq.n	8003178 <HAL_ADC_IRQHandler+0x78>
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d012      	beq.n	8003178 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003162:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f001 f85c 	bl	8004228 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2202      	movs	r2, #2
 8003176:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_ADC_IRQHandler+0x8c>
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8083 	beq.w	800329e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d07d      	beq.n	800329e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d105      	bne.n	80031ba <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fc34 	bl	8002a2c <LL_ADC_REG_IsTriggerSourceSWStart>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d062      	beq.n	8003290 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5d      	ldr	r2, [pc, #372]	@ (8003344 <HAL_ADC_IRQHandler+0x244>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d002      	beq.n	80031da <HAL_ADC_IRQHandler+0xda>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	e000      	b.n	80031dc <HAL_ADC_IRQHandler+0xdc>
 80031da:	4b59      	ldr	r3, [pc, #356]	@ (8003340 <HAL_ADC_IRQHandler+0x240>)
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d008      	beq.n	80031f6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b05      	cmp	r3, #5
 80031ee:	d002      	beq.n	80031f6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b09      	cmp	r3, #9
 80031f4:	d104      	bne.n	8003200 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	623b      	str	r3, [r7, #32]
 80031fe:	e00c      	b.n	800321a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a4f      	ldr	r2, [pc, #316]	@ (8003344 <HAL_ADC_IRQHandler+0x244>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d002      	beq.n	8003210 <HAL_ADC_IRQHandler+0x110>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	e000      	b.n	8003212 <HAL_ADC_IRQHandler+0x112>
 8003210:	4b4b      	ldr	r3, [pc, #300]	@ (8003340 <HAL_ADC_IRQHandler+0x240>)
 8003212:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d135      	bne.n	8003290 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b08      	cmp	r3, #8
 8003230:	d12e      	bne.n	8003290 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fd33 	bl	8002ca2 <LL_ADC_REG_IsConversionOngoing>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d11a      	bne.n	8003278 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 020c 	bic.w	r2, r2, #12
 8003250:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003256:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d112      	bne.n	8003290 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326e:	f043 0201 	orr.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	661a      	str	r2, [r3, #96]	@ 0x60
 8003276:	e00b      	b.n	8003290 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327c:	f043 0210 	orr.w	r2, r3, #16
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7fe f949 	bl	8001528 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	220c      	movs	r2, #12
 800329c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d004      	beq.n	80032b2 <HAL_ADC_IRQHandler+0x1b2>
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10b      	bne.n	80032ca <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a0 	beq.w	80033fe <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 809a 	beq.w	80033fe <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d105      	bne.n	80032e2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032da:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fbdf 	bl	8002aaa <LL_ADC_INJ_IsTriggerSourceSWStart>
 80032ec:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff fb9a 	bl	8002a2c <LL_ADC_REG_IsTriggerSourceSWStart>
 80032f8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a11      	ldr	r2, [pc, #68]	@ (8003344 <HAL_ADC_IRQHandler+0x244>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d002      	beq.n	800330a <HAL_ADC_IRQHandler+0x20a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	e000      	b.n	800330c <HAL_ADC_IRQHandler+0x20c>
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <HAL_ADC_IRQHandler+0x240>)
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	4293      	cmp	r3, r2
 8003312:	d008      	beq.n	8003326 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b06      	cmp	r3, #6
 800331e:	d002      	beq.n	8003326 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b07      	cmp	r3, #7
 8003324:	d104      	bne.n	8003330 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	623b      	str	r3, [r7, #32]
 800332e:	e014      	b.n	800335a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a03      	ldr	r2, [pc, #12]	@ (8003344 <HAL_ADC_IRQHandler+0x244>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00a      	beq.n	8003350 <HAL_ADC_IRQHandler+0x250>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	e008      	b.n	8003352 <HAL_ADC_IRQHandler+0x252>
 8003340:	40022000 	.word	0x40022000
 8003344:	40022100 	.word	0x40022100
 8003348:	40022300 	.word	0x40022300
 800334c:	58026300 	.word	0x58026300
 8003350:	4b84      	ldr	r3, [pc, #528]	@ (8003564 <HAL_ADC_IRQHandler+0x464>)
 8003352:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d047      	beq.n	80033f0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_ADC_IRQHandler+0x27a>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d03f      	beq.n	80033f0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003376:	2b00      	cmp	r3, #0
 8003378:	d13a      	bne.n	80033f0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003384:	2b40      	cmp	r3, #64	@ 0x40
 8003386:	d133      	bne.n	80033f0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d12e      	bne.n	80033f0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff fc96 	bl	8002cc8 <LL_ADC_INJ_IsConversionOngoing>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d11a      	bne.n	80033d8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80033b0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d112      	bne.n	80033f0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ce:	f043 0201 	orr.w	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	661a      	str	r2, [r3, #96]	@ 0x60
 80033d6:	e00b      	b.n	80033f0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033dc:	f043 0210 	orr.w	r2, r3, #16
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fef1 	bl	80041d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2260      	movs	r2, #96	@ 0x60
 80033fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003404:	2b00      	cmp	r3, #0
 8003406:	d011      	beq.n	800342c <HAL_ADC_IRQHandler+0x32c>
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00c      	beq.n	800342c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003416:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f8a8 	bl	8003574 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2280      	movs	r2, #128	@ 0x80
 800342a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d012      	beq.n	800345c <HAL_ADC_IRQHandler+0x35c>
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00d      	beq.n	800345c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003444:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fed7 	bl	8004200 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800345a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003462:	2b00      	cmp	r3, #0
 8003464:	d012      	beq.n	800348c <HAL_ADC_IRQHandler+0x38c>
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00d      	beq.n	800348c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003474:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fec9 	bl	8004214 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800348a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	2b00      	cmp	r3, #0
 8003494:	d043      	beq.n	800351e <HAL_ADC_IRQHandler+0x41e>
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	d03e      	beq.n	800351e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d102      	bne.n	80034ae <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80034a8:	2301      	movs	r3, #1
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ac:	e021      	b.n	80034f2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d015      	beq.n	80034e0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a2a      	ldr	r2, [pc, #168]	@ (8003564 <HAL_ADC_IRQHandler+0x464>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_ADC_IRQHandler+0x3c8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a29      	ldr	r2, [pc, #164]	@ (8003568 <HAL_ADC_IRQHandler+0x468>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_IRQHandler+0x3cc>
 80034c8:	4b28      	ldr	r3, [pc, #160]	@ (800356c <HAL_ADC_IRQHandler+0x46c>)
 80034ca:	e000      	b.n	80034ce <HAL_ADC_IRQHandler+0x3ce>
 80034cc:	4b28      	ldr	r3, [pc, #160]	@ (8003570 <HAL_ADC_IRQHandler+0x470>)
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fb78 	bl	8002bc4 <LL_ADC_GetMultiDMATransfer>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80034da:	2301      	movs	r3, #1
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034de:	e008      	b.n	80034f2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80034ee:	2301      	movs	r3, #1
 80034f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d10e      	bne.n	8003516 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003508:	f043 0202 	orr.w	r2, r3, #2
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f839 	bl	8003588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2210      	movs	r2, #16
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003524:	2b00      	cmp	r3, #0
 8003526:	d018      	beq.n	800355a <HAL_ADC_IRQHandler+0x45a>
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800352e:	2b00      	cmp	r3, #0
 8003530:	d013      	beq.n	800355a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003536:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003542:	f043 0208 	orr.w	r2, r3, #8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003552:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fe49 	bl	80041ec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800355a:	bf00      	nop
 800355c:	3728      	adds	r7, #40	@ 0x28
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40022000 	.word	0x40022000
 8003568:	40022100 	.word	0x40022100
 800356c:	40022300 	.word	0x40022300
 8003570:	58026300 	.word	0x58026300

08003574 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b0b9      	sub	sp, #228	@ 0xe4
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035b6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4aab      	ldr	r2, [pc, #684]	@ (800386c <HAL_ADC_ConfigChannel+0x2d0>)
 80035be:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d102      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x34>
 80035ca:	2302      	movs	r3, #2
 80035cc:	f000 bcfe 	b.w	8003fcc <HAL_ADC_ConfigChannel+0xa30>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fb60 	bl	8002ca2 <LL_ADC_REG_IsConversionOngoing>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f040 84e2 	bne.w	8003fae <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	db38      	blt.n	8003664 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a9e      	ldr	r2, [pc, #632]	@ (8003870 <HAL_ADC_ConfigChannel+0x2d4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d033      	beq.n	8003664 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003604:	2b00      	cmp	r3, #0
 8003606:	d108      	bne.n	800361a <HAL_ADC_ConfigChannel+0x7e>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0e9b      	lsrs	r3, r3, #26
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2201      	movs	r2, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	e01d      	b.n	8003656 <HAL_ADC_ConfigChannel+0xba>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800362e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003632:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003636:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 800363e:	2320      	movs	r3, #32
 8003640:	e004      	b.n	800364c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003642:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	2201      	movs	r2, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	69d1      	ldr	r1, [r2, #28]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	430b      	orrs	r3, r1
 8003662:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	f7ff f9ee 	bl	8002a52 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fb11 	bl	8002ca2 <LL_ADC_REG_IsConversionOngoing>
 8003680:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fb1d 	bl	8002cc8 <LL_ADC_INJ_IsConversionOngoing>
 800368e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003696:	2b00      	cmp	r3, #0
 8003698:	f040 8270 	bne.w	8003b7c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800369c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f040 826b 	bne.w	8003b7c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6819      	ldr	r1, [r3, #0]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	461a      	mov	r2, r3
 80036b4:	f7ff fa0c 	bl	8002ad0 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a6c      	ldr	r2, [pc, #432]	@ (8003870 <HAL_ADC_ConfigChannel+0x2d4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d10d      	bne.n	80036de <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	08db      	lsrs	r3, r3, #3
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036dc:	e032      	b.n	8003744 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80036de:	4b65      	ldr	r3, [pc, #404]	@ (8003874 <HAL_ADC_ConfigChannel+0x2d8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80036e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036ea:	d10b      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x168>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	e01d      	b.n	8003740 <HAL_ADC_ConfigChannel+0x1a4>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10b      	bne.n	800372a <HAL_ADC_ConfigChannel+0x18e>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	e00a      	b.n	8003740 <HAL_ADC_ConfigChannel+0x1a4>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	695a      	ldr	r2, [r3, #20]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	089b      	lsrs	r3, r3, #2
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b04      	cmp	r3, #4
 800374a:	d048      	beq.n	80037de <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	6919      	ldr	r1, [r3, #16]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800375c:	f7ff f874 	bl	8002848 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a42      	ldr	r2, [pc, #264]	@ (8003870 <HAL_ADC_ConfigChannel+0x2d4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d119      	bne.n	800379e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6919      	ldr	r1, [r3, #16]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	461a      	mov	r2, r3
 8003778:	f7ff f90c 	bl	8002994 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	6919      	ldr	r1, [r3, #16]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d102      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x1f8>
 800378e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003792:	e000      	b.n	8003796 <HAL_ADC_ConfigChannel+0x1fa>
 8003794:	2300      	movs	r3, #0
 8003796:	461a      	mov	r2, r3
 8003798:	f7ff f8da 	bl	8002950 <LL_ADC_SetOffsetSaturation>
 800379c:	e1ee      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6919      	ldr	r1, [r3, #16]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d102      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x21a>
 80037b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80037b4:	e000      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x21c>
 80037b6:	2300      	movs	r3, #0
 80037b8:	461a      	mov	r2, r3
 80037ba:	f7ff f8a7 	bl	800290c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6919      	ldr	r1, [r3, #16]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	7e1b      	ldrb	r3, [r3, #24]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d102      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x238>
 80037ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80037d2:	e000      	b.n	80037d6 <HAL_ADC_ConfigChannel+0x23a>
 80037d4:	2300      	movs	r3, #0
 80037d6:	461a      	mov	r2, r3
 80037d8:	f7ff f87e 	bl	80028d8 <LL_ADC_SetDataRightShift>
 80037dc:	e1ce      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a23      	ldr	r2, [pc, #140]	@ (8003870 <HAL_ADC_ConfigChannel+0x2d4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	f040 8181 	bne.w	8003aec <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff f85b 	bl	80028ac <LL_ADC_GetOffsetChannel>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x27a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff f850 	bl	80028ac <LL_ADC_GetOffsetChannel>
 800380c:	4603      	mov	r3, r0
 800380e:	0e9b      	lsrs	r3, r3, #26
 8003810:	f003 021f 	and.w	r2, r3, #31
 8003814:	e01e      	b.n	8003854 <HAL_ADC_ConfigChannel+0x2b8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2100      	movs	r1, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff f845 	bl	80028ac <LL_ADC_GetOffsetChannel>
 8003822:	4603      	mov	r3, r0
 8003824:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003834:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003838:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 800383c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003844:	2320      	movs	r3, #32
 8003846:	e004      	b.n	8003852 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003848:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	b2db      	uxtb	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10b      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x2dc>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	0e9b      	lsrs	r3, r3, #26
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	e01e      	b.n	80038aa <HAL_ADC_ConfigChannel+0x30e>
 800386c:	47ff0000 	.word	0x47ff0000
 8003870:	58026000 	.word	0x58026000
 8003874:	5c001000 	.word	0x5c001000
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003884:	fa93 f3a3 	rbit	r3, r3
 8003888:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800388c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003890:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800389c:	2320      	movs	r3, #32
 800389e:	e004      	b.n	80038aa <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80038a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80038a4:	fab3 f383 	clz	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d106      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2200      	movs	r2, #0
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff f88e 	bl	80029d8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2101      	movs	r1, #1
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe fff2 	bl	80028ac <LL_ADC_GetOffsetChannel>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x34c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2101      	movs	r1, #1
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe ffe7 	bl	80028ac <LL_ADC_GetOffsetChannel>
 80038de:	4603      	mov	r3, r0
 80038e0:	0e9b      	lsrs	r3, r3, #26
 80038e2:	f003 021f 	and.w	r2, r3, #31
 80038e6:	e01e      	b.n	8003926 <HAL_ADC_ConfigChannel+0x38a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2101      	movs	r1, #1
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe ffdc 	bl	80028ac <LL_ADC_GetOffsetChannel>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003906:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800390a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800390e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003916:	2320      	movs	r3, #32
 8003918:	e004      	b.n	8003924 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800391a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800392e:	2b00      	cmp	r3, #0
 8003930:	d105      	bne.n	800393e <HAL_ADC_ConfigChannel+0x3a2>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	0e9b      	lsrs	r3, r3, #26
 8003938:	f003 031f 	and.w	r3, r3, #31
 800393c:	e018      	b.n	8003970 <HAL_ADC_ConfigChannel+0x3d4>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003952:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003956:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800395a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003962:	2320      	movs	r3, #32
 8003964:	e004      	b.n	8003970 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003966:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	429a      	cmp	r2, r3
 8003972:	d106      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2200      	movs	r2, #0
 800397a:	2101      	movs	r1, #1
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff f82b 	bl	80029d8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2102      	movs	r1, #2
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe ff8f 	bl	80028ac <LL_ADC_GetOffsetChannel>
 800398e:	4603      	mov	r3, r0
 8003990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x412>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2102      	movs	r1, #2
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe ff84 	bl	80028ac <LL_ADC_GetOffsetChannel>
 80039a4:	4603      	mov	r3, r0
 80039a6:	0e9b      	lsrs	r3, r3, #26
 80039a8:	f003 021f 	and.w	r2, r3, #31
 80039ac:	e01e      	b.n	80039ec <HAL_ADC_ConfigChannel+0x450>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2102      	movs	r1, #2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe ff79 	bl	80028ac <LL_ADC_GetOffsetChannel>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80039cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80039d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80039dc:	2320      	movs	r3, #32
 80039de:	e004      	b.n	80039ea <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80039e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039e4:	fab3 f383 	clz	r3, r3
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d105      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x468>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0e9b      	lsrs	r3, r3, #26
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	e014      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x492>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003a12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003a20:	2320      	movs	r3, #32
 8003a22:	e004      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a28:	fab3 f383 	clz	r3, r3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d106      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	2102      	movs	r1, #2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe ffcc 	bl	80029d8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2103      	movs	r1, #3
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe ff30 	bl	80028ac <LL_ADC_GetOffsetChannel>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10a      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x4d0>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2103      	movs	r1, #3
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe ff25 	bl	80028ac <LL_ADC_GetOffsetChannel>
 8003a62:	4603      	mov	r3, r0
 8003a64:	0e9b      	lsrs	r3, r3, #26
 8003a66:	f003 021f 	and.w	r2, r3, #31
 8003a6a:	e017      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x500>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2103      	movs	r1, #3
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe ff1a 	bl	80028ac <LL_ADC_GetOffsetChannel>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a7e:	fa93 f3a3 	rbit	r3, r3
 8003a82:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a86:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003a88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003a8e:	2320      	movs	r3, #32
 8003a90:	e003      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003a92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a94:	fab3 f383 	clz	r3, r3
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d105      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x518>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	0e9b      	lsrs	r3, r3, #26
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	e011      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x53c>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003ac6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003acc:	2320      	movs	r3, #32
 8003ace:	e003      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003ad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d14f      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2103      	movs	r1, #3
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe ff77 	bl	80029d8 <LL_ADC_SetOffsetState>
 8003aea:	e047      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	069b      	lsls	r3, r3, #26
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d107      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b0e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	069b      	lsls	r3, r3, #26
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d107      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b32:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	069b      	lsls	r3, r3, #26
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d107      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b56:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	069b      	lsls	r3, r3, #26
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d107      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff f87b 	bl	8002c7c <LL_ADC_IsEnabled>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f040 8219 	bne.w	8003fc0 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7fe ffc4 	bl	8002b28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4aa1      	ldr	r2, [pc, #644]	@ (8003e2c <HAL_ADC_ConfigChannel+0x890>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	f040 812e 	bne.w	8003e08 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x638>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	0e9b      	lsrs	r3, r3, #26
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2b09      	cmp	r3, #9
 8003bca:	bf94      	ite	ls
 8003bcc:	2301      	movls	r3, #1
 8003bce:	2300      	movhi	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e019      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x66c>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003bec:	2320      	movs	r3, #32
 8003bee:	e003      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003bf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	2b09      	cmp	r3, #9
 8003c00:	bf94      	ite	ls
 8003c02:	2301      	movls	r3, #1
 8003c04:	2300      	movhi	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d079      	beq.n	8003d00 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x68c>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	3301      	adds	r3, #1
 8003c20:	069b      	lsls	r3, r3, #26
 8003c22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c26:	e015      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x6b8>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c38:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003c40:	2320      	movs	r3, #32
 8003c42:	e003      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8003c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	069b      	lsls	r3, r3, #26
 8003c50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x6d8>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	3301      	adds	r3, #1
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c72:	e017      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x708>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c84:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	e003      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	ea42 0103 	orr.w	r1, r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x72e>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	0e9b      	lsrs	r3, r3, #26
 8003cba:	3301      	adds	r3, #1
 8003cbc:	f003 021f 	and.w	r2, r3, #31
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	051b      	lsls	r3, r3, #20
 8003cc8:	e018      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x760>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	e003      	b.n	8003cee <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f003 021f 	and.w	r2, r3, #31
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	e07e      	b.n	8003dfe <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x780>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0e9b      	lsrs	r3, r3, #26
 8003d12:	3301      	adds	r3, #1
 8003d14:	069b      	lsls	r3, r3, #26
 8003d16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d1a:	e015      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x7ac>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8003d34:	2320      	movs	r3, #32
 8003d36:	e003      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8003d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	3301      	adds	r3, #1
 8003d42:	069b      	lsls	r3, r3, #26
 8003d44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x7cc>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	0e9b      	lsrs	r3, r3, #26
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2101      	movs	r1, #1
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	e017      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x7fc>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	61bb      	str	r3, [r7, #24]
  return result;
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003d80:	2320      	movs	r3, #32
 8003d82:	e003      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	2101      	movs	r1, #1
 8003d94:	fa01 f303 	lsl.w	r3, r1, r3
 8003d98:	ea42 0103 	orr.w	r1, r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10d      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x828>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0e9b      	lsrs	r3, r3, #26
 8003dae:	3301      	adds	r3, #1
 8003db0:	f003 021f 	and.w	r2, r3, #31
 8003db4:	4613      	mov	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	3b1e      	subs	r3, #30
 8003dbc:	051b      	lsls	r3, r3, #20
 8003dbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003dc2:	e01b      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x860>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	60fb      	str	r3, [r7, #12]
  return result;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003ddc:	2320      	movs	r3, #32
 8003dde:	e003      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fab3 f383 	clz	r3, r3
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	3301      	adds	r3, #1
 8003dea:	f003 021f 	and.w	r2, r3, #31
 8003dee:	4613      	mov	r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	4413      	add	r3, r2
 8003df4:	3b1e      	subs	r3, #30
 8003df6:	051b      	lsls	r3, r3, #20
 8003df8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	6892      	ldr	r2, [r2, #8]
 8003e02:	4619      	mov	r1, r3
 8003e04:	f7fe fe64 	bl	8002ad0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f280 80d7 	bge.w	8003fc0 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a06      	ldr	r2, [pc, #24]	@ (8003e30 <HAL_ADC_ConfigChannel+0x894>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_ADC_ConfigChannel+0x88a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a04      	ldr	r2, [pc, #16]	@ (8003e34 <HAL_ADC_ConfigChannel+0x898>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d10a      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x8a0>
 8003e26:	4b04      	ldr	r3, [pc, #16]	@ (8003e38 <HAL_ADC_ConfigChannel+0x89c>)
 8003e28:	e009      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x8a2>
 8003e2a:	bf00      	nop
 8003e2c:	47ff0000 	.word	0x47ff0000
 8003e30:	40022000 	.word	0x40022000
 8003e34:	40022100 	.word	0x40022100
 8003e38:	40022300 	.word	0x40022300
 8003e3c:	4b65      	ldr	r3, [pc, #404]	@ (8003fd4 <HAL_ADC_ConfigChannel+0xa38>)
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fcf4 	bl	800282c <LL_ADC_GetCommonPathInternalCh>
 8003e44:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a62      	ldr	r2, [pc, #392]	@ (8003fd8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <HAL_ADC_ConfigChannel+0x8c0>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a61      	ldr	r2, [pc, #388]	@ (8003fdc <HAL_ADC_ConfigChannel+0xa40>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10e      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x8de>
 8003e5c:	485e      	ldr	r0, [pc, #376]	@ (8003fd8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003e5e:	f7fe ff0d 	bl	8002c7c <LL_ADC_IsEnabled>
 8003e62:	4604      	mov	r4, r0
 8003e64:	485d      	ldr	r0, [pc, #372]	@ (8003fdc <HAL_ADC_ConfigChannel+0xa40>)
 8003e66:	f7fe ff09 	bl	8002c7c <LL_ADC_IsEnabled>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4323      	orrs	r3, r4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	bf0c      	ite	eq
 8003e72:	2301      	moveq	r3, #1
 8003e74:	2300      	movne	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	e008      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x8f0>
 8003e7a:	4859      	ldr	r0, [pc, #356]	@ (8003fe0 <HAL_ADC_ConfigChannel+0xa44>)
 8003e7c:	f7fe fefe 	bl	8002c7c <LL_ADC_IsEnabled>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf0c      	ite	eq
 8003e86:	2301      	moveq	r3, #1
 8003e88:	2300      	movne	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8084 	beq.w	8003f9a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a53      	ldr	r2, [pc, #332]	@ (8003fe4 <HAL_ADC_ConfigChannel+0xa48>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d132      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x966>
 8003e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ea0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d12c      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe0 <HAL_ADC_ConfigChannel+0xa44>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	f040 8086 	bne.w	8003fc0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a47      	ldr	r2, [pc, #284]	@ (8003fd8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_ADC_ConfigChannel+0x92c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a46      	ldr	r2, [pc, #280]	@ (8003fdc <HAL_ADC_ConfigChannel+0xa40>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d101      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x930>
 8003ec8:	4a47      	ldr	r2, [pc, #284]	@ (8003fe8 <HAL_ADC_ConfigChannel+0xa4c>)
 8003eca:	e000      	b.n	8003ece <HAL_ADC_ConfigChannel+0x932>
 8003ecc:	4a41      	ldr	r2, [pc, #260]	@ (8003fd4 <HAL_ADC_ConfigChannel+0xa38>)
 8003ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ed2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f7fe fc94 	bl	8002806 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ede:	4b43      	ldr	r3, [pc, #268]	@ (8003fec <HAL_ADC_ConfigChannel+0xa50>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	099b      	lsrs	r3, r3, #6
 8003ee4:	4a42      	ldr	r2, [pc, #264]	@ (8003ff0 <HAL_ADC_ConfigChannel+0xa54>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	099b      	lsrs	r3, r3, #6
 8003eec:	3301      	adds	r3, #1
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ef2:	e002      	b.n	8003efa <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f9      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f00:	e05e      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a3b      	ldr	r2, [pc, #236]	@ (8003ff4 <HAL_ADC_ConfigChannel+0xa58>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d120      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x9b2>
 8003f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d11a      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a30      	ldr	r2, [pc, #192]	@ (8003fe0 <HAL_ADC_ConfigChannel+0xa44>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d14e      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a2c      	ldr	r2, [pc, #176]	@ (8003fd8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d004      	beq.n	8003f36 <HAL_ADC_ConfigChannel+0x99a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a2a      	ldr	r2, [pc, #168]	@ (8003fdc <HAL_ADC_ConfigChannel+0xa40>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x99e>
 8003f36:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe8 <HAL_ADC_ConfigChannel+0xa4c>)
 8003f38:	e000      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x9a0>
 8003f3a:	4a26      	ldr	r2, [pc, #152]	@ (8003fd4 <HAL_ADC_ConfigChannel+0xa38>)
 8003f3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f44:	4619      	mov	r1, r3
 8003f46:	4610      	mov	r0, r2
 8003f48:	f7fe fc5d 	bl	8002806 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f4c:	e038      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a29      	ldr	r2, [pc, #164]	@ (8003ff8 <HAL_ADC_ConfigChannel+0xa5c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d133      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0xa24>
 8003f58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d12d      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe0 <HAL_ADC_ConfigChannel+0xa44>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d128      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a19      	ldr	r2, [pc, #100]	@ (8003fd8 <HAL_ADC_ConfigChannel+0xa3c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d004      	beq.n	8003f82 <HAL_ADC_ConfigChannel+0x9e6>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a17      	ldr	r2, [pc, #92]	@ (8003fdc <HAL_ADC_ConfigChannel+0xa40>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d101      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x9ea>
 8003f82:	4a19      	ldr	r2, [pc, #100]	@ (8003fe8 <HAL_ADC_ConfigChannel+0xa4c>)
 8003f84:	e000      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x9ec>
 8003f86:	4a13      	ldr	r2, [pc, #76]	@ (8003fd4 <HAL_ADC_ConfigChannel+0xa38>)
 8003f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f7fe fc37 	bl	8002806 <LL_ADC_SetCommonPathInternalCh>
 8003f98:	e012      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9e:	f043 0220 	orr.w	r2, r3, #32
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8003fac:	e008      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003fc8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	37e4      	adds	r7, #228	@ 0xe4
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd90      	pop	{r4, r7, pc}
 8003fd4:	58026300 	.word	0x58026300
 8003fd8:	40022000 	.word	0x40022000
 8003fdc:	40022100 	.word	0x40022100
 8003fe0:	58026000 	.word	0x58026000
 8003fe4:	c7520000 	.word	0xc7520000
 8003fe8:	40022300 	.word	0x40022300
 8003fec:	2400000c 	.word	0x2400000c
 8003ff0:	053e2d63 	.word	0x053e2d63
 8003ff4:	c3210000 	.word	0xc3210000
 8003ff8:	cb840000 	.word	0xcb840000

08003ffc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6c      	ldr	r2, [pc, #432]	@ (80041bc <ADC_ConfigureBoostMode+0x1c0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <ADC_ConfigureBoostMode+0x1c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6b      	ldr	r2, [pc, #428]	@ (80041c0 <ADC_ConfigureBoostMode+0x1c4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d109      	bne.n	800402c <ADC_ConfigureBoostMode+0x30>
 8004018:	4b6a      	ldr	r3, [pc, #424]	@ (80041c4 <ADC_ConfigureBoostMode+0x1c8>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf14      	ite	ne
 8004024:	2301      	movne	r3, #1
 8004026:	2300      	moveq	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	e008      	b.n	800403e <ADC_ConfigureBoostMode+0x42>
 800402c:	4b66      	ldr	r3, [pc, #408]	@ (80041c8 <ADC_ConfigureBoostMode+0x1cc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01c      	beq.n	800407c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004042:	f002 fceb 	bl	8006a1c <HAL_RCC_GetHCLKFreq>
 8004046:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004050:	d010      	beq.n	8004074 <ADC_ConfigureBoostMode+0x78>
 8004052:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004056:	d873      	bhi.n	8004140 <ADC_ConfigureBoostMode+0x144>
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800405c:	d002      	beq.n	8004064 <ADC_ConfigureBoostMode+0x68>
 800405e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004062:	d16d      	bne.n	8004140 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	0c1b      	lsrs	r3, r3, #16
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004070:	60fb      	str	r3, [r7, #12]
        break;
 8004072:	e068      	b.n	8004146 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	089b      	lsrs	r3, r3, #2
 8004078:	60fb      	str	r3, [r7, #12]
        break;
 800407a:	e064      	b.n	8004146 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800407c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004080:	f04f 0100 	mov.w	r1, #0
 8004084:	f003 fec6 	bl	8007e14 <HAL_RCCEx_GetPeriphCLKFreq>
 8004088:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004092:	d051      	beq.n	8004138 <ADC_ConfigureBoostMode+0x13c>
 8004094:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004098:	d854      	bhi.n	8004144 <ADC_ConfigureBoostMode+0x148>
 800409a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800409e:	d047      	beq.n	8004130 <ADC_ConfigureBoostMode+0x134>
 80040a0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80040a4:	d84e      	bhi.n	8004144 <ADC_ConfigureBoostMode+0x148>
 80040a6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80040aa:	d03d      	beq.n	8004128 <ADC_ConfigureBoostMode+0x12c>
 80040ac:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80040b0:	d848      	bhi.n	8004144 <ADC_ConfigureBoostMode+0x148>
 80040b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040b6:	d033      	beq.n	8004120 <ADC_ConfigureBoostMode+0x124>
 80040b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040bc:	d842      	bhi.n	8004144 <ADC_ConfigureBoostMode+0x148>
 80040be:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80040c2:	d029      	beq.n	8004118 <ADC_ConfigureBoostMode+0x11c>
 80040c4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80040c8:	d83c      	bhi.n	8004144 <ADC_ConfigureBoostMode+0x148>
 80040ca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80040ce:	d01a      	beq.n	8004106 <ADC_ConfigureBoostMode+0x10a>
 80040d0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80040d4:	d836      	bhi.n	8004144 <ADC_ConfigureBoostMode+0x148>
 80040d6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80040da:	d014      	beq.n	8004106 <ADC_ConfigureBoostMode+0x10a>
 80040dc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80040e0:	d830      	bhi.n	8004144 <ADC_ConfigureBoostMode+0x148>
 80040e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040e6:	d00e      	beq.n	8004106 <ADC_ConfigureBoostMode+0x10a>
 80040e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ec:	d82a      	bhi.n	8004144 <ADC_ConfigureBoostMode+0x148>
 80040ee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040f2:	d008      	beq.n	8004106 <ADC_ConfigureBoostMode+0x10a>
 80040f4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040f8:	d824      	bhi.n	8004144 <ADC_ConfigureBoostMode+0x148>
 80040fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040fe:	d002      	beq.n	8004106 <ADC_ConfigureBoostMode+0x10a>
 8004100:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004104:	d11e      	bne.n	8004144 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	0c9b      	lsrs	r3, r3, #18
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	60fb      	str	r3, [r7, #12]
        break;
 8004116:	e016      	b.n	8004146 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	60fb      	str	r3, [r7, #12]
        break;
 800411e:	e012      	b.n	8004146 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	60fb      	str	r3, [r7, #12]
        break;
 8004126:	e00e      	b.n	8004146 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	099b      	lsrs	r3, r3, #6
 800412c:	60fb      	str	r3, [r7, #12]
        break;
 800412e:	e00a      	b.n	8004146 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	09db      	lsrs	r3, r3, #7
 8004134:	60fb      	str	r3, [r7, #12]
        break;
 8004136:	e006      	b.n	8004146 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	60fb      	str	r3, [r7, #12]
        break;
 800413e:	e002      	b.n	8004146 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004140:	bf00      	nop
 8004142:	e000      	b.n	8004146 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004144:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4a1f      	ldr	r2, [pc, #124]	@ (80041cc <ADC_ConfigureBoostMode+0x1d0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d808      	bhi.n	8004166 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004162:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004164:	e025      	b.n	80041b2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4a19      	ldr	r2, [pc, #100]	@ (80041d0 <ADC_ConfigureBoostMode+0x1d4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d80a      	bhi.n	8004184 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004180:	609a      	str	r2, [r3, #8]
}
 8004182:	e016      	b.n	80041b2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a13      	ldr	r2, [pc, #76]	@ (80041d4 <ADC_ConfigureBoostMode+0x1d8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d80a      	bhi.n	80041a2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419e:	609a      	str	r2, [r3, #8]
}
 80041a0:	e007      	b.n	80041b2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80041b0:	609a      	str	r2, [r3, #8]
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40022000 	.word	0x40022000
 80041c0:	40022100 	.word	0x40022100
 80041c4:	40022300 	.word	0x40022300
 80041c8:	58026300 	.word	0x58026300
 80041cc:	005f5e10 	.word	0x005f5e10
 80041d0:	00bebc20 	.word	0x00bebc20
 80041d4:	017d7840 	.word	0x017d7840

080041d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800424c:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <__NVIC_SetPriorityGrouping+0x40>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004258:	4013      	ands	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004264:	4b06      	ldr	r3, [pc, #24]	@ (8004280 <__NVIC_SetPriorityGrouping+0x44>)
 8004266:	4313      	orrs	r3, r2
 8004268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800426a:	4a04      	ldr	r2, [pc, #16]	@ (800427c <__NVIC_SetPriorityGrouping+0x40>)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	60d3      	str	r3, [r2, #12]
}
 8004270:	bf00      	nop
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000ed00 	.word	0xe000ed00
 8004280:	05fa0000 	.word	0x05fa0000

08004284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004288:	4b04      	ldr	r3, [pc, #16]	@ (800429c <__NVIC_GetPriorityGrouping+0x18>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	f003 0307 	and.w	r3, r3, #7
}
 8004292:	4618      	mov	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	db0b      	blt.n	80042ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	f003 021f 	and.w	r2, r3, #31
 80042b8:	4907      	ldr	r1, [pc, #28]	@ (80042d8 <__NVIC_EnableIRQ+0x38>)
 80042ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	2001      	movs	r0, #1
 80042c2:	fa00 f202 	lsl.w	r2, r0, r2
 80042c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	e000e100 	.word	0xe000e100

080042dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	6039      	str	r1, [r7, #0]
 80042e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	db0a      	blt.n	8004306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	490c      	ldr	r1, [pc, #48]	@ (8004328 <__NVIC_SetPriority+0x4c>)
 80042f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042fa:	0112      	lsls	r2, r2, #4
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	440b      	add	r3, r1
 8004300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004304:	e00a      	b.n	800431c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4908      	ldr	r1, [pc, #32]	@ (800432c <__NVIC_SetPriority+0x50>)
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	3b04      	subs	r3, #4
 8004314:	0112      	lsls	r2, r2, #4
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	440b      	add	r3, r1
 800431a:	761a      	strb	r2, [r3, #24]
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000e100 	.word	0xe000e100
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004330:	b480      	push	{r7}
 8004332:	b089      	sub	sp, #36	@ 0x24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f1c3 0307 	rsb	r3, r3, #7
 800434a:	2b04      	cmp	r3, #4
 800434c:	bf28      	it	cs
 800434e:	2304      	movcs	r3, #4
 8004350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3304      	adds	r3, #4
 8004356:	2b06      	cmp	r3, #6
 8004358:	d902      	bls.n	8004360 <NVIC_EncodePriority+0x30>
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	3b03      	subs	r3, #3
 800435e:	e000      	b.n	8004362 <NVIC_EncodePriority+0x32>
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004364:	f04f 32ff 	mov.w	r2, #4294967295
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43da      	mvns	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	401a      	ands	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004378:	f04f 31ff 	mov.w	r1, #4294967295
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	43d9      	mvns	r1, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004388:	4313      	orrs	r3, r2
         );
}
 800438a:	4618      	mov	r0, r3
 800438c:	3724      	adds	r7, #36	@ 0x24
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043a8:	d301      	bcc.n	80043ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043aa:	2301      	movs	r3, #1
 80043ac:	e00f      	b.n	80043ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ae:	4a0a      	ldr	r2, [pc, #40]	@ (80043d8 <SysTick_Config+0x40>)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043b6:	210f      	movs	r1, #15
 80043b8:	f04f 30ff 	mov.w	r0, #4294967295
 80043bc:	f7ff ff8e 	bl	80042dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043c0:	4b05      	ldr	r3, [pc, #20]	@ (80043d8 <SysTick_Config+0x40>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043c6:	4b04      	ldr	r3, [pc, #16]	@ (80043d8 <SysTick_Config+0x40>)
 80043c8:	2207      	movs	r2, #7
 80043ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	e000e010 	.word	0xe000e010

080043dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff ff29 	bl	800423c <__NVIC_SetPriorityGrouping>
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b086      	sub	sp, #24
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	4603      	mov	r3, r0
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004400:	f7ff ff40 	bl	8004284 <__NVIC_GetPriorityGrouping>
 8004404:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	6978      	ldr	r0, [r7, #20]
 800440c:	f7ff ff90 	bl	8004330 <NVIC_EncodePriority>
 8004410:	4602      	mov	r2, r0
 8004412:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff ff5f 	bl	80042dc <__NVIC_SetPriority>
}
 800441e:	bf00      	nop
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	4603      	mov	r3, r0
 800442e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff ff33 	bl	80042a0 <__NVIC_EnableIRQ>
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff ffa4 	bl	8004398 <SysTick_Config>
 8004450:	4603      	mov	r3, r0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b098      	sub	sp, #96	@ 0x60
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004464:	4a84      	ldr	r2, [pc, #528]	@ (8004678 <HAL_FDCAN_Init+0x21c>)
 8004466:	f107 030c 	add.w	r3, r7, #12
 800446a:	4611      	mov	r1, r2
 800446c:	224c      	movs	r2, #76	@ 0x4c
 800446e:	4618      	mov	r0, r3
 8004470:	f00a f892 	bl	800e598 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e1c6      	b.n	800480c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a7e      	ldr	r2, [pc, #504]	@ (800467c <HAL_FDCAN_Init+0x220>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d106      	bne.n	8004496 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004490:	461a      	mov	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fd fc94 	bl	8001dd8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0210 	bic.w	r2, r2, #16
 80044be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044c0:	f7fe f95e 	bl	8002780 <HAL_GetTick>
 80044c4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80044c6:	e014      	b.n	80044f2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80044c8:	f7fe f95a 	bl	8002780 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b0a      	cmp	r3, #10
 80044d4:	d90d      	bls.n	80044f2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044dc:	f043 0201 	orr.w	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2203      	movs	r2, #3
 80044ea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e18c      	b.n	800480c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d0e3      	beq.n	80044c8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004510:	f7fe f936 	bl	8002780 <HAL_GetTick>
 8004514:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004516:	e014      	b.n	8004542 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004518:	f7fe f932 	bl	8002780 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b0a      	cmp	r3, #10
 8004524:	d90d      	bls.n	8004542 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800452c:	f043 0201 	orr.w	r2, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2203      	movs	r2, #3
 800453a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e164      	b.n	800480c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0e3      	beq.n	8004518 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0202 	orr.w	r2, r2, #2
 800455e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	7c1b      	ldrb	r3, [r3, #16]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d108      	bne.n	800457a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004576:	619a      	str	r2, [r3, #24]
 8004578:	e007      	b.n	800458a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004588:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	7c5b      	ldrb	r3, [r3, #17]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d108      	bne.n	80045a4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699a      	ldr	r2, [r3, #24]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045a0:	619a      	str	r2, [r3, #24]
 80045a2:	e007      	b.n	80045b4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045b2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	7c9b      	ldrb	r3, [r3, #18]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d108      	bne.n	80045ce <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045ca:	619a      	str	r2, [r3, #24]
 80045cc:	e007      	b.n	80045de <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045dc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004602:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0210 	bic.w	r2, r2, #16
 8004612:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d108      	bne.n	800462e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0204 	orr.w	r2, r2, #4
 800462a:	619a      	str	r2, [r3, #24]
 800462c:	e030      	b.n	8004690 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d02c      	beq.n	8004690 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d020      	beq.n	8004680 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699a      	ldr	r2, [r3, #24]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800464c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0210 	orr.w	r2, r2, #16
 800465c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	2b03      	cmp	r3, #3
 8004664:	d114      	bne.n	8004690 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699a      	ldr	r2, [r3, #24]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0220 	orr.w	r2, r2, #32
 8004674:	619a      	str	r2, [r3, #24]
 8004676:	e00b      	b.n	8004690 <HAL_FDCAN_Init+0x234>
 8004678:	0800f0b8 	.word	0x0800f0b8
 800467c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0220 	orr.w	r2, r2, #32
 800468e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	3b01      	subs	r3, #1
 8004696:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	3b01      	subs	r3, #1
 800469e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046a0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80046a8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80046b8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046ba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046c4:	d115      	bne.n	80046f2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d0:	3b01      	subs	r3, #1
 80046d2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046d4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046da:	3b01      	subs	r3, #1
 80046dc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80046de:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	3b01      	subs	r3, #1
 80046e8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80046ee:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046f0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004718:	4413      	add	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d011      	beq.n	8004742 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004726:	f023 0107 	bic.w	r1, r3, #7
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	3360      	adds	r3, #96	@ 0x60
 8004732:	443b      	add	r3, r7
 8004734:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d011      	beq.n	800476e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004752:	f023 0107 	bic.w	r1, r3, #7
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	3360      	adds	r3, #96	@ 0x60
 800475e:	443b      	add	r3, r7
 8004760:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004772:	2b00      	cmp	r3, #0
 8004774:	d012      	beq.n	800479c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800477e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	3360      	adds	r3, #96	@ 0x60
 800478a:	443b      	add	r3, r7
 800478c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004790:	011a      	lsls	r2, r3, #4
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d012      	beq.n	80047ca <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047ac:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	3360      	adds	r3, #96	@ 0x60
 80047b8:	443b      	add	r3, r7
 80047ba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80047be:	021a      	lsls	r2, r3, #8
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a11      	ldr	r2, [pc, #68]	@ (8004814 <HAL_FDCAN_Init+0x3b8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d107      	bne.n	80047e4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f022 0203 	bic.w	r2, r2, #3
 80047e2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fdeb 	bl	80053d8 <FDCAN_CalcultateRamBlockAddresses>
 8004802:	4603      	mov	r3, r0
 8004804:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004808:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800480c:	4618      	mov	r0, r3
 800480e:	3760      	adds	r7, #96	@ 0x60
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	4000a000 	.word	0x4000a000

08004818 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004828:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d002      	beq.n	8004836 <HAL_FDCAN_ConfigFilter+0x1e>
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d157      	bne.n	80048e6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d12b      	bne.n	8004896 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b07      	cmp	r3, #7
 8004844:	d10d      	bne.n	8004862 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004852:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004858:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800485a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	e00e      	b.n	8004880 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800486e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004876:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e025      	b.n	80048e2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	075a      	lsls	r2, r3, #29
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b07      	cmp	r3, #7
 80048aa:	d103      	bne.n	80048b4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	e006      	b.n	80048c2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	079a      	lsls	r2, r3, #30
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	4413      	add	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	3304      	adds	r3, #4
 80048da:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e008      	b.n	80048f8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048ec:	f043 0202 	orr.w	r2, r3, #2
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
  }
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	d111      	bne.n	800493c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	e008      	b.n	800494e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004942:	f043 0204 	orr.w	r2, r3, #4
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d141      	bne.n	80049f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800497a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004988:	f043 0220 	orr.w	r2, r3, #32
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e038      	b.n	8004a08 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800499e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d009      	beq.n	80049ba <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e026      	b.n	8004a08 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 fe87 	bl	80056e4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2101      	movs	r1, #1
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	fa01 f202 	lsl.w	r2, r1, r2
 80049e2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80049e6:	2201      	movs	r2, #1
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	409a      	lsls	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e008      	b.n	8004a08 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049fc:	f043 0208 	orr.w	r2, r3, #8
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
  }
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b08b      	sub	sp, #44	@ 0x2c
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004a28:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004a2a:	7efb      	ldrb	r3, [r7, #27]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	f040 8149 	bne.w	8004cc4 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b40      	cmp	r3, #64	@ 0x40
 8004a36:	d14c      	bne.n	8004ad2 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a40:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a4e:	f043 0220 	orr.w	r2, r3, #32
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e13c      	b.n	8004cd6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e12a      	b.n	8004cd6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a90:	d10a      	bne.n	8004aa8 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aa2:	d101      	bne.n	8004aa8 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ab0:	0a1b      	lsrs	r3, r3, #8
 8004ab2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac4:	69f9      	ldr	r1, [r7, #28]
 8004ac6:	fb01 f303 	mul.w	r3, r1, r3
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad0:	e068      	b.n	8004ba4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b41      	cmp	r3, #65	@ 0x41
 8004ad6:	d14c      	bne.n	8004b72 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ae0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0ec      	b.n	8004cd6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d109      	bne.n	8004b20 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0da      	b.n	8004cd6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b30:	d10a      	bne.n	8004b48 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b42:	d101      	bne.n	8004b48 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004b44:	2301      	movs	r3, #1
 8004b46:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b64:	69f9      	ldr	r1, [r7, #28]
 8004b66:	fb01 f303 	mul.w	r3, r1, r3
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b70:	e018      	b.n	8004ba4 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d309      	bcc.n	8004b90 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b82:	f043 0220 	orr.w	r2, r3, #32
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0a2      	b.n	8004cd6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d107      	bne.n	8004bc8 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	0c9b      	lsrs	r3, r3, #18
 8004bbe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	e005      	b.n	8004bd4 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	3304      	adds	r3, #4
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	f003 020f 	and.w	r2, r3, #15
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	0e1b      	lsrs	r3, r3, #24
 8004c28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	0fda      	lsrs	r2, r3, #31
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c42:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004c44:	2300      	movs	r3, #0
 8004c46:	623b      	str	r3, [r7, #32]
 8004c48:	e00a      	b.n	8004c60 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	441a      	add	r2, r3
 8004c50:	6839      	ldr	r1, [r7, #0]
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	440b      	add	r3, r1
 8004c56:	7812      	ldrb	r2, [r2, #0]
 8004c58:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	623b      	str	r3, [r7, #32]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8004c66:	5cd3      	ldrb	r3, [r2, r3]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d3ec      	bcc.n	8004c4a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b40      	cmp	r3, #64	@ 0x40
 8004c74:	d105      	bne.n	8004c82 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8004c80:	e01e      	b.n	8004cc0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b41      	cmp	r3, #65	@ 0x41
 8004c86:	d105      	bne.n	8004c94 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8004c92:	e015      	b.n	8004cc0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b1f      	cmp	r3, #31
 8004c98:	d808      	bhi.n	8004cac <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ca6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8004caa:	e009      	b.n	8004cc0 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 021f 	and.w	r2, r3, #31
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e008      	b.n	8004cd6 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cca:	f043 0208 	orr.w	r2, r3, #8
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	372c      	adds	r7, #44	@ 0x2c
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	0800f114 	.word	0x0800f114

08004ce8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004cfa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004cfc:	7dfb      	ldrb	r3, [r7, #23]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d002      	beq.n	8004d08 <HAL_FDCAN_ActivateNotification+0x20>
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d155      	bne.n	8004db4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d108      	bne.n	8004d28 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d26:	e014      	b.n	8004d52 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	4013      	ands	r3, r2
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d108      	bne.n	8004d4a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0202 	orr.w	r2, r2, #2
 8004d46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d48:	e003      	b.n	8004d52 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2203      	movs	r2, #3
 8004d50:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d009      	beq.n	8004d70 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd4 <HAL_FDCAN_ActivateNotification+0xec>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004da2:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	0f9b      	lsrs	r3, r3, #30
 8004daa:	490b      	ldr	r1, [pc, #44]	@ (8004dd8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e008      	b.n	8004dc6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dba:	f043 0202 	orr.w	r2, r3, #2
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
  }
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	3fcfffff 	.word	0x3fcfffff
 8004dd8:	4000a800 	.word	0x4000a800

08004ddc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b096      	sub	sp, #88	@ 0x58
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004de4:	4b9a      	ldr	r3, [pc, #616]	@ (8005050 <HAL_FDCAN_IRQHandler+0x274>)
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	079b      	lsls	r3, r3, #30
 8004dea:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004dec:	4b98      	ldr	r3, [pc, #608]	@ (8005050 <HAL_FDCAN_IRQHandler+0x274>)
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	079b      	lsls	r3, r3, #30
 8004df2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004df4:	4013      	ands	r3, r2
 8004df6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfe:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004e02:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e24:	4013      	ands	r3, r2
 8004e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e46:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8004e4a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e54:	4013      	ands	r3, r2
 8004e56:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e5e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8004e62:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d010      	beq.n	8004eae <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8e:	0a1b      	lsrs	r3, r3, #8
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ea0:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ea2:	4b6b      	ldr	r3, [pc, #428]	@ (8005050 <HAL_FDCAN_IRQHandler+0x274>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fa54 	bl	8005356 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eb0:	0a9b      	lsrs	r3, r3, #10
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d01d      	beq.n	8004ef6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebc:	0a9b      	lsrs	r3, r3, #10
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d017      	beq.n	8004ef6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ece:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ed8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004eda:	4013      	ands	r3, r2
 8004edc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ee6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ee8:	4b59      	ldr	r3, [pc, #356]	@ (8005050 <HAL_FDCAN_IRQHandler+0x274>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004eee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fa07 	bl	8005304 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00d      	beq.n	8004f18 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f02:	4b54      	ldr	r3, [pc, #336]	@ (8005054 <HAL_FDCAN_IRQHandler+0x278>)
 8004f04:	400b      	ands	r3, r1
 8004f06:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f08:	4a51      	ldr	r2, [pc, #324]	@ (8005050 <HAL_FDCAN_IRQHandler+0x274>)
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f0c:	0f9b      	lsrs	r3, r3, #30
 8004f0e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004f10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f9c0 	bl	8005298 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00d      	beq.n	8004f3a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f24:	4b4b      	ldr	r3, [pc, #300]	@ (8005054 <HAL_FDCAN_IRQHandler+0x278>)
 8004f26:	400b      	ands	r3, r1
 8004f28:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f2a:	4a49      	ldr	r2, [pc, #292]	@ (8005050 <HAL_FDCAN_IRQHandler+0x274>)
 8004f2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f2e:	0f9b      	lsrs	r3, r3, #30
 8004f30:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004f32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f9ba 	bl	80052ae <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00d      	beq.n	8004f5c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004f46:	4b43      	ldr	r3, [pc, #268]	@ (8005054 <HAL_FDCAN_IRQHandler+0x278>)
 8004f48:	400b      	ands	r3, r1
 8004f4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f4c:	4a40      	ldr	r2, [pc, #256]	@ (8005050 <HAL_FDCAN_IRQHandler+0x274>)
 8004f4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f50:	0f9b      	lsrs	r3, r3, #30
 8004f52:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004f54:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fc faf0 	bl	800153c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004f5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00d      	beq.n	8004f7e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004f68:	4b3a      	ldr	r3, [pc, #232]	@ (8005054 <HAL_FDCAN_IRQHandler+0x278>)
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f6e:	4a38      	ldr	r2, [pc, #224]	@ (8005050 <HAL_FDCAN_IRQHandler+0x274>)
 8004f70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f72:	0f9b      	lsrs	r3, r3, #30
 8004f74:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004f76:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f9a3 	bl	80052c4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f80:	0adb      	lsrs	r3, r3, #11
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d010      	beq.n	8004fac <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8c:	0adb      	lsrs	r3, r3, #11
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8005050 <HAL_FDCAN_IRQHandler+0x274>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f997 	bl	80052da <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fae:	0a5b      	lsrs	r3, r3, #9
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01d      	beq.n	8004ff4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fba:	0a5b      	lsrs	r3, r3, #9
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d017      	beq.n	8004ff4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004fcc:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fd8:	4013      	ands	r3, r2
 8004fda:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fe4:	651a      	str	r2, [r3, #80]	@ 0x50
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8005050 <HAL_FDCAN_IRQHandler+0x274>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004fec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f97d 	bl	80052ee <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff6:	0cdb      	lsrs	r3, r3, #19
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d010      	beq.n	8005022 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005002:	0cdb      	lsrs	r3, r3, #19
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005014:	651a      	str	r2, [r3, #80]	@ 0x50
 8005016:	4b0e      	ldr	r3, [pc, #56]	@ (8005050 <HAL_FDCAN_IRQHandler+0x274>)
 8005018:	2200      	movs	r2, #0
 800501a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f97c 	bl	800531a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005024:	0c1b      	lsrs	r3, r3, #16
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d016      	beq.n	800505c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800502e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d010      	beq.n	800505c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005042:	651a      	str	r2, [r3, #80]	@ 0x50
 8005044:	4b02      	ldr	r3, [pc, #8]	@ (8005050 <HAL_FDCAN_IRQHandler+0x274>)
 8005046:	2200      	movs	r2, #0
 8005048:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	e004      	b.n	8005058 <HAL_FDCAN_IRQHandler+0x27c>
 800504e:	bf00      	nop
 8005050:	4000a800 	.word	0x4000a800
 8005054:	3fcfffff 	.word	0x3fcfffff
 8005058:	f000 f969 	bl	800532e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800505c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800505e:	0c9b      	lsrs	r3, r3, #18
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d010      	beq.n	800508a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506a:	0c9b      	lsrs	r3, r3, #18
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800507c:	651a      	str	r2, [r3, #80]	@ 0x50
 800507e:	4b83      	ldr	r3, [pc, #524]	@ (800528c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005080:	2200      	movs	r2, #0
 8005082:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f95c 	bl	8005342 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800508a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508c:	0c5b      	lsrs	r3, r3, #17
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d015      	beq.n	80050c2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005098:	0c5b      	lsrs	r3, r3, #17
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00f      	beq.n	80050c2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80050aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80050ac:	4b77      	ldr	r3, [pc, #476]	@ (800528c <HAL_FDCAN_IRQHandler+0x4b0>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80050c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00d      	beq.n	80050e4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050ce:	4b70      	ldr	r3, [pc, #448]	@ (8005290 <HAL_FDCAN_IRQHandler+0x4b4>)
 80050d0:	400b      	ands	r3, r1
 80050d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80050d4:	4a6d      	ldr	r2, [pc, #436]	@ (800528c <HAL_FDCAN_IRQHandler+0x4b0>)
 80050d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050d8:	0f9b      	lsrs	r3, r3, #30
 80050da:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80050dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fc fb32 	bl	8001748 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80050e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d011      	beq.n	800510e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050f0:	4b67      	ldr	r3, [pc, #412]	@ (8005290 <HAL_FDCAN_IRQHandler+0x4b4>)
 80050f2:	400b      	ands	r3, r1
 80050f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80050f6:	4a65      	ldr	r2, [pc, #404]	@ (800528c <HAL_FDCAN_IRQHandler+0x4b0>)
 80050f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050fa:	0f9b      	lsrs	r3, r3, #30
 80050fc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a60      	ldr	r2, [pc, #384]	@ (8005294 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	f040 80ac 	bne.w	8005272 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 80a4 	beq.w	8005272 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800513e:	4013      	ands	r3, r2
 8005140:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005156:	4013      	ands	r3, r2
 8005158:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800516e:	4013      	ands	r3, r2
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800517c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	6a3a      	ldr	r2, [r7, #32]
 8005186:	4013      	ands	r3, r2
 8005188:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8005194:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	4013      	ands	r3, r2
 80051a0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80051b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051be:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80051c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f8db 	bl	800537e <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80051c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d007      	beq.n	80051de <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051d4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80051d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f8db 	bl	8005394 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	099b      	lsrs	r3, r3, #6
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01a      	beq.n	8005220 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	099b      	lsrs	r3, r3, #6
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d014      	beq.n	8005220 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	b29b      	uxth	r3, r3
 8005200:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800520c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2240      	movs	r2, #64	@ 0x40
 8005214:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	6939      	ldr	r1, [r7, #16]
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f8c5 	bl	80053aa <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800522c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800522e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f8c6 	bl	80053c2 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00b      	beq.n	8005254 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	6a3a      	ldr	r2, [r7, #32]
 8005242:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00b      	beq.n	8005272 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f874 	bl	800536a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005282:	bf00      	nop
 8005284:	3758      	adds	r7, #88	@ 0x58
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	4000a800 	.word	0x4000a800
 8005290:	3fcfffff 	.word	0x3fcfffff
 8005294:	4000a000 	.word	0x4000a000

08005298 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80053ee:	4ba7      	ldr	r3, [pc, #668]	@ (800568c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	0091      	lsls	r1, r2, #2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	430b      	orrs	r3, r1
 80053fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005408:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005410:	041a      	lsls	r2, r3, #16
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	4413      	add	r3, r2
 8005424:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800542e:	4b97      	ldr	r3, [pc, #604]	@ (800568c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005430:	4013      	ands	r3, r2
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	0091      	lsls	r1, r2, #2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	430b      	orrs	r3, r1
 800543c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005448:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005450:	041a      	lsls	r2, r3, #16
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	4413      	add	r3, r2
 8005466:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005470:	4b86      	ldr	r3, [pc, #536]	@ (800568c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005472:	4013      	ands	r3, r2
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	0091      	lsls	r1, r2, #2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	430b      	orrs	r3, r1
 800547e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800548a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	041a      	lsls	r2, r3, #16
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	4413      	add	r3, r2
 80054ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80054b8:	4b74      	ldr	r3, [pc, #464]	@ (800568c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	0091      	lsls	r1, r2, #2
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	430b      	orrs	r3, r1
 80054c6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054d2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054da:	041a      	lsls	r2, r3, #16
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	4413      	add	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005500:	4b62      	ldr	r3, [pc, #392]	@ (800568c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005502:	4013      	ands	r3, r2
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	0091      	lsls	r1, r2, #2
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	430b      	orrs	r3, r1
 800550e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800551a:	fb02 f303 	mul.w	r3, r2, r3
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4413      	add	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800552c:	4b57      	ldr	r3, [pc, #348]	@ (800568c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800552e:	4013      	ands	r3, r2
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	0091      	lsls	r1, r2, #2
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	430b      	orrs	r3, r1
 800553a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005546:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554e:	041a      	lsls	r2, r3, #16
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	4413      	add	r3, r2
 8005564:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800556e:	4b47      	ldr	r3, [pc, #284]	@ (800568c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005570:	4013      	ands	r3, r2
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	0091      	lsls	r1, r2, #2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	430b      	orrs	r3, r1
 800557c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005588:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005590:	041a      	lsls	r2, r3, #16
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80055a4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ac:	061a      	lsls	r2, r3, #24
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055bc:	4b34      	ldr	r3, [pc, #208]	@ (8005690 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80055be:	4413      	add	r3, r2
 80055c0:	009a      	lsls	r2, r3, #2
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	441a      	add	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	441a      	add	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80055f8:	441a      	add	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800560a:	fb01 f303 	mul.w	r3, r1, r3
 800560e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005610:	441a      	add	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005628:	441a      	add	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	441a      	add	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005652:	fb01 f303 	mul.w	r3, r1, r3
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800566e:	fb01 f303 	mul.w	r3, r1, r3
 8005672:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005674:	441a      	add	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005682:	4a04      	ldr	r2, [pc, #16]	@ (8005694 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d915      	bls.n	80056b4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005688:	e006      	b.n	8005698 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800568a:	bf00      	nop
 800568c:	ffff0003 	.word	0xffff0003
 8005690:	10002b00 	.word	0x10002b00
 8005694:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800569e:	f043 0220 	orr.w	r2, r3, #32
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2203      	movs	r2, #3
 80056ac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e010      	b.n	80056d6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	e005      	b.n	80056c8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3304      	adds	r3, #4
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d3f3      	bcc.n	80056bc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop

080056e4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b089      	sub	sp, #36	@ 0x24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005702:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800570a:	4313      	orrs	r3, r2
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	e00a      	b.n	8005726 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005718:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800571e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005720:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005724:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005730:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005736:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800573c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005752:	6839      	ldr	r1, [r7, #0]
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	3304      	adds	r3, #4
 8005768:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	3304      	adds	r3, #4
 8005774:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e020      	b.n	80057be <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	3303      	adds	r3, #3
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	4413      	add	r3, r2
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	3302      	adds	r3, #2
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	440b      	add	r3, r1
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005794:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	3301      	adds	r3, #1
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	440b      	add	r3, r1
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80057a2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	440a      	add	r2, r1
 80057aa:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80057ac:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	3304      	adds	r3, #4
 80057b6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	3304      	adds	r3, #4
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	4a06      	ldr	r2, [pc, #24]	@ (80057dc <FDCAN_CopyMessageToRAM+0xf8>)
 80057c4:	5cd3      	ldrb	r3, [r2, r3]
 80057c6:	461a      	mov	r2, r3
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d3d6      	bcc.n	800577c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80057ce:	bf00      	nop
 80057d0:	bf00      	nop
 80057d2:	3724      	adds	r7, #36	@ 0x24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	0800f114 	.word	0x0800f114

080057e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b089      	sub	sp, #36	@ 0x24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80057ee:	4b86      	ldr	r3, [pc, #536]	@ (8005a08 <HAL_GPIO_Init+0x228>)
 80057f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057f2:	e18c      	b.n	8005b0e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	2101      	movs	r1, #1
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005800:	4013      	ands	r3, r2
 8005802:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 817e 	beq.w	8005b08 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d005      	beq.n	8005824 <HAL_GPIO_Init+0x44>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d130      	bne.n	8005886 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	2203      	movs	r2, #3
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4013      	ands	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4313      	orrs	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800585a:	2201      	movs	r2, #1
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	43db      	mvns	r3, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	4013      	ands	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	091b      	lsrs	r3, r3, #4
 8005870:	f003 0201 	and.w	r2, r3, #1
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4313      	orrs	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b03      	cmp	r3, #3
 8005890:	d017      	beq.n	80058c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	2203      	movs	r2, #3
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43db      	mvns	r3, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4013      	ands	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d123      	bne.n	8005916 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	08da      	lsrs	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3208      	adds	r2, #8
 80058d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	220f      	movs	r2, #15
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	43db      	mvns	r3, r3
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	4013      	ands	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	4313      	orrs	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	08da      	lsrs	r2, r3, #3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3208      	adds	r2, #8
 8005910:	69b9      	ldr	r1, [r7, #24]
 8005912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	2203      	movs	r2, #3
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f003 0203 	and.w	r2, r3, #3
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	fa02 f303 	lsl.w	r3, r2, r3
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	4313      	orrs	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 80d8 	beq.w	8005b08 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005958:	4b2c      	ldr	r3, [pc, #176]	@ (8005a0c <HAL_GPIO_Init+0x22c>)
 800595a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800595e:	4a2b      	ldr	r2, [pc, #172]	@ (8005a0c <HAL_GPIO_Init+0x22c>)
 8005960:	f043 0302 	orr.w	r3, r3, #2
 8005964:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005968:	4b28      	ldr	r3, [pc, #160]	@ (8005a0c <HAL_GPIO_Init+0x22c>)
 800596a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005976:	4a26      	ldr	r2, [pc, #152]	@ (8005a10 <HAL_GPIO_Init+0x230>)
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	089b      	lsrs	r3, r3, #2
 800597c:	3302      	adds	r3, #2
 800597e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	220f      	movs	r2, #15
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	43db      	mvns	r3, r3
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4013      	ands	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a14 <HAL_GPIO_Init+0x234>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d04a      	beq.n	8005a38 <HAL_GPIO_Init+0x258>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a18 <HAL_GPIO_Init+0x238>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d02b      	beq.n	8005a02 <HAL_GPIO_Init+0x222>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a1b      	ldr	r2, [pc, #108]	@ (8005a1c <HAL_GPIO_Init+0x23c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d025      	beq.n	80059fe <HAL_GPIO_Init+0x21e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a20 <HAL_GPIO_Init+0x240>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d01f      	beq.n	80059fa <HAL_GPIO_Init+0x21a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a19      	ldr	r2, [pc, #100]	@ (8005a24 <HAL_GPIO_Init+0x244>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d019      	beq.n	80059f6 <HAL_GPIO_Init+0x216>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a18      	ldr	r2, [pc, #96]	@ (8005a28 <HAL_GPIO_Init+0x248>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <HAL_GPIO_Init+0x212>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a17      	ldr	r2, [pc, #92]	@ (8005a2c <HAL_GPIO_Init+0x24c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00d      	beq.n	80059ee <HAL_GPIO_Init+0x20e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a16      	ldr	r2, [pc, #88]	@ (8005a30 <HAL_GPIO_Init+0x250>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <HAL_GPIO_Init+0x20a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a15      	ldr	r2, [pc, #84]	@ (8005a34 <HAL_GPIO_Init+0x254>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d101      	bne.n	80059e6 <HAL_GPIO_Init+0x206>
 80059e2:	2309      	movs	r3, #9
 80059e4:	e029      	b.n	8005a3a <HAL_GPIO_Init+0x25a>
 80059e6:	230a      	movs	r3, #10
 80059e8:	e027      	b.n	8005a3a <HAL_GPIO_Init+0x25a>
 80059ea:	2307      	movs	r3, #7
 80059ec:	e025      	b.n	8005a3a <HAL_GPIO_Init+0x25a>
 80059ee:	2306      	movs	r3, #6
 80059f0:	e023      	b.n	8005a3a <HAL_GPIO_Init+0x25a>
 80059f2:	2305      	movs	r3, #5
 80059f4:	e021      	b.n	8005a3a <HAL_GPIO_Init+0x25a>
 80059f6:	2304      	movs	r3, #4
 80059f8:	e01f      	b.n	8005a3a <HAL_GPIO_Init+0x25a>
 80059fa:	2303      	movs	r3, #3
 80059fc:	e01d      	b.n	8005a3a <HAL_GPIO_Init+0x25a>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e01b      	b.n	8005a3a <HAL_GPIO_Init+0x25a>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e019      	b.n	8005a3a <HAL_GPIO_Init+0x25a>
 8005a06:	bf00      	nop
 8005a08:	58000080 	.word	0x58000080
 8005a0c:	58024400 	.word	0x58024400
 8005a10:	58000400 	.word	0x58000400
 8005a14:	58020000 	.word	0x58020000
 8005a18:	58020400 	.word	0x58020400
 8005a1c:	58020800 	.word	0x58020800
 8005a20:	58020c00 	.word	0x58020c00
 8005a24:	58021000 	.word	0x58021000
 8005a28:	58021400 	.word	0x58021400
 8005a2c:	58021800 	.word	0x58021800
 8005a30:	58021c00 	.word	0x58021c00
 8005a34:	58022400 	.word	0x58022400
 8005a38:	2300      	movs	r3, #0
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	f002 0203 	and.w	r2, r2, #3
 8005a40:	0092      	lsls	r2, r2, #2
 8005a42:	4093      	lsls	r3, r2
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a4a:	4938      	ldr	r1, [pc, #224]	@ (8005b2c <HAL_GPIO_Init+0x34c>)
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	3302      	adds	r3, #2
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	43db      	mvns	r3, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4013      	ands	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005aac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	43db      	mvns	r3, r3
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	4013      	ands	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	fa22 f303 	lsr.w	r3, r2, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f47f ae6b 	bne.w	80057f4 <HAL_GPIO_Init+0x14>
  }
}
 8005b1e:	bf00      	nop
 8005b20:	bf00      	nop
 8005b22:	3724      	adds	r7, #36	@ 0x24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	58000400 	.word	0x58000400

08005b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	887b      	ldrh	r3, [r7, #2]
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
 8005b4c:	e001      	b.n	8005b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	807b      	strh	r3, [r7, #2]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b70:	787b      	ldrb	r3, [r7, #1]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b76:	887a      	ldrh	r2, [r7, #2]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b7c:	e003      	b.n	8005b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	041a      	lsls	r2, r3, #16
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	619a      	str	r2, [r3, #24]
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005b9c:	4b19      	ldr	r3, [pc, #100]	@ (8005c04 <HAL_PWREx_ConfigSupply+0x70>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d00a      	beq.n	8005bbe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ba8:	4b16      	ldr	r3, [pc, #88]	@ (8005c04 <HAL_PWREx_ConfigSupply+0x70>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d001      	beq.n	8005bba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e01f      	b.n	8005bfa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e01d      	b.n	8005bfa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005bbe:	4b11      	ldr	r3, [pc, #68]	@ (8005c04 <HAL_PWREx_ConfigSupply+0x70>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f023 0207 	bic.w	r2, r3, #7
 8005bc6:	490f      	ldr	r1, [pc, #60]	@ (8005c04 <HAL_PWREx_ConfigSupply+0x70>)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005bce:	f7fc fdd7 	bl	8002780 <HAL_GetTick>
 8005bd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005bd4:	e009      	b.n	8005bea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005bd6:	f7fc fdd3 	bl	8002780 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005be4:	d901      	bls.n	8005bea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e007      	b.n	8005bfa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005bea:	4b06      	ldr	r3, [pc, #24]	@ (8005c04 <HAL_PWREx_ConfigSupply+0x70>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bf6:	d1ee      	bne.n	8005bd6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	58024800 	.word	0x58024800

08005c08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08c      	sub	sp, #48	@ 0x30
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e3c8      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8087 	beq.w	8005d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c28:	4b88      	ldr	r3, [pc, #544]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c32:	4b86      	ldr	r3, [pc, #536]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3a:	2b10      	cmp	r3, #16
 8005c3c:	d007      	beq.n	8005c4e <HAL_RCC_OscConfig+0x46>
 8005c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c40:	2b18      	cmp	r3, #24
 8005c42:	d110      	bne.n	8005c66 <HAL_RCC_OscConfig+0x5e>
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d10b      	bne.n	8005c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c4e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d06c      	beq.n	8005d34 <HAL_RCC_OscConfig+0x12c>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d168      	bne.n	8005d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e3a2      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c6e:	d106      	bne.n	8005c7e <HAL_RCC_OscConfig+0x76>
 8005c70:	4b76      	ldr	r3, [pc, #472]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a75      	ldr	r2, [pc, #468]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	e02e      	b.n	8005cdc <HAL_RCC_OscConfig+0xd4>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10c      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x98>
 8005c86:	4b71      	ldr	r3, [pc, #452]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a70      	ldr	r2, [pc, #448]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	4b6e      	ldr	r3, [pc, #440]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a6d      	ldr	r2, [pc, #436]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005c98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	e01d      	b.n	8005cdc <HAL_RCC_OscConfig+0xd4>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ca8:	d10c      	bne.n	8005cc4 <HAL_RCC_OscConfig+0xbc>
 8005caa:	4b68      	ldr	r3, [pc, #416]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a67      	ldr	r2, [pc, #412]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	4b65      	ldr	r3, [pc, #404]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a64      	ldr	r2, [pc, #400]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	e00b      	b.n	8005cdc <HAL_RCC_OscConfig+0xd4>
 8005cc4:	4b61      	ldr	r3, [pc, #388]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a60      	ldr	r2, [pc, #384]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	4b5e      	ldr	r3, [pc, #376]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a5d      	ldr	r2, [pc, #372]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d013      	beq.n	8005d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fc fd4c 	bl	8002780 <HAL_GetTick>
 8005ce8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cec:	f7fc fd48 	bl	8002780 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b64      	cmp	r3, #100	@ 0x64
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e356      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cfe:	4b53      	ldr	r3, [pc, #332]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0f0      	beq.n	8005cec <HAL_RCC_OscConfig+0xe4>
 8005d0a:	e014      	b.n	8005d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0c:	f7fc fd38 	bl	8002780 <HAL_GetTick>
 8005d10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d14:	f7fc fd34 	bl	8002780 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b64      	cmp	r3, #100	@ 0x64
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e342      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d26:	4b49      	ldr	r3, [pc, #292]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f0      	bne.n	8005d14 <HAL_RCC_OscConfig+0x10c>
 8005d32:	e000      	b.n	8005d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 808c 	beq.w	8005e5c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d44:	4b41      	ldr	r3, [pc, #260]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <HAL_RCC_OscConfig+0x162>
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	2b18      	cmp	r3, #24
 8005d5e:	d137      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x1c8>
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d132      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d6a:	4b38      	ldr	r3, [pc, #224]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <HAL_RCC_OscConfig+0x17a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e314      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d82:	4b32      	ldr	r3, [pc, #200]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f023 0219 	bic.w	r2, r3, #25
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	492f      	ldr	r1, [pc, #188]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fc fcf4 	bl	8002780 <HAL_GetTick>
 8005d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d9c:	f7fc fcf0 	bl	8002780 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e2fe      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dae:	4b27      	ldr	r3, [pc, #156]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dba:	4b24      	ldr	r3, [pc, #144]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	061b      	lsls	r3, r3, #24
 8005dc8:	4920      	ldr	r1, [pc, #128]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dce:	e045      	b.n	8005e5c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d026      	beq.n	8005e26 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f023 0219 	bic.w	r2, r3, #25
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4919      	ldr	r1, [pc, #100]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dea:	f7fc fcc9 	bl	8002780 <HAL_GetTick>
 8005dee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df2:	f7fc fcc5 	bl	8002780 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e2d3      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e04:	4b11      	ldr	r3, [pc, #68]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0f0      	beq.n	8005df2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e10:	4b0e      	ldr	r3, [pc, #56]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	061b      	lsls	r3, r3, #24
 8005e1e:	490b      	ldr	r1, [pc, #44]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	604b      	str	r3, [r1, #4]
 8005e24:	e01a      	b.n	8005e5c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e26:	4b09      	ldr	r3, [pc, #36]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a08      	ldr	r2, [pc, #32]	@ (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e32:	f7fc fca5 	bl	8002780 <HAL_GetTick>
 8005e36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e38:	e00a      	b.n	8005e50 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e3a:	f7fc fca1 	bl	8002780 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d903      	bls.n	8005e50 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e2af      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
 8005e4c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e50:	4b96      	ldr	r3, [pc, #600]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1ee      	bne.n	8005e3a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d06a      	beq.n	8005f3e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e68:	4b90      	ldr	r3, [pc, #576]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e70:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e72:	4b8e      	ldr	r3, [pc, #568]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e76:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d007      	beq.n	8005e8e <HAL_RCC_OscConfig+0x286>
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b18      	cmp	r3, #24
 8005e82:	d11b      	bne.n	8005ebc <HAL_RCC_OscConfig+0x2b4>
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d116      	bne.n	8005ebc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e8e:	4b87      	ldr	r3, [pc, #540]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x29e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	2b80      	cmp	r3, #128	@ 0x80
 8005ea0:	d001      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e282      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ea6:	4b81      	ldr	r3, [pc, #516]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	061b      	lsls	r3, r3, #24
 8005eb4:	497d      	ldr	r1, [pc, #500]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005eba:	e040      	b.n	8005f3e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d023      	beq.n	8005f0c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ec4:	4b79      	ldr	r3, [pc, #484]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a78      	ldr	r2, [pc, #480]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed0:	f7fc fc56 	bl	8002780 <HAL_GetTick>
 8005ed4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ed8:	f7fc fc52 	bl	8002780 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e260      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005eea:	4b70      	ldr	r3, [pc, #448]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f0      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	061b      	lsls	r3, r3, #24
 8005f04:	4969      	ldr	r1, [pc, #420]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60cb      	str	r3, [r1, #12]
 8005f0a:	e018      	b.n	8005f3e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f0c:	4b67      	ldr	r3, [pc, #412]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a66      	ldr	r2, [pc, #408]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005f12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f18:	f7fc fc32 	bl	8002780 <HAL_GetTick>
 8005f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f20:	f7fc fc2e 	bl	8002780 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e23c      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f32:	4b5e      	ldr	r3, [pc, #376]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1f0      	bne.n	8005f20 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d036      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d019      	beq.n	8005f86 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f52:	4b56      	ldr	r3, [pc, #344]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f56:	4a55      	ldr	r2, [pc, #340]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005f58:	f043 0301 	orr.w	r3, r3, #1
 8005f5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5e:	f7fc fc0f 	bl	8002780 <HAL_GetTick>
 8005f62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f66:	f7fc fc0b 	bl	8002780 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e219      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f78:	4b4c      	ldr	r3, [pc, #304]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x35e>
 8005f84:	e018      	b.n	8005fb8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f86:	4b49      	ldr	r3, [pc, #292]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f8a:	4a48      	ldr	r2, [pc, #288]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f92:	f7fc fbf5 	bl	8002780 <HAL_GetTick>
 8005f96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f98:	e008      	b.n	8005fac <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f9a:	f7fc fbf1 	bl	8002780 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e1ff      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fac:	4b3f      	ldr	r3, [pc, #252]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1f0      	bne.n	8005f9a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0320 	and.w	r3, r3, #32
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d036      	beq.n	8006032 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d019      	beq.n	8006000 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fcc:	4b37      	ldr	r3, [pc, #220]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a36      	ldr	r2, [pc, #216]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005fd2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005fd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fd8:	f7fc fbd2 	bl	8002780 <HAL_GetTick>
 8005fdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fe0:	f7fc fbce 	bl	8002780 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e1dc      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x3d8>
 8005ffe:	e018      	b.n	8006032 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006000:	4b2a      	ldr	r3, [pc, #168]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a29      	ldr	r2, [pc, #164]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8006006:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800600a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800600c:	f7fc fbb8 	bl	8002780 <HAL_GetTick>
 8006010:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006014:	f7fc fbb4 	bl	8002780 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e1c2      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006026:	4b21      	ldr	r3, [pc, #132]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1f0      	bne.n	8006014 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 8086 	beq.w	800614c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006040:	4b1b      	ldr	r3, [pc, #108]	@ (80060b0 <HAL_RCC_OscConfig+0x4a8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1a      	ldr	r2, [pc, #104]	@ (80060b0 <HAL_RCC_OscConfig+0x4a8>)
 8006046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800604a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800604c:	f7fc fb98 	bl	8002780 <HAL_GetTick>
 8006050:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006054:	f7fc fb94 	bl	8002780 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b64      	cmp	r3, #100	@ 0x64
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e1a2      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006066:	4b12      	ldr	r3, [pc, #72]	@ (80060b0 <HAL_RCC_OscConfig+0x4a8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0f0      	beq.n	8006054 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d106      	bne.n	8006088 <HAL_RCC_OscConfig+0x480>
 800607a:	4b0c      	ldr	r3, [pc, #48]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607e:	4a0b      	ldr	r2, [pc, #44]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8006080:	f043 0301 	orr.w	r3, r3, #1
 8006084:	6713      	str	r3, [r2, #112]	@ 0x70
 8006086:	e032      	b.n	80060ee <HAL_RCC_OscConfig+0x4e6>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d111      	bne.n	80060b4 <HAL_RCC_OscConfig+0x4ac>
 8006090:	4b06      	ldr	r3, [pc, #24]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006094:	4a05      	ldr	r2, [pc, #20]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 8006096:	f023 0301 	bic.w	r3, r3, #1
 800609a:	6713      	str	r3, [r2, #112]	@ 0x70
 800609c:	4b03      	ldr	r3, [pc, #12]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 800609e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a0:	4a02      	ldr	r2, [pc, #8]	@ (80060ac <HAL_RCC_OscConfig+0x4a4>)
 80060a2:	f023 0304 	bic.w	r3, r3, #4
 80060a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80060a8:	e021      	b.n	80060ee <HAL_RCC_OscConfig+0x4e6>
 80060aa:	bf00      	nop
 80060ac:	58024400 	.word	0x58024400
 80060b0:	58024800 	.word	0x58024800
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b05      	cmp	r3, #5
 80060ba:	d10c      	bne.n	80060d6 <HAL_RCC_OscConfig+0x4ce>
 80060bc:	4b83      	ldr	r3, [pc, #524]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80060be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c0:	4a82      	ldr	r2, [pc, #520]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80060c2:	f043 0304 	orr.w	r3, r3, #4
 80060c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80060c8:	4b80      	ldr	r3, [pc, #512]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80060ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060cc:	4a7f      	ldr	r2, [pc, #508]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d4:	e00b      	b.n	80060ee <HAL_RCC_OscConfig+0x4e6>
 80060d6:	4b7d      	ldr	r3, [pc, #500]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80060d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060da:	4a7c      	ldr	r2, [pc, #496]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060e2:	4b7a      	ldr	r3, [pc, #488]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e6:	4a79      	ldr	r2, [pc, #484]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80060e8:	f023 0304 	bic.w	r3, r3, #4
 80060ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d015      	beq.n	8006122 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f6:	f7fc fb43 	bl	8002780 <HAL_GetTick>
 80060fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060fc:	e00a      	b.n	8006114 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fe:	f7fc fb3f 	bl	8002780 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800610c:	4293      	cmp	r3, r2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e14b      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006114:	4b6d      	ldr	r3, [pc, #436]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0ee      	beq.n	80060fe <HAL_RCC_OscConfig+0x4f6>
 8006120:	e014      	b.n	800614c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006122:	f7fc fb2d 	bl	8002780 <HAL_GetTick>
 8006126:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006128:	e00a      	b.n	8006140 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612a:	f7fc fb29 	bl	8002780 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006138:	4293      	cmp	r3, r2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e135      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006140:	4b62      	ldr	r3, [pc, #392]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1ee      	bne.n	800612a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 812a 	beq.w	80063aa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006156:	4b5d      	ldr	r3, [pc, #372]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800615e:	2b18      	cmp	r3, #24
 8006160:	f000 80ba 	beq.w	80062d8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006168:	2b02      	cmp	r3, #2
 800616a:	f040 8095 	bne.w	8006298 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800616e:	4b57      	ldr	r3, [pc, #348]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a56      	ldr	r2, [pc, #344]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006174:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617a:	f7fc fb01 	bl	8002780 <HAL_GetTick>
 800617e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006182:	f7fc fafd 	bl	8002780 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e10b      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006194:	4b4d      	ldr	r3, [pc, #308]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1f0      	bne.n	8006182 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061a0:	4b4a      	ldr	r3, [pc, #296]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80061a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061a4:	4b4a      	ldr	r3, [pc, #296]	@ (80062d0 <HAL_RCC_OscConfig+0x6c8>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061b0:	0112      	lsls	r2, r2, #4
 80061b2:	430a      	orrs	r2, r1
 80061b4:	4945      	ldr	r1, [pc, #276]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	628b      	str	r3, [r1, #40]	@ 0x28
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061be:	3b01      	subs	r3, #1
 80061c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c8:	3b01      	subs	r3, #1
 80061ca:	025b      	lsls	r3, r3, #9
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d4:	3b01      	subs	r3, #1
 80061d6:	041b      	lsls	r3, r3, #16
 80061d8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e2:	3b01      	subs	r3, #1
 80061e4:	061b      	lsls	r3, r3, #24
 80061e6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061ea:	4938      	ldr	r1, [pc, #224]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80061f0:	4b36      	ldr	r3, [pc, #216]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80061f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f4:	4a35      	ldr	r2, [pc, #212]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80061f6:	f023 0301 	bic.w	r3, r3, #1
 80061fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061fc:	4b33      	ldr	r3, [pc, #204]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80061fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006200:	4b34      	ldr	r3, [pc, #208]	@ (80062d4 <HAL_RCC_OscConfig+0x6cc>)
 8006202:	4013      	ands	r3, r2
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006208:	00d2      	lsls	r2, r2, #3
 800620a:	4930      	ldr	r1, [pc, #192]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 800620c:	4313      	orrs	r3, r2
 800620e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006210:	4b2e      	ldr	r3, [pc, #184]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	f023 020c 	bic.w	r2, r3, #12
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621c:	492b      	ldr	r1, [pc, #172]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 800621e:	4313      	orrs	r3, r2
 8006220:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006222:	4b2a      	ldr	r3, [pc, #168]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006226:	f023 0202 	bic.w	r2, r3, #2
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622e:	4927      	ldr	r1, [pc, #156]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006230:	4313      	orrs	r3, r2
 8006232:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006234:	4b25      	ldr	r3, [pc, #148]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006238:	4a24      	ldr	r2, [pc, #144]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 800623a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800623e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006240:	4b22      	ldr	r3, [pc, #136]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4a21      	ldr	r2, [pc, #132]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800624a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800624c:	4b1f      	ldr	r3, [pc, #124]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	4a1e      	ldr	r2, [pc, #120]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006252:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006258:	4b1c      	ldr	r3, [pc, #112]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 800625a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625c:	4a1b      	ldr	r2, [pc, #108]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 800625e:	f043 0301 	orr.w	r3, r3, #1
 8006262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006264:	4b19      	ldr	r3, [pc, #100]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a18      	ldr	r2, [pc, #96]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 800626a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800626e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006270:	f7fc fa86 	bl	8002780 <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006278:	f7fc fa82 	bl	8002780 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e090      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800628a:	4b10      	ldr	r3, [pc, #64]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCC_OscConfig+0x670>
 8006296:	e088      	b.n	80063aa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006298:	4b0c      	ldr	r3, [pc, #48]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a0b      	ldr	r2, [pc, #44]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 800629e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fc fa6c 	bl	8002780 <HAL_GetTick>
 80062a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ac:	f7fc fa68 	bl	8002780 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e076      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062be:	4b03      	ldr	r3, [pc, #12]	@ (80062cc <HAL_RCC_OscConfig+0x6c4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0x6a4>
 80062ca:	e06e      	b.n	80063aa <HAL_RCC_OscConfig+0x7a2>
 80062cc:	58024400 	.word	0x58024400
 80062d0:	fffffc0c 	.word	0xfffffc0c
 80062d4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80062d8:	4b36      	ldr	r3, [pc, #216]	@ (80063b4 <HAL_RCC_OscConfig+0x7ac>)
 80062da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062de:	4b35      	ldr	r3, [pc, #212]	@ (80063b4 <HAL_RCC_OscConfig+0x7ac>)
 80062e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d031      	beq.n	8006350 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f003 0203 	and.w	r2, r3, #3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d12a      	bne.n	8006350 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	091b      	lsrs	r3, r3, #4
 80062fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006306:	429a      	cmp	r2, r3
 8006308:	d122      	bne.n	8006350 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006314:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006316:	429a      	cmp	r2, r3
 8006318:	d11a      	bne.n	8006350 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	0a5b      	lsrs	r3, r3, #9
 800631e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006326:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006328:	429a      	cmp	r2, r3
 800632a:	d111      	bne.n	8006350 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	0c1b      	lsrs	r3, r3, #16
 8006330:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006338:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800633a:	429a      	cmp	r2, r3
 800633c:	d108      	bne.n	8006350 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	0e1b      	lsrs	r3, r3, #24
 8006342:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800634a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800634c:	429a      	cmp	r2, r3
 800634e:	d001      	beq.n	8006354 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e02b      	b.n	80063ac <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006354:	4b17      	ldr	r3, [pc, #92]	@ (80063b4 <HAL_RCC_OscConfig+0x7ac>)
 8006356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006358:	08db      	lsrs	r3, r3, #3
 800635a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800635e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	429a      	cmp	r2, r3
 8006368:	d01f      	beq.n	80063aa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800636a:	4b12      	ldr	r3, [pc, #72]	@ (80063b4 <HAL_RCC_OscConfig+0x7ac>)
 800636c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636e:	4a11      	ldr	r2, [pc, #68]	@ (80063b4 <HAL_RCC_OscConfig+0x7ac>)
 8006370:	f023 0301 	bic.w	r3, r3, #1
 8006374:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006376:	f7fc fa03 	bl	8002780 <HAL_GetTick>
 800637a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800637c:	bf00      	nop
 800637e:	f7fc f9ff 	bl	8002780 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	4293      	cmp	r3, r2
 8006388:	d0f9      	beq.n	800637e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800638a:	4b0a      	ldr	r3, [pc, #40]	@ (80063b4 <HAL_RCC_OscConfig+0x7ac>)
 800638c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800638e:	4b0a      	ldr	r3, [pc, #40]	@ (80063b8 <HAL_RCC_OscConfig+0x7b0>)
 8006390:	4013      	ands	r3, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006396:	00d2      	lsls	r2, r2, #3
 8006398:	4906      	ldr	r1, [pc, #24]	@ (80063b4 <HAL_RCC_OscConfig+0x7ac>)
 800639a:	4313      	orrs	r3, r2
 800639c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800639e:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <HAL_RCC_OscConfig+0x7ac>)
 80063a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a2:	4a04      	ldr	r2, [pc, #16]	@ (80063b4 <HAL_RCC_OscConfig+0x7ac>)
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3730      	adds	r7, #48	@ 0x30
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	58024400 	.word	0x58024400
 80063b8:	ffff0007 	.word	0xffff0007

080063bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e19c      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063d0:	4b8a      	ldr	r3, [pc, #552]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d910      	bls.n	8006400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063de:	4b87      	ldr	r3, [pc, #540]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f023 020f 	bic.w	r2, r3, #15
 80063e6:	4985      	ldr	r1, [pc, #532]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ee:	4b83      	ldr	r3, [pc, #524]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d001      	beq.n	8006400 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e184      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d010      	beq.n	800642e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	4b7b      	ldr	r3, [pc, #492]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006418:	429a      	cmp	r2, r3
 800641a:	d908      	bls.n	800642e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800641c:	4b78      	ldr	r3, [pc, #480]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	4975      	ldr	r1, [pc, #468]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800642a:	4313      	orrs	r3, r2
 800642c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d010      	beq.n	800645c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695a      	ldr	r2, [r3, #20]
 800643e:	4b70      	ldr	r3, [pc, #448]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006446:	429a      	cmp	r2, r3
 8006448:	d908      	bls.n	800645c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800644a:	4b6d      	ldr	r3, [pc, #436]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	496a      	ldr	r1, [pc, #424]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 8006458:	4313      	orrs	r3, r2
 800645a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d010      	beq.n	800648a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699a      	ldr	r2, [r3, #24]
 800646c:	4b64      	ldr	r3, [pc, #400]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006474:	429a      	cmp	r2, r3
 8006476:	d908      	bls.n	800648a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006478:	4b61      	ldr	r3, [pc, #388]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	495e      	ldr	r1, [pc, #376]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 8006486:	4313      	orrs	r3, r2
 8006488:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b00      	cmp	r3, #0
 8006494:	d010      	beq.n	80064b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69da      	ldr	r2, [r3, #28]
 800649a:	4b59      	ldr	r3, [pc, #356]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d908      	bls.n	80064b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064a6:	4b56      	ldr	r3, [pc, #344]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	4953      	ldr	r1, [pc, #332]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d010      	beq.n	80064e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d908      	bls.n	80064e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f023 020f 	bic.w	r2, r3, #15
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	4947      	ldr	r1, [pc, #284]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d055      	beq.n	800659e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80064f2:	4b43      	ldr	r3, [pc, #268]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	4940      	ldr	r1, [pc, #256]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 8006500:	4313      	orrs	r3, r2
 8006502:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d107      	bne.n	800651c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800650c:	4b3c      	ldr	r3, [pc, #240]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d121      	bne.n	800655c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e0f6      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b03      	cmp	r3, #3
 8006522:	d107      	bne.n	8006534 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006524:	4b36      	ldr	r3, [pc, #216]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d115      	bne.n	800655c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0ea      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d107      	bne.n	800654c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800653c:	4b30      	ldr	r3, [pc, #192]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006544:	2b00      	cmp	r3, #0
 8006546:	d109      	bne.n	800655c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0de      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800654c:	4b2c      	ldr	r3, [pc, #176]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e0d6      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800655c:	4b28      	ldr	r3, [pc, #160]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f023 0207 	bic.w	r2, r3, #7
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4925      	ldr	r1, [pc, #148]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800656a:	4313      	orrs	r3, r2
 800656c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656e:	f7fc f907 	bl	8002780 <HAL_GetTick>
 8006572:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006574:	e00a      	b.n	800658c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006576:	f7fc f903 	bl	8002780 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006584:	4293      	cmp	r3, r2
 8006586:	d901      	bls.n	800658c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e0be      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658c:	4b1c      	ldr	r3, [pc, #112]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	429a      	cmp	r2, r3
 800659c:	d1eb      	bne.n	8006576 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d010      	beq.n	80065cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	4b14      	ldr	r3, [pc, #80]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d208      	bcs.n	80065cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065ba:	4b11      	ldr	r3, [pc, #68]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f023 020f 	bic.w	r2, r3, #15
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	490e      	ldr	r1, [pc, #56]	@ (8006600 <HAL_RCC_ClockConfig+0x244>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065cc:	4b0b      	ldr	r3, [pc, #44]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 030f 	and.w	r3, r3, #15
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d214      	bcs.n	8006604 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065da:	4b08      	ldr	r3, [pc, #32]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f023 020f 	bic.w	r2, r3, #15
 80065e2:	4906      	ldr	r1, [pc, #24]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ea:	4b04      	ldr	r3, [pc, #16]	@ (80065fc <HAL_RCC_ClockConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d005      	beq.n	8006604 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e086      	b.n	800670a <HAL_RCC_ClockConfig+0x34e>
 80065fc:	52002000 	.word	0x52002000
 8006600:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d010      	beq.n	8006632 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	4b3f      	ldr	r3, [pc, #252]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800661c:	429a      	cmp	r2, r3
 800661e:	d208      	bcs.n	8006632 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006620:	4b3c      	ldr	r3, [pc, #240]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	4939      	ldr	r1, [pc, #228]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 800662e:	4313      	orrs	r3, r2
 8006630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d010      	beq.n	8006660 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695a      	ldr	r2, [r3, #20]
 8006642:	4b34      	ldr	r3, [pc, #208]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800664a:	429a      	cmp	r2, r3
 800664c:	d208      	bcs.n	8006660 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800664e:	4b31      	ldr	r3, [pc, #196]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	492e      	ldr	r1, [pc, #184]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 800665c:	4313      	orrs	r3, r2
 800665e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b00      	cmp	r3, #0
 800666a:	d010      	beq.n	800668e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699a      	ldr	r2, [r3, #24]
 8006670:	4b28      	ldr	r3, [pc, #160]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006678:	429a      	cmp	r2, r3
 800667a:	d208      	bcs.n	800668e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800667c:	4b25      	ldr	r3, [pc, #148]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	4922      	ldr	r1, [pc, #136]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 800668a:	4313      	orrs	r3, r2
 800668c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d010      	beq.n	80066bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69da      	ldr	r2, [r3, #28]
 800669e:	4b1d      	ldr	r3, [pc, #116]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d208      	bcs.n	80066bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	4917      	ldr	r1, [pc, #92]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80066bc:	f000 f834 	bl	8006728 <HAL_RCC_GetSysClockFreq>
 80066c0:	4602      	mov	r2, r0
 80066c2:	4b14      	ldr	r3, [pc, #80]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	f003 030f 	and.w	r3, r3, #15
 80066cc:	4912      	ldr	r1, [pc, #72]	@ (8006718 <HAL_RCC_ClockConfig+0x35c>)
 80066ce:	5ccb      	ldrb	r3, [r1, r3]
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	fa22 f303 	lsr.w	r3, r2, r3
 80066d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066da:	4b0e      	ldr	r3, [pc, #56]	@ (8006714 <HAL_RCC_ClockConfig+0x358>)
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006718 <HAL_RCC_ClockConfig+0x35c>)
 80066e4:	5cd3      	ldrb	r3, [r2, r3]
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	fa22 f303 	lsr.w	r3, r2, r3
 80066f0:	4a0a      	ldr	r2, [pc, #40]	@ (800671c <HAL_RCC_ClockConfig+0x360>)
 80066f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006720 <HAL_RCC_ClockConfig+0x364>)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80066fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006724 <HAL_RCC_ClockConfig+0x368>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fb fff4 	bl	80026ec <HAL_InitTick>
 8006704:	4603      	mov	r3, r0
 8006706:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	58024400 	.word	0x58024400
 8006718:	0800f104 	.word	0x0800f104
 800671c:	24000010 	.word	0x24000010
 8006720:	2400000c 	.word	0x2400000c
 8006724:	24000014 	.word	0x24000014

08006728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006728:	b480      	push	{r7}
 800672a:	b089      	sub	sp, #36	@ 0x24
 800672c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800672e:	4bb3      	ldr	r3, [pc, #716]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006736:	2b18      	cmp	r3, #24
 8006738:	f200 8155 	bhi.w	80069e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800673c:	a201      	add	r2, pc, #4	@ (adr r2, 8006744 <HAL_RCC_GetSysClockFreq+0x1c>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	080067a9 	.word	0x080067a9
 8006748:	080069e7 	.word	0x080069e7
 800674c:	080069e7 	.word	0x080069e7
 8006750:	080069e7 	.word	0x080069e7
 8006754:	080069e7 	.word	0x080069e7
 8006758:	080069e7 	.word	0x080069e7
 800675c:	080069e7 	.word	0x080069e7
 8006760:	080069e7 	.word	0x080069e7
 8006764:	080067cf 	.word	0x080067cf
 8006768:	080069e7 	.word	0x080069e7
 800676c:	080069e7 	.word	0x080069e7
 8006770:	080069e7 	.word	0x080069e7
 8006774:	080069e7 	.word	0x080069e7
 8006778:	080069e7 	.word	0x080069e7
 800677c:	080069e7 	.word	0x080069e7
 8006780:	080069e7 	.word	0x080069e7
 8006784:	080067d5 	.word	0x080067d5
 8006788:	080069e7 	.word	0x080069e7
 800678c:	080069e7 	.word	0x080069e7
 8006790:	080069e7 	.word	0x080069e7
 8006794:	080069e7 	.word	0x080069e7
 8006798:	080069e7 	.word	0x080069e7
 800679c:	080069e7 	.word	0x080069e7
 80067a0:	080069e7 	.word	0x080069e7
 80067a4:	080067db 	.word	0x080067db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a8:	4b94      	ldr	r3, [pc, #592]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0320 	and.w	r3, r3, #32
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d009      	beq.n	80067c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067b4:	4b91      	ldr	r3, [pc, #580]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	08db      	lsrs	r3, r3, #3
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	4a90      	ldr	r2, [pc, #576]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067c0:	fa22 f303 	lsr.w	r3, r2, r3
 80067c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80067c6:	e111      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80067c8:	4b8d      	ldr	r3, [pc, #564]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067ca:	61bb      	str	r3, [r7, #24]
      break;
 80067cc:	e10e      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80067ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067d0:	61bb      	str	r3, [r7, #24]
      break;
 80067d2:	e10b      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80067d4:	4b8c      	ldr	r3, [pc, #560]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80067d6:	61bb      	str	r3, [r7, #24]
      break;
 80067d8:	e108      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067da:	4b88      	ldr	r3, [pc, #544]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80067e4:	4b85      	ldr	r3, [pc, #532]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e8:	091b      	lsrs	r3, r3, #4
 80067ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80067f0:	4b82      	ldr	r3, [pc, #520]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80067fa:	4b80      	ldr	r3, [pc, #512]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067fe:	08db      	lsrs	r3, r3, #3
 8006800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	fb02 f303 	mul.w	r3, r2, r3
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006812:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 80e1 	beq.w	80069e0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b02      	cmp	r3, #2
 8006822:	f000 8083 	beq.w	800692c <HAL_RCC_GetSysClockFreq+0x204>
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b02      	cmp	r3, #2
 800682a:	f200 80a1 	bhi.w	8006970 <HAL_RCC_GetSysClockFreq+0x248>
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <HAL_RCC_GetSysClockFreq+0x114>
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d056      	beq.n	80068e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800683a:	e099      	b.n	8006970 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800683c:	4b6f      	ldr	r3, [pc, #444]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b00      	cmp	r3, #0
 8006846:	d02d      	beq.n	80068a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006848:	4b6c      	ldr	r3, [pc, #432]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	08db      	lsrs	r3, r3, #3
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	4a6b      	ldr	r2, [pc, #428]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006854:	fa22 f303 	lsr.w	r3, r2, r3
 8006858:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	ee07 3a90 	vmov	s15, r3
 8006860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006872:	4b62      	ldr	r3, [pc, #392]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687a:	ee07 3a90 	vmov	s15, r3
 800687e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006882:	ed97 6a02 	vldr	s12, [r7, #8]
 8006886:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800688a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800688e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800689e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80068a2:	e087      	b.n	80069b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	ee07 3a90 	vmov	s15, r3
 80068aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006a10 <HAL_RCC_GetSysClockFreq+0x2e8>
 80068b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068b6:	4b51      	ldr	r3, [pc, #324]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 80068ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068e6:	e065      	b.n	80069b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	ee07 3a90 	vmov	s15, r3
 80068ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006a14 <HAL_RCC_GetSysClockFreq+0x2ec>
 80068f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068fa:	4b40      	ldr	r3, [pc, #256]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690a:	ed97 6a02 	vldr	s12, [r7, #8]
 800690e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800691a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800691e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006926:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800692a:	e043      	b.n	80069b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006a18 <HAL_RCC_GetSysClockFreq+0x2f0>
 800693a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800693e:	4b2f      	ldr	r3, [pc, #188]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800694e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006952:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800695a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800695e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800696a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800696e:	e021      	b.n	80069b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006a14 <HAL_RCC_GetSysClockFreq+0x2ec>
 800697e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006982:	4b1e      	ldr	r3, [pc, #120]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006992:	ed97 6a02 	vldr	s12, [r7, #8]
 8006996:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006a0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800699a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800699e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80069b4:	4b11      	ldr	r3, [pc, #68]	@ (80069fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b8:	0a5b      	lsrs	r3, r3, #9
 80069ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069be:	3301      	adds	r3, #1
 80069c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	ee07 3a90 	vmov	s15, r3
 80069c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80069d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069d8:	ee17 3a90 	vmov	r3, s15
 80069dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80069de:	e005      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61bb      	str	r3, [r7, #24]
      break;
 80069e4:	e002      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80069e6:	4b07      	ldr	r3, [pc, #28]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069e8:	61bb      	str	r3, [r7, #24]
      break;
 80069ea:	bf00      	nop
  }

  return sysclockfreq;
 80069ec:	69bb      	ldr	r3, [r7, #24]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3724      	adds	r7, #36	@ 0x24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	58024400 	.word	0x58024400
 8006a00:	03d09000 	.word	0x03d09000
 8006a04:	003d0900 	.word	0x003d0900
 8006a08:	016e3600 	.word	0x016e3600
 8006a0c:	46000000 	.word	0x46000000
 8006a10:	4c742400 	.word	0x4c742400
 8006a14:	4a742400 	.word	0x4a742400
 8006a18:	4bb71b00 	.word	0x4bb71b00

08006a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a22:	f7ff fe81 	bl	8006728 <HAL_RCC_GetSysClockFreq>
 8006a26:	4602      	mov	r2, r0
 8006a28:	4b10      	ldr	r3, [pc, #64]	@ (8006a6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	0a1b      	lsrs	r3, r3, #8
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	490f      	ldr	r1, [pc, #60]	@ (8006a70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a34:	5ccb      	ldrb	r3, [r1, r3]
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a40:	4b0a      	ldr	r3, [pc, #40]	@ (8006a6c <HAL_RCC_GetHCLKFreq+0x50>)
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f003 030f 	and.w	r3, r3, #15
 8006a48:	4a09      	ldr	r2, [pc, #36]	@ (8006a70 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a4a:	5cd3      	ldrb	r3, [r2, r3]
 8006a4c:	f003 031f 	and.w	r3, r3, #31
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	fa22 f303 	lsr.w	r3, r2, r3
 8006a56:	4a07      	ldr	r2, [pc, #28]	@ (8006a74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a5a:	4a07      	ldr	r2, [pc, #28]	@ (8006a78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a60:	4b04      	ldr	r3, [pc, #16]	@ (8006a74 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a62:	681b      	ldr	r3, [r3, #0]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	58024400 	.word	0x58024400
 8006a70:	0800f104 	.word	0x0800f104
 8006a74:	24000010 	.word	0x24000010
 8006a78:	2400000c 	.word	0x2400000c

08006a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006a80:	f7ff ffcc 	bl	8006a1c <HAL_RCC_GetHCLKFreq>
 8006a84:	4602      	mov	r2, r0
 8006a86:	4b06      	ldr	r3, [pc, #24]	@ (8006aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	091b      	lsrs	r3, r3, #4
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	4904      	ldr	r1, [pc, #16]	@ (8006aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a92:	5ccb      	ldrb	r3, [r1, r3]
 8006a94:	f003 031f 	and.w	r3, r3, #31
 8006a98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	0800f104 	.word	0x0800f104

08006aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006aac:	f7ff ffb6 	bl	8006a1c <HAL_RCC_GetHCLKFreq>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	4b06      	ldr	r3, [pc, #24]	@ (8006acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	0a1b      	lsrs	r3, r3, #8
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	4904      	ldr	r1, [pc, #16]	@ (8006ad0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006abe:	5ccb      	ldrb	r3, [r1, r3]
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	58024400 	.word	0x58024400
 8006ad0:	0800f104 	.word	0x0800f104

08006ad4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ad8:	b0c6      	sub	sp, #280	@ 0x118
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006af8:	2500      	movs	r5, #0
 8006afa:	ea54 0305 	orrs.w	r3, r4, r5
 8006afe:	d049      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b0a:	d02f      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006b0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b10:	d828      	bhi.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b16:	d01a      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006b18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b1c:	d822      	bhi.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b26:	d007      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b28:	e01c      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b2a:	4bab      	ldr	r3, [pc, #684]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2e:	4aaa      	ldr	r2, [pc, #680]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b36:	e01a      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	2102      	movs	r1, #2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f002 fa49 	bl	8008fd8 <RCCEx_PLL2_Config>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b4c:	e00f      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b52:	3328      	adds	r3, #40	@ 0x28
 8006b54:	2102      	movs	r1, #2
 8006b56:	4618      	mov	r0, r3
 8006b58:	f002 faf0 	bl	800913c <RCCEx_PLL3_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b62:	e004      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b6a:	e000      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10a      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006b76:	4b98      	ldr	r3, [pc, #608]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b7a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b84:	4a94      	ldr	r2, [pc, #592]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b86:	430b      	orrs	r3, r1
 8006b88:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b8a:	e003      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006ba0:	f04f 0900 	mov.w	r9, #0
 8006ba4:	ea58 0309 	orrs.w	r3, r8, r9
 8006ba8:	d047      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d82a      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bba:	bf00      	nop
 8006bbc:	08006bd1 	.word	0x08006bd1
 8006bc0:	08006bdf 	.word	0x08006bdf
 8006bc4:	08006bf5 	.word	0x08006bf5
 8006bc8:	08006c13 	.word	0x08006c13
 8006bcc:	08006c13 	.word	0x08006c13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd0:	4b81      	ldr	r3, [pc, #516]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd4:	4a80      	ldr	r2, [pc, #512]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bdc:	e01a      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be2:	3308      	adds	r3, #8
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f002 f9f6 	bl	8008fd8 <RCCEx_PLL2_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bf2:	e00f      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf8:	3328      	adds	r3, #40	@ 0x28
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f002 fa9d 	bl	800913c <RCCEx_PLL3_Config>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c08:	e004      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c10:	e000      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c1c:	4b6e      	ldr	r3, [pc, #440]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c20:	f023 0107 	bic.w	r1, r3, #7
 8006c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c2a:	4a6b      	ldr	r2, [pc, #428]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c30:	e003      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006c46:	f04f 0b00 	mov.w	fp, #0
 8006c4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006c4e:	d05b      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c58:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006c5c:	d03b      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006c5e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006c62:	d834      	bhi.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c68:	d037      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006c6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c6e:	d82e      	bhi.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c74:	d033      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006c76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c7a:	d828      	bhi.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c80:	d01a      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006c82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c86:	d822      	bhi.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006c8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c90:	d007      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006c92:	e01c      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c94:	4b50      	ldr	r3, [pc, #320]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c98:	4a4f      	ldr	r2, [pc, #316]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ca0:	e01e      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	2100      	movs	r1, #0
 8006caa:	4618      	mov	r0, r3
 8006cac:	f002 f994 	bl	8008fd8 <RCCEx_PLL2_Config>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006cb6:	e013      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbc:	3328      	adds	r3, #40	@ 0x28
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f002 fa3b 	bl	800913c <RCCEx_PLL3_Config>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ccc:	e008      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cd4:	e004      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006cd6:	bf00      	nop
 8006cd8:	e002      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006cda:	bf00      	nop
 8006cdc:	e000      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10b      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cec:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006cf8:	4a37      	ldr	r2, [pc, #220]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cfa:	430b      	orrs	r3, r1
 8006cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cfe:	e003      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006d14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006d1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006d22:	460b      	mov	r3, r1
 8006d24:	4313      	orrs	r3, r2
 8006d26:	d05d      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d30:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006d34:	d03b      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006d36:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006d3a:	d834      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d40:	d037      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006d42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d46:	d82e      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d4c:	d033      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006d4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006d52:	d828      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d58:	d01a      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006d5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d5e:	d822      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006d64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d68:	d007      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006d6a:	e01c      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d70:	4a19      	ldr	r2, [pc, #100]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d78:	e01e      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7e:	3308      	adds	r3, #8
 8006d80:	2100      	movs	r1, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f002 f928 	bl	8008fd8 <RCCEx_PLL2_Config>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d8e:	e013      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d94:	3328      	adds	r3, #40	@ 0x28
 8006d96:	2100      	movs	r1, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f002 f9cf 	bl	800913c <RCCEx_PLL3_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006da4:	e008      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dac:	e004      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006dae:	bf00      	nop
 8006db0:	e002      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006db2:	bf00      	nop
 8006db4:	e000      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10d      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006dc0:	4b05      	ldr	r3, [pc, #20]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dcc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006dd0:	4a01      	ldr	r2, [pc, #4]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006dd2:	430b      	orrs	r3, r1
 8006dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dd6:	e005      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ddc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006de0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006df0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006df4:	2300      	movs	r3, #0
 8006df6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006dfa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4313      	orrs	r3, r2
 8006e02:	d03a      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e0a:	2b30      	cmp	r3, #48	@ 0x30
 8006e0c:	d01f      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006e0e:	2b30      	cmp	r3, #48	@ 0x30
 8006e10:	d819      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d00c      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d815      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d019      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006e1e:	2b10      	cmp	r3, #16
 8006e20:	d111      	bne.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e22:	4baa      	ldr	r3, [pc, #680]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e26:	4aa9      	ldr	r2, [pc, #676]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006e2e:	e011      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e34:	3308      	adds	r3, #8
 8006e36:	2102      	movs	r1, #2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f002 f8cd 	bl	8008fd8 <RCCEx_PLL2_Config>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006e44:	e006      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e4c:	e002      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006e4e:	bf00      	nop
 8006e50:	e000      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10a      	bne.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006e5c:	4b9b      	ldr	r3, [pc, #620]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e60:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e6a:	4a98      	ldr	r2, [pc, #608]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e70:	e003      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006e94:	460b      	mov	r3, r1
 8006e96:	4313      	orrs	r3, r2
 8006e98:	d051      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ea4:	d035      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006ea6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eaa:	d82e      	bhi.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006eac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006eb0:	d031      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006eb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006eb6:	d828      	bhi.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ebc:	d01a      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ec2:	d822      	bhi.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ecc:	d007      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006ece:	e01c      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed0:	4b7e      	ldr	r3, [pc, #504]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed4:	4a7d      	ldr	r2, [pc, #500]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006edc:	e01c      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f002 f876 	bl	8008fd8 <RCCEx_PLL2_Config>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ef2:	e011      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef8:	3328      	adds	r3, #40	@ 0x28
 8006efa:	2100      	movs	r1, #0
 8006efc:	4618      	mov	r0, r3
 8006efe:	f002 f91d 	bl	800913c <RCCEx_PLL3_Config>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f08:	e006      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f10:	e002      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006f12:	bf00      	nop
 8006f14:	e000      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f20:	4b6a      	ldr	r3, [pc, #424]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f2e:	4a67      	ldr	r2, [pc, #412]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f30:	430b      	orrs	r3, r1
 8006f32:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f34:	e003      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006f4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f54:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	d053      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f68:	d033      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006f6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f6e:	d82c      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f74:	d02f      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006f76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f7a:	d826      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f80:	d02b      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006f82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f86:	d820      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f8c:	d012      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006f8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f92:	d81a      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d022      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f9c:	d115      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f002 f816 	bl	8008fd8 <RCCEx_PLL2_Config>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fb2:	e015      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb8:	3328      	adds	r3, #40	@ 0x28
 8006fba:	2101      	movs	r1, #1
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f002 f8bd 	bl	800913c <RCCEx_PLL3_Config>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fc8:	e00a      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006fd0:	e006      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006fd2:	bf00      	nop
 8006fd4:	e004      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006fd6:	bf00      	nop
 8006fd8:	e002      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006fda:	bf00      	nop
 8006fdc:	e000      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10a      	bne.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006fe8:	4b38      	ldr	r3, [pc, #224]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ff6:	4a35      	ldr	r2, [pc, #212]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ff8:	430b      	orrs	r3, r1
 8006ffa:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ffc:	e003      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007002:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007012:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007016:	2300      	movs	r3, #0
 8007018:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800701c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007020:	460b      	mov	r3, r1
 8007022:	4313      	orrs	r3, r2
 8007024:	d058      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800702e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007032:	d033      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007038:	d82c      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800703a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703e:	d02f      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007044:	d826      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007046:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800704a:	d02b      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800704c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007050:	d820      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007056:	d012      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800705c:	d81a      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d022      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007066:	d115      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706c:	3308      	adds	r3, #8
 800706e:	2101      	movs	r1, #1
 8007070:	4618      	mov	r0, r3
 8007072:	f001 ffb1 	bl	8008fd8 <RCCEx_PLL2_Config>
 8007076:	4603      	mov	r3, r0
 8007078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800707c:	e015      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800707e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007082:	3328      	adds	r3, #40	@ 0x28
 8007084:	2101      	movs	r1, #1
 8007086:	4618      	mov	r0, r3
 8007088:	f002 f858 	bl	800913c <RCCEx_PLL3_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007092:	e00a      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800709a:	e006      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800709c:	bf00      	nop
 800709e:	e004      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070a0:	bf00      	nop
 80070a2:	e002      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070a4:	bf00      	nop
 80070a6:	e000      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10e      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070b2:	4b06      	ldr	r3, [pc, #24]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80070ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070c2:	4a02      	ldr	r2, [pc, #8]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070c4:	430b      	orrs	r3, r1
 80070c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80070c8:	e006      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80070ca:	bf00      	nop
 80070cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80070e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070e8:	2300      	movs	r3, #0
 80070ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80070ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4313      	orrs	r3, r2
 80070f6:	d037      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80070f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007102:	d00e      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007104:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007108:	d816      	bhi.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d018      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800710e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007112:	d111      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007114:	4bc4      	ldr	r3, [pc, #784]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007118:	4ac3      	ldr	r2, [pc, #780]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800711a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800711e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007120:	e00f      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007126:	3308      	adds	r3, #8
 8007128:	2101      	movs	r1, #1
 800712a:	4618      	mov	r0, r3
 800712c:	f001 ff54 	bl	8008fd8 <RCCEx_PLL2_Config>
 8007130:	4603      	mov	r3, r0
 8007132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007136:	e004      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800713e:	e000      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007142:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10a      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800714a:	4bb7      	ldr	r3, [pc, #732]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800714c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800714e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007158:	4ab3      	ldr	r2, [pc, #716]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800715a:	430b      	orrs	r3, r1
 800715c:	6513      	str	r3, [r2, #80]	@ 0x50
 800715e:	e003      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007174:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007178:	2300      	movs	r3, #0
 800717a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800717e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007182:	460b      	mov	r3, r1
 8007184:	4313      	orrs	r3, r2
 8007186:	d039      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800718e:	2b03      	cmp	r3, #3
 8007190:	d81c      	bhi.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007192:	a201      	add	r2, pc, #4	@ (adr r2, 8007198 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071d5 	.word	0x080071d5
 800719c:	080071a9 	.word	0x080071a9
 80071a0:	080071b7 	.word	0x080071b7
 80071a4:	080071d5 	.word	0x080071d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a8:	4b9f      	ldr	r3, [pc, #636]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ac:	4a9e      	ldr	r2, [pc, #632]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071b4:	e00f      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ba:	3308      	adds	r3, #8
 80071bc:	2102      	movs	r1, #2
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 ff0a 	bl	8008fd8 <RCCEx_PLL2_Config>
 80071c4:	4603      	mov	r3, r0
 80071c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071ca:	e004      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071d2:	e000      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80071d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071de:	4b92      	ldr	r3, [pc, #584]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071e2:	f023 0103 	bic.w	r1, r3, #3
 80071e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071ec:	4a8e      	ldr	r2, [pc, #568]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071ee:	430b      	orrs	r3, r1
 80071f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071f2:	e003      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007208:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800720c:	2300      	movs	r3, #0
 800720e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007212:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007216:	460b      	mov	r3, r1
 8007218:	4313      	orrs	r3, r2
 800721a:	f000 8099 	beq.w	8007350 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800721e:	4b83      	ldr	r3, [pc, #524]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a82      	ldr	r2, [pc, #520]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007228:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800722a:	f7fb faa9 	bl	8002780 <HAL_GetTick>
 800722e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007232:	e00b      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007234:	f7fb faa4 	bl	8002780 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b64      	cmp	r3, #100	@ 0x64
 8007242:	d903      	bls.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800724a:	e005      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800724c:	4b77      	ldr	r3, [pc, #476]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0ed      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800725c:	2b00      	cmp	r3, #0
 800725e:	d173      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007260:	4b71      	ldr	r3, [pc, #452]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007262:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007268:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800726c:	4053      	eors	r3, r2
 800726e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007272:	2b00      	cmp	r3, #0
 8007274:	d015      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007276:	4b6c      	ldr	r3, [pc, #432]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800727a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800727e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007282:	4b69      	ldr	r3, [pc, #420]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007286:	4a68      	ldr	r2, [pc, #416]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800728c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800728e:	4b66      	ldr	r3, [pc, #408]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007292:	4a65      	ldr	r2, [pc, #404]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007298:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800729a:	4a63      	ldr	r2, [pc, #396]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800729c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072a0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ae:	d118      	bne.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b0:	f7fb fa66 	bl	8002780 <HAL_GetTick>
 80072b4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072b8:	e00d      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ba:	f7fb fa61 	bl	8002780 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80072c4:	1ad2      	subs	r2, r2, r3
 80072c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d903      	bls.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80072d4:	e005      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072d6:	4b54      	ldr	r3, [pc, #336]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0eb      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80072e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d129      	bne.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072fa:	d10e      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80072fc:	4b4a      	ldr	r3, [pc, #296]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007308:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800730c:	091a      	lsrs	r2, r3, #4
 800730e:	4b48      	ldr	r3, [pc, #288]	@ (8007430 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007310:	4013      	ands	r3, r2
 8007312:	4a45      	ldr	r2, [pc, #276]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007314:	430b      	orrs	r3, r1
 8007316:	6113      	str	r3, [r2, #16]
 8007318:	e005      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800731a:	4b43      	ldr	r3, [pc, #268]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	4a42      	ldr	r2, [pc, #264]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007320:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007324:	6113      	str	r3, [r2, #16]
 8007326:	4b40      	ldr	r3, [pc, #256]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007328:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800732a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800732e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007336:	4a3c      	ldr	r2, [pc, #240]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007338:	430b      	orrs	r3, r1
 800733a:	6713      	str	r3, [r2, #112]	@ 0x70
 800733c:	e008      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800733e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007342:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007346:	e003      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800734c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f002 0301 	and.w	r3, r2, #1
 800735c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007360:	2300      	movs	r3, #0
 8007362:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007366:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800736a:	460b      	mov	r3, r1
 800736c:	4313      	orrs	r3, r2
 800736e:	f000 808f 	beq.w	8007490 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007376:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007378:	2b28      	cmp	r3, #40	@ 0x28
 800737a:	d871      	bhi.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800737c:	a201      	add	r2, pc, #4	@ (adr r2, 8007384 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	08007469 	.word	0x08007469
 8007388:	08007461 	.word	0x08007461
 800738c:	08007461 	.word	0x08007461
 8007390:	08007461 	.word	0x08007461
 8007394:	08007461 	.word	0x08007461
 8007398:	08007461 	.word	0x08007461
 800739c:	08007461 	.word	0x08007461
 80073a0:	08007461 	.word	0x08007461
 80073a4:	08007435 	.word	0x08007435
 80073a8:	08007461 	.word	0x08007461
 80073ac:	08007461 	.word	0x08007461
 80073b0:	08007461 	.word	0x08007461
 80073b4:	08007461 	.word	0x08007461
 80073b8:	08007461 	.word	0x08007461
 80073bc:	08007461 	.word	0x08007461
 80073c0:	08007461 	.word	0x08007461
 80073c4:	0800744b 	.word	0x0800744b
 80073c8:	08007461 	.word	0x08007461
 80073cc:	08007461 	.word	0x08007461
 80073d0:	08007461 	.word	0x08007461
 80073d4:	08007461 	.word	0x08007461
 80073d8:	08007461 	.word	0x08007461
 80073dc:	08007461 	.word	0x08007461
 80073e0:	08007461 	.word	0x08007461
 80073e4:	08007469 	.word	0x08007469
 80073e8:	08007461 	.word	0x08007461
 80073ec:	08007461 	.word	0x08007461
 80073f0:	08007461 	.word	0x08007461
 80073f4:	08007461 	.word	0x08007461
 80073f8:	08007461 	.word	0x08007461
 80073fc:	08007461 	.word	0x08007461
 8007400:	08007461 	.word	0x08007461
 8007404:	08007469 	.word	0x08007469
 8007408:	08007461 	.word	0x08007461
 800740c:	08007461 	.word	0x08007461
 8007410:	08007461 	.word	0x08007461
 8007414:	08007461 	.word	0x08007461
 8007418:	08007461 	.word	0x08007461
 800741c:	08007461 	.word	0x08007461
 8007420:	08007461 	.word	0x08007461
 8007424:	08007469 	.word	0x08007469
 8007428:	58024400 	.word	0x58024400
 800742c:	58024800 	.word	0x58024800
 8007430:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007438:	3308      	adds	r3, #8
 800743a:	2101      	movs	r1, #1
 800743c:	4618      	mov	r0, r3
 800743e:	f001 fdcb 	bl	8008fd8 <RCCEx_PLL2_Config>
 8007442:	4603      	mov	r3, r0
 8007444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007448:	e00f      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744e:	3328      	adds	r3, #40	@ 0x28
 8007450:	2101      	movs	r1, #1
 8007452:	4618      	mov	r0, r3
 8007454:	f001 fe72 	bl	800913c <RCCEx_PLL3_Config>
 8007458:	4603      	mov	r3, r0
 800745a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800745e:	e004      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007466:	e000      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800746a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007472:	4bbf      	ldr	r3, [pc, #764]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007476:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800747a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007480:	4abb      	ldr	r2, [pc, #748]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007482:	430b      	orrs	r3, r1
 8007484:	6553      	str	r3, [r2, #84]	@ 0x54
 8007486:	e003      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800748c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f002 0302 	and.w	r3, r2, #2
 800749c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074a0:	2300      	movs	r3, #0
 80074a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4313      	orrs	r3, r2
 80074ae:	d041      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80074b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074b6:	2b05      	cmp	r3, #5
 80074b8:	d824      	bhi.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80074ba:	a201      	add	r2, pc, #4	@ (adr r2, 80074c0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	0800750d 	.word	0x0800750d
 80074c4:	080074d9 	.word	0x080074d9
 80074c8:	080074ef 	.word	0x080074ef
 80074cc:	0800750d 	.word	0x0800750d
 80074d0:	0800750d 	.word	0x0800750d
 80074d4:	0800750d 	.word	0x0800750d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074dc:	3308      	adds	r3, #8
 80074de:	2101      	movs	r1, #1
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 fd79 	bl	8008fd8 <RCCEx_PLL2_Config>
 80074e6:	4603      	mov	r3, r0
 80074e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80074ec:	e00f      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f2:	3328      	adds	r3, #40	@ 0x28
 80074f4:	2101      	movs	r1, #1
 80074f6:	4618      	mov	r0, r3
 80074f8:	f001 fe20 	bl	800913c <RCCEx_PLL3_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007502:	e004      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800750a:	e000      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800750c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800750e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10a      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007516:	4b96      	ldr	r3, [pc, #600]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800751a:	f023 0107 	bic.w	r1, r3, #7
 800751e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007524:	4a92      	ldr	r2, [pc, #584]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007526:	430b      	orrs	r3, r1
 8007528:	6553      	str	r3, [r2, #84]	@ 0x54
 800752a:	e003      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007530:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	f002 0304 	and.w	r3, r2, #4
 8007540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007544:	2300      	movs	r3, #0
 8007546:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800754a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800754e:	460b      	mov	r3, r1
 8007550:	4313      	orrs	r3, r2
 8007552:	d044      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800755c:	2b05      	cmp	r3, #5
 800755e:	d825      	bhi.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007560:	a201      	add	r2, pc, #4	@ (adr r2, 8007568 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007566:	bf00      	nop
 8007568:	080075b5 	.word	0x080075b5
 800756c:	08007581 	.word	0x08007581
 8007570:	08007597 	.word	0x08007597
 8007574:	080075b5 	.word	0x080075b5
 8007578:	080075b5 	.word	0x080075b5
 800757c:	080075b5 	.word	0x080075b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007584:	3308      	adds	r3, #8
 8007586:	2101      	movs	r1, #1
 8007588:	4618      	mov	r0, r3
 800758a:	f001 fd25 	bl	8008fd8 <RCCEx_PLL2_Config>
 800758e:	4603      	mov	r3, r0
 8007590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007594:	e00f      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800759a:	3328      	adds	r3, #40	@ 0x28
 800759c:	2101      	movs	r1, #1
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 fdcc 	bl	800913c <RCCEx_PLL3_Config>
 80075a4:	4603      	mov	r3, r0
 80075a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80075aa:	e004      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075b2:	e000      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80075b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10b      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075be:	4b6c      	ldr	r3, [pc, #432]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c2:	f023 0107 	bic.w	r1, r3, #7
 80075c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ce:	4a68      	ldr	r2, [pc, #416]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075d0:	430b      	orrs	r3, r1
 80075d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80075d4:	e003      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	f002 0320 	and.w	r3, r2, #32
 80075ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075ee:	2300      	movs	r3, #0
 80075f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4313      	orrs	r3, r2
 80075fc:	d055      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80075fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007606:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800760a:	d033      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800760c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007610:	d82c      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007616:	d02f      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800761c:	d826      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800761e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007622:	d02b      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007624:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007628:	d820      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800762a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800762e:	d012      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007634:	d81a      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d022      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800763a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800763e:	d115      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007644:	3308      	adds	r3, #8
 8007646:	2100      	movs	r1, #0
 8007648:	4618      	mov	r0, r3
 800764a:	f001 fcc5 	bl	8008fd8 <RCCEx_PLL2_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007654:	e015      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765a:	3328      	adds	r3, #40	@ 0x28
 800765c:	2102      	movs	r1, #2
 800765e:	4618      	mov	r0, r3
 8007660:	f001 fd6c 	bl	800913c <RCCEx_PLL3_Config>
 8007664:	4603      	mov	r3, r0
 8007666:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800766a:	e00a      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007672:	e006      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007674:	bf00      	nop
 8007676:	e004      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007678:	bf00      	nop
 800767a:	e002      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800767c:	bf00      	nop
 800767e:	e000      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007682:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10b      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800768a:	4b39      	ldr	r3, [pc, #228]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800768c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800769a:	4a35      	ldr	r2, [pc, #212]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800769c:	430b      	orrs	r3, r1
 800769e:	6553      	str	r3, [r2, #84]	@ 0x54
 80076a0:	e003      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80076aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80076b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076ba:	2300      	movs	r3, #0
 80076bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076c0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80076c4:	460b      	mov	r3, r1
 80076c6:	4313      	orrs	r3, r2
 80076c8:	d058      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80076ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076d6:	d033      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80076d8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80076dc:	d82c      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80076de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e2:	d02f      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80076e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e8:	d826      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80076ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076ee:	d02b      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80076f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076f4:	d820      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80076f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076fa:	d012      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80076fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007700:	d81a      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d022      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800770a:	d115      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800770c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007710:	3308      	adds	r3, #8
 8007712:	2100      	movs	r1, #0
 8007714:	4618      	mov	r0, r3
 8007716:	f001 fc5f 	bl	8008fd8 <RCCEx_PLL2_Config>
 800771a:	4603      	mov	r3, r0
 800771c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007720:	e015      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007726:	3328      	adds	r3, #40	@ 0x28
 8007728:	2102      	movs	r1, #2
 800772a:	4618      	mov	r0, r3
 800772c:	f001 fd06 	bl	800913c <RCCEx_PLL3_Config>
 8007730:	4603      	mov	r3, r0
 8007732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007736:	e00a      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800773e:	e006      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007740:	bf00      	nop
 8007742:	e004      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007744:	bf00      	nop
 8007746:	e002      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007748:	bf00      	nop
 800774a:	e000      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800774c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10e      	bne.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007756:	4b06      	ldr	r3, [pc, #24]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800775a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800775e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007762:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007766:	4a02      	ldr	r2, [pc, #8]	@ (8007770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007768:	430b      	orrs	r3, r1
 800776a:	6593      	str	r3, [r2, #88]	@ 0x58
 800776c:	e006      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800776e:	bf00      	nop
 8007770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007774:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007778:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800777c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007788:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800778c:	2300      	movs	r3, #0
 800778e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007792:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007796:	460b      	mov	r3, r1
 8007798:	4313      	orrs	r3, r2
 800779a:	d055      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80077a8:	d033      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80077aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80077ae:	d82c      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80077b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077b4:	d02f      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80077b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ba:	d826      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80077bc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80077c0:	d02b      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80077c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80077c6:	d820      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80077c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077cc:	d012      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80077ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077d2:	d81a      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d022      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80077d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077dc:	d115      	bne.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e2:	3308      	adds	r3, #8
 80077e4:	2100      	movs	r1, #0
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 fbf6 	bl	8008fd8 <RCCEx_PLL2_Config>
 80077ec:	4603      	mov	r3, r0
 80077ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80077f2:	e015      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f8:	3328      	adds	r3, #40	@ 0x28
 80077fa:	2102      	movs	r1, #2
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fc9d 	bl	800913c <RCCEx_PLL3_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007808:	e00a      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007810:	e006      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007812:	bf00      	nop
 8007814:	e004      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007816:	bf00      	nop
 8007818:	e002      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800781a:	bf00      	nop
 800781c:	e000      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800781e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007820:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10b      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007828:	4ba0      	ldr	r3, [pc, #640]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800782a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800782c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007834:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007838:	4a9c      	ldr	r2, [pc, #624]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800783a:	430b      	orrs	r3, r1
 800783c:	6593      	str	r3, [r2, #88]	@ 0x58
 800783e:	e003      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007840:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007844:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f002 0308 	and.w	r3, r2, #8
 8007854:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007858:	2300      	movs	r3, #0
 800785a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800785e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007862:	460b      	mov	r3, r1
 8007864:	4313      	orrs	r3, r2
 8007866:	d01e      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007874:	d10c      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787a:	3328      	adds	r3, #40	@ 0x28
 800787c:	2102      	movs	r1, #2
 800787e:	4618      	mov	r0, r3
 8007880:	f001 fc5c 	bl	800913c <RCCEx_PLL3_Config>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007890:	4b86      	ldr	r3, [pc, #536]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007894:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a0:	4a82      	ldr	r2, [pc, #520]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078a2:	430b      	orrs	r3, r1
 80078a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	f002 0310 	and.w	r3, r2, #16
 80078b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078b6:	2300      	movs	r3, #0
 80078b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078bc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80078c0:	460b      	mov	r3, r1
 80078c2:	4313      	orrs	r3, r2
 80078c4:	d01e      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80078c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078d2:	d10c      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d8:	3328      	adds	r3, #40	@ 0x28
 80078da:	2102      	movs	r1, #2
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 fc2d 	bl	800913c <RCCEx_PLL3_Config>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078ee:	4b6f      	ldr	r3, [pc, #444]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078fe:	4a6b      	ldr	r2, [pc, #428]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007900:	430b      	orrs	r3, r1
 8007902:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007910:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007912:	2300      	movs	r3, #0
 8007914:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007916:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800791a:	460b      	mov	r3, r1
 800791c:	4313      	orrs	r3, r2
 800791e:	d03e      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007924:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007928:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800792c:	d022      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800792e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007932:	d81b      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800793c:	d00b      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800793e:	e015      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007944:	3308      	adds	r3, #8
 8007946:	2100      	movs	r1, #0
 8007948:	4618      	mov	r0, r3
 800794a:	f001 fb45 	bl	8008fd8 <RCCEx_PLL2_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007954:	e00f      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795a:	3328      	adds	r3, #40	@ 0x28
 800795c:	2102      	movs	r1, #2
 800795e:	4618      	mov	r0, r3
 8007960:	f001 fbec 	bl	800913c <RCCEx_PLL3_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800796a:	e004      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007972:	e000      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10b      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800797e:	4b4b      	ldr	r3, [pc, #300]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007982:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800798e:	4a47      	ldr	r2, [pc, #284]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007990:	430b      	orrs	r3, r1
 8007992:	6593      	str	r3, [r2, #88]	@ 0x58
 8007994:	e003      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007996:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800799a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800799e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80079aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80079ac:	2300      	movs	r3, #0
 80079ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80079b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80079b4:	460b      	mov	r3, r1
 80079b6:	4313      	orrs	r3, r2
 80079b8:	d03b      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80079ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079c6:	d01f      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80079c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079cc:	d818      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80079ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079d2:	d003      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80079d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079d8:	d007      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80079da:	e011      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079dc:	4b33      	ldr	r3, [pc, #204]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e0:	4a32      	ldr	r2, [pc, #200]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80079e8:	e00f      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ee:	3328      	adds	r3, #40	@ 0x28
 80079f0:	2101      	movs	r1, #1
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 fba2 	bl	800913c <RCCEx_PLL3_Config>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80079fe:	e004      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a06:	e000      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a12:	4b26      	ldr	r3, [pc, #152]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a22:	4a22      	ldr	r2, [pc, #136]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a24:	430b      	orrs	r3, r1
 8007a26:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a28:	e003      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007a3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a40:	2300      	movs	r3, #0
 8007a42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a44:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	d034      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a5c:	d007      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007a5e:	e011      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a60:	4b12      	ldr	r3, [pc, #72]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a64:	4a11      	ldr	r2, [pc, #68]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a6c:	e00e      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a72:	3308      	adds	r3, #8
 8007a74:	2102      	movs	r1, #2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 faae 	bl	8008fd8 <RCCEx_PLL2_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a82:	e003      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10d      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a94:	4b05      	ldr	r3, [pc, #20]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a98:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aa2:	4a02      	ldr	r2, [pc, #8]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007aa8:	e006      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007aaa:	bf00      	nop
 8007aac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ab4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007ac4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007aca:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	d00c      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad8:	3328      	adds	r3, #40	@ 0x28
 8007ada:	2102      	movs	r1, #2
 8007adc:	4618      	mov	r0, r3
 8007ade:	f001 fb2d 	bl	800913c <RCCEx_PLL3_Config>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007afa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007afc:	2300      	movs	r3, #0
 8007afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b00:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007b04:	460b      	mov	r3, r1
 8007b06:	4313      	orrs	r3, r2
 8007b08:	d036      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b14:	d018      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b1a:	d811      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b20:	d014      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b26:	d80b      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d011      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b30:	d106      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b32:	4bb7      	ldr	r3, [pc, #732]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b36:	4ab6      	ldr	r2, [pc, #728]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007b3e:	e008      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b46:	e004      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007b48:	bf00      	nop
 8007b4a:	e002      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007b4c:	bf00      	nop
 8007b4e:	e000      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10a      	bne.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b5a:	4bad      	ldr	r3, [pc, #692]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b68:	4aa9      	ldr	r2, [pc, #676]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b6a:	430b      	orrs	r3, r1
 8007b6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b6e:	e003      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007b84:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b86:	2300      	movs	r3, #0
 8007b88:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4313      	orrs	r3, r2
 8007b92:	d009      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b94:	4b9e      	ldr	r3, [pc, #632]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba2:	4a9b      	ldr	r2, [pc, #620]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	d009      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bc4:	4b92      	ldr	r3, [pc, #584]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bc8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bd2:	4a8f      	ldr	r2, [pc, #572]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007be4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007be6:	2300      	movs	r3, #0
 8007be8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007bee:	460b      	mov	r3, r1
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	d00e      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bf4:	4b86      	ldr	r3, [pc, #536]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	4a85      	ldr	r2, [pc, #532]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bfa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007bfe:	6113      	str	r3, [r2, #16]
 8007c00:	4b83      	ldr	r3, [pc, #524]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c02:	6919      	ldr	r1, [r3, #16]
 8007c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c0c:	4a80      	ldr	r2, [pc, #512]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c20:	2300      	movs	r3, #0
 8007c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c24:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	d009      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c2e:	4b78      	ldr	r3, [pc, #480]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c32:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c3c:	4a74      	ldr	r2, [pc, #464]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c3e:	430b      	orrs	r3, r1
 8007c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007c4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c50:	2300      	movs	r3, #0
 8007c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c54:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	d00a      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c5e:	4b6c      	ldr	r3, [pc, #432]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c62:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c6e:	4a68      	ldr	r2, [pc, #416]	@ (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c70:	430b      	orrs	r3, r1
 8007c72:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c86:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	d011      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c94:	3308      	adds	r3, #8
 8007c96:	2100      	movs	r1, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 f99d 	bl	8008fd8 <RCCEx_PLL2_Config>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	6239      	str	r1, [r7, #32]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cc6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	d011      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 f97d 	bl	8008fd8 <RCCEx_PLL2_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007ce4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	61b9      	str	r1, [r7, #24]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	d011      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d14:	3308      	adds	r3, #8
 8007d16:	2102      	movs	r1, #2
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f001 f95d 	bl	8008fd8 <RCCEx_PLL2_Config>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	6139      	str	r1, [r7, #16]
 8007d40:	f003 0308 	and.w	r3, r3, #8
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	d011      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d54:	3328      	adds	r3, #40	@ 0x28
 8007d56:	2100      	movs	r1, #0
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 f9ef 	bl	800913c <RCCEx_PLL3_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007d64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	f003 0310 	and.w	r3, r3, #16
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	d011      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d94:	3328      	adds	r3, #40	@ 0x28
 8007d96:	2101      	movs	r1, #1
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f001 f9cf 	bl	800913c <RCCEx_PLL3_Config>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007db0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	6039      	str	r1, [r7, #0]
 8007dc0:	f003 0320 	and.w	r3, r3, #32
 8007dc4:	607b      	str	r3, [r7, #4]
 8007dc6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	d011      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd4:	3328      	adds	r3, #40	@ 0x28
 8007dd6:	2102      	movs	r1, #2
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 f9af 	bl	800913c <RCCEx_PLL3_Config>
 8007dde:	4603      	mov	r3, r0
 8007de0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007df0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007df4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	e000      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e0e:	bf00      	nop
 8007e10:	58024400 	.word	0x58024400

08007e14 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b090      	sub	sp, #64	@ 0x40
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e22:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007e26:	430b      	orrs	r3, r1
 8007e28:	f040 8094 	bne.w	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007e2c:	4b9b      	ldr	r3, [pc, #620]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e30:	f003 0307 	and.w	r3, r3, #7
 8007e34:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	f200 8087 	bhi.w	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007e59 	.word	0x08007e59
 8007e48:	08007e81 	.word	0x08007e81
 8007e4c:	08007ea9 	.word	0x08007ea9
 8007e50:	08007f45 	.word	0x08007f45
 8007e54:	08007ed1 	.word	0x08007ed1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e58:	4b90      	ldr	r3, [pc, #576]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e64:	d108      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 ff62 	bl	8008d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e74:	f000 bc93 	b.w	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7c:	f000 bc8f 	b.w	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e80:	4b86      	ldr	r3, [pc, #536]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e8c:	d108      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e8e:	f107 0318 	add.w	r3, r7, #24
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fca6 	bl	80087e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e9c:	f000 bc7f 	b.w	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea4:	f000 bc7b 	b.w	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ea8:	4b7c      	ldr	r3, [pc, #496]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eb4:	d108      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eb6:	f107 030c 	add.w	r3, r7, #12
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fde6 	bl	8008a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ec4:	f000 bc6b 	b.w	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ecc:	f000 bc67 	b.w	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ed0:	4b72      	ldr	r3, [pc, #456]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ed4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ed8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007eda:	4b70      	ldr	r3, [pc, #448]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0304 	and.w	r3, r3, #4
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	d10c      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d109      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eec:	4b6b      	ldr	r3, [pc, #428]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	08db      	lsrs	r3, r3, #3
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	4a6a      	ldr	r2, [pc, #424]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8007efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007efe:	e01f      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f00:	4b66      	ldr	r3, [pc, #408]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f0c:	d106      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f14:	d102      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f16:	4b63      	ldr	r3, [pc, #396]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f1a:	e011      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f1c:	4b5f      	ldr	r3, [pc, #380]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f28:	d106      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f30:	d102      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f32:	4b5d      	ldr	r3, [pc, #372]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f36:	e003      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f3c:	f000 bc2f 	b.w	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f40:	f000 bc2d 	b.w	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f44:	4b59      	ldr	r3, [pc, #356]	@ (80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f48:	f000 bc29 	b.w	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f50:	f000 bc25 	b.w	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007f54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f58:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	f040 80a7 	bne.w	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007f62:	4b4e      	ldr	r3, [pc, #312]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f66:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007f6a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f72:	d054      	beq.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f7a:	f200 808b 	bhi.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f80:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f84:	f000 8083 	beq.w	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f8e:	f200 8081 	bhi.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f98:	d02f      	beq.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fa0:	d878      	bhi.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d004      	beq.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007faa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fae:	d012      	beq.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007fb0:	e070      	b.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fb2:	4b3a      	ldr	r3, [pc, #232]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fbe:	d107      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 feb5 	bl	8008d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fce:	e3e6      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd4:	e3e3      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fd6:	4b31      	ldr	r3, [pc, #196]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fe2:	d107      	bne.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fe4:	f107 0318 	add.w	r3, r7, #24
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 fbfb 	bl	80087e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ff2:	e3d4      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff8:	e3d1      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ffa:	4b28      	ldr	r3, [pc, #160]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008006:	d107      	bne.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008008:	f107 030c 	add.w	r3, r7, #12
 800800c:	4618      	mov	r0, r3
 800800e:	f000 fd3d 	bl	8008a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008016:	e3c2      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008018:	2300      	movs	r3, #0
 800801a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800801c:	e3bf      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800801e:	4b1f      	ldr	r3, [pc, #124]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008022:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008026:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008028:	4b1c      	ldr	r3, [pc, #112]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b04      	cmp	r3, #4
 8008032:	d10c      	bne.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800803a:	4b18      	ldr	r3, [pc, #96]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	08db      	lsrs	r3, r3, #3
 8008040:	f003 0303 	and.w	r3, r3, #3
 8008044:	4a16      	ldr	r2, [pc, #88]	@ (80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008046:	fa22 f303 	lsr.w	r3, r2, r3
 800804a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800804c:	e01e      	b.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800804e:	4b13      	ldr	r3, [pc, #76]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800805a:	d106      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800805c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008062:	d102      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008064:	4b0f      	ldr	r3, [pc, #60]	@ (80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008068:	e010      	b.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800806a:	4b0c      	ldr	r3, [pc, #48]	@ (800809c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008072:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008076:	d106      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800807a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800807e:	d102      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008080:	4b09      	ldr	r3, [pc, #36]	@ (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008084:	e002      	b.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008086:	2300      	movs	r3, #0
 8008088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800808a:	e388      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800808c:	e387      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800808e:	4b07      	ldr	r3, [pc, #28]	@ (80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008092:	e384      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008098:	e381      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800809a:	bf00      	nop
 800809c:	58024400 	.word	0x58024400
 80080a0:	03d09000 	.word	0x03d09000
 80080a4:	003d0900 	.word	0x003d0900
 80080a8:	016e3600 	.word	0x016e3600
 80080ac:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80080b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080b4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80080b8:	430b      	orrs	r3, r1
 80080ba:	f040 809c 	bne.w	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80080be:	4b9e      	ldr	r3, [pc, #632]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80080c6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80080c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080ce:	d054      	beq.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080d6:	f200 808b 	bhi.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80080da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80080e0:	f000 8083 	beq.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80080e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80080ea:	f200 8081 	bhi.w	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80080ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080f4:	d02f      	beq.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80080f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080fc:	d878      	bhi.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008100:	2b00      	cmp	r3, #0
 8008102:	d004      	beq.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800810a:	d012      	beq.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800810c:	e070      	b.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800810e:	4b8a      	ldr	r3, [pc, #552]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008116:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800811a:	d107      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800811c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fe07 	bl	8008d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800812a:	e338      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800812c:	2300      	movs	r3, #0
 800812e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008130:	e335      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008132:	4b81      	ldr	r3, [pc, #516]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800813a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800813e:	d107      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008140:	f107 0318 	add.w	r3, r7, #24
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fb4d 	bl	80087e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800814e:	e326      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008154:	e323      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008156:	4b78      	ldr	r3, [pc, #480]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800815e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008162:	d107      	bne.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008164:	f107 030c 	add.w	r3, r7, #12
 8008168:	4618      	mov	r0, r3
 800816a:	f000 fc8f 	bl	8008a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008172:	e314      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008178:	e311      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800817a:	4b6f      	ldr	r3, [pc, #444]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800817c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800817e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008182:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008184:	4b6c      	ldr	r3, [pc, #432]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b04      	cmp	r3, #4
 800818e:	d10c      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008192:	2b00      	cmp	r3, #0
 8008194:	d109      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008196:	4b68      	ldr	r3, [pc, #416]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	08db      	lsrs	r3, r3, #3
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	4a66      	ldr	r2, [pc, #408]	@ (800833c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80081a2:	fa22 f303 	lsr.w	r3, r2, r3
 80081a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081a8:	e01e      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081aa:	4b63      	ldr	r3, [pc, #396]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081b6:	d106      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80081b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081be:	d102      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081c0:	4b5f      	ldr	r3, [pc, #380]	@ (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80081c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081c4:	e010      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081c6:	4b5c      	ldr	r3, [pc, #368]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081d2:	d106      	bne.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80081d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081da:	d102      	bne.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081dc:	4b59      	ldr	r3, [pc, #356]	@ (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081e0:	e002      	b.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80081e6:	e2da      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80081e8:	e2d9      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081ea:	4b57      	ldr	r3, [pc, #348]	@ (8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80081ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ee:	e2d6      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f4:	e2d3      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80081f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081fa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80081fe:	430b      	orrs	r3, r1
 8008200:	f040 80a7 	bne.w	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008204:	4b4c      	ldr	r3, [pc, #304]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008208:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800820c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800820e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008210:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008214:	d055      	beq.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008218:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800821c:	f200 8096 	bhi.w	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008222:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008226:	f000 8084 	beq.w	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800822a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008230:	f200 808c 	bhi.w	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800823a:	d030      	beq.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800823c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008242:	f200 8083 	bhi.w	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008248:	2b00      	cmp	r3, #0
 800824a:	d004      	beq.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800824c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800824e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008252:	d012      	beq.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008254:	e07a      	b.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008256:	4b38      	ldr	r3, [pc, #224]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800825e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008262:	d107      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fd63 	bl	8008d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800826e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008272:	e294      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008278:	e291      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800827a:	4b2f      	ldr	r3, [pc, #188]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008286:	d107      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008288:	f107 0318 	add.w	r3, r7, #24
 800828c:	4618      	mov	r0, r3
 800828e:	f000 faa9 	bl	80087e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008296:	e282      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800829c:	e27f      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800829e:	4b26      	ldr	r3, [pc, #152]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082aa:	d107      	bne.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ac:	f107 030c 	add.w	r3, r7, #12
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fbeb 	bl	8008a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ba:	e270      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c0:	e26d      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80082ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d10c      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80082d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082de:	4b16      	ldr	r3, [pc, #88]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	08db      	lsrs	r3, r3, #3
 80082e4:	f003 0303 	and.w	r3, r3, #3
 80082e8:	4a14      	ldr	r2, [pc, #80]	@ (800833c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80082ea:	fa22 f303 	lsr.w	r3, r2, r3
 80082ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082f0:	e01e      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082f2:	4b11      	ldr	r3, [pc, #68]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082fe:	d106      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008306:	d102      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008308:	4b0d      	ldr	r3, [pc, #52]	@ (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800830a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800830c:	e010      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800830e:	4b0a      	ldr	r3, [pc, #40]	@ (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008316:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800831a:	d106      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800831c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008322:	d102      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008324:	4b07      	ldr	r3, [pc, #28]	@ (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008328:	e002      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800832e:	e236      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008330:	e235      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008332:	4b05      	ldr	r3, [pc, #20]	@ (8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008336:	e232      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008338:	58024400 	.word	0x58024400
 800833c:	03d09000 	.word	0x03d09000
 8008340:	003d0900 	.word	0x003d0900
 8008344:	016e3600 	.word	0x016e3600
 8008348:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008350:	e225      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008356:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800835a:	430b      	orrs	r3, r1
 800835c:	f040 8085 	bne.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008360:	4b9c      	ldr	r3, [pc, #624]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008364:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008368:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800836a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008370:	d06b      	beq.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008374:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008378:	d874      	bhi.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800837a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008380:	d056      	beq.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008384:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008388:	d86c      	bhi.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800838a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008390:	d03b      	beq.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008394:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008398:	d864      	bhi.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800839a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083a0:	d021      	beq.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80083a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083a8:	d85c      	bhi.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80083aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d004      	beq.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80083b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083b6:	d004      	beq.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80083b8:	e054      	b.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80083ba:	f7fe fb5f 	bl	8006a7c <HAL_RCC_GetPCLK1Freq>
 80083be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80083c0:	e1ed      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083c2:	4b84      	ldr	r3, [pc, #528]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083ce:	d107      	bne.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d0:	f107 0318 	add.w	r3, r7, #24
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fa05 	bl	80087e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083de:	e1de      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e4:	e1db      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083e6:	4b7b      	ldr	r3, [pc, #492]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f2:	d107      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083f4:	f107 030c 	add.w	r3, r7, #12
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 fb47 	bl	8008a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008402:	e1cc      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008408:	e1c9      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800840a:	4b72      	ldr	r3, [pc, #456]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0304 	and.w	r3, r3, #4
 8008412:	2b04      	cmp	r3, #4
 8008414:	d109      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008416:	4b6f      	ldr	r3, [pc, #444]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	08db      	lsrs	r3, r3, #3
 800841c:	f003 0303 	and.w	r3, r3, #3
 8008420:	4a6d      	ldr	r2, [pc, #436]	@ (80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008422:	fa22 f303 	lsr.w	r3, r2, r3
 8008426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008428:	e1b9      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800842e:	e1b6      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008430:	4b68      	ldr	r3, [pc, #416]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800843c:	d102      	bne.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800843e:	4b67      	ldr	r3, [pc, #412]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008442:	e1ac      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008448:	e1a9      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800844a:	4b62      	ldr	r3, [pc, #392]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008452:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008456:	d102      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008458:	4b61      	ldr	r3, [pc, #388]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800845a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800845c:	e19f      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008462:	e19c      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008464:	2300      	movs	r3, #0
 8008466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008468:	e199      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800846a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800846e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008472:	430b      	orrs	r3, r1
 8008474:	d173      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008476:	4b57      	ldr	r3, [pc, #348]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800847a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800847e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008482:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008486:	d02f      	beq.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800848e:	d863      	bhi.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800849c:	d012      	beq.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800849e:	e05b      	b.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084a0:	4b4c      	ldr	r3, [pc, #304]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084ac:	d107      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ae:	f107 0318 	add.w	r3, r7, #24
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f996 	bl	80087e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084bc:	e16f      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084be:	2300      	movs	r3, #0
 80084c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c2:	e16c      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084c4:	4b43      	ldr	r3, [pc, #268]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084d0:	d107      	bne.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084d2:	f107 030c 	add.w	r3, r7, #12
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fad8 	bl	8008a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084e0:	e15d      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084e6:	e15a      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084e8:	4b3a      	ldr	r3, [pc, #232]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084f2:	4b38      	ldr	r3, [pc, #224]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0304 	and.w	r3, r3, #4
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d10c      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80084fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008504:	4b33      	ldr	r3, [pc, #204]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	08db      	lsrs	r3, r3, #3
 800850a:	f003 0303 	and.w	r3, r3, #3
 800850e:	4a32      	ldr	r2, [pc, #200]	@ (80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008510:	fa22 f303 	lsr.w	r3, r2, r3
 8008514:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008516:	e01e      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008518:	4b2e      	ldr	r3, [pc, #184]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008524:	d106      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800852c:	d102      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800852e:	4b2b      	ldr	r3, [pc, #172]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008532:	e010      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008534:	4b27      	ldr	r3, [pc, #156]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008540:	d106      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008548:	d102      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800854a:	4b25      	ldr	r3, [pc, #148]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800854c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800854e:	e002      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008554:	e123      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008556:	e122      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008558:	2300      	movs	r3, #0
 800855a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800855c:	e11f      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800855e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008562:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008566:	430b      	orrs	r3, r1
 8008568:	d13c      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800856a:	4b1a      	ldr	r3, [pc, #104]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800856c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800856e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008572:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008576:	2b00      	cmp	r3, #0
 8008578:	d004      	beq.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800857a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008580:	d012      	beq.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008582:	e023      	b.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008584:	4b13      	ldr	r3, [pc, #76]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800858c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008590:	d107      	bne.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fbcc 	bl	8008d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800859c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085a0:	e0fd      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a6:	e0fa      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085a8:	4b0a      	ldr	r3, [pc, #40]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085b4:	d107      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b6:	f107 0318 	add.w	r3, r7, #24
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f912 	bl	80087e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80085c0:	6a3b      	ldr	r3, [r7, #32]
 80085c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c4:	e0eb      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ca:	e0e8      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d0:	e0e5      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80085d2:	bf00      	nop
 80085d4:	58024400 	.word	0x58024400
 80085d8:	03d09000 	.word	0x03d09000
 80085dc:	003d0900 	.word	0x003d0900
 80085e0:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80085e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085e8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80085ec:	430b      	orrs	r3, r1
 80085ee:	f040 8085 	bne.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80085f2:	4b6d      	ldr	r3, [pc, #436]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085f6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80085fa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80085fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008602:	d06b      	beq.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008606:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800860a:	d874      	bhi.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800860c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008612:	d056      	beq.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800861a:	d86c      	bhi.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800861c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008622:	d03b      	beq.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008626:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800862a:	d864      	bhi.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800862c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008632:	d021      	beq.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800863a:	d85c      	bhi.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800863c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863e:	2b00      	cmp	r3, #0
 8008640:	d004      	beq.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008644:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008648:	d004      	beq.n	8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800864a:	e054      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800864c:	f000 f8b4 	bl	80087b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008650:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008652:	e0a4      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008654:	4b54      	ldr	r3, [pc, #336]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800865c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008660:	d107      	bne.n	8008672 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008662:	f107 0318 	add.w	r3, r7, #24
 8008666:	4618      	mov	r0, r3
 8008668:	f000 f8bc 	bl	80087e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008670:	e095      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008676:	e092      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008678:	4b4b      	ldr	r3, [pc, #300]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008680:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008684:	d107      	bne.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008686:	f107 030c 	add.w	r3, r7, #12
 800868a:	4618      	mov	r0, r3
 800868c:	f000 f9fe 	bl	8008a8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008694:	e083      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800869a:	e080      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800869c:	4b42      	ldr	r3, [pc, #264]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	2b04      	cmp	r3, #4
 80086a6:	d109      	bne.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086a8:	4b3f      	ldr	r3, [pc, #252]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	08db      	lsrs	r3, r3, #3
 80086ae:	f003 0303 	and.w	r3, r3, #3
 80086b2:	4a3e      	ldr	r2, [pc, #248]	@ (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80086b4:	fa22 f303 	lsr.w	r3, r2, r3
 80086b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ba:	e070      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086bc:	2300      	movs	r3, #0
 80086be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c0:	e06d      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80086c2:	4b39      	ldr	r3, [pc, #228]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ce:	d102      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80086d0:	4b37      	ldr	r3, [pc, #220]	@ (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80086d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d4:	e063      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086d6:	2300      	movs	r3, #0
 80086d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086da:	e060      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086dc:	4b32      	ldr	r3, [pc, #200]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086e8:	d102      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80086ea:	4b32      	ldr	r3, [pc, #200]	@ (80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80086ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ee:	e056      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f4:	e053      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086fa:	e050      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80086fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008700:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008704:	430b      	orrs	r3, r1
 8008706:	d148      	bne.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008708:	4b27      	ldr	r3, [pc, #156]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800870a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800870c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008710:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008718:	d02a      	beq.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800871a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008720:	d838      	bhi.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008724:	2b00      	cmp	r3, #0
 8008726:	d004      	beq.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800872e:	d00d      	beq.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008730:	e030      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008732:	4b1d      	ldr	r3, [pc, #116]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800873a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800873e:	d102      	bne.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008740:	4b1c      	ldr	r3, [pc, #112]	@ (80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008744:	e02b      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874a:	e028      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800874c:	4b16      	ldr	r3, [pc, #88]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008754:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008758:	d107      	bne.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800875a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fae8 	bl	8008d34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008768:	e019      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876e:	e016      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008770:	4b0d      	ldr	r3, [pc, #52]	@ (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008778:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800877c:	d107      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800877e:	f107 0318 	add.w	r3, r7, #24
 8008782:	4618      	mov	r0, r3
 8008784:	f000 f82e 	bl	80087e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800878c:	e007      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008792:	e004      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008798:	e001      	b.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800879e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3740      	adds	r7, #64	@ 0x40
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	58024400 	.word	0x58024400
 80087ac:	03d09000 	.word	0x03d09000
 80087b0:	003d0900 	.word	0x003d0900
 80087b4:	016e3600 	.word	0x016e3600

080087b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80087bc:	f7fe f92e 	bl	8006a1c <HAL_RCC_GetHCLKFreq>
 80087c0:	4602      	mov	r2, r0
 80087c2:	4b06      	ldr	r3, [pc, #24]	@ (80087dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	091b      	lsrs	r3, r3, #4
 80087c8:	f003 0307 	and.w	r3, r3, #7
 80087cc:	4904      	ldr	r1, [pc, #16]	@ (80087e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80087ce:	5ccb      	ldrb	r3, [r1, r3]
 80087d0:	f003 031f 	and.w	r3, r3, #31
 80087d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80087d8:	4618      	mov	r0, r3
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	58024400 	.word	0x58024400
 80087e0:	0800f104 	.word	0x0800f104

080087e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b089      	sub	sp, #36	@ 0x24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087ec:	4ba1      	ldr	r3, [pc, #644]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f0:	f003 0303 	and.w	r3, r3, #3
 80087f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80087f6:	4b9f      	ldr	r3, [pc, #636]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fa:	0b1b      	lsrs	r3, r3, #12
 80087fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008800:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008802:	4b9c      	ldr	r3, [pc, #624]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008806:	091b      	lsrs	r3, r3, #4
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800880e:	4b99      	ldr	r3, [pc, #612]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008812:	08db      	lsrs	r3, r3, #3
 8008814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	fb02 f303 	mul.w	r3, r2, r3
 800881e:	ee07 3a90 	vmov	s15, r3
 8008822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008826:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 8111 	beq.w	8008a54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	2b02      	cmp	r3, #2
 8008836:	f000 8083 	beq.w	8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	2b02      	cmp	r3, #2
 800883e:	f200 80a1 	bhi.w	8008984 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d003      	beq.n	8008850 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d056      	beq.n	80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800884e:	e099      	b.n	8008984 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008850:	4b88      	ldr	r3, [pc, #544]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0320 	and.w	r3, r3, #32
 8008858:	2b00      	cmp	r3, #0
 800885a:	d02d      	beq.n	80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800885c:	4b85      	ldr	r3, [pc, #532]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	08db      	lsrs	r3, r3, #3
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	4a84      	ldr	r2, [pc, #528]	@ (8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008868:	fa22 f303 	lsr.w	r3, r2, r3
 800886c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	ee07 3a90 	vmov	s15, r3
 8008874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	ee07 3a90 	vmov	s15, r3
 800887e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008886:	4b7b      	ldr	r3, [pc, #492]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888e:	ee07 3a90 	vmov	s15, r3
 8008892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008896:	ed97 6a03 	vldr	s12, [r7, #12]
 800889a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800889e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088b6:	e087      	b.n	80089c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008a80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80088c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ca:	4b6a      	ldr	r3, [pc, #424]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d2:	ee07 3a90 	vmov	s15, r3
 80088d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088da:	ed97 6a03 	vldr	s12, [r7, #12]
 80088de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088fa:	e065      	b.n	80089c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008906:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800890a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800890e:	4b59      	ldr	r3, [pc, #356]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008916:	ee07 3a90 	vmov	s15, r3
 800891a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800891e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008922:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800892a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800892e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800893a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800893e:	e043      	b.n	80089c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800894e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008952:	4b48      	ldr	r3, [pc, #288]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895a:	ee07 3a90 	vmov	s15, r3
 800895e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008962:	ed97 6a03 	vldr	s12, [r7, #12]
 8008966:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800896a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800897a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008982:	e021      	b.n	80089c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008996:	4b37      	ldr	r3, [pc, #220]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800899a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008a7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80089c8:	4b2a      	ldr	r3, [pc, #168]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089cc:	0a5b      	lsrs	r3, r3, #9
 80089ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ee:	ee17 2a90 	vmov	r2, s15
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80089f6:	4b1f      	ldr	r3, [pc, #124]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089fa:	0c1b      	lsrs	r3, r3, #16
 80089fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a00:	ee07 3a90 	vmov	s15, r3
 8008a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a1c:	ee17 2a90 	vmov	r2, s15
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008a24:	4b13      	ldr	r3, [pc, #76]	@ (8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a28:	0e1b      	lsrs	r3, r3, #24
 8008a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a2e:	ee07 3a90 	vmov	s15, r3
 8008a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a4a:	ee17 2a90 	vmov	r2, s15
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a52:	e008      	b.n	8008a66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	609a      	str	r2, [r3, #8]
}
 8008a66:	bf00      	nop
 8008a68:	3724      	adds	r7, #36	@ 0x24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	58024400 	.word	0x58024400
 8008a78:	03d09000 	.word	0x03d09000
 8008a7c:	46000000 	.word	0x46000000
 8008a80:	4c742400 	.word	0x4c742400
 8008a84:	4a742400 	.word	0x4a742400
 8008a88:	4bb71b00 	.word	0x4bb71b00

08008a8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b089      	sub	sp, #36	@ 0x24
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a94:	4ba1      	ldr	r3, [pc, #644]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a98:	f003 0303 	and.w	r3, r3, #3
 8008a9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008a9e:	4b9f      	ldr	r3, [pc, #636]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa2:	0d1b      	lsrs	r3, r3, #20
 8008aa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008aa8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008aaa:	4b9c      	ldr	r3, [pc, #624]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aae:	0a1b      	lsrs	r3, r3, #8
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008ab6:	4b99      	ldr	r3, [pc, #612]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aba:	08db      	lsrs	r3, r3, #3
 8008abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	fb02 f303 	mul.w	r3, r2, r3
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ace:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 8111 	beq.w	8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	f000 8083 	beq.w	8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	f200 80a1 	bhi.w	8008c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d003      	beq.n	8008af8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d056      	beq.n	8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008af6:	e099      	b.n	8008c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008af8:	4b88      	ldr	r3, [pc, #544]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d02d      	beq.n	8008b60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b04:	4b85      	ldr	r3, [pc, #532]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	08db      	lsrs	r3, r3, #3
 8008b0a:	f003 0303 	and.w	r3, r3, #3
 8008b0e:	4a84      	ldr	r2, [pc, #528]	@ (8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008b10:	fa22 f303 	lsr.w	r3, r2, r3
 8008b14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	ee07 3a90 	vmov	s15, r3
 8008b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b2e:	4b7b      	ldr	r3, [pc, #492]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b36:	ee07 3a90 	vmov	s15, r3
 8008b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b5e:	e087      	b.n	8008c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008d28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b72:	4b6a      	ldr	r3, [pc, #424]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7a:	ee07 3a90 	vmov	s15, r3
 8008b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ba2:	e065      	b.n	8008c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bb6:	4b59      	ldr	r3, [pc, #356]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008be6:	e043      	b.n	8008c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bfa:	4b48      	ldr	r3, [pc, #288]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c2a:	e021      	b.n	8008c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c3e:	4b37      	ldr	r3, [pc, #220]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008d24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c70:	4b2a      	ldr	r3, [pc, #168]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c74:	0a5b      	lsrs	r3, r3, #9
 8008c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c96:	ee17 2a90 	vmov	r2, s15
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca2:	0c1b      	lsrs	r3, r3, #16
 8008ca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ca8:	ee07 3a90 	vmov	s15, r3
 8008cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cc4:	ee17 2a90 	vmov	r2, s15
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008ccc:	4b13      	ldr	r3, [pc, #76]	@ (8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd0:	0e1b      	lsrs	r3, r3, #24
 8008cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ce6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cf2:	ee17 2a90 	vmov	r2, s15
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008cfa:	e008      	b.n	8008d0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	609a      	str	r2, [r3, #8]
}
 8008d0e:	bf00      	nop
 8008d10:	3724      	adds	r7, #36	@ 0x24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	58024400 	.word	0x58024400
 8008d20:	03d09000 	.word	0x03d09000
 8008d24:	46000000 	.word	0x46000000
 8008d28:	4c742400 	.word	0x4c742400
 8008d2c:	4a742400 	.word	0x4a742400
 8008d30:	4bb71b00 	.word	0x4bb71b00

08008d34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b089      	sub	sp, #36	@ 0x24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d3c:	4ba0      	ldr	r3, [pc, #640]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d40:	f003 0303 	and.w	r3, r3, #3
 8008d44:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008d46:	4b9e      	ldr	r3, [pc, #632]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d4a:	091b      	lsrs	r3, r3, #4
 8008d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d50:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008d52:	4b9b      	ldr	r3, [pc, #620]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d5c:	4b98      	ldr	r3, [pc, #608]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d60:	08db      	lsrs	r3, r3, #3
 8008d62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	fb02 f303 	mul.w	r3, r2, r3
 8008d6c:	ee07 3a90 	vmov	s15, r3
 8008d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d74:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 8111 	beq.w	8008fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	f000 8083 	beq.w	8008e8e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	f200 80a1 	bhi.w	8008ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d056      	beq.n	8008e4a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008d9c:	e099      	b.n	8008ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d9e:	4b88      	ldr	r3, [pc, #544]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0320 	and.w	r3, r3, #32
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d02d      	beq.n	8008e06 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008daa:	4b85      	ldr	r3, [pc, #532]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	08db      	lsrs	r3, r3, #3
 8008db0:	f003 0303 	and.w	r3, r3, #3
 8008db4:	4a83      	ldr	r2, [pc, #524]	@ (8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008db6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	ee07 3a90 	vmov	s15, r3
 8008dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dd4:	4b7a      	ldr	r3, [pc, #488]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ddc:	ee07 3a90 	vmov	s15, r3
 8008de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008de4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008de8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008dec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008df4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e00:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e04:	e087      	b.n	8008f16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	ee07 3a90 	vmov	s15, r3
 8008e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e10:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e18:	4b69      	ldr	r3, [pc, #420]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e20:	ee07 3a90 	vmov	s15, r3
 8008e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e28:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e2c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e48:	e065      	b.n	8008f16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	ee07 3a90 	vmov	s15, r3
 8008e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e54:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e5c:	4b58      	ldr	r3, [pc, #352]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e64:	ee07 3a90 	vmov	s15, r3
 8008e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e70:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e8c:	e043      	b.n	8008f16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	ee07 3a90 	vmov	s15, r3
 8008e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e98:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008fd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008e9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea0:	4b47      	ldr	r3, [pc, #284]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea8:	ee07 3a90 	vmov	s15, r3
 8008eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eb4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008eb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ec0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ecc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ed0:	e021      	b.n	8008f16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	ee07 3a90 	vmov	s15, r3
 8008ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008edc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee4:	4b36      	ldr	r3, [pc, #216]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eec:	ee07 3a90 	vmov	s15, r3
 8008ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ef8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f14:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008f16:	4b2a      	ldr	r3, [pc, #168]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f1a:	0a5b      	lsrs	r3, r3, #9
 8008f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f20:	ee07 3a90 	vmov	s15, r3
 8008f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f3c:	ee17 2a90 	vmov	r2, s15
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008f44:	4b1e      	ldr	r3, [pc, #120]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f48:	0c1b      	lsrs	r3, r3, #16
 8008f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f6a:	ee17 2a90 	vmov	r2, s15
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008f72:	4b13      	ldr	r3, [pc, #76]	@ (8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f76:	0e1b      	lsrs	r3, r3, #24
 8008f78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f7c:	ee07 3a90 	vmov	s15, r3
 8008f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f98:	ee17 2a90 	vmov	r2, s15
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008fa0:	e008      	b.n	8008fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	609a      	str	r2, [r3, #8]
}
 8008fb4:	bf00      	nop
 8008fb6:	3724      	adds	r7, #36	@ 0x24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	58024400 	.word	0x58024400
 8008fc4:	03d09000 	.word	0x03d09000
 8008fc8:	46000000 	.word	0x46000000
 8008fcc:	4c742400 	.word	0x4c742400
 8008fd0:	4a742400 	.word	0x4a742400
 8008fd4:	4bb71b00 	.word	0x4bb71b00

08008fd8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fe6:	4b53      	ldr	r3, [pc, #332]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 8008fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fea:	f003 0303 	and.w	r3, r3, #3
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d101      	bne.n	8008ff6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e099      	b.n	800912a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a4e      	ldr	r2, [pc, #312]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 8008ffc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009002:	f7f9 fbbd 	bl	8002780 <HAL_GetTick>
 8009006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009008:	e008      	b.n	800901c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800900a:	f7f9 fbb9 	bl	8002780 <HAL_GetTick>
 800900e:	4602      	mov	r2, r0
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	2b02      	cmp	r3, #2
 8009016:	d901      	bls.n	800901c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e086      	b.n	800912a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800901c:	4b45      	ldr	r3, [pc, #276]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1f0      	bne.n	800900a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009028:	4b42      	ldr	r3, [pc, #264]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 800902a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800902c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	031b      	lsls	r3, r3, #12
 8009036:	493f      	ldr	r1, [pc, #252]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 8009038:	4313      	orrs	r3, r2
 800903a:	628b      	str	r3, [r1, #40]	@ 0x28
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	3b01      	subs	r3, #1
 8009042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	3b01      	subs	r3, #1
 800904c:	025b      	lsls	r3, r3, #9
 800904e:	b29b      	uxth	r3, r3
 8009050:	431a      	orrs	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	3b01      	subs	r3, #1
 8009058:	041b      	lsls	r3, r3, #16
 800905a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800905e:	431a      	orrs	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	3b01      	subs	r3, #1
 8009066:	061b      	lsls	r3, r3, #24
 8009068:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800906c:	4931      	ldr	r1, [pc, #196]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 800906e:	4313      	orrs	r3, r2
 8009070:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009072:	4b30      	ldr	r3, [pc, #192]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 8009074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009076:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	492d      	ldr	r1, [pc, #180]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 8009080:	4313      	orrs	r3, r2
 8009082:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009084:	4b2b      	ldr	r3, [pc, #172]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 8009086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009088:	f023 0220 	bic.w	r2, r3, #32
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	4928      	ldr	r1, [pc, #160]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 8009092:	4313      	orrs	r3, r2
 8009094:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009096:	4b27      	ldr	r3, [pc, #156]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 8009098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800909a:	4a26      	ldr	r2, [pc, #152]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 800909c:	f023 0310 	bic.w	r3, r3, #16
 80090a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80090a2:	4b24      	ldr	r3, [pc, #144]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 80090a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090a6:	4b24      	ldr	r3, [pc, #144]	@ (8009138 <RCCEx_PLL2_Config+0x160>)
 80090a8:	4013      	ands	r3, r2
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	69d2      	ldr	r2, [r2, #28]
 80090ae:	00d2      	lsls	r2, r2, #3
 80090b0:	4920      	ldr	r1, [pc, #128]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80090b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 80090b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 80090bc:	f043 0310 	orr.w	r3, r3, #16
 80090c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d106      	bne.n	80090d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80090c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 80090ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090cc:	4a19      	ldr	r2, [pc, #100]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 80090ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80090d4:	e00f      	b.n	80090f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d106      	bne.n	80090ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80090dc:	4b15      	ldr	r3, [pc, #84]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 80090de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e0:	4a14      	ldr	r2, [pc, #80]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 80090e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80090e8:	e005      	b.n	80090f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80090ea:	4b12      	ldr	r3, [pc, #72]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 80090ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ee:	4a11      	ldr	r2, [pc, #68]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 80090f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80090f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80090f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a0e      	ldr	r2, [pc, #56]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 80090fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009102:	f7f9 fb3d 	bl	8002780 <HAL_GetTick>
 8009106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009108:	e008      	b.n	800911c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800910a:	f7f9 fb39 	bl	8002780 <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	2b02      	cmp	r3, #2
 8009116:	d901      	bls.n	800911c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e006      	b.n	800912a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800911c:	4b05      	ldr	r3, [pc, #20]	@ (8009134 <RCCEx_PLL2_Config+0x15c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0f0      	beq.n	800910a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009128:	7bfb      	ldrb	r3, [r7, #15]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	58024400 	.word	0x58024400
 8009138:	ffff0007 	.word	0xffff0007

0800913c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800914a:	4b53      	ldr	r3, [pc, #332]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 800914c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800914e:	f003 0303 	and.w	r3, r3, #3
 8009152:	2b03      	cmp	r3, #3
 8009154:	d101      	bne.n	800915a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e099      	b.n	800928e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800915a:	4b4f      	ldr	r3, [pc, #316]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a4e      	ldr	r2, [pc, #312]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 8009160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009166:	f7f9 fb0b 	bl	8002780 <HAL_GetTick>
 800916a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800916c:	e008      	b.n	8009180 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800916e:	f7f9 fb07 	bl	8002780 <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	2b02      	cmp	r3, #2
 800917a:	d901      	bls.n	8009180 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e086      	b.n	800928e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009180:	4b45      	ldr	r3, [pc, #276]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1f0      	bne.n	800916e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800918c:	4b42      	ldr	r3, [pc, #264]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 800918e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009190:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	051b      	lsls	r3, r3, #20
 800919a:	493f      	ldr	r1, [pc, #252]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 800919c:	4313      	orrs	r3, r2
 800919e:	628b      	str	r3, [r1, #40]	@ 0x28
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	3b01      	subs	r3, #1
 80091b0:	025b      	lsls	r3, r3, #9
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	431a      	orrs	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	041b      	lsls	r3, r3, #16
 80091be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80091c2:	431a      	orrs	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	061b      	lsls	r3, r3, #24
 80091cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80091d0:	4931      	ldr	r1, [pc, #196]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80091d6:	4b30      	ldr	r3, [pc, #192]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 80091d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	492d      	ldr	r1, [pc, #180]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 80091e4:	4313      	orrs	r3, r2
 80091e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80091e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 80091ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	4928      	ldr	r1, [pc, #160]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80091fa:	4b27      	ldr	r3, [pc, #156]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 80091fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fe:	4a26      	ldr	r2, [pc, #152]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 8009200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009204:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009206:	4b24      	ldr	r3, [pc, #144]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 8009208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800920a:	4b24      	ldr	r3, [pc, #144]	@ (800929c <RCCEx_PLL3_Config+0x160>)
 800920c:	4013      	ands	r3, r2
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	69d2      	ldr	r2, [r2, #28]
 8009212:	00d2      	lsls	r2, r2, #3
 8009214:	4920      	ldr	r1, [pc, #128]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 8009216:	4313      	orrs	r3, r2
 8009218:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800921a:	4b1f      	ldr	r3, [pc, #124]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 800921c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800921e:	4a1e      	ldr	r2, [pc, #120]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 8009220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009224:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d106      	bne.n	800923a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800922c:	4b1a      	ldr	r3, [pc, #104]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 800922e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009230:	4a19      	ldr	r2, [pc, #100]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 8009232:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009238:	e00f      	b.n	800925a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d106      	bne.n	800924e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009240:	4b15      	ldr	r3, [pc, #84]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 8009242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009244:	4a14      	ldr	r2, [pc, #80]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 8009246:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800924a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800924c:	e005      	b.n	800925a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800924e:	4b12      	ldr	r3, [pc, #72]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 8009250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009252:	4a11      	ldr	r2, [pc, #68]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 8009254:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009258:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800925a:	4b0f      	ldr	r3, [pc, #60]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a0e      	ldr	r2, [pc, #56]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 8009260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009266:	f7f9 fa8b 	bl	8002780 <HAL_GetTick>
 800926a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800926c:	e008      	b.n	8009280 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800926e:	f7f9 fa87 	bl	8002780 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	2b02      	cmp	r3, #2
 800927a:	d901      	bls.n	8009280 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e006      	b.n	800928e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009280:	4b05      	ldr	r3, [pc, #20]	@ (8009298 <RCCEx_PLL3_Config+0x15c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0f0      	beq.n	800926e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800928c:	7bfb      	ldrb	r3, [r7, #15]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	58024400 	.word	0x58024400
 800929c:	ffff0007 	.word	0xffff0007

080092a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08a      	sub	sp, #40	@ 0x28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e075      	b.n	800939e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d105      	bne.n	80092ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f7f8 fec7 	bl	8002058 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2204      	movs	r2, #4
 80092ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f868 	bl	80093a8 <HAL_SD_InitCard>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e05d      	b.n	800939e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80092e2:	f107 0308 	add.w	r3, r7, #8
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fdaf 	bl	8009e4c <HAL_SD_GetCardStatus>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e052      	b.n	800939e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80092f8:	7e3b      	ldrb	r3, [r7, #24]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80092fe:	7e7b      	ldrb	r3, [r7, #25]
 8009300:	b2db      	uxtb	r3, r3
 8009302:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009308:	2b01      	cmp	r3, #1
 800930a:	d10a      	bne.n	8009322 <HAL_SD_Init+0x82>
 800930c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930e:	2b00      	cmp	r3, #0
 8009310:	d102      	bne.n	8009318 <HAL_SD_Init+0x78>
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d004      	beq.n	8009322 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800931e:	659a      	str	r2, [r3, #88]	@ 0x58
 8009320:	e00b      	b.n	800933a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009326:	2b01      	cmp	r3, #1
 8009328:	d104      	bne.n	8009334 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009330:	659a      	str	r2, [r3, #88]	@ 0x58
 8009332:	e002      	b.n	800933a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fe6d 	bl	800a020 <HAL_SD_ConfigWideBusOperation>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e026      	b.n	800939e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009350:	f7f9 fa16 	bl	8002780 <HAL_GetTick>
 8009354:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009356:	e011      	b.n	800937c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009358:	f7f9 fa12 	bl	8002780 <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009366:	d109      	bne.n	800937c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800936e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e010      	b.n	800939e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 ff61 	bl	800a244 <HAL_SD_GetCardState>
 8009382:	4603      	mov	r3, r0
 8009384:	2b04      	cmp	r3, #4
 8009386:	d1e7      	bne.n	8009358 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3728      	adds	r7, #40	@ 0x28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
	...

080093a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80093a8:	b590      	push	{r4, r7, lr}
 80093aa:	b08d      	sub	sp, #52	@ 0x34
 80093ac:	af02      	add	r7, sp, #8
 80093ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80093b4:	2300      	movs	r3, #0
 80093b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80093b8:	2300      	movs	r3, #0
 80093ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80093bc:	2300      	movs	r3, #0
 80093be:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80093c0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80093c4:	f04f 0100 	mov.w	r1, #0
 80093c8:	f7fe fd24 	bl	8007e14 <HAL_RCCEx_GetPeriphCLKFreq>
 80093cc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80093e2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e070      	b.n	80094ca <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80093e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ea:	0a1b      	lsrs	r3, r3, #8
 80093ec:	4a39      	ldr	r2, [pc, #228]	@ (80094d4 <HAL_SD_InitCard+0x12c>)
 80093ee:	fba2 2303 	umull	r2, r3, r2, r3
 80093f2:	091b      	lsrs	r3, r3, #4
 80093f4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681c      	ldr	r4, [r3, #0]
 80093fa:	466a      	mov	r2, sp
 80093fc:	f107 0318 	add.w	r3, r7, #24
 8009400:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009404:	e882 0003 	stmia.w	r2, {r0, r1}
 8009408:	f107 030c 	add.w	r3, r7, #12
 800940c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800940e:	4620      	mov	r0, r4
 8009410:	f003 fffe 	bl	800d410 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4618      	mov	r0, r3
 800941a:	f004 f841 	bl	800d4a0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d005      	beq.n	8009430 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800942a:	fbb2 f3f3 	udiv	r3, r2, r3
 800942e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8009430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009432:	2b00      	cmp	r3, #0
 8009434:	d007      	beq.n	8009446 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009436:	4a28      	ldr	r2, [pc, #160]	@ (80094d8 <HAL_SD_InitCard+0x130>)
 8009438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943a:	fbb2 f3f3 	udiv	r3, r2, r3
 800943e:	3301      	adds	r3, #1
 8009440:	4618      	mov	r0, r3
 8009442:	f7f9 f9a9 	bl	8002798 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 ffea 	bl	800a420 <SD_PowerON>
 800944c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00b      	beq.n	800946c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	431a      	orrs	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e02e      	b.n	80094ca <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 ff09 	bl	800a284 <SD_InitCard>
 8009472:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00b      	beq.n	8009492 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	431a      	orrs	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e01b      	b.n	80094ca <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800949a:	4618      	mov	r0, r3
 800949c:	f004 f896 	bl	800d5cc <SDMMC_CmdBlockLength>
 80094a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00f      	beq.n	80094c8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a0b      	ldr	r2, [pc, #44]	@ (80094dc <HAL_SD_InitCard+0x134>)
 80094ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	431a      	orrs	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e000      	b.n	80094ca <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	372c      	adds	r7, #44	@ 0x2c
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd90      	pop	{r4, r7, pc}
 80094d2:	bf00      	nop
 80094d4:	014f8b59 	.word	0x014f8b59
 80094d8:	00012110 	.word	0x00012110
 80094dc:	1fe00fff 	.word	0x1fe00fff

080094e0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08c      	sub	sp, #48	@ 0x30
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
 80094ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d107      	bne.n	8009508 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094fc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e08d      	b.n	8009624 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b01      	cmp	r3, #1
 8009512:	f040 8086 	bne.w	8009622 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800951c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	441a      	add	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009526:	429a      	cmp	r2, r3
 8009528:	d907      	bls.n	800953a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800952e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e074      	b.n	8009624 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2203      	movs	r2, #3
 800953e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2200      	movs	r2, #0
 8009548:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	025a      	lsls	r2, r3, #9
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955c:	2b01      	cmp	r3, #1
 800955e:	d002      	beq.n	8009566 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009562:	025b      	lsls	r3, r3, #9
 8009564:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009566:	f04f 33ff 	mov.w	r3, #4294967295
 800956a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	025b      	lsls	r3, r3, #9
 8009570:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009572:	2390      	movs	r3, #144	@ 0x90
 8009574:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009576:	2302      	movs	r3, #2
 8009578:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800957a:	2300      	movs	r3, #0
 800957c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800957e:	2300      	movs	r3, #0
 8009580:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f107 0210 	add.w	r2, r7, #16
 800958a:	4611      	mov	r1, r2
 800958c:	4618      	mov	r0, r3
 800958e:	f003 fff1 	bl	800d574 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68da      	ldr	r2, [r3, #12]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095a0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2201      	movs	r2, #1
 80095b0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d90a      	bls.n	80095ce <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2282      	movs	r2, #130	@ 0x82
 80095bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095c4:	4618      	mov	r0, r3
 80095c6:	f004 f847 	bl	800d658 <SDMMC_CmdReadMultiBlock>
 80095ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80095cc:	e009      	b.n	80095e2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2281      	movs	r2, #129	@ 0x81
 80095d2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095da:	4618      	mov	r0, r3
 80095dc:	f004 f819 	bl	800d612 <SDMMC_CmdReadSingleBlock>
 80095e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80095e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d012      	beq.n	800960e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a0f      	ldr	r2, [pc, #60]	@ (800962c <HAL_SD_ReadBlocks_DMA+0x14c>)
 80095ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f6:	431a      	orrs	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e00a      	b.n	8009624 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800961c:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	e000      	b.n	8009624 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009622:	2302      	movs	r3, #2
  }
}
 8009624:	4618      	mov	r0, r3
 8009626:	3730      	adds	r7, #48	@ 0x30
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	1fe00fff 	.word	0x1fe00fff

08009630 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b08c      	sub	sp, #48	@ 0x30
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d107      	bne.n	8009658 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800964c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e08d      	b.n	8009774 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b01      	cmp	r3, #1
 8009662:	f040 8086 	bne.w	8009772 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800966c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	441a      	add	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009676:	429a      	cmp	r2, r3
 8009678:	d907      	bls.n	800968a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800967e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e074      	b.n	8009774 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2203      	movs	r2, #3
 800968e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2200      	movs	r2, #0
 8009698:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	025a      	lsls	r2, r3, #9
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d002      	beq.n	80096b6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80096b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b2:	025b      	lsls	r3, r3, #9
 80096b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096b6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ba:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	025b      	lsls	r3, r3, #9
 80096c0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80096c2:	2390      	movs	r3, #144	@ 0x90
 80096c4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80096c6:	2300      	movs	r3, #0
 80096c8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80096ce:	2300      	movs	r3, #0
 80096d0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f107 0210 	add.w	r2, r7, #16
 80096da:	4611      	mov	r1, r2
 80096dc:	4618      	mov	r0, r3
 80096de:	f003 ff49 	bl	800d574 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68da      	ldr	r2, [r3, #12]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096f0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2201      	movs	r2, #1
 8009700:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d90a      	bls.n	800971e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	22a0      	movs	r2, #160	@ 0xa0
 800970c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009714:	4618      	mov	r0, r3
 8009716:	f003 ffe5 	bl	800d6e4 <SDMMC_CmdWriteMultiBlock>
 800971a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800971c:	e009      	b.n	8009732 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2290      	movs	r2, #144	@ 0x90
 8009722:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800972a:	4618      	mov	r0, r3
 800972c:	f003 ffb7 	bl	800d69e <SDMMC_CmdWriteSingleBlock>
 8009730:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009734:	2b00      	cmp	r3, #0
 8009736:	d012      	beq.n	800975e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a0f      	ldr	r2, [pc, #60]	@ (800977c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800973e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009746:	431a      	orrs	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e00a      	b.n	8009774 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800976c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	e000      	b.n	8009774 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009772:	2302      	movs	r3, #2
  }
}
 8009774:	4618      	mov	r0, r3
 8009776:	3730      	adds	r7, #48	@ 0x30
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	1fe00fff 	.word	0x1fe00fff

08009780 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009794:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d008      	beq.n	80097ae <HAL_SD_IRQHandler+0x2e>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f003 0308 	and.w	r3, r3, #8
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d003      	beq.n	80097ae <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f001 f926 	bl	800a9f8 <SD_Read_IT>
 80097ac:	e19a      	b.n	8009ae4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 80ac 	beq.w	8009916 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80097c6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	4b59      	ldr	r3, [pc, #356]	@ (8009938 <HAL_SD_IRQHandler+0x1b8>)
 80097d4:	400b      	ands	r3, r1
 80097d6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80097e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097f6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f003 0308 	and.w	r3, r3, #8
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d038      	beq.n	8009874 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f003 0302 	and.w	r3, r3, #2
 8009808:	2b00      	cmp	r3, #0
 800980a:	d104      	bne.n	8009816 <HAL_SD_IRQHandler+0x96>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f003 0320 	and.w	r3, r3, #32
 8009812:	2b00      	cmp	r3, #0
 8009814:	d011      	beq.n	800983a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4618      	mov	r0, r3
 800981c:	f003 ff86 	bl	800d72c <SDMMC_CmdStopTransfer>
 8009820:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d008      	beq.n	800983a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	431a      	orrs	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f95b 	bl	8009af0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a3f      	ldr	r2, [pc, #252]	@ (800993c <HAL_SD_IRQHandler+0x1bc>)
 8009840:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	d104      	bne.n	8009864 <HAL_SD_IRQHandler+0xe4>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f003 0302 	and.w	r3, r3, #2
 8009860:	2b00      	cmp	r3, #0
 8009862:	d003      	beq.n	800986c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f004 fc31 	bl	800e0cc <HAL_SD_RxCpltCallback>
 800986a:	e13b      	b.n	8009ae4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f004 fc23 	bl	800e0b8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009872:	e137      	b.n	8009ae4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 8132 	beq.w	8009ae4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2200      	movs	r2, #0
 8009886:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2200      	movs	r2, #0
 800988e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2200      	movs	r2, #0
 8009896:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f003 0302 	and.w	r3, r3, #2
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d104      	bne.n	80098ac <HAL_SD_IRQHandler+0x12c>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f003 0320 	and.w	r3, r3, #32
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d011      	beq.n	80098d0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f003 ff3b 	bl	800d72c <SDMMC_CmdStopTransfer>
 80098b6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d008      	beq.n	80098d0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	431a      	orrs	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f910 	bl	8009af0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f003 0310 	and.w	r3, r3, #16
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d104      	bne.n	80098f2 <HAL_SD_IRQHandler+0x172>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f003 0320 	and.w	r3, r3, #32
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f004 fbe0 	bl	800e0b8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d105      	bne.n	800990e <HAL_SD_IRQHandler+0x18e>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f003 0302 	and.w	r3, r3, #2
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 80eb 	beq.w	8009ae4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f004 fbdc 	bl	800e0cc <HAL_SD_RxCpltCallback>
}
 8009914:	e0e6      	b.n	8009ae4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800991c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00d      	beq.n	8009940 <HAL_SD_IRQHandler+0x1c0>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f003 0308 	and.w	r3, r3, #8
 800992a:	2b00      	cmp	r3, #0
 800992c:	d008      	beq.n	8009940 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f001 f8a8 	bl	800aa84 <SD_Write_IT>
 8009934:	e0d6      	b.n	8009ae4 <HAL_SD_IRQHandler+0x364>
 8009936:	bf00      	nop
 8009938:	ffff3ec5 	.word	0xffff3ec5
 800993c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009946:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 809d 	beq.w	8009a8a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009956:	f003 0302 	and.w	r3, r3, #2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d005      	beq.n	800996a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009962:	f043 0202 	orr.w	r2, r3, #2
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009970:	f003 0308 	and.w	r3, r3, #8
 8009974:	2b00      	cmp	r3, #0
 8009976:	d005      	beq.n	8009984 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800997c:	f043 0208 	orr.w	r2, r3, #8
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b00      	cmp	r3, #0
 8009990:	d005      	beq.n	800999e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009996:	f043 0220 	orr.w	r2, r3, #32
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099a4:	f003 0310 	and.w	r3, r3, #16
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d005      	beq.n	80099b8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099b0:	f043 0210 	orr.w	r2, r3, #16
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a4b      	ldr	r2, [pc, #300]	@ (8009aec <HAL_SD_IRQHandler+0x36c>)
 80099be:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80099ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68da      	ldr	r2, [r3, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099de:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68da      	ldr	r2, [r3, #12]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80099fe:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f003 fe91 	bl	800d72c <SDMMC_CmdStopTransfer>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a10:	431a      	orrs	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68da      	ldr	r2, [r3, #12]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a24:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a2e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f003 0308 	and.w	r3, r3, #8
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00a      	beq.n	8009a50 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f851 	bl	8009af0 <HAL_SD_ErrorCallback>
}
 8009a4e:	e049      	b.n	8009ae4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d044      	beq.n	8009ae4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d040      	beq.n	8009ae4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8009a70:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2200      	movs	r2, #0
 8009a78:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f834 	bl	8009af0 <HAL_SD_ErrorCallback>
}
 8009a88:	e02c      	b.n	8009ae4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d025      	beq.n	8009ae4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aa0:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aa8:	f003 0304 	and.w	r3, r3, #4
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10c      	bne.n	8009aca <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f003 0320 	and.w	r3, r3, #32
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f001 f84a 	bl	800ab54 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009ac0:	e010      	b.n	8009ae4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f001 f832 	bl	800ab2c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009ac8:	e00c      	b.n	8009ae4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f003 0320 	and.w	r3, r3, #32
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d003      	beq.n	8009adc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f001 f833 	bl	800ab40 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009ada:	e003      	b.n	8009ae4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f001 f81b 	bl	800ab18 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009ae2:	e7ff      	b.n	8009ae4 <HAL_SD_IRQHandler+0x364>
 8009ae4:	bf00      	nop
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	18000f3a 	.word	0x18000f3a

08009af0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b12:	0f9b      	lsrs	r3, r3, #30
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b1e:	0e9b      	lsrs	r3, r3, #26
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	f003 030f 	and.w	r3, r3, #15
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b30:	0e1b      	lsrs	r3, r3, #24
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	f003 0303 	and.w	r3, r3, #3
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b42:	0c1b      	lsrs	r3, r3, #16
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b4e:	0a1b      	lsrs	r3, r3, #8
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b64:	0d1b      	lsrs	r3, r3, #20
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b70:	0c1b      	lsrs	r3, r3, #16
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	f003 030f 	and.w	r3, r3, #15
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b82:	0bdb      	lsrs	r3, r3, #15
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	b2da      	uxtb	r2, r3
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b94:	0b9b      	lsrs	r3, r3, #14
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ba6:	0b5b      	lsrs	r3, r3, #13
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bb8:	0b1b      	lsrs	r3, r3, #12
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	f003 0301 	and.w	r3, r3, #1
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d163      	bne.n	8009c9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bd8:	009a      	lsls	r2, r3, #2
 8009bda:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009bde:	4013      	ands	r3, r2
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009be4:	0f92      	lsrs	r2, r2, #30
 8009be6:	431a      	orrs	r2, r3
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bf0:	0edb      	lsrs	r3, r3, #27
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	f003 0307 	and.w	r3, r3, #7
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c02:	0e1b      	lsrs	r3, r3, #24
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c14:	0d5b      	lsrs	r3, r3, #21
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	f003 0307 	and.w	r3, r3, #7
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c26:	0c9b      	lsrs	r3, r3, #18
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	f003 0307 	and.w	r3, r3, #7
 8009c2e:	b2da      	uxtb	r2, r3
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c38:	0bdb      	lsrs	r3, r3, #15
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	f003 0307 	and.w	r3, r3, #7
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	7e1b      	ldrb	r3, [r3, #24]
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	f003 0307 	and.w	r3, r3, #7
 8009c5a:	3302      	adds	r3, #2
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009c66:	fb03 f202 	mul.w	r2, r3, r2
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	7a1b      	ldrb	r3, [r3, #8]
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	f003 030f 	and.w	r3, r3, #15
 8009c78:	2201      	movs	r2, #1
 8009c7a:	409a      	lsls	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009c88:	0a52      	lsrs	r2, r2, #9
 8009c8a:	fb03 f202 	mul.w	r2, r3, r2
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c98:	655a      	str	r2, [r3, #84]	@ 0x54
 8009c9a:	e031      	b.n	8009d00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d11d      	bne.n	8009ce0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ca8:	041b      	lsls	r3, r3, #16
 8009caa:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cb2:	0c1b      	lsrs	r3, r3, #16
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	029a      	lsls	r2, r3, #10
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cd4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	655a      	str	r2, [r3, #84]	@ 0x54
 8009cde:	e00f      	b.n	8009d00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a58      	ldr	r2, [pc, #352]	@ (8009e48 <HAL_SD_GetCardCSD+0x344>)
 8009ce6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e09d      	b.n	8009e3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d04:	0b9b      	lsrs	r3, r3, #14
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d16:	09db      	lsrs	r3, r3, #7
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d1e:	b2da      	uxtb	r2, r3
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d38:	0fdb      	lsrs	r3, r3, #31
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d44:	0f5b      	lsrs	r3, r3, #29
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	f003 0303 	and.w	r3, r3, #3
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d56:	0e9b      	lsrs	r3, r3, #26
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	f003 0307 	and.w	r3, r3, #7
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d68:	0d9b      	lsrs	r3, r3, #22
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	f003 030f 	and.w	r3, r3, #15
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d7a:	0d5b      	lsrs	r3, r3, #21
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d96:	0c1b      	lsrs	r3, r3, #16
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009daa:	0bdb      	lsrs	r3, r3, #15
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dbe:	0b9b      	lsrs	r3, r3, #14
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dd2:	0b5b      	lsrs	r3, r3, #13
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009de6:	0b1b      	lsrs	r3, r3, #12
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dfa:	0a9b      	lsrs	r3, r3, #10
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	f003 0303 	and.w	r3, r3, #3
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e0e:	0a1b      	lsrs	r3, r3, #8
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	f003 0303 	and.w	r3, r3, #3
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e22:	085b      	lsrs	r3, r3, #1
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	1fe00fff 	.word	0x1fe00fff

08009e4c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b094      	sub	sp, #80	@ 0x50
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b03      	cmp	r3, #3
 8009e66:	d101      	bne.n	8009e6c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e0a7      	b.n	8009fbc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009e6c:	f107 0308 	add.w	r3, r7, #8
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fb62 	bl	800a53c <SD_SendSDStatus>
 8009e78:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d011      	beq.n	8009ea4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a4f      	ldr	r2, [pc, #316]	@ (8009fc4 <HAL_SD_GetCardStatus+0x178>)
 8009e86:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e8e:	431a      	orrs	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8009ea2:	e070      	b.n	8009f86 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	099b      	lsrs	r3, r3, #6
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	f003 0303 	and.w	r3, r3, #3
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	095b      	lsrs	r3, r3, #5
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	0a1b      	lsrs	r3, r3, #8
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	0e1b      	lsrs	r3, r3, #24
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	061a      	lsls	r2, r3, #24
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	021b      	lsls	r3, r3, #8
 8009ee6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009eea:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	0a1b      	lsrs	r3, r3, #8
 8009ef0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009ef4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	0e1b      	lsrs	r3, r3, #24
 8009efa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	0a1b      	lsrs	r3, r3, #8
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	0d1b      	lsrs	r3, r3, #20
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	f003 030f 	and.w	r3, r3, #15
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	0c1b      	lsrs	r3, r3, #16
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	4313      	orrs	r3, r2
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	0a9b      	lsrs	r3, r3, #10
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	0a1b      	lsrs	r3, r3, #8
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	f003 0303 	and.w	r3, r3, #3
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	091b      	lsrs	r3, r3, #4
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	f003 030f 	and.w	r3, r3, #15
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	f003 030f 	and.w	r3, r3, #15
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	0e1b      	lsrs	r3, r3, #24
 8009f80:	b2da      	uxtb	r2, r3
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f003 fb1c 	bl	800d5cc <SDMMC_CmdBlockLength>
 8009f94:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00d      	beq.n	8009fb8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a08      	ldr	r2, [pc, #32]	@ (8009fc4 <HAL_SD_GetCardStatus+0x178>)
 8009fa2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fa8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8009fb8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3750      	adds	r7, #80	@ 0x50
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	1fe00fff 	.word	0x1fe00fff

08009fc8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a020:	b590      	push	{r4, r7, lr}
 800a022:	b08d      	sub	sp, #52	@ 0x34
 800a024:	af02      	add	r7, sp, #8
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2203      	movs	r2, #3
 800a034:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	d02e      	beq.n	800a09e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a046:	d106      	bne.n	800a056 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a04c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	635a      	str	r2, [r3, #52]	@ 0x34
 800a054:	e029      	b.n	800a0aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a05c:	d10a      	bne.n	800a074 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 fb64 	bl	800a72c <SD_WideBus_Enable>
 800a064:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	431a      	orrs	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	635a      	str	r2, [r3, #52]	@ 0x34
 800a072:	e01a      	b.n	800a0aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10a      	bne.n	800a090 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fba1 	bl	800a7c2 <SD_WideBus_Disable>
 800a080:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	431a      	orrs	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a08e:	e00c      	b.n	800a0aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a094:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	635a      	str	r2, [r3, #52]	@ 0x34
 800a09c:	e005      	b.n	800a0aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0a2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d007      	beq.n	800a0c2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a5f      	ldr	r2, [pc, #380]	@ (800a234 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a0b8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a0c0:	e096      	b.n	800a1f0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a0c2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a0c6:	f04f 0100 	mov.w	r1, #0
 800a0ca:	f7fd fea3 	bl	8007e14 <HAL_RCCEx_GetPeriphCLKFreq>
 800a0ce:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f000 8083 	beq.w	800a1de <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	695a      	ldr	r2, [r3, #20]
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	4950      	ldr	r1, [pc, #320]	@ (800a238 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a0f6:	fba1 1303 	umull	r1, r3, r1, r3
 800a0fa:	0e1b      	lsrs	r3, r3, #24
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d303      	bcc.n	800a108 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	695b      	ldr	r3, [r3, #20]
 800a104:	61bb      	str	r3, [r7, #24]
 800a106:	e05a      	b.n	800a1be <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a10c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a110:	d103      	bne.n	800a11a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	61bb      	str	r3, [r7, #24]
 800a118:	e051      	b.n	800a1be <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a11e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a122:	d126      	bne.n	800a172 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10e      	bne.n	800a14a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	4a43      	ldr	r2, [pc, #268]	@ (800a23c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d906      	bls.n	800a142 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	4a40      	ldr	r2, [pc, #256]	@ (800a238 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a138:	fba2 2303 	umull	r2, r3, r2, r3
 800a13c:	0e5b      	lsrs	r3, r3, #25
 800a13e:	61bb      	str	r3, [r7, #24]
 800a140:	e03d      	b.n	800a1be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	695b      	ldr	r3, [r3, #20]
 800a146:	61bb      	str	r3, [r7, #24]
 800a148:	e039      	b.n	800a1be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	005b      	lsls	r3, r3, #1
 800a150:	69fa      	ldr	r2, [r7, #28]
 800a152:	fbb2 f3f3 	udiv	r3, r2, r3
 800a156:	4a39      	ldr	r2, [pc, #228]	@ (800a23c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d906      	bls.n	800a16a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	4a36      	ldr	r2, [pc, #216]	@ (800a238 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a160:	fba2 2303 	umull	r2, r3, r2, r3
 800a164:	0e5b      	lsrs	r3, r3, #25
 800a166:	61bb      	str	r3, [r7, #24]
 800a168:	e029      	b.n	800a1be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	61bb      	str	r3, [r7, #24]
 800a170:	e025      	b.n	800a1be <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	695b      	ldr	r3, [r3, #20]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10e      	bne.n	800a198 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	4a30      	ldr	r2, [pc, #192]	@ (800a240 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d906      	bls.n	800a190 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	4a2c      	ldr	r2, [pc, #176]	@ (800a238 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a186:	fba2 2303 	umull	r2, r3, r2, r3
 800a18a:	0e1b      	lsrs	r3, r3, #24
 800a18c:	61bb      	str	r3, [r7, #24]
 800a18e:	e016      	b.n	800a1be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	61bb      	str	r3, [r7, #24]
 800a196:	e012      	b.n	800a1be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	695b      	ldr	r3, [r3, #20]
 800a19c:	005b      	lsls	r3, r3, #1
 800a19e:	69fa      	ldr	r2, [r7, #28]
 800a1a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1a4:	4a26      	ldr	r2, [pc, #152]	@ (800a240 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d906      	bls.n	800a1b8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	4a22      	ldr	r2, [pc, #136]	@ (800a238 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b2:	0e1b      	lsrs	r3, r3, #24
 800a1b4:	61bb      	str	r3, [r7, #24]
 800a1b6:	e002      	b.n	800a1be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681c      	ldr	r4, [r3, #0]
 800a1c2:	466a      	mov	r2, sp
 800a1c4:	f107 0314 	add.w	r3, r7, #20
 800a1c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a1cc:	e882 0003 	stmia.w	r2, {r0, r1}
 800a1d0:	f107 0308 	add.w	r3, r7, #8
 800a1d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f003 f91a 	bl	800d410 <SDMMC_Init>
 800a1dc:	e008      	b.n	800a1f0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f003 f9e7 	bl	800d5cc <SDMMC_CmdBlockLength>
 800a1fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00c      	beq.n	800a220 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a0a      	ldr	r2, [pc, #40]	@ (800a234 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a20c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a212:	6a3b      	ldr	r3, [r7, #32]
 800a214:	431a      	orrs	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800a228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	372c      	adds	r7, #44	@ 0x2c
 800a230:	46bd      	mov	sp, r7
 800a232:	bd90      	pop	{r4, r7, pc}
 800a234:	1fe00fff 	.word	0x1fe00fff
 800a238:	55e63b89 	.word	0x55e63b89
 800a23c:	02faf080 	.word	0x02faf080
 800a240:	017d7840 	.word	0x017d7840

0800a244 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a24c:	2300      	movs	r3, #0
 800a24e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a250:	f107 030c 	add.w	r3, r7, #12
 800a254:	4619      	mov	r1, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fa40 	bl	800a6dc <SD_SendStatus>
 800a25c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d005      	beq.n	800a270 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	431a      	orrs	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	0a5b      	lsrs	r3, r3, #9
 800a274:	f003 030f 	and.w	r3, r3, #15
 800a278:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a27a:	693b      	ldr	r3, [r7, #16]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b090      	sub	sp, #64	@ 0x40
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a28c:	2300      	movs	r3, #0
 800a28e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a290:	f7f8 fa76 	bl	8002780 <HAL_GetTick>
 800a294:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4618      	mov	r0, r3
 800a29c:	f003 f911 	bl	800d4c2 <SDMMC_GetPowerState>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d102      	bne.n	800a2ac <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a2a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a2aa:	e0b5      	b.n	800a418 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	d02e      	beq.n	800a312 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f003 fb5c 	bl	800d976 <SDMMC_CmdSendCID>
 800a2be:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <SD_InitCard+0x46>
    {
      return errorstate;
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c8:	e0a6      	b.n	800a418 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f003 f93c 	bl	800d54e <SDMMC_GetResponse>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2104      	movs	r1, #4
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f003 f933 	bl	800d54e <SDMMC_GetResponse>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2108      	movs	r1, #8
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f003 f92a 	bl	800d54e <SDMMC_GetResponse>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	210c      	movs	r1, #12
 800a306:	4618      	mov	r0, r3
 800a308:	f003 f921 	bl	800d54e <SDMMC_GetResponse>
 800a30c:	4602      	mov	r2, r0
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a316:	2b03      	cmp	r3, #3
 800a318:	d01d      	beq.n	800a356 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a31a:	e019      	b.n	800a350 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f107 020a 	add.w	r2, r7, #10
 800a324:	4611      	mov	r1, r2
 800a326:	4618      	mov	r0, r3
 800a328:	f003 fb64 	bl	800d9f4 <SDMMC_CmdSetRelAdd>
 800a32c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a330:	2b00      	cmp	r3, #0
 800a332:	d001      	beq.n	800a338 <SD_InitCard+0xb4>
      {
        return errorstate;
 800a334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a336:	e06f      	b.n	800a418 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a338:	f7f8 fa22 	bl	8002780 <HAL_GetTick>
 800a33c:	4602      	mov	r2, r0
 800a33e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	f241 3287 	movw	r2, #4999	@ 0x1387
 800a346:	4293      	cmp	r3, r2
 800a348:	d902      	bls.n	800a350 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a34a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a34e:	e063      	b.n	800a418 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a350:	897b      	ldrh	r3, [r7, #10]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d0e2      	beq.n	800a31c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d036      	beq.n	800a3cc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a35e:	897b      	ldrh	r3, [r7, #10]
 800a360:	461a      	mov	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a36e:	041b      	lsls	r3, r3, #16
 800a370:	4619      	mov	r1, r3
 800a372:	4610      	mov	r0, r2
 800a374:	f003 fb1e 	bl	800d9b4 <SDMMC_CmdSendCSD>
 800a378:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <SD_InitCard+0x100>
    {
      return errorstate;
 800a380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a382:	e049      	b.n	800a418 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2100      	movs	r1, #0
 800a38a:	4618      	mov	r0, r3
 800a38c:	f003 f8df 	bl	800d54e <SDMMC_GetResponse>
 800a390:	4602      	mov	r2, r0
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2104      	movs	r1, #4
 800a39c:	4618      	mov	r0, r3
 800a39e:	f003 f8d6 	bl	800d54e <SDMMC_GetResponse>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2108      	movs	r1, #8
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f003 f8cd 	bl	800d54e <SDMMC_GetResponse>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	210c      	movs	r1, #12
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f003 f8c4 	bl	800d54e <SDMMC_GetResponse>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2104      	movs	r1, #4
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f003 f8bb 	bl	800d54e <SDMMC_GetResponse>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	0d1a      	lsrs	r2, r3, #20
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a3e0:	f107 030c 	add.w	r3, r7, #12
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f7ff fb8c 	bl	8009b04 <HAL_SD_GetCardCSD>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a3f6:	e00f      	b.n	800a418 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a400:	041b      	lsls	r3, r3, #16
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f003 f9cd 	bl	800d7a4 <SDMMC_CmdSelDesel>
 800a40a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <SD_InitCard+0x192>
  {
    return errorstate;
 800a412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a414:	e000      	b.n	800a418 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3740      	adds	r7, #64	@ 0x40
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a428:	2300      	movs	r3, #0
 800a42a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a42c:	2300      	movs	r3, #0
 800a42e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a430:	2300      	movs	r3, #0
 800a432:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4618      	mov	r0, r3
 800a43a:	f003 f9d6 	bl	800d7ea <SDMMC_CmdGoIdleState>
 800a43e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	e072      	b.n	800a530 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4618      	mov	r0, r3
 800a450:	f003 f9e9 	bl	800d826 <SDMMC_CmdOperCond>
 800a454:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a45c:	d10d      	bne.n	800a47a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4618      	mov	r0, r3
 800a46a:	f003 f9be 	bl	800d7ea <SDMMC_CmdGoIdleState>
 800a46e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d004      	beq.n	800a480 <SD_PowerON+0x60>
    {
      return errorstate;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	e05a      	b.n	800a530 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a484:	2b01      	cmp	r3, #1
 800a486:	d137      	bne.n	800a4f8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2100      	movs	r1, #0
 800a48e:	4618      	mov	r0, r3
 800a490:	f003 f9e9 	bl	800d866 <SDMMC_CmdAppCommand>
 800a494:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d02d      	beq.n	800a4f8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a49c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a4a0:	e046      	b.n	800a530 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f003 f9dc 	bl	800d866 <SDMMC_CmdAppCommand>
 800a4ae:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d001      	beq.n	800a4ba <SD_PowerON+0x9a>
    {
      return errorstate;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	e03a      	b.n	800a530 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	491e      	ldr	r1, [pc, #120]	@ (800a538 <SD_PowerON+0x118>)
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f003 f9f3 	bl	800d8ac <SDMMC_CmdAppOperCommand>
 800a4c6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4ce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a4d2:	e02d      	b.n	800a530 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2100      	movs	r1, #0
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f003 f837 	bl	800d54e <SDMMC_GetResponse>
 800a4e0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	0fdb      	lsrs	r3, r3, #31
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d101      	bne.n	800a4ee <SD_PowerON+0xce>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e000      	b.n	800a4f0 <SD_PowerON+0xd0>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	613b      	str	r3, [r7, #16]

    count++;
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d802      	bhi.n	800a508 <SD_PowerON+0xe8>
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d0cc      	beq.n	800a4a2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a50e:	4293      	cmp	r3, r2
 800a510:	d902      	bls.n	800a518 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a512:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a516:	e00b      	b.n	800a530 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	c1100000 	.word	0xc1100000

0800a53c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b08c      	sub	sp, #48	@ 0x30
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a546:	f7f8 f91b 	bl	8002780 <HAL_GetTick>
 800a54a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	2100      	movs	r1, #0
 800a556:	4618      	mov	r0, r3
 800a558:	f002 fff9 	bl	800d54e <SDMMC_GetResponse>
 800a55c:	4603      	mov	r3, r0
 800a55e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a562:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a566:	d102      	bne.n	800a56e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a568:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a56c:	e0b0      	b.n	800a6d0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2140      	movs	r1, #64	@ 0x40
 800a574:	4618      	mov	r0, r3
 800a576:	f003 f829 	bl	800d5cc <SDMMC_CmdBlockLength>
 800a57a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a57c:	6a3b      	ldr	r3, [r7, #32]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d005      	beq.n	800a58e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a58a:	6a3b      	ldr	r3, [r7, #32]
 800a58c:	e0a0      	b.n	800a6d0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a596:	041b      	lsls	r3, r3, #16
 800a598:	4619      	mov	r1, r3
 800a59a:	4610      	mov	r0, r2
 800a59c:	f003 f963 	bl	800d866 <SDMMC_CmdAppCommand>
 800a5a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a5a2:	6a3b      	ldr	r3, [r7, #32]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d005      	beq.n	800a5b4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a5b0:	6a3b      	ldr	r3, [r7, #32]
 800a5b2:	e08d      	b.n	800a6d0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a5ba:	2340      	movs	r3, #64	@ 0x40
 800a5bc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a5be:	2360      	movs	r3, #96	@ 0x60
 800a5c0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f107 0208 	add.w	r2, r7, #8
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f002 ffcb 	bl	800d574 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f003 fa4b 	bl	800da7e <SDMMC_CmdStatusRegister>
 800a5e8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a5ea:	6a3b      	ldr	r3, [r7, #32]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d02b      	beq.n	800a648 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	e069      	b.n	800a6d0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a602:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d013      	beq.n	800a632 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800a60a:	2300      	movs	r3, #0
 800a60c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a60e:	e00d      	b.n	800a62c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4618      	mov	r0, r3
 800a616:	f002 ff25 	bl	800d464 <SDMMC_ReadFIFO>
 800a61a:	4602      	mov	r2, r0
 800a61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61e:	601a      	str	r2, [r3, #0]
        pData++;
 800a620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a622:	3304      	adds	r3, #4
 800a624:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800a626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a628:	3301      	adds	r3, #1
 800a62a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a62e:	2b07      	cmp	r3, #7
 800a630:	d9ee      	bls.n	800a610 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a632:	f7f8 f8a5 	bl	8002780 <HAL_GetTick>
 800a636:	4602      	mov	r2, r0
 800a638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a640:	d102      	bne.n	800a648 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a642:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a646:	e043      	b.n	800a6d0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a64e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800a652:	2b00      	cmp	r3, #0
 800a654:	d0d2      	beq.n	800a5fc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a65c:	f003 0308 	and.w	r3, r3, #8
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a664:	2308      	movs	r3, #8
 800a666:	e033      	b.n	800a6d0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a66e:	f003 0302 	and.w	r3, r3, #2
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a676:	2302      	movs	r3, #2
 800a678:	e02a      	b.n	800a6d0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a680:	f003 0320 	and.w	r3, r3, #32
 800a684:	2b00      	cmp	r3, #0
 800a686:	d017      	beq.n	800a6b8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a688:	2320      	movs	r3, #32
 800a68a:	e021      	b.n	800a6d0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4618      	mov	r0, r3
 800a692:	f002 fee7 	bl	800d464 <SDMMC_ReadFIFO>
 800a696:	4602      	mov	r2, r0
 800a698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69a:	601a      	str	r2, [r3, #0]
    pData++;
 800a69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69e:	3304      	adds	r3, #4
 800a6a0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a6a2:	f7f8 f86d 	bl	8002780 <HAL_GetTick>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b0:	d102      	bne.n	800a6b8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a6b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a6b6:	e00b      	b.n	800a6d0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1e2      	bne.n	800a68c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a03      	ldr	r2, [pc, #12]	@ (800a6d8 <SD_SendSDStatus+0x19c>)
 800a6cc:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3730      	adds	r7, #48	@ 0x30
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	18000f3a 	.word	0x18000f3a

0800a6dc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d102      	bne.n	800a6f2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a6ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a6f0:	e018      	b.n	800a724 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6fa:	041b      	lsls	r3, r3, #16
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	4610      	mov	r0, r2
 800a700:	f003 f99a 	bl	800da38 <SDMMC_CmdSendStatus>
 800a704:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	e009      	b.n	800a724 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2100      	movs	r1, #0
 800a716:	4618      	mov	r0, r3
 800a718:	f002 ff19 	bl	800d54e <SDMMC_GetResponse>
 800a71c:	4602      	mov	r2, r0
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a734:	2300      	movs	r3, #0
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	2300      	movs	r3, #0
 800a73a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2100      	movs	r1, #0
 800a742:	4618      	mov	r0, r3
 800a744:	f002 ff03 	bl	800d54e <SDMMC_GetResponse>
 800a748:	4603      	mov	r3, r0
 800a74a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a74e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a752:	d102      	bne.n	800a75a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a754:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a758:	e02f      	b.n	800a7ba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a75a:	f107 030c 	add.w	r3, r7, #12
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f879 	bl	800a858 <SD_FindSCR>
 800a766:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d001      	beq.n	800a772 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	e023      	b.n	800a7ba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d01c      	beq.n	800a7b6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a784:	041b      	lsls	r3, r3, #16
 800a786:	4619      	mov	r1, r3
 800a788:	4610      	mov	r0, r2
 800a78a:	f003 f86c 	bl	800d866 <SDMMC_CmdAppCommand>
 800a78e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	e00f      	b.n	800a7ba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2102      	movs	r1, #2
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f003 f8a3 	bl	800d8ec <SDMMC_CmdBusWidth>
 800a7a6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d001      	beq.n	800a7b2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	e003      	b.n	800a7ba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	e001      	b.n	800a7ba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a7b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3718      	adds	r7, #24
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b086      	sub	sp, #24
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	60fb      	str	r3, [r7, #12]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f002 feb8 	bl	800d54e <SDMMC_GetResponse>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7e8:	d102      	bne.n	800a7f0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a7ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a7ee:	e02f      	b.n	800a850 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a7f0:	f107 030c 	add.w	r3, r7, #12
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f82e 	bl	800a858 <SD_FindSCR>
 800a7fc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	e023      	b.n	800a850 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d01c      	beq.n	800a84c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a81a:	041b      	lsls	r3, r3, #16
 800a81c:	4619      	mov	r1, r3
 800a81e:	4610      	mov	r0, r2
 800a820:	f003 f821 	bl	800d866 <SDMMC_CmdAppCommand>
 800a824:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	e00f      	b.n	800a850 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2100      	movs	r1, #0
 800a836:	4618      	mov	r0, r3
 800a838:	f003 f858 	bl	800d8ec <SDMMC_CmdBusWidth>
 800a83c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	e003      	b.n	800a850 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a848:	2300      	movs	r3, #0
 800a84a:	e001      	b.n	800a850 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a84c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a850:	4618      	mov	r0, r3
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08e      	sub	sp, #56	@ 0x38
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a862:	f7f7 ff8d 	bl	8002780 <HAL_GetTick>
 800a866:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a868:	2300      	movs	r3, #0
 800a86a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a86c:	2300      	movs	r3, #0
 800a86e:	60bb      	str	r3, [r7, #8]
 800a870:	2300      	movs	r3, #0
 800a872:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2108      	movs	r1, #8
 800a87e:	4618      	mov	r0, r3
 800a880:	f002 fea4 	bl	800d5cc <SDMMC_CmdBlockLength>
 800a884:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88e:	e0ad      	b.n	800a9ec <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a898:	041b      	lsls	r3, r3, #16
 800a89a:	4619      	mov	r1, r3
 800a89c:	4610      	mov	r0, r2
 800a89e:	f002 ffe2 	bl	800d866 <SDMMC_CmdAppCommand>
 800a8a2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <SD_FindSCR+0x56>
  {
    return errorstate;
 800a8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ac:	e09e      	b.n	800a9ec <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a8b4:	2308      	movs	r3, #8
 800a8b6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a8b8:	2330      	movs	r3, #48	@ 0x30
 800a8ba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a8bc:	2302      	movs	r3, #2
 800a8be:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f107 0210 	add.w	r2, r7, #16
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f002 fe4e 	bl	800d574 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f003 f828 	bl	800d932 <SDMMC_CmdSendSCR>
 800a8e2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d027      	beq.n	800a93a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ec:	e07e      	b.n	800a9ec <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d113      	bne.n	800a924 <SD_FindSCR+0xcc>
 800a8fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d110      	bne.n	800a924 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4618      	mov	r0, r3
 800a908:	f002 fdac 	bl	800d464 <SDMMC_ReadFIFO>
 800a90c:	4603      	mov	r3, r0
 800a90e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4618      	mov	r0, r3
 800a916:	f002 fda5 	bl	800d464 <SDMMC_ReadFIFO>
 800a91a:	4603      	mov	r3, r0
 800a91c:	60fb      	str	r3, [r7, #12]
      index++;
 800a91e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a920:	3301      	adds	r3, #1
 800a922:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a924:	f7f7 ff2c 	bl	8002780 <HAL_GetTick>
 800a928:	4602      	mov	r2, r0
 800a92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a932:	d102      	bne.n	800a93a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a934:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a938:	e058      	b.n	800a9ec <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a940:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a944:	4013      	ands	r3, r2
 800a946:	2b00      	cmp	r3, #0
 800a948:	d0d1      	beq.n	800a8ee <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a950:	f003 0308 	and.w	r3, r3, #8
 800a954:	2b00      	cmp	r3, #0
 800a956:	d005      	beq.n	800a964 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2208      	movs	r2, #8
 800a95e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a960:	2308      	movs	r3, #8
 800a962:	e043      	b.n	800a9ec <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a96a:	f003 0302 	and.w	r3, r3, #2
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d005      	beq.n	800a97e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2202      	movs	r2, #2
 800a978:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a97a:	2302      	movs	r3, #2
 800a97c:	e036      	b.n	800a9ec <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a984:	f003 0320 	and.w	r3, r3, #32
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d005      	beq.n	800a998 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2220      	movs	r2, #32
 800a992:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a994:	2320      	movs	r3, #32
 800a996:	e029      	b.n	800a9ec <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a15      	ldr	r2, [pc, #84]	@ (800a9f4 <SD_FindSCR+0x19c>)
 800a99e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	061a      	lsls	r2, r3, #24
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	021b      	lsls	r3, r3, #8
 800a9a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a9ac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	0a1b      	lsrs	r3, r3, #8
 800a9b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a9b6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	0e1b      	lsrs	r3, r3, #24
 800a9bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c0:	601a      	str	r2, [r3, #0]
    scr++;
 800a9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	061a      	lsls	r2, r3, #24
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	021b      	lsls	r3, r3, #8
 800a9d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a9d4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	0a1b      	lsrs	r3, r3, #8
 800a9da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a9de:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	0e1b      	lsrs	r3, r3, #24
 800a9e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3738      	adds	r7, #56	@ 0x38
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	18000f3a 	.word	0x18000f3a

0800a9f8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa04:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0a:	2b1f      	cmp	r3, #31
 800aa0c:	d936      	bls.n	800aa7c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800aa0e:	2300      	movs	r3, #0
 800aa10:	617b      	str	r3, [r7, #20]
 800aa12:	e027      	b.n	800aa64 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f002 fd23 	bl	800d464 <SDMMC_ReadFIFO>
 800aa1e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	701a      	strb	r2, [r3, #0]
      tmp++;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	0a1b      	lsrs	r3, r3, #8
 800aa32:	b2da      	uxtb	r2, r3
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	701a      	strb	r2, [r3, #0]
      tmp++;
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	0c1b      	lsrs	r3, r3, #16
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	701a      	strb	r2, [r3, #0]
      tmp++;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	0e1b      	lsrs	r3, r3, #24
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	701a      	strb	r2, [r3, #0]
      tmp++;
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	3301      	adds	r3, #1
 800aa62:	617b      	str	r3, [r7, #20]
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	2b07      	cmp	r3, #7
 800aa68:	d9d4      	bls.n	800aa14 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa74:	f1a3 0220 	sub.w	r2, r3, #32
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800aa7c:	bf00      	nop
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	2b1f      	cmp	r3, #31
 800aa98:	d93a      	bls.n	800ab10 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	617b      	str	r3, [r7, #20]
 800aa9e:	e02b      	b.n	800aaf8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	021a      	lsls	r2, r3, #8
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	3301      	adds	r3, #1
 800aabc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	041a      	lsls	r2, r3, #16
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	3301      	adds	r3, #1
 800aace:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	061a      	lsls	r2, r3, #24
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	4313      	orrs	r3, r2
 800aada:	60fb      	str	r3, [r7, #12]
      tmp++;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	3301      	adds	r3, #1
 800aae0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f107 020c 	add.w	r2, r7, #12
 800aaea:	4611      	mov	r1, r2
 800aaec:	4618      	mov	r0, r3
 800aaee:	f002 fcc6 	bl	800d47e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	617b      	str	r3, [r7, #20]
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	2b07      	cmp	r3, #7
 800aafc:	d9d0      	bls.n	800aaa0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a1b      	ldr	r3, [r3, #32]
 800ab08:	f1a3 0220 	sub.w	r2, r3, #32
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	621a      	str	r2, [r3, #32]
  }
}
 800ab10:	bf00      	nop
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ab20:	bf00      	nop
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ab34:	bf00      	nop
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ab48:	bf00      	nop
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d101      	bne.n	800ab7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	e049      	b.n	800ac0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d106      	bne.n	800ab94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7f7 faf8 	bl	8002184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2202      	movs	r2, #2
 800ab98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3304      	adds	r3, #4
 800aba4:	4619      	mov	r1, r3
 800aba6:	4610      	mov	r0, r2
 800aba8:	f000 fc58 	bl	800b45c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2201      	movs	r2, #1
 800abf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
	...

0800ac18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d001      	beq.n	800ac30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e05e      	b.n	800acee <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2202      	movs	r2, #2
 800ac34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68da      	ldr	r2, [r3, #12]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f042 0201 	orr.w	r2, r2, #1
 800ac46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a2b      	ldr	r2, [pc, #172]	@ (800acfc <HAL_TIM_Base_Start_IT+0xe4>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d02c      	beq.n	800acac <HAL_TIM_Base_Start_IT+0x94>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac5a:	d027      	beq.n	800acac <HAL_TIM_Base_Start_IT+0x94>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a27      	ldr	r2, [pc, #156]	@ (800ad00 <HAL_TIM_Base_Start_IT+0xe8>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d022      	beq.n	800acac <HAL_TIM_Base_Start_IT+0x94>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a26      	ldr	r2, [pc, #152]	@ (800ad04 <HAL_TIM_Base_Start_IT+0xec>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d01d      	beq.n	800acac <HAL_TIM_Base_Start_IT+0x94>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a24      	ldr	r2, [pc, #144]	@ (800ad08 <HAL_TIM_Base_Start_IT+0xf0>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d018      	beq.n	800acac <HAL_TIM_Base_Start_IT+0x94>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a23      	ldr	r2, [pc, #140]	@ (800ad0c <HAL_TIM_Base_Start_IT+0xf4>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d013      	beq.n	800acac <HAL_TIM_Base_Start_IT+0x94>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a21      	ldr	r2, [pc, #132]	@ (800ad10 <HAL_TIM_Base_Start_IT+0xf8>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d00e      	beq.n	800acac <HAL_TIM_Base_Start_IT+0x94>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a20      	ldr	r2, [pc, #128]	@ (800ad14 <HAL_TIM_Base_Start_IT+0xfc>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d009      	beq.n	800acac <HAL_TIM_Base_Start_IT+0x94>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a1e      	ldr	r2, [pc, #120]	@ (800ad18 <HAL_TIM_Base_Start_IT+0x100>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d004      	beq.n	800acac <HAL_TIM_Base_Start_IT+0x94>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a1d      	ldr	r2, [pc, #116]	@ (800ad1c <HAL_TIM_Base_Start_IT+0x104>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d115      	bne.n	800acd8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	689a      	ldr	r2, [r3, #8]
 800acb2:	4b1b      	ldr	r3, [pc, #108]	@ (800ad20 <HAL_TIM_Base_Start_IT+0x108>)
 800acb4:	4013      	ands	r3, r2
 800acb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b06      	cmp	r3, #6
 800acbc:	d015      	beq.n	800acea <HAL_TIM_Base_Start_IT+0xd2>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acc4:	d011      	beq.n	800acea <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f042 0201 	orr.w	r2, r2, #1
 800acd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acd6:	e008      	b.n	800acea <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f042 0201 	orr.w	r2, r2, #1
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	e000      	b.n	800acec <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	40010000 	.word	0x40010000
 800ad00:	40000400 	.word	0x40000400
 800ad04:	40000800 	.word	0x40000800
 800ad08:	40000c00 	.word	0x40000c00
 800ad0c:	40010400 	.word	0x40010400
 800ad10:	40001800 	.word	0x40001800
 800ad14:	40014000 	.word	0x40014000
 800ad18:	4000e000 	.word	0x4000e000
 800ad1c:	4000e400 	.word	0x4000e400
 800ad20:	00010007 	.word	0x00010007

0800ad24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d101      	bne.n	800ad36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e049      	b.n	800adca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d106      	bne.n	800ad50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f841 	bl	800add2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2202      	movs	r2, #2
 800ad54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	4619      	mov	r1, r3
 800ad62:	4610      	mov	r0, r2
 800ad64:	f000 fb7a 	bl	800b45c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800add2:	b480      	push	{r7}
 800add4:	b083      	sub	sp, #12
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800adda:	bf00      	nop
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f003 0302 	and.w	r3, r3, #2
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d020      	beq.n	800ae4a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f003 0302 	and.w	r3, r3, #2
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d01b      	beq.n	800ae4a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f06f 0202 	mvn.w	r2, #2
 800ae1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	f003 0303 	and.w	r3, r3, #3
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 faf5 	bl	800b420 <HAL_TIM_IC_CaptureCallback>
 800ae36:	e005      	b.n	800ae44 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fae7 	bl	800b40c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 faf8 	bl	800b434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	f003 0304 	and.w	r3, r3, #4
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d020      	beq.n	800ae96 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f003 0304 	and.w	r3, r3, #4
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d01b      	beq.n	800ae96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f06f 0204 	mvn.w	r2, #4
 800ae66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d003      	beq.n	800ae84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 facf 	bl	800b420 <HAL_TIM_IC_CaptureCallback>
 800ae82:	e005      	b.n	800ae90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fac1 	bl	800b40c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 fad2 	bl	800b434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f003 0308 	and.w	r3, r3, #8
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d020      	beq.n	800aee2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f003 0308 	and.w	r3, r3, #8
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d01b      	beq.n	800aee2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f06f 0208 	mvn.w	r2, #8
 800aeb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2204      	movs	r2, #4
 800aeb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	69db      	ldr	r3, [r3, #28]
 800aec0:	f003 0303 	and.w	r3, r3, #3
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d003      	beq.n	800aed0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 faa9 	bl	800b420 <HAL_TIM_IC_CaptureCallback>
 800aece:	e005      	b.n	800aedc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fa9b 	bl	800b40c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 faac 	bl	800b434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	f003 0310 	and.w	r3, r3, #16
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d020      	beq.n	800af2e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f003 0310 	and.w	r3, r3, #16
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d01b      	beq.n	800af2e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f06f 0210 	mvn.w	r2, #16
 800aefe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2208      	movs	r2, #8
 800af04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af10:	2b00      	cmp	r3, #0
 800af12:	d003      	beq.n	800af1c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fa83 	bl	800b420 <HAL_TIM_IC_CaptureCallback>
 800af1a:	e005      	b.n	800af28 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 fa75 	bl	800b40c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fa86 	bl	800b434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	f003 0301 	and.w	r3, r3, #1
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00c      	beq.n	800af52 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d007      	beq.n	800af52 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f06f 0201 	mvn.w	r2, #1
 800af4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7f6 fd47 	bl	80019e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d104      	bne.n	800af66 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00c      	beq.n	800af80 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d007      	beq.n	800af80 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800af78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 ffc6 	bl	800bf0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00c      	beq.n	800afa4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af90:	2b00      	cmp	r3, #0
 800af92:	d007      	beq.n	800afa4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800af9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 ffbe 	bl	800bf20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00c      	beq.n	800afc8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d007      	beq.n	800afc8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800afc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fa40 	bl	800b448 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f003 0320 	and.w	r3, r3, #32
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00c      	beq.n	800afec <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f003 0320 	and.w	r3, r3, #32
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d007      	beq.n	800afec <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f06f 0220 	mvn.w	r2, #32
 800afe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 ff86 	bl	800bef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afec:	bf00      	nop
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d101      	bne.n	800b012 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b00e:	2302      	movs	r3, #2
 800b010:	e0ff      	b.n	800b212 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2201      	movs	r2, #1
 800b016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2b14      	cmp	r3, #20
 800b01e:	f200 80f0 	bhi.w	800b202 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b022:	a201      	add	r2, pc, #4	@ (adr r2, 800b028 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b028:	0800b07d 	.word	0x0800b07d
 800b02c:	0800b203 	.word	0x0800b203
 800b030:	0800b203 	.word	0x0800b203
 800b034:	0800b203 	.word	0x0800b203
 800b038:	0800b0bd 	.word	0x0800b0bd
 800b03c:	0800b203 	.word	0x0800b203
 800b040:	0800b203 	.word	0x0800b203
 800b044:	0800b203 	.word	0x0800b203
 800b048:	0800b0ff 	.word	0x0800b0ff
 800b04c:	0800b203 	.word	0x0800b203
 800b050:	0800b203 	.word	0x0800b203
 800b054:	0800b203 	.word	0x0800b203
 800b058:	0800b13f 	.word	0x0800b13f
 800b05c:	0800b203 	.word	0x0800b203
 800b060:	0800b203 	.word	0x0800b203
 800b064:	0800b203 	.word	0x0800b203
 800b068:	0800b181 	.word	0x0800b181
 800b06c:	0800b203 	.word	0x0800b203
 800b070:	0800b203 	.word	0x0800b203
 800b074:	0800b203 	.word	0x0800b203
 800b078:	0800b1c1 	.word	0x0800b1c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68b9      	ldr	r1, [r7, #8]
 800b082:	4618      	mov	r0, r3
 800b084:	f000 fa9c 	bl	800b5c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	699a      	ldr	r2, [r3, #24]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f042 0208 	orr.w	r2, r2, #8
 800b096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	699a      	ldr	r2, [r3, #24]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f022 0204 	bic.w	r2, r2, #4
 800b0a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	6999      	ldr	r1, [r3, #24]
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	691a      	ldr	r2, [r3, #16]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	430a      	orrs	r2, r1
 800b0b8:	619a      	str	r2, [r3, #24]
      break;
 800b0ba:	e0a5      	b.n	800b208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68b9      	ldr	r1, [r7, #8]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 fb0c 	bl	800b6e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	699a      	ldr	r2, [r3, #24]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b0d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	699a      	ldr	r2, [r3, #24]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	6999      	ldr	r1, [r3, #24]
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	021a      	lsls	r2, r3, #8
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	430a      	orrs	r2, r1
 800b0fa:	619a      	str	r2, [r3, #24]
      break;
 800b0fc:	e084      	b.n	800b208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	68b9      	ldr	r1, [r7, #8]
 800b104:	4618      	mov	r0, r3
 800b106:	f000 fb75 	bl	800b7f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	69da      	ldr	r2, [r3, #28]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f042 0208 	orr.w	r2, r2, #8
 800b118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	69da      	ldr	r2, [r3, #28]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f022 0204 	bic.w	r2, r2, #4
 800b128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	69d9      	ldr	r1, [r3, #28]
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	691a      	ldr	r2, [r3, #16]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	430a      	orrs	r2, r1
 800b13a:	61da      	str	r2, [r3, #28]
      break;
 800b13c:	e064      	b.n	800b208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68b9      	ldr	r1, [r7, #8]
 800b144:	4618      	mov	r0, r3
 800b146:	f000 fbdd 	bl	800b904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	69da      	ldr	r2, [r3, #28]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	69da      	ldr	r2, [r3, #28]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	69d9      	ldr	r1, [r3, #28]
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	021a      	lsls	r2, r3, #8
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	430a      	orrs	r2, r1
 800b17c:	61da      	str	r2, [r3, #28]
      break;
 800b17e:	e043      	b.n	800b208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68b9      	ldr	r1, [r7, #8]
 800b186:	4618      	mov	r0, r3
 800b188:	f000 fc26 	bl	800b9d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f042 0208 	orr.w	r2, r2, #8
 800b19a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f022 0204 	bic.w	r2, r2, #4
 800b1aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	691a      	ldr	r2, [r3, #16]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b1be:	e023      	b.n	800b208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68b9      	ldr	r1, [r7, #8]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 fc6a 	bl	800baa0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	691b      	ldr	r3, [r3, #16]
 800b1f6:	021a      	lsls	r2, r3, #8
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b200:	e002      	b.n	800b208 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	75fb      	strb	r3, [r7, #23]
      break;
 800b206:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b210:	7dfb      	ldrb	r3, [r7, #23]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3718      	adds	r7, #24
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop

0800b21c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b230:	2b01      	cmp	r3, #1
 800b232:	d101      	bne.n	800b238 <HAL_TIM_ConfigClockSource+0x1c>
 800b234:	2302      	movs	r3, #2
 800b236:	e0dc      	b.n	800b3f2 <HAL_TIM_ConfigClockSource+0x1d6>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2202      	movs	r2, #2
 800b244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	4b6a      	ldr	r3, [pc, #424]	@ (800b3fc <HAL_TIM_ConfigClockSource+0x1e0>)
 800b254:	4013      	ands	r3, r2
 800b256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b25e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a64      	ldr	r2, [pc, #400]	@ (800b400 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	f000 80a9 	beq.w	800b3c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b274:	4a62      	ldr	r2, [pc, #392]	@ (800b400 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b276:	4293      	cmp	r3, r2
 800b278:	f200 80ae 	bhi.w	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b27c:	4a61      	ldr	r2, [pc, #388]	@ (800b404 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	f000 80a1 	beq.w	800b3c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b284:	4a5f      	ldr	r2, [pc, #380]	@ (800b404 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b286:	4293      	cmp	r3, r2
 800b288:	f200 80a6 	bhi.w	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b28c:	4a5e      	ldr	r2, [pc, #376]	@ (800b408 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	f000 8099 	beq.w	800b3c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b294:	4a5c      	ldr	r2, [pc, #368]	@ (800b408 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b296:	4293      	cmp	r3, r2
 800b298:	f200 809e 	bhi.w	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b29c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b2a0:	f000 8091 	beq.w	800b3c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b2a8:	f200 8096 	bhi.w	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2b0:	f000 8089 	beq.w	800b3c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2b8:	f200 808e 	bhi.w	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2c0:	d03e      	beq.n	800b340 <HAL_TIM_ConfigClockSource+0x124>
 800b2c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2c6:	f200 8087 	bhi.w	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2ce:	f000 8086 	beq.w	800b3de <HAL_TIM_ConfigClockSource+0x1c2>
 800b2d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2d6:	d87f      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2d8:	2b70      	cmp	r3, #112	@ 0x70
 800b2da:	d01a      	beq.n	800b312 <HAL_TIM_ConfigClockSource+0xf6>
 800b2dc:	2b70      	cmp	r3, #112	@ 0x70
 800b2de:	d87b      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2e0:	2b60      	cmp	r3, #96	@ 0x60
 800b2e2:	d050      	beq.n	800b386 <HAL_TIM_ConfigClockSource+0x16a>
 800b2e4:	2b60      	cmp	r3, #96	@ 0x60
 800b2e6:	d877      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2e8:	2b50      	cmp	r3, #80	@ 0x50
 800b2ea:	d03c      	beq.n	800b366 <HAL_TIM_ConfigClockSource+0x14a>
 800b2ec:	2b50      	cmp	r3, #80	@ 0x50
 800b2ee:	d873      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2f0:	2b40      	cmp	r3, #64	@ 0x40
 800b2f2:	d058      	beq.n	800b3a6 <HAL_TIM_ConfigClockSource+0x18a>
 800b2f4:	2b40      	cmp	r3, #64	@ 0x40
 800b2f6:	d86f      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2f8:	2b30      	cmp	r3, #48	@ 0x30
 800b2fa:	d064      	beq.n	800b3c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2fc:	2b30      	cmp	r3, #48	@ 0x30
 800b2fe:	d86b      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b300:	2b20      	cmp	r3, #32
 800b302:	d060      	beq.n	800b3c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b304:	2b20      	cmp	r3, #32
 800b306:	d867      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d05c      	beq.n	800b3c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b30c:	2b10      	cmp	r3, #16
 800b30e:	d05a      	beq.n	800b3c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b310:	e062      	b.n	800b3d8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b322:	f000 fca1 	bl	800bc68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	609a      	str	r2, [r3, #8]
      break;
 800b33e:	e04f      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b350:	f000 fc8a 	bl	800bc68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	689a      	ldr	r2, [r3, #8]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b362:	609a      	str	r2, [r3, #8]
      break;
 800b364:	e03c      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b372:	461a      	mov	r2, r3
 800b374:	f000 fbfa 	bl	800bb6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2150      	movs	r1, #80	@ 0x50
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 fc54 	bl	800bc2c <TIM_ITRx_SetConfig>
      break;
 800b384:	e02c      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b392:	461a      	mov	r2, r3
 800b394:	f000 fc19 	bl	800bbca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2160      	movs	r1, #96	@ 0x60
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 fc44 	bl	800bc2c <TIM_ITRx_SetConfig>
      break;
 800b3a4:	e01c      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	f000 fbda 	bl	800bb6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2140      	movs	r1, #64	@ 0x40
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 fc34 	bl	800bc2c <TIM_ITRx_SetConfig>
      break;
 800b3c4:	e00c      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	f000 fc2b 	bl	800bc2c <TIM_ITRx_SetConfig>
      break;
 800b3d6:	e003      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	73fb      	strb	r3, [r7, #15]
      break;
 800b3dc:	e000      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b3de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	ffceff88 	.word	0xffceff88
 800b400:	00100040 	.word	0x00100040
 800b404:	00100030 	.word	0x00100030
 800b408:	00100020 	.word	0x00100020

0800b40c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b428:	bf00      	nop
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a4a      	ldr	r2, [pc, #296]	@ (800b598 <TIM_Base_SetConfig+0x13c>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d013      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b47a:	d00f      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a47      	ldr	r2, [pc, #284]	@ (800b59c <TIM_Base_SetConfig+0x140>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d00b      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a46      	ldr	r2, [pc, #280]	@ (800b5a0 <TIM_Base_SetConfig+0x144>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d007      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a45      	ldr	r2, [pc, #276]	@ (800b5a4 <TIM_Base_SetConfig+0x148>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d003      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a44      	ldr	r2, [pc, #272]	@ (800b5a8 <TIM_Base_SetConfig+0x14c>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d108      	bne.n	800b4ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a39      	ldr	r2, [pc, #228]	@ (800b598 <TIM_Base_SetConfig+0x13c>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d027      	beq.n	800b506 <TIM_Base_SetConfig+0xaa>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4bc:	d023      	beq.n	800b506 <TIM_Base_SetConfig+0xaa>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a36      	ldr	r2, [pc, #216]	@ (800b59c <TIM_Base_SetConfig+0x140>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d01f      	beq.n	800b506 <TIM_Base_SetConfig+0xaa>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a35      	ldr	r2, [pc, #212]	@ (800b5a0 <TIM_Base_SetConfig+0x144>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d01b      	beq.n	800b506 <TIM_Base_SetConfig+0xaa>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a34      	ldr	r2, [pc, #208]	@ (800b5a4 <TIM_Base_SetConfig+0x148>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d017      	beq.n	800b506 <TIM_Base_SetConfig+0xaa>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a33      	ldr	r2, [pc, #204]	@ (800b5a8 <TIM_Base_SetConfig+0x14c>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d013      	beq.n	800b506 <TIM_Base_SetConfig+0xaa>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a32      	ldr	r2, [pc, #200]	@ (800b5ac <TIM_Base_SetConfig+0x150>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d00f      	beq.n	800b506 <TIM_Base_SetConfig+0xaa>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a31      	ldr	r2, [pc, #196]	@ (800b5b0 <TIM_Base_SetConfig+0x154>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d00b      	beq.n	800b506 <TIM_Base_SetConfig+0xaa>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a30      	ldr	r2, [pc, #192]	@ (800b5b4 <TIM_Base_SetConfig+0x158>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d007      	beq.n	800b506 <TIM_Base_SetConfig+0xaa>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a2f      	ldr	r2, [pc, #188]	@ (800b5b8 <TIM_Base_SetConfig+0x15c>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d003      	beq.n	800b506 <TIM_Base_SetConfig+0xaa>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a2e      	ldr	r2, [pc, #184]	@ (800b5bc <TIM_Base_SetConfig+0x160>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d108      	bne.n	800b518 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b50c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	4313      	orrs	r3, r2
 800b516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	695b      	ldr	r3, [r3, #20]
 800b522:	4313      	orrs	r3, r2
 800b524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	689a      	ldr	r2, [r3, #8]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	4a16      	ldr	r2, [pc, #88]	@ (800b598 <TIM_Base_SetConfig+0x13c>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d00f      	beq.n	800b564 <TIM_Base_SetConfig+0x108>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a18      	ldr	r2, [pc, #96]	@ (800b5a8 <TIM_Base_SetConfig+0x14c>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d00b      	beq.n	800b564 <TIM_Base_SetConfig+0x108>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a17      	ldr	r2, [pc, #92]	@ (800b5ac <TIM_Base_SetConfig+0x150>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d007      	beq.n	800b564 <TIM_Base_SetConfig+0x108>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a16      	ldr	r2, [pc, #88]	@ (800b5b0 <TIM_Base_SetConfig+0x154>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d003      	beq.n	800b564 <TIM_Base_SetConfig+0x108>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4a15      	ldr	r2, [pc, #84]	@ (800b5b4 <TIM_Base_SetConfig+0x158>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d103      	bne.n	800b56c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	691a      	ldr	r2, [r3, #16]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	f003 0301 	and.w	r3, r3, #1
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d105      	bne.n	800b58a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	f023 0201 	bic.w	r2, r3, #1
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	611a      	str	r2, [r3, #16]
  }
}
 800b58a:	bf00      	nop
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	40010000 	.word	0x40010000
 800b59c:	40000400 	.word	0x40000400
 800b5a0:	40000800 	.word	0x40000800
 800b5a4:	40000c00 	.word	0x40000c00
 800b5a8:	40010400 	.word	0x40010400
 800b5ac:	40014000 	.word	0x40014000
 800b5b0:	40014400 	.word	0x40014400
 800b5b4:	40014800 	.word	0x40014800
 800b5b8:	4000e000 	.word	0x4000e000
 800b5bc:	4000e400 	.word	0x4000e400

0800b5c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b087      	sub	sp, #28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a1b      	ldr	r3, [r3, #32]
 800b5ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a1b      	ldr	r3, [r3, #32]
 800b5d4:	f023 0201 	bic.w	r2, r3, #1
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	699b      	ldr	r3, [r3, #24]
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	4b37      	ldr	r3, [pc, #220]	@ (800b6c8 <TIM_OC1_SetConfig+0x108>)
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f023 0303 	bic.w	r3, r3, #3
 800b5f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	f023 0302 	bic.w	r3, r3, #2
 800b608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	4313      	orrs	r3, r2
 800b612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a2d      	ldr	r2, [pc, #180]	@ (800b6cc <TIM_OC1_SetConfig+0x10c>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d00f      	beq.n	800b63c <TIM_OC1_SetConfig+0x7c>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a2c      	ldr	r2, [pc, #176]	@ (800b6d0 <TIM_OC1_SetConfig+0x110>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d00b      	beq.n	800b63c <TIM_OC1_SetConfig+0x7c>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a2b      	ldr	r2, [pc, #172]	@ (800b6d4 <TIM_OC1_SetConfig+0x114>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d007      	beq.n	800b63c <TIM_OC1_SetConfig+0x7c>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a2a      	ldr	r2, [pc, #168]	@ (800b6d8 <TIM_OC1_SetConfig+0x118>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d003      	beq.n	800b63c <TIM_OC1_SetConfig+0x7c>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a29      	ldr	r2, [pc, #164]	@ (800b6dc <TIM_OC1_SetConfig+0x11c>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d10c      	bne.n	800b656 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	f023 0308 	bic.w	r3, r3, #8
 800b642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f023 0304 	bic.w	r3, r3, #4
 800b654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a1c      	ldr	r2, [pc, #112]	@ (800b6cc <TIM_OC1_SetConfig+0x10c>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d00f      	beq.n	800b67e <TIM_OC1_SetConfig+0xbe>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a1b      	ldr	r2, [pc, #108]	@ (800b6d0 <TIM_OC1_SetConfig+0x110>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d00b      	beq.n	800b67e <TIM_OC1_SetConfig+0xbe>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a1a      	ldr	r2, [pc, #104]	@ (800b6d4 <TIM_OC1_SetConfig+0x114>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d007      	beq.n	800b67e <TIM_OC1_SetConfig+0xbe>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a19      	ldr	r2, [pc, #100]	@ (800b6d8 <TIM_OC1_SetConfig+0x118>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d003      	beq.n	800b67e <TIM_OC1_SetConfig+0xbe>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a18      	ldr	r2, [pc, #96]	@ (800b6dc <TIM_OC1_SetConfig+0x11c>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d111      	bne.n	800b6a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b68c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	693a      	ldr	r2, [r7, #16]
 800b694:	4313      	orrs	r3, r2
 800b696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	693a      	ldr	r2, [r7, #16]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	693a      	ldr	r2, [r7, #16]
 800b6a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	697a      	ldr	r2, [r7, #20]
 800b6ba:	621a      	str	r2, [r3, #32]
}
 800b6bc:	bf00      	nop
 800b6be:	371c      	adds	r7, #28
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	fffeff8f 	.word	0xfffeff8f
 800b6cc:	40010000 	.word	0x40010000
 800b6d0:	40010400 	.word	0x40010400
 800b6d4:	40014000 	.word	0x40014000
 800b6d8:	40014400 	.word	0x40014400
 800b6dc:	40014800 	.word	0x40014800

0800b6e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b087      	sub	sp, #28
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6a1b      	ldr	r3, [r3, #32]
 800b6ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6a1b      	ldr	r3, [r3, #32]
 800b6f4:	f023 0210 	bic.w	r2, r3, #16
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	699b      	ldr	r3, [r3, #24]
 800b706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	4b34      	ldr	r3, [pc, #208]	@ (800b7dc <TIM_OC2_SetConfig+0xfc>)
 800b70c:	4013      	ands	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	021b      	lsls	r3, r3, #8
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	4313      	orrs	r3, r2
 800b722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	f023 0320 	bic.w	r3, r3, #32
 800b72a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	011b      	lsls	r3, r3, #4
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	4313      	orrs	r3, r2
 800b736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4a29      	ldr	r2, [pc, #164]	@ (800b7e0 <TIM_OC2_SetConfig+0x100>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d003      	beq.n	800b748 <TIM_OC2_SetConfig+0x68>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4a28      	ldr	r2, [pc, #160]	@ (800b7e4 <TIM_OC2_SetConfig+0x104>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d10d      	bne.n	800b764 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b74e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	011b      	lsls	r3, r3, #4
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	4313      	orrs	r3, r2
 800b75a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b762:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4a1e      	ldr	r2, [pc, #120]	@ (800b7e0 <TIM_OC2_SetConfig+0x100>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d00f      	beq.n	800b78c <TIM_OC2_SetConfig+0xac>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a1d      	ldr	r2, [pc, #116]	@ (800b7e4 <TIM_OC2_SetConfig+0x104>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d00b      	beq.n	800b78c <TIM_OC2_SetConfig+0xac>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a1c      	ldr	r2, [pc, #112]	@ (800b7e8 <TIM_OC2_SetConfig+0x108>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d007      	beq.n	800b78c <TIM_OC2_SetConfig+0xac>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a1b      	ldr	r2, [pc, #108]	@ (800b7ec <TIM_OC2_SetConfig+0x10c>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d003      	beq.n	800b78c <TIM_OC2_SetConfig+0xac>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a1a      	ldr	r2, [pc, #104]	@ (800b7f0 <TIM_OC2_SetConfig+0x110>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d113      	bne.n	800b7b4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b792:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b79a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	695b      	ldr	r3, [r3, #20]
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	693a      	ldr	r2, [r7, #16]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	699b      	ldr	r3, [r3, #24]
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	685a      	ldr	r2, [r3, #4]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	621a      	str	r2, [r3, #32]
}
 800b7ce:	bf00      	nop
 800b7d0:	371c      	adds	r7, #28
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	feff8fff 	.word	0xfeff8fff
 800b7e0:	40010000 	.word	0x40010000
 800b7e4:	40010400 	.word	0x40010400
 800b7e8:	40014000 	.word	0x40014000
 800b7ec:	40014400 	.word	0x40014400
 800b7f0:	40014800 	.word	0x40014800

0800b7f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b087      	sub	sp, #28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a1b      	ldr	r3, [r3, #32]
 800b808:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	69db      	ldr	r3, [r3, #28]
 800b81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	4b33      	ldr	r3, [pc, #204]	@ (800b8ec <TIM_OC3_SetConfig+0xf8>)
 800b820:	4013      	ands	r3, r2
 800b822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f023 0303 	bic.w	r3, r3, #3
 800b82a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	4313      	orrs	r3, r2
 800b834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b83c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	021b      	lsls	r3, r3, #8
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	4313      	orrs	r3, r2
 800b848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a28      	ldr	r2, [pc, #160]	@ (800b8f0 <TIM_OC3_SetConfig+0xfc>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d003      	beq.n	800b85a <TIM_OC3_SetConfig+0x66>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a27      	ldr	r2, [pc, #156]	@ (800b8f4 <TIM_OC3_SetConfig+0x100>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d10d      	bne.n	800b876 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b860:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	021b      	lsls	r3, r3, #8
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a1d      	ldr	r2, [pc, #116]	@ (800b8f0 <TIM_OC3_SetConfig+0xfc>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d00f      	beq.n	800b89e <TIM_OC3_SetConfig+0xaa>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a1c      	ldr	r2, [pc, #112]	@ (800b8f4 <TIM_OC3_SetConfig+0x100>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d00b      	beq.n	800b89e <TIM_OC3_SetConfig+0xaa>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a1b      	ldr	r2, [pc, #108]	@ (800b8f8 <TIM_OC3_SetConfig+0x104>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d007      	beq.n	800b89e <TIM_OC3_SetConfig+0xaa>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a1a      	ldr	r2, [pc, #104]	@ (800b8fc <TIM_OC3_SetConfig+0x108>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d003      	beq.n	800b89e <TIM_OC3_SetConfig+0xaa>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a19      	ldr	r2, [pc, #100]	@ (800b900 <TIM_OC3_SetConfig+0x10c>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d113      	bne.n	800b8c6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b8a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b8ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	011b      	lsls	r3, r3, #4
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	699b      	ldr	r3, [r3, #24]
 800b8be:	011b      	lsls	r3, r3, #4
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	697a      	ldr	r2, [r7, #20]
 800b8de:	621a      	str	r2, [r3, #32]
}
 800b8e0:	bf00      	nop
 800b8e2:	371c      	adds	r7, #28
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr
 800b8ec:	fffeff8f 	.word	0xfffeff8f
 800b8f0:	40010000 	.word	0x40010000
 800b8f4:	40010400 	.word	0x40010400
 800b8f8:	40014000 	.word	0x40014000
 800b8fc:	40014400 	.word	0x40014400
 800b900:	40014800 	.word	0x40014800

0800b904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b904:	b480      	push	{r7}
 800b906:	b087      	sub	sp, #28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a1b      	ldr	r3, [r3, #32]
 800b912:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a1b      	ldr	r3, [r3, #32]
 800b918:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	69db      	ldr	r3, [r3, #28]
 800b92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	4b24      	ldr	r3, [pc, #144]	@ (800b9c0 <TIM_OC4_SetConfig+0xbc>)
 800b930:	4013      	ands	r3, r2
 800b932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b93a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	021b      	lsls	r3, r3, #8
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	4313      	orrs	r3, r2
 800b946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b94e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	031b      	lsls	r3, r3, #12
 800b956:	693a      	ldr	r2, [r7, #16]
 800b958:	4313      	orrs	r3, r2
 800b95a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a19      	ldr	r2, [pc, #100]	@ (800b9c4 <TIM_OC4_SetConfig+0xc0>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d00f      	beq.n	800b984 <TIM_OC4_SetConfig+0x80>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a18      	ldr	r2, [pc, #96]	@ (800b9c8 <TIM_OC4_SetConfig+0xc4>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d00b      	beq.n	800b984 <TIM_OC4_SetConfig+0x80>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a17      	ldr	r2, [pc, #92]	@ (800b9cc <TIM_OC4_SetConfig+0xc8>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d007      	beq.n	800b984 <TIM_OC4_SetConfig+0x80>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a16      	ldr	r2, [pc, #88]	@ (800b9d0 <TIM_OC4_SetConfig+0xcc>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d003      	beq.n	800b984 <TIM_OC4_SetConfig+0x80>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a15      	ldr	r2, [pc, #84]	@ (800b9d4 <TIM_OC4_SetConfig+0xd0>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d109      	bne.n	800b998 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b98a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	695b      	ldr	r3, [r3, #20]
 800b990:	019b      	lsls	r3, r3, #6
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	4313      	orrs	r3, r2
 800b996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	697a      	ldr	r2, [r7, #20]
 800b99c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	685a      	ldr	r2, [r3, #4]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	621a      	str	r2, [r3, #32]
}
 800b9b2:	bf00      	nop
 800b9b4:	371c      	adds	r7, #28
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	feff8fff 	.word	0xfeff8fff
 800b9c4:	40010000 	.word	0x40010000
 800b9c8:	40010400 	.word	0x40010400
 800b9cc:	40014000 	.word	0x40014000
 800b9d0:	40014400 	.word	0x40014400
 800b9d4:	40014800 	.word	0x40014800

0800b9d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b087      	sub	sp, #28
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a1b      	ldr	r3, [r3, #32]
 800b9ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	4b21      	ldr	r3, [pc, #132]	@ (800ba88 <TIM_OC5_SetConfig+0xb0>)
 800ba04:	4013      	ands	r3, r2
 800ba06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ba18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	041b      	lsls	r3, r3, #16
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a18      	ldr	r2, [pc, #96]	@ (800ba8c <TIM_OC5_SetConfig+0xb4>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d00f      	beq.n	800ba4e <TIM_OC5_SetConfig+0x76>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a17      	ldr	r2, [pc, #92]	@ (800ba90 <TIM_OC5_SetConfig+0xb8>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d00b      	beq.n	800ba4e <TIM_OC5_SetConfig+0x76>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a16      	ldr	r2, [pc, #88]	@ (800ba94 <TIM_OC5_SetConfig+0xbc>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d007      	beq.n	800ba4e <TIM_OC5_SetConfig+0x76>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a15      	ldr	r2, [pc, #84]	@ (800ba98 <TIM_OC5_SetConfig+0xc0>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d003      	beq.n	800ba4e <TIM_OC5_SetConfig+0x76>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	4a14      	ldr	r2, [pc, #80]	@ (800ba9c <TIM_OC5_SetConfig+0xc4>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d109      	bne.n	800ba62 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	695b      	ldr	r3, [r3, #20]
 800ba5a:	021b      	lsls	r3, r3, #8
 800ba5c:	697a      	ldr	r2, [r7, #20]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	685a      	ldr	r2, [r3, #4]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	693a      	ldr	r2, [r7, #16]
 800ba7a:	621a      	str	r2, [r3, #32]
}
 800ba7c:	bf00      	nop
 800ba7e:	371c      	adds	r7, #28
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr
 800ba88:	fffeff8f 	.word	0xfffeff8f
 800ba8c:	40010000 	.word	0x40010000
 800ba90:	40010400 	.word	0x40010400
 800ba94:	40014000 	.word	0x40014000
 800ba98:	40014400 	.word	0x40014400
 800ba9c:	40014800 	.word	0x40014800

0800baa0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b087      	sub	sp, #28
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a1b      	ldr	r3, [r3, #32]
 800baae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a1b      	ldr	r3, [r3, #32]
 800bab4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	4b22      	ldr	r3, [pc, #136]	@ (800bb54 <TIM_OC6_SetConfig+0xb4>)
 800bacc:	4013      	ands	r3, r2
 800bace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	021b      	lsls	r3, r3, #8
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	4313      	orrs	r3, r2
 800bada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	051b      	lsls	r3, r3, #20
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	4313      	orrs	r3, r2
 800baee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a19      	ldr	r2, [pc, #100]	@ (800bb58 <TIM_OC6_SetConfig+0xb8>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d00f      	beq.n	800bb18 <TIM_OC6_SetConfig+0x78>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a18      	ldr	r2, [pc, #96]	@ (800bb5c <TIM_OC6_SetConfig+0xbc>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d00b      	beq.n	800bb18 <TIM_OC6_SetConfig+0x78>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a17      	ldr	r2, [pc, #92]	@ (800bb60 <TIM_OC6_SetConfig+0xc0>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d007      	beq.n	800bb18 <TIM_OC6_SetConfig+0x78>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a16      	ldr	r2, [pc, #88]	@ (800bb64 <TIM_OC6_SetConfig+0xc4>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d003      	beq.n	800bb18 <TIM_OC6_SetConfig+0x78>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a15      	ldr	r2, [pc, #84]	@ (800bb68 <TIM_OC6_SetConfig+0xc8>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d109      	bne.n	800bb2c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bb1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	695b      	ldr	r3, [r3, #20]
 800bb24:	029b      	lsls	r3, r3, #10
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	693a      	ldr	r2, [r7, #16]
 800bb44:	621a      	str	r2, [r3, #32]
}
 800bb46:	bf00      	nop
 800bb48:	371c      	adds	r7, #28
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	feff8fff 	.word	0xfeff8fff
 800bb58:	40010000 	.word	0x40010000
 800bb5c:	40010400 	.word	0x40010400
 800bb60:	40014000 	.word	0x40014000
 800bb64:	40014400 	.word	0x40014400
 800bb68:	40014800 	.word	0x40014800

0800bb6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b087      	sub	sp, #28
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6a1b      	ldr	r3, [r3, #32]
 800bb7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	f023 0201 	bic.w	r2, r3, #1
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	699b      	ldr	r3, [r3, #24]
 800bb8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	011b      	lsls	r3, r3, #4
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f023 030a 	bic.w	r3, r3, #10
 800bba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	693a      	ldr	r2, [r7, #16]
 800bbb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	621a      	str	r2, [r3, #32]
}
 800bbbe:	bf00      	nop
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbca:	b480      	push	{r7}
 800bbcc:	b087      	sub	sp, #28
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	60f8      	str	r0, [r7, #12]
 800bbd2:	60b9      	str	r1, [r7, #8]
 800bbd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	6a1b      	ldr	r3, [r3, #32]
 800bbda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6a1b      	ldr	r3, [r3, #32]
 800bbe0:	f023 0210 	bic.w	r2, r3, #16
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bbf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	031b      	lsls	r3, r3, #12
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bc06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	011b      	lsls	r3, r3, #4
 800bc0c:	697a      	ldr	r2, [r7, #20]
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	621a      	str	r2, [r3, #32]
}
 800bc1e:	bf00      	nop
 800bc20:	371c      	adds	r7, #28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr
	...

0800bc2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	4b09      	ldr	r3, [pc, #36]	@ (800bc64 <TIM_ITRx_SetConfig+0x38>)
 800bc40:	4013      	ands	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc44:	683a      	ldr	r2, [r7, #0]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	f043 0307 	orr.w	r3, r3, #7
 800bc4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	609a      	str	r2, [r3, #8]
}
 800bc56:	bf00      	nop
 800bc58:	3714      	adds	r7, #20
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	ffcfff8f 	.word	0xffcfff8f

0800bc68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b087      	sub	sp, #28
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	021a      	lsls	r2, r3, #8
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	431a      	orrs	r2, r3
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	697a      	ldr	r2, [r7, #20]
 800bc9a:	609a      	str	r2, [r3, #8]
}
 800bc9c:	bf00      	nop
 800bc9e:	371c      	adds	r7, #28
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d101      	bne.n	800bcc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	e077      	b.n	800bdb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2202      	movs	r2, #2
 800bccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a35      	ldr	r2, [pc, #212]	@ (800bdbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d004      	beq.n	800bcf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a34      	ldr	r2, [pc, #208]	@ (800bdc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d108      	bne.n	800bd06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bcfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a25      	ldr	r2, [pc, #148]	@ (800bdbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d02c      	beq.n	800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd32:	d027      	beq.n	800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a22      	ldr	r2, [pc, #136]	@ (800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d022      	beq.n	800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a21      	ldr	r2, [pc, #132]	@ (800bdc8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d01d      	beq.n	800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a1f      	ldr	r2, [pc, #124]	@ (800bdcc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d018      	beq.n	800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a1a      	ldr	r2, [pc, #104]	@ (800bdc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d013      	beq.n	800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a1b      	ldr	r2, [pc, #108]	@ (800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d00e      	beq.n	800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a1a      	ldr	r2, [pc, #104]	@ (800bdd4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d009      	beq.n	800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a18      	ldr	r2, [pc, #96]	@ (800bdd8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d004      	beq.n	800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a17      	ldr	r2, [pc, #92]	@ (800bddc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d10c      	bne.n	800bd9e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68ba      	ldr	r2, [r7, #8]
 800bd9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2201      	movs	r2, #1
 800bda2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3714      	adds	r7, #20
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	40010000 	.word	0x40010000
 800bdc0:	40010400 	.word	0x40010400
 800bdc4:	40000400 	.word	0x40000400
 800bdc8:	40000800 	.word	0x40000800
 800bdcc:	40000c00 	.word	0x40000c00
 800bdd0:	40001800 	.word	0x40001800
 800bdd4:	40014000 	.word	0x40014000
 800bdd8:	4000e000 	.word	0x4000e000
 800bddc:	4000e400 	.word	0x4000e400

0800bde0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bdea:	2300      	movs	r3, #0
 800bdec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d101      	bne.n	800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	e073      	b.n	800bee4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	4313      	orrs	r3, r2
 800be10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4313      	orrs	r3, r2
 800be3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	4313      	orrs	r3, r2
 800be48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	4313      	orrs	r3, r2
 800be56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be62:	4313      	orrs	r3, r2
 800be64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	699b      	ldr	r3, [r3, #24]
 800be70:	041b      	lsls	r3, r3, #16
 800be72:	4313      	orrs	r3, r2
 800be74:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	69db      	ldr	r3, [r3, #28]
 800be80:	4313      	orrs	r3, r2
 800be82:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a19      	ldr	r2, [pc, #100]	@ (800bef0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d004      	beq.n	800be98 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a18      	ldr	r2, [pc, #96]	@ (800bef4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d11c      	bne.n	800bed2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bea2:	051b      	lsls	r3, r3, #20
 800bea4:	4313      	orrs	r3, r2
 800bea6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	6a1b      	ldr	r3, [r3, #32]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bec0:	4313      	orrs	r3, r2
 800bec2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bece:	4313      	orrs	r3, r2
 800bed0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3714      	adds	r7, #20
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr
 800bef0:	40010000 	.word	0x40010000
 800bef4:	40010400 	.word	0x40010400

0800bef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf00:	bf00      	nop
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf14:	bf00      	nop
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf28:	bf00      	nop
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e042      	b.n	800bfcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d106      	bne.n	800bf5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f7f6 f98f 	bl	800227c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2224      	movs	r2, #36	@ 0x24
 800bf62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f022 0201 	bic.w	r2, r2, #1
 800bf74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d002      	beq.n	800bf84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 ff22 	bl	800cdc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f8b3 	bl	800c0f0 <UART_SetConfig>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d101      	bne.n	800bf94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	e01b      	b.n	800bfcc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	685a      	ldr	r2, [r3, #4]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bfa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689a      	ldr	r2, [r3, #8]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bfb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f042 0201 	orr.w	r2, r2, #1
 800bfc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 ffa1 	bl	800cf0c <UART_CheckIdleState>
 800bfca:	4603      	mov	r3, r0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3708      	adds	r7, #8
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b08a      	sub	sp, #40	@ 0x28
 800bfd8:	af02      	add	r7, sp, #8
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	603b      	str	r3, [r7, #0]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfea:	2b20      	cmp	r3, #32
 800bfec:	d17b      	bne.n	800c0e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <HAL_UART_Transmit+0x26>
 800bff4:	88fb      	ldrh	r3, [r7, #6]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d101      	bne.n	800bffe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e074      	b.n	800c0e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2221      	movs	r2, #33	@ 0x21
 800c00a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c00e:	f7f6 fbb7 	bl	8002780 <HAL_GetTick>
 800c012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	88fa      	ldrh	r2, [r7, #6]
 800c018:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	88fa      	ldrh	r2, [r7, #6]
 800c020:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c02c:	d108      	bne.n	800c040 <HAL_UART_Transmit+0x6c>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d104      	bne.n	800c040 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c036:	2300      	movs	r3, #0
 800c038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	61bb      	str	r3, [r7, #24]
 800c03e:	e003      	b.n	800c048 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c044:	2300      	movs	r3, #0
 800c046:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c048:	e030      	b.n	800c0ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	2200      	movs	r2, #0
 800c052:	2180      	movs	r1, #128	@ 0x80
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f001 f803 	bl	800d060 <UART_WaitOnFlagUntilTimeout>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d005      	beq.n	800c06c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2220      	movs	r2, #32
 800c064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c068:	2303      	movs	r3, #3
 800c06a:	e03d      	b.n	800c0e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10b      	bne.n	800c08a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	881b      	ldrh	r3, [r3, #0]
 800c076:	461a      	mov	r2, r3
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c080:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	3302      	adds	r3, #2
 800c086:	61bb      	str	r3, [r7, #24]
 800c088:	e007      	b.n	800c09a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	781a      	ldrb	r2, [r3, #0]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	3301      	adds	r3, #1
 800c098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d1c8      	bne.n	800c04a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	2140      	movs	r1, #64	@ 0x40
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f000 ffcc 	bl	800d060 <UART_WaitOnFlagUntilTimeout>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d005      	beq.n	800c0da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	e006      	b.n	800c0e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2220      	movs	r2, #32
 800c0de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	e000      	b.n	800c0e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c0e6:	2302      	movs	r3, #2
  }
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3720      	adds	r7, #32
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0f4:	b092      	sub	sp, #72	@ 0x48
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	689a      	ldr	r2, [r3, #8]
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	431a      	orrs	r2, r3
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	431a      	orrs	r2, r3
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	69db      	ldr	r3, [r3, #28]
 800c114:	4313      	orrs	r3, r2
 800c116:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	4bbe      	ldr	r3, [pc, #760]	@ (800c418 <UART_SetConfig+0x328>)
 800c120:	4013      	ands	r3, r2
 800c122:	697a      	ldr	r2, [r7, #20]
 800c124:	6812      	ldr	r2, [r2, #0]
 800c126:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c128:	430b      	orrs	r3, r1
 800c12a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	68da      	ldr	r2, [r3, #12]
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	430a      	orrs	r2, r1
 800c140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	699b      	ldr	r3, [r3, #24]
 800c146:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4ab3      	ldr	r2, [pc, #716]	@ (800c41c <UART_SetConfig+0x32c>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d004      	beq.n	800c15c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	6a1b      	ldr	r3, [r3, #32]
 800c156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c158:	4313      	orrs	r3, r2
 800c15a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	689a      	ldr	r2, [r3, #8]
 800c162:	4baf      	ldr	r3, [pc, #700]	@ (800c420 <UART_SetConfig+0x330>)
 800c164:	4013      	ands	r3, r2
 800c166:	697a      	ldr	r2, [r7, #20]
 800c168:	6812      	ldr	r2, [r2, #0]
 800c16a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c16c:	430b      	orrs	r3, r1
 800c16e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c176:	f023 010f 	bic.w	r1, r3, #15
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	430a      	orrs	r2, r1
 800c184:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4aa6      	ldr	r2, [pc, #664]	@ (800c424 <UART_SetConfig+0x334>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d177      	bne.n	800c280 <UART_SetConfig+0x190>
 800c190:	4ba5      	ldr	r3, [pc, #660]	@ (800c428 <UART_SetConfig+0x338>)
 800c192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c194:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c198:	2b28      	cmp	r3, #40	@ 0x28
 800c19a:	d86d      	bhi.n	800c278 <UART_SetConfig+0x188>
 800c19c:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a4 <UART_SetConfig+0xb4>)
 800c19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a2:	bf00      	nop
 800c1a4:	0800c249 	.word	0x0800c249
 800c1a8:	0800c279 	.word	0x0800c279
 800c1ac:	0800c279 	.word	0x0800c279
 800c1b0:	0800c279 	.word	0x0800c279
 800c1b4:	0800c279 	.word	0x0800c279
 800c1b8:	0800c279 	.word	0x0800c279
 800c1bc:	0800c279 	.word	0x0800c279
 800c1c0:	0800c279 	.word	0x0800c279
 800c1c4:	0800c251 	.word	0x0800c251
 800c1c8:	0800c279 	.word	0x0800c279
 800c1cc:	0800c279 	.word	0x0800c279
 800c1d0:	0800c279 	.word	0x0800c279
 800c1d4:	0800c279 	.word	0x0800c279
 800c1d8:	0800c279 	.word	0x0800c279
 800c1dc:	0800c279 	.word	0x0800c279
 800c1e0:	0800c279 	.word	0x0800c279
 800c1e4:	0800c259 	.word	0x0800c259
 800c1e8:	0800c279 	.word	0x0800c279
 800c1ec:	0800c279 	.word	0x0800c279
 800c1f0:	0800c279 	.word	0x0800c279
 800c1f4:	0800c279 	.word	0x0800c279
 800c1f8:	0800c279 	.word	0x0800c279
 800c1fc:	0800c279 	.word	0x0800c279
 800c200:	0800c279 	.word	0x0800c279
 800c204:	0800c261 	.word	0x0800c261
 800c208:	0800c279 	.word	0x0800c279
 800c20c:	0800c279 	.word	0x0800c279
 800c210:	0800c279 	.word	0x0800c279
 800c214:	0800c279 	.word	0x0800c279
 800c218:	0800c279 	.word	0x0800c279
 800c21c:	0800c279 	.word	0x0800c279
 800c220:	0800c279 	.word	0x0800c279
 800c224:	0800c269 	.word	0x0800c269
 800c228:	0800c279 	.word	0x0800c279
 800c22c:	0800c279 	.word	0x0800c279
 800c230:	0800c279 	.word	0x0800c279
 800c234:	0800c279 	.word	0x0800c279
 800c238:	0800c279 	.word	0x0800c279
 800c23c:	0800c279 	.word	0x0800c279
 800c240:	0800c279 	.word	0x0800c279
 800c244:	0800c271 	.word	0x0800c271
 800c248:	2301      	movs	r3, #1
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c24e:	e326      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c250:	2304      	movs	r3, #4
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c256:	e322      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c258:	2308      	movs	r3, #8
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c25e:	e31e      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c260:	2310      	movs	r3, #16
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c266:	e31a      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c268:	2320      	movs	r3, #32
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26e:	e316      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c270:	2340      	movs	r3, #64	@ 0x40
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c276:	e312      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c278:	2380      	movs	r3, #128	@ 0x80
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c27e:	e30e      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a69      	ldr	r2, [pc, #420]	@ (800c42c <UART_SetConfig+0x33c>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d130      	bne.n	800c2ec <UART_SetConfig+0x1fc>
 800c28a:	4b67      	ldr	r3, [pc, #412]	@ (800c428 <UART_SetConfig+0x338>)
 800c28c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c28e:	f003 0307 	and.w	r3, r3, #7
 800c292:	2b05      	cmp	r3, #5
 800c294:	d826      	bhi.n	800c2e4 <UART_SetConfig+0x1f4>
 800c296:	a201      	add	r2, pc, #4	@ (adr r2, 800c29c <UART_SetConfig+0x1ac>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c2b5 	.word	0x0800c2b5
 800c2a0:	0800c2bd 	.word	0x0800c2bd
 800c2a4:	0800c2c5 	.word	0x0800c2c5
 800c2a8:	0800c2cd 	.word	0x0800c2cd
 800c2ac:	0800c2d5 	.word	0x0800c2d5
 800c2b0:	0800c2dd 	.word	0x0800c2dd
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ba:	e2f0      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c2bc:	2304      	movs	r3, #4
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c2:	e2ec      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c2c4:	2308      	movs	r3, #8
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ca:	e2e8      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c2cc:	2310      	movs	r3, #16
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d2:	e2e4      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c2d4:	2320      	movs	r3, #32
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2da:	e2e0      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c2dc:	2340      	movs	r3, #64	@ 0x40
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e2:	e2dc      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c2e4:	2380      	movs	r3, #128	@ 0x80
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ea:	e2d8      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a4f      	ldr	r2, [pc, #316]	@ (800c430 <UART_SetConfig+0x340>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d130      	bne.n	800c358 <UART_SetConfig+0x268>
 800c2f6:	4b4c      	ldr	r3, [pc, #304]	@ (800c428 <UART_SetConfig+0x338>)
 800c2f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2fa:	f003 0307 	and.w	r3, r3, #7
 800c2fe:	2b05      	cmp	r3, #5
 800c300:	d826      	bhi.n	800c350 <UART_SetConfig+0x260>
 800c302:	a201      	add	r2, pc, #4	@ (adr r2, 800c308 <UART_SetConfig+0x218>)
 800c304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c308:	0800c321 	.word	0x0800c321
 800c30c:	0800c329 	.word	0x0800c329
 800c310:	0800c331 	.word	0x0800c331
 800c314:	0800c339 	.word	0x0800c339
 800c318:	0800c341 	.word	0x0800c341
 800c31c:	0800c349 	.word	0x0800c349
 800c320:	2300      	movs	r3, #0
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c326:	e2ba      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c328:	2304      	movs	r3, #4
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32e:	e2b6      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c330:	2308      	movs	r3, #8
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c336:	e2b2      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c338:	2310      	movs	r3, #16
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33e:	e2ae      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c340:	2320      	movs	r3, #32
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c346:	e2aa      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c348:	2340      	movs	r3, #64	@ 0x40
 800c34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c34e:	e2a6      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c350:	2380      	movs	r3, #128	@ 0x80
 800c352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c356:	e2a2      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a35      	ldr	r2, [pc, #212]	@ (800c434 <UART_SetConfig+0x344>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d130      	bne.n	800c3c4 <UART_SetConfig+0x2d4>
 800c362:	4b31      	ldr	r3, [pc, #196]	@ (800c428 <UART_SetConfig+0x338>)
 800c364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c366:	f003 0307 	and.w	r3, r3, #7
 800c36a:	2b05      	cmp	r3, #5
 800c36c:	d826      	bhi.n	800c3bc <UART_SetConfig+0x2cc>
 800c36e:	a201      	add	r2, pc, #4	@ (adr r2, 800c374 <UART_SetConfig+0x284>)
 800c370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c374:	0800c38d 	.word	0x0800c38d
 800c378:	0800c395 	.word	0x0800c395
 800c37c:	0800c39d 	.word	0x0800c39d
 800c380:	0800c3a5 	.word	0x0800c3a5
 800c384:	0800c3ad 	.word	0x0800c3ad
 800c388:	0800c3b5 	.word	0x0800c3b5
 800c38c:	2300      	movs	r3, #0
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c392:	e284      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c394:	2304      	movs	r3, #4
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39a:	e280      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c39c:	2308      	movs	r3, #8
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a2:	e27c      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c3a4:	2310      	movs	r3, #16
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3aa:	e278      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c3ac:	2320      	movs	r3, #32
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3b2:	e274      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c3b4:	2340      	movs	r3, #64	@ 0x40
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ba:	e270      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c3bc:	2380      	movs	r3, #128	@ 0x80
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c2:	e26c      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a1b      	ldr	r2, [pc, #108]	@ (800c438 <UART_SetConfig+0x348>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d142      	bne.n	800c454 <UART_SetConfig+0x364>
 800c3ce:	4b16      	ldr	r3, [pc, #88]	@ (800c428 <UART_SetConfig+0x338>)
 800c3d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3d2:	f003 0307 	and.w	r3, r3, #7
 800c3d6:	2b05      	cmp	r3, #5
 800c3d8:	d838      	bhi.n	800c44c <UART_SetConfig+0x35c>
 800c3da:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e0 <UART_SetConfig+0x2f0>)
 800c3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e0:	0800c3f9 	.word	0x0800c3f9
 800c3e4:	0800c401 	.word	0x0800c401
 800c3e8:	0800c409 	.word	0x0800c409
 800c3ec:	0800c411 	.word	0x0800c411
 800c3f0:	0800c43d 	.word	0x0800c43d
 800c3f4:	0800c445 	.word	0x0800c445
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fe:	e24e      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c400:	2304      	movs	r3, #4
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c406:	e24a      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c408:	2308      	movs	r3, #8
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40e:	e246      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c410:	2310      	movs	r3, #16
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c416:	e242      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c418:	cfff69f3 	.word	0xcfff69f3
 800c41c:	58000c00 	.word	0x58000c00
 800c420:	11fff4ff 	.word	0x11fff4ff
 800c424:	40011000 	.word	0x40011000
 800c428:	58024400 	.word	0x58024400
 800c42c:	40004400 	.word	0x40004400
 800c430:	40004800 	.word	0x40004800
 800c434:	40004c00 	.word	0x40004c00
 800c438:	40005000 	.word	0x40005000
 800c43c:	2320      	movs	r3, #32
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c442:	e22c      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c444:	2340      	movs	r3, #64	@ 0x40
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c44a:	e228      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c44c:	2380      	movs	r3, #128	@ 0x80
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c452:	e224      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4ab1      	ldr	r2, [pc, #708]	@ (800c720 <UART_SetConfig+0x630>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d176      	bne.n	800c54c <UART_SetConfig+0x45c>
 800c45e:	4bb1      	ldr	r3, [pc, #708]	@ (800c724 <UART_SetConfig+0x634>)
 800c460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c466:	2b28      	cmp	r3, #40	@ 0x28
 800c468:	d86c      	bhi.n	800c544 <UART_SetConfig+0x454>
 800c46a:	a201      	add	r2, pc, #4	@ (adr r2, 800c470 <UART_SetConfig+0x380>)
 800c46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c470:	0800c515 	.word	0x0800c515
 800c474:	0800c545 	.word	0x0800c545
 800c478:	0800c545 	.word	0x0800c545
 800c47c:	0800c545 	.word	0x0800c545
 800c480:	0800c545 	.word	0x0800c545
 800c484:	0800c545 	.word	0x0800c545
 800c488:	0800c545 	.word	0x0800c545
 800c48c:	0800c545 	.word	0x0800c545
 800c490:	0800c51d 	.word	0x0800c51d
 800c494:	0800c545 	.word	0x0800c545
 800c498:	0800c545 	.word	0x0800c545
 800c49c:	0800c545 	.word	0x0800c545
 800c4a0:	0800c545 	.word	0x0800c545
 800c4a4:	0800c545 	.word	0x0800c545
 800c4a8:	0800c545 	.word	0x0800c545
 800c4ac:	0800c545 	.word	0x0800c545
 800c4b0:	0800c525 	.word	0x0800c525
 800c4b4:	0800c545 	.word	0x0800c545
 800c4b8:	0800c545 	.word	0x0800c545
 800c4bc:	0800c545 	.word	0x0800c545
 800c4c0:	0800c545 	.word	0x0800c545
 800c4c4:	0800c545 	.word	0x0800c545
 800c4c8:	0800c545 	.word	0x0800c545
 800c4cc:	0800c545 	.word	0x0800c545
 800c4d0:	0800c52d 	.word	0x0800c52d
 800c4d4:	0800c545 	.word	0x0800c545
 800c4d8:	0800c545 	.word	0x0800c545
 800c4dc:	0800c545 	.word	0x0800c545
 800c4e0:	0800c545 	.word	0x0800c545
 800c4e4:	0800c545 	.word	0x0800c545
 800c4e8:	0800c545 	.word	0x0800c545
 800c4ec:	0800c545 	.word	0x0800c545
 800c4f0:	0800c535 	.word	0x0800c535
 800c4f4:	0800c545 	.word	0x0800c545
 800c4f8:	0800c545 	.word	0x0800c545
 800c4fc:	0800c545 	.word	0x0800c545
 800c500:	0800c545 	.word	0x0800c545
 800c504:	0800c545 	.word	0x0800c545
 800c508:	0800c545 	.word	0x0800c545
 800c50c:	0800c545 	.word	0x0800c545
 800c510:	0800c53d 	.word	0x0800c53d
 800c514:	2301      	movs	r3, #1
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c51a:	e1c0      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c51c:	2304      	movs	r3, #4
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c522:	e1bc      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c524:	2308      	movs	r3, #8
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c52a:	e1b8      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c52c:	2310      	movs	r3, #16
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c532:	e1b4      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c534:	2320      	movs	r3, #32
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c53a:	e1b0      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c53c:	2340      	movs	r3, #64	@ 0x40
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c542:	e1ac      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c544:	2380      	movs	r3, #128	@ 0x80
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c54a:	e1a8      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a75      	ldr	r2, [pc, #468]	@ (800c728 <UART_SetConfig+0x638>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d130      	bne.n	800c5b8 <UART_SetConfig+0x4c8>
 800c556:	4b73      	ldr	r3, [pc, #460]	@ (800c724 <UART_SetConfig+0x634>)
 800c558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c55a:	f003 0307 	and.w	r3, r3, #7
 800c55e:	2b05      	cmp	r3, #5
 800c560:	d826      	bhi.n	800c5b0 <UART_SetConfig+0x4c0>
 800c562:	a201      	add	r2, pc, #4	@ (adr r2, 800c568 <UART_SetConfig+0x478>)
 800c564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c568:	0800c581 	.word	0x0800c581
 800c56c:	0800c589 	.word	0x0800c589
 800c570:	0800c591 	.word	0x0800c591
 800c574:	0800c599 	.word	0x0800c599
 800c578:	0800c5a1 	.word	0x0800c5a1
 800c57c:	0800c5a9 	.word	0x0800c5a9
 800c580:	2300      	movs	r3, #0
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c586:	e18a      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c588:	2304      	movs	r3, #4
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58e:	e186      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c590:	2308      	movs	r3, #8
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c596:	e182      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c598:	2310      	movs	r3, #16
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c59e:	e17e      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c5a0:	2320      	movs	r3, #32
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5a6:	e17a      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c5a8:	2340      	movs	r3, #64	@ 0x40
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ae:	e176      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c5b0:	2380      	movs	r3, #128	@ 0x80
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5b6:	e172      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a5b      	ldr	r2, [pc, #364]	@ (800c72c <UART_SetConfig+0x63c>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d130      	bne.n	800c624 <UART_SetConfig+0x534>
 800c5c2:	4b58      	ldr	r3, [pc, #352]	@ (800c724 <UART_SetConfig+0x634>)
 800c5c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5c6:	f003 0307 	and.w	r3, r3, #7
 800c5ca:	2b05      	cmp	r3, #5
 800c5cc:	d826      	bhi.n	800c61c <UART_SetConfig+0x52c>
 800c5ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c5d4 <UART_SetConfig+0x4e4>)
 800c5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d4:	0800c5ed 	.word	0x0800c5ed
 800c5d8:	0800c5f5 	.word	0x0800c5f5
 800c5dc:	0800c5fd 	.word	0x0800c5fd
 800c5e0:	0800c605 	.word	0x0800c605
 800c5e4:	0800c60d 	.word	0x0800c60d
 800c5e8:	0800c615 	.word	0x0800c615
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5f2:	e154      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c5f4:	2304      	movs	r3, #4
 800c5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5fa:	e150      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c5fc:	2308      	movs	r3, #8
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c602:	e14c      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c604:	2310      	movs	r3, #16
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c60a:	e148      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c60c:	2320      	movs	r3, #32
 800c60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c612:	e144      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c614:	2340      	movs	r3, #64	@ 0x40
 800c616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c61a:	e140      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c61c:	2380      	movs	r3, #128	@ 0x80
 800c61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c622:	e13c      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a41      	ldr	r2, [pc, #260]	@ (800c730 <UART_SetConfig+0x640>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	f040 8082 	bne.w	800c734 <UART_SetConfig+0x644>
 800c630:	4b3c      	ldr	r3, [pc, #240]	@ (800c724 <UART_SetConfig+0x634>)
 800c632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c634:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c638:	2b28      	cmp	r3, #40	@ 0x28
 800c63a:	d86d      	bhi.n	800c718 <UART_SetConfig+0x628>
 800c63c:	a201      	add	r2, pc, #4	@ (adr r2, 800c644 <UART_SetConfig+0x554>)
 800c63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c642:	bf00      	nop
 800c644:	0800c6e9 	.word	0x0800c6e9
 800c648:	0800c719 	.word	0x0800c719
 800c64c:	0800c719 	.word	0x0800c719
 800c650:	0800c719 	.word	0x0800c719
 800c654:	0800c719 	.word	0x0800c719
 800c658:	0800c719 	.word	0x0800c719
 800c65c:	0800c719 	.word	0x0800c719
 800c660:	0800c719 	.word	0x0800c719
 800c664:	0800c6f1 	.word	0x0800c6f1
 800c668:	0800c719 	.word	0x0800c719
 800c66c:	0800c719 	.word	0x0800c719
 800c670:	0800c719 	.word	0x0800c719
 800c674:	0800c719 	.word	0x0800c719
 800c678:	0800c719 	.word	0x0800c719
 800c67c:	0800c719 	.word	0x0800c719
 800c680:	0800c719 	.word	0x0800c719
 800c684:	0800c6f9 	.word	0x0800c6f9
 800c688:	0800c719 	.word	0x0800c719
 800c68c:	0800c719 	.word	0x0800c719
 800c690:	0800c719 	.word	0x0800c719
 800c694:	0800c719 	.word	0x0800c719
 800c698:	0800c719 	.word	0x0800c719
 800c69c:	0800c719 	.word	0x0800c719
 800c6a0:	0800c719 	.word	0x0800c719
 800c6a4:	0800c701 	.word	0x0800c701
 800c6a8:	0800c719 	.word	0x0800c719
 800c6ac:	0800c719 	.word	0x0800c719
 800c6b0:	0800c719 	.word	0x0800c719
 800c6b4:	0800c719 	.word	0x0800c719
 800c6b8:	0800c719 	.word	0x0800c719
 800c6bc:	0800c719 	.word	0x0800c719
 800c6c0:	0800c719 	.word	0x0800c719
 800c6c4:	0800c709 	.word	0x0800c709
 800c6c8:	0800c719 	.word	0x0800c719
 800c6cc:	0800c719 	.word	0x0800c719
 800c6d0:	0800c719 	.word	0x0800c719
 800c6d4:	0800c719 	.word	0x0800c719
 800c6d8:	0800c719 	.word	0x0800c719
 800c6dc:	0800c719 	.word	0x0800c719
 800c6e0:	0800c719 	.word	0x0800c719
 800c6e4:	0800c711 	.word	0x0800c711
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ee:	e0d6      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c6f0:	2304      	movs	r3, #4
 800c6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6f6:	e0d2      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c6f8:	2308      	movs	r3, #8
 800c6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6fe:	e0ce      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c700:	2310      	movs	r3, #16
 800c702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c706:	e0ca      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c708:	2320      	movs	r3, #32
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c70e:	e0c6      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c710:	2340      	movs	r3, #64	@ 0x40
 800c712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c716:	e0c2      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c718:	2380      	movs	r3, #128	@ 0x80
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c71e:	e0be      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c720:	40011400 	.word	0x40011400
 800c724:	58024400 	.word	0x58024400
 800c728:	40007800 	.word	0x40007800
 800c72c:	40007c00 	.word	0x40007c00
 800c730:	40011800 	.word	0x40011800
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4aad      	ldr	r2, [pc, #692]	@ (800c9f0 <UART_SetConfig+0x900>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d176      	bne.n	800c82c <UART_SetConfig+0x73c>
 800c73e:	4bad      	ldr	r3, [pc, #692]	@ (800c9f4 <UART_SetConfig+0x904>)
 800c740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c742:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c746:	2b28      	cmp	r3, #40	@ 0x28
 800c748:	d86c      	bhi.n	800c824 <UART_SetConfig+0x734>
 800c74a:	a201      	add	r2, pc, #4	@ (adr r2, 800c750 <UART_SetConfig+0x660>)
 800c74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c750:	0800c7f5 	.word	0x0800c7f5
 800c754:	0800c825 	.word	0x0800c825
 800c758:	0800c825 	.word	0x0800c825
 800c75c:	0800c825 	.word	0x0800c825
 800c760:	0800c825 	.word	0x0800c825
 800c764:	0800c825 	.word	0x0800c825
 800c768:	0800c825 	.word	0x0800c825
 800c76c:	0800c825 	.word	0x0800c825
 800c770:	0800c7fd 	.word	0x0800c7fd
 800c774:	0800c825 	.word	0x0800c825
 800c778:	0800c825 	.word	0x0800c825
 800c77c:	0800c825 	.word	0x0800c825
 800c780:	0800c825 	.word	0x0800c825
 800c784:	0800c825 	.word	0x0800c825
 800c788:	0800c825 	.word	0x0800c825
 800c78c:	0800c825 	.word	0x0800c825
 800c790:	0800c805 	.word	0x0800c805
 800c794:	0800c825 	.word	0x0800c825
 800c798:	0800c825 	.word	0x0800c825
 800c79c:	0800c825 	.word	0x0800c825
 800c7a0:	0800c825 	.word	0x0800c825
 800c7a4:	0800c825 	.word	0x0800c825
 800c7a8:	0800c825 	.word	0x0800c825
 800c7ac:	0800c825 	.word	0x0800c825
 800c7b0:	0800c80d 	.word	0x0800c80d
 800c7b4:	0800c825 	.word	0x0800c825
 800c7b8:	0800c825 	.word	0x0800c825
 800c7bc:	0800c825 	.word	0x0800c825
 800c7c0:	0800c825 	.word	0x0800c825
 800c7c4:	0800c825 	.word	0x0800c825
 800c7c8:	0800c825 	.word	0x0800c825
 800c7cc:	0800c825 	.word	0x0800c825
 800c7d0:	0800c815 	.word	0x0800c815
 800c7d4:	0800c825 	.word	0x0800c825
 800c7d8:	0800c825 	.word	0x0800c825
 800c7dc:	0800c825 	.word	0x0800c825
 800c7e0:	0800c825 	.word	0x0800c825
 800c7e4:	0800c825 	.word	0x0800c825
 800c7e8:	0800c825 	.word	0x0800c825
 800c7ec:	0800c825 	.word	0x0800c825
 800c7f0:	0800c81d 	.word	0x0800c81d
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7fa:	e050      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c7fc:	2304      	movs	r3, #4
 800c7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c802:	e04c      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c804:	2308      	movs	r3, #8
 800c806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c80a:	e048      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c80c:	2310      	movs	r3, #16
 800c80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c812:	e044      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c814:	2320      	movs	r3, #32
 800c816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c81a:	e040      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c81c:	2340      	movs	r3, #64	@ 0x40
 800c81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c822:	e03c      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c824:	2380      	movs	r3, #128	@ 0x80
 800c826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c82a:	e038      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a71      	ldr	r2, [pc, #452]	@ (800c9f8 <UART_SetConfig+0x908>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d130      	bne.n	800c898 <UART_SetConfig+0x7a8>
 800c836:	4b6f      	ldr	r3, [pc, #444]	@ (800c9f4 <UART_SetConfig+0x904>)
 800c838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c83a:	f003 0307 	and.w	r3, r3, #7
 800c83e:	2b05      	cmp	r3, #5
 800c840:	d826      	bhi.n	800c890 <UART_SetConfig+0x7a0>
 800c842:	a201      	add	r2, pc, #4	@ (adr r2, 800c848 <UART_SetConfig+0x758>)
 800c844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c848:	0800c861 	.word	0x0800c861
 800c84c:	0800c869 	.word	0x0800c869
 800c850:	0800c871 	.word	0x0800c871
 800c854:	0800c879 	.word	0x0800c879
 800c858:	0800c881 	.word	0x0800c881
 800c85c:	0800c889 	.word	0x0800c889
 800c860:	2302      	movs	r3, #2
 800c862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c866:	e01a      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c868:	2304      	movs	r3, #4
 800c86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c86e:	e016      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c870:	2308      	movs	r3, #8
 800c872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c876:	e012      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c878:	2310      	movs	r3, #16
 800c87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c87e:	e00e      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c880:	2320      	movs	r3, #32
 800c882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c886:	e00a      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c888:	2340      	movs	r3, #64	@ 0x40
 800c88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c88e:	e006      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c890:	2380      	movs	r3, #128	@ 0x80
 800c892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c896:	e002      	b.n	800c89e <UART_SetConfig+0x7ae>
 800c898:	2380      	movs	r3, #128	@ 0x80
 800c89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a55      	ldr	r2, [pc, #340]	@ (800c9f8 <UART_SetConfig+0x908>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	f040 80f8 	bne.w	800ca9a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c8aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c8ae:	2b20      	cmp	r3, #32
 800c8b0:	dc46      	bgt.n	800c940 <UART_SetConfig+0x850>
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	db75      	blt.n	800c9a2 <UART_SetConfig+0x8b2>
 800c8b6:	3b02      	subs	r3, #2
 800c8b8:	2b1e      	cmp	r3, #30
 800c8ba:	d872      	bhi.n	800c9a2 <UART_SetConfig+0x8b2>
 800c8bc:	a201      	add	r2, pc, #4	@ (adr r2, 800c8c4 <UART_SetConfig+0x7d4>)
 800c8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c2:	bf00      	nop
 800c8c4:	0800c947 	.word	0x0800c947
 800c8c8:	0800c9a3 	.word	0x0800c9a3
 800c8cc:	0800c94f 	.word	0x0800c94f
 800c8d0:	0800c9a3 	.word	0x0800c9a3
 800c8d4:	0800c9a3 	.word	0x0800c9a3
 800c8d8:	0800c9a3 	.word	0x0800c9a3
 800c8dc:	0800c95f 	.word	0x0800c95f
 800c8e0:	0800c9a3 	.word	0x0800c9a3
 800c8e4:	0800c9a3 	.word	0x0800c9a3
 800c8e8:	0800c9a3 	.word	0x0800c9a3
 800c8ec:	0800c9a3 	.word	0x0800c9a3
 800c8f0:	0800c9a3 	.word	0x0800c9a3
 800c8f4:	0800c9a3 	.word	0x0800c9a3
 800c8f8:	0800c9a3 	.word	0x0800c9a3
 800c8fc:	0800c96f 	.word	0x0800c96f
 800c900:	0800c9a3 	.word	0x0800c9a3
 800c904:	0800c9a3 	.word	0x0800c9a3
 800c908:	0800c9a3 	.word	0x0800c9a3
 800c90c:	0800c9a3 	.word	0x0800c9a3
 800c910:	0800c9a3 	.word	0x0800c9a3
 800c914:	0800c9a3 	.word	0x0800c9a3
 800c918:	0800c9a3 	.word	0x0800c9a3
 800c91c:	0800c9a3 	.word	0x0800c9a3
 800c920:	0800c9a3 	.word	0x0800c9a3
 800c924:	0800c9a3 	.word	0x0800c9a3
 800c928:	0800c9a3 	.word	0x0800c9a3
 800c92c:	0800c9a3 	.word	0x0800c9a3
 800c930:	0800c9a3 	.word	0x0800c9a3
 800c934:	0800c9a3 	.word	0x0800c9a3
 800c938:	0800c9a3 	.word	0x0800c9a3
 800c93c:	0800c995 	.word	0x0800c995
 800c940:	2b40      	cmp	r3, #64	@ 0x40
 800c942:	d02a      	beq.n	800c99a <UART_SetConfig+0x8aa>
 800c944:	e02d      	b.n	800c9a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c946:	f7fb ff37 	bl	80087b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c94a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c94c:	e02f      	b.n	800c9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c94e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c952:	4618      	mov	r0, r3
 800c954:	f7fb ff46 	bl	80087e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c95c:	e027      	b.n	800c9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c95e:	f107 0318 	add.w	r3, r7, #24
 800c962:	4618      	mov	r0, r3
 800c964:	f7fc f892 	bl	8008a8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c96c:	e01f      	b.n	800c9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c96e:	4b21      	ldr	r3, [pc, #132]	@ (800c9f4 <UART_SetConfig+0x904>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f003 0320 	and.w	r3, r3, #32
 800c976:	2b00      	cmp	r3, #0
 800c978:	d009      	beq.n	800c98e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c97a:	4b1e      	ldr	r3, [pc, #120]	@ (800c9f4 <UART_SetConfig+0x904>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	08db      	lsrs	r3, r3, #3
 800c980:	f003 0303 	and.w	r3, r3, #3
 800c984:	4a1d      	ldr	r2, [pc, #116]	@ (800c9fc <UART_SetConfig+0x90c>)
 800c986:	fa22 f303 	lsr.w	r3, r2, r3
 800c98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c98c:	e00f      	b.n	800c9ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c98e:	4b1b      	ldr	r3, [pc, #108]	@ (800c9fc <UART_SetConfig+0x90c>)
 800c990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c992:	e00c      	b.n	800c9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c994:	4b1a      	ldr	r3, [pc, #104]	@ (800ca00 <UART_SetConfig+0x910>)
 800c996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c998:	e009      	b.n	800c9ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c99a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9a0:	e005      	b.n	800c9ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c9ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	f000 81ee 	beq.w	800cd92 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ba:	4a12      	ldr	r2, [pc, #72]	@ (800ca04 <UART_SetConfig+0x914>)
 800c9bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9c8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	685a      	ldr	r2, [r3, #4]
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	005b      	lsls	r3, r3, #1
 800c9d2:	4413      	add	r3, r2
 800c9d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d305      	bcc.n	800c9e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d910      	bls.n	800ca08 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c9ec:	e1d1      	b.n	800cd92 <UART_SetConfig+0xca2>
 800c9ee:	bf00      	nop
 800c9f0:	40011c00 	.word	0x40011c00
 800c9f4:	58024400 	.word	0x58024400
 800c9f8:	58000c00 	.word	0x58000c00
 800c9fc:	03d09000 	.word	0x03d09000
 800ca00:	003d0900 	.word	0x003d0900
 800ca04:	0800f124 	.word	0x0800f124
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	60bb      	str	r3, [r7, #8]
 800ca0e:	60fa      	str	r2, [r7, #12]
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca14:	4ac0      	ldr	r2, [pc, #768]	@ (800cd18 <UART_SetConfig+0xc28>)
 800ca16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	603b      	str	r3, [r7, #0]
 800ca20:	607a      	str	r2, [r7, #4]
 800ca22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca2a:	f7f3 fcc9 	bl	80003c0 <__aeabi_uldivmod>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	460b      	mov	r3, r1
 800ca32:	4610      	mov	r0, r2
 800ca34:	4619      	mov	r1, r3
 800ca36:	f04f 0200 	mov.w	r2, #0
 800ca3a:	f04f 0300 	mov.w	r3, #0
 800ca3e:	020b      	lsls	r3, r1, #8
 800ca40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca44:	0202      	lsls	r2, r0, #8
 800ca46:	6979      	ldr	r1, [r7, #20]
 800ca48:	6849      	ldr	r1, [r1, #4]
 800ca4a:	0849      	lsrs	r1, r1, #1
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	460c      	mov	r4, r1
 800ca50:	4605      	mov	r5, r0
 800ca52:	eb12 0804 	adds.w	r8, r2, r4
 800ca56:	eb43 0905 	adc.w	r9, r3, r5
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	469a      	mov	sl, r3
 800ca62:	4693      	mov	fp, r2
 800ca64:	4652      	mov	r2, sl
 800ca66:	465b      	mov	r3, fp
 800ca68:	4640      	mov	r0, r8
 800ca6a:	4649      	mov	r1, r9
 800ca6c:	f7f3 fca8 	bl	80003c0 <__aeabi_uldivmod>
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	4613      	mov	r3, r2
 800ca76:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca7e:	d308      	bcc.n	800ca92 <UART_SetConfig+0x9a2>
 800ca80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca86:	d204      	bcs.n	800ca92 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca8e:	60da      	str	r2, [r3, #12]
 800ca90:	e17f      	b.n	800cd92 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ca98:	e17b      	b.n	800cd92 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	69db      	ldr	r3, [r3, #28]
 800ca9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800caa2:	f040 80bd 	bne.w	800cc20 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800caa6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800caaa:	2b20      	cmp	r3, #32
 800caac:	dc48      	bgt.n	800cb40 <UART_SetConfig+0xa50>
 800caae:	2b00      	cmp	r3, #0
 800cab0:	db7b      	blt.n	800cbaa <UART_SetConfig+0xaba>
 800cab2:	2b20      	cmp	r3, #32
 800cab4:	d879      	bhi.n	800cbaa <UART_SetConfig+0xaba>
 800cab6:	a201      	add	r2, pc, #4	@ (adr r2, 800cabc <UART_SetConfig+0x9cc>)
 800cab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cabc:	0800cb47 	.word	0x0800cb47
 800cac0:	0800cb4f 	.word	0x0800cb4f
 800cac4:	0800cbab 	.word	0x0800cbab
 800cac8:	0800cbab 	.word	0x0800cbab
 800cacc:	0800cb57 	.word	0x0800cb57
 800cad0:	0800cbab 	.word	0x0800cbab
 800cad4:	0800cbab 	.word	0x0800cbab
 800cad8:	0800cbab 	.word	0x0800cbab
 800cadc:	0800cb67 	.word	0x0800cb67
 800cae0:	0800cbab 	.word	0x0800cbab
 800cae4:	0800cbab 	.word	0x0800cbab
 800cae8:	0800cbab 	.word	0x0800cbab
 800caec:	0800cbab 	.word	0x0800cbab
 800caf0:	0800cbab 	.word	0x0800cbab
 800caf4:	0800cbab 	.word	0x0800cbab
 800caf8:	0800cbab 	.word	0x0800cbab
 800cafc:	0800cb77 	.word	0x0800cb77
 800cb00:	0800cbab 	.word	0x0800cbab
 800cb04:	0800cbab 	.word	0x0800cbab
 800cb08:	0800cbab 	.word	0x0800cbab
 800cb0c:	0800cbab 	.word	0x0800cbab
 800cb10:	0800cbab 	.word	0x0800cbab
 800cb14:	0800cbab 	.word	0x0800cbab
 800cb18:	0800cbab 	.word	0x0800cbab
 800cb1c:	0800cbab 	.word	0x0800cbab
 800cb20:	0800cbab 	.word	0x0800cbab
 800cb24:	0800cbab 	.word	0x0800cbab
 800cb28:	0800cbab 	.word	0x0800cbab
 800cb2c:	0800cbab 	.word	0x0800cbab
 800cb30:	0800cbab 	.word	0x0800cbab
 800cb34:	0800cbab 	.word	0x0800cbab
 800cb38:	0800cbab 	.word	0x0800cbab
 800cb3c:	0800cb9d 	.word	0x0800cb9d
 800cb40:	2b40      	cmp	r3, #64	@ 0x40
 800cb42:	d02e      	beq.n	800cba2 <UART_SetConfig+0xab2>
 800cb44:	e031      	b.n	800cbaa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb46:	f7f9 ff99 	bl	8006a7c <HAL_RCC_GetPCLK1Freq>
 800cb4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb4c:	e033      	b.n	800cbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb4e:	f7f9 ffab 	bl	8006aa8 <HAL_RCC_GetPCLK2Freq>
 800cb52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cb54:	e02f      	b.n	800cbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fb fe42 	bl	80087e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb64:	e027      	b.n	800cbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb66:	f107 0318 	add.w	r3, r7, #24
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7fb ff8e 	bl	8008a8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb74:	e01f      	b.n	800cbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb76:	4b69      	ldr	r3, [pc, #420]	@ (800cd1c <UART_SetConfig+0xc2c>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f003 0320 	and.w	r3, r3, #32
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d009      	beq.n	800cb96 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb82:	4b66      	ldr	r3, [pc, #408]	@ (800cd1c <UART_SetConfig+0xc2c>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	08db      	lsrs	r3, r3, #3
 800cb88:	f003 0303 	and.w	r3, r3, #3
 800cb8c:	4a64      	ldr	r2, [pc, #400]	@ (800cd20 <UART_SetConfig+0xc30>)
 800cb8e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb94:	e00f      	b.n	800cbb6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cb96:	4b62      	ldr	r3, [pc, #392]	@ (800cd20 <UART_SetConfig+0xc30>)
 800cb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb9a:	e00c      	b.n	800cbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb9c:	4b61      	ldr	r3, [pc, #388]	@ (800cd24 <UART_SetConfig+0xc34>)
 800cb9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cba0:	e009      	b.n	800cbb6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cba8:	e005      	b.n	800cbb6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cbb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f000 80ea 	beq.w	800cd92 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbc2:	4a55      	ldr	r2, [pc, #340]	@ (800cd18 <UART_SetConfig+0xc28>)
 800cbc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbd0:	005a      	lsls	r2, r3, #1
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	085b      	lsrs	r3, r3, #1
 800cbd8:	441a      	add	r2, r3
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbe2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe6:	2b0f      	cmp	r3, #15
 800cbe8:	d916      	bls.n	800cc18 <UART_SetConfig+0xb28>
 800cbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbf0:	d212      	bcs.n	800cc18 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	f023 030f 	bic.w	r3, r3, #15
 800cbfa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbfe:	085b      	lsrs	r3, r3, #1
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	f003 0307 	and.w	r3, r3, #7
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cc14:	60da      	str	r2, [r3, #12]
 800cc16:	e0bc      	b.n	800cd92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cc1e:	e0b8      	b.n	800cd92 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cc24:	2b20      	cmp	r3, #32
 800cc26:	dc4b      	bgt.n	800ccc0 <UART_SetConfig+0xbd0>
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f2c0 8087 	blt.w	800cd3c <UART_SetConfig+0xc4c>
 800cc2e:	2b20      	cmp	r3, #32
 800cc30:	f200 8084 	bhi.w	800cd3c <UART_SetConfig+0xc4c>
 800cc34:	a201      	add	r2, pc, #4	@ (adr r2, 800cc3c <UART_SetConfig+0xb4c>)
 800cc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3a:	bf00      	nop
 800cc3c:	0800ccc7 	.word	0x0800ccc7
 800cc40:	0800cccf 	.word	0x0800cccf
 800cc44:	0800cd3d 	.word	0x0800cd3d
 800cc48:	0800cd3d 	.word	0x0800cd3d
 800cc4c:	0800ccd7 	.word	0x0800ccd7
 800cc50:	0800cd3d 	.word	0x0800cd3d
 800cc54:	0800cd3d 	.word	0x0800cd3d
 800cc58:	0800cd3d 	.word	0x0800cd3d
 800cc5c:	0800cce7 	.word	0x0800cce7
 800cc60:	0800cd3d 	.word	0x0800cd3d
 800cc64:	0800cd3d 	.word	0x0800cd3d
 800cc68:	0800cd3d 	.word	0x0800cd3d
 800cc6c:	0800cd3d 	.word	0x0800cd3d
 800cc70:	0800cd3d 	.word	0x0800cd3d
 800cc74:	0800cd3d 	.word	0x0800cd3d
 800cc78:	0800cd3d 	.word	0x0800cd3d
 800cc7c:	0800ccf7 	.word	0x0800ccf7
 800cc80:	0800cd3d 	.word	0x0800cd3d
 800cc84:	0800cd3d 	.word	0x0800cd3d
 800cc88:	0800cd3d 	.word	0x0800cd3d
 800cc8c:	0800cd3d 	.word	0x0800cd3d
 800cc90:	0800cd3d 	.word	0x0800cd3d
 800cc94:	0800cd3d 	.word	0x0800cd3d
 800cc98:	0800cd3d 	.word	0x0800cd3d
 800cc9c:	0800cd3d 	.word	0x0800cd3d
 800cca0:	0800cd3d 	.word	0x0800cd3d
 800cca4:	0800cd3d 	.word	0x0800cd3d
 800cca8:	0800cd3d 	.word	0x0800cd3d
 800ccac:	0800cd3d 	.word	0x0800cd3d
 800ccb0:	0800cd3d 	.word	0x0800cd3d
 800ccb4:	0800cd3d 	.word	0x0800cd3d
 800ccb8:	0800cd3d 	.word	0x0800cd3d
 800ccbc:	0800cd2f 	.word	0x0800cd2f
 800ccc0:	2b40      	cmp	r3, #64	@ 0x40
 800ccc2:	d037      	beq.n	800cd34 <UART_SetConfig+0xc44>
 800ccc4:	e03a      	b.n	800cd3c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccc6:	f7f9 fed9 	bl	8006a7c <HAL_RCC_GetPCLK1Freq>
 800ccca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cccc:	e03c      	b.n	800cd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccce:	f7f9 feeb 	bl	8006aa8 <HAL_RCC_GetPCLK2Freq>
 800ccd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ccd4:	e038      	b.n	800cd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fb fd82 	bl	80087e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cce4:	e030      	b.n	800cd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cce6:	f107 0318 	add.w	r3, r7, #24
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fb fece 	bl	8008a8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccf4:	e028      	b.n	800cd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccf6:	4b09      	ldr	r3, [pc, #36]	@ (800cd1c <UART_SetConfig+0xc2c>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 0320 	and.w	r3, r3, #32
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d012      	beq.n	800cd28 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd02:	4b06      	ldr	r3, [pc, #24]	@ (800cd1c <UART_SetConfig+0xc2c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	08db      	lsrs	r3, r3, #3
 800cd08:	f003 0303 	and.w	r3, r3, #3
 800cd0c:	4a04      	ldr	r2, [pc, #16]	@ (800cd20 <UART_SetConfig+0xc30>)
 800cd0e:	fa22 f303 	lsr.w	r3, r2, r3
 800cd12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd14:	e018      	b.n	800cd48 <UART_SetConfig+0xc58>
 800cd16:	bf00      	nop
 800cd18:	0800f124 	.word	0x0800f124
 800cd1c:	58024400 	.word	0x58024400
 800cd20:	03d09000 	.word	0x03d09000
 800cd24:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cd28:	4b24      	ldr	r3, [pc, #144]	@ (800cdbc <UART_SetConfig+0xccc>)
 800cd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd2c:	e00c      	b.n	800cd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd2e:	4b24      	ldr	r3, [pc, #144]	@ (800cdc0 <UART_SetConfig+0xcd0>)
 800cd30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd32:	e009      	b.n	800cd48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd3a:	e005      	b.n	800cd48 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cd46:	bf00      	nop
    }

    if (pclk != 0U)
 800cd48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d021      	beq.n	800cd92 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd52:	4a1c      	ldr	r2, [pc, #112]	@ (800cdc4 <UART_SetConfig+0xcd4>)
 800cd54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd5c:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	085b      	lsrs	r3, r3, #1
 800cd66:	441a      	add	r2, r3
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd70:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd74:	2b0f      	cmp	r3, #15
 800cd76:	d909      	bls.n	800cd8c <UART_SetConfig+0xc9c>
 800cd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd7e:	d205      	bcs.n	800cd8c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	60da      	str	r2, [r3, #12]
 800cd8a:	e002      	b.n	800cd92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	2201      	movs	r2, #1
 800cd96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	2200      	movs	r2, #0
 800cda6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cdae:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3748      	adds	r7, #72	@ 0x48
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdbc:	03d09000 	.word	0x03d09000
 800cdc0:	003d0900 	.word	0x003d0900
 800cdc4:	0800f124 	.word	0x0800f124

0800cdc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b083      	sub	sp, #12
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdd4:	f003 0308 	and.w	r3, r3, #8
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00a      	beq.n	800cdf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	430a      	orrs	r2, r1
 800cdf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdf6:	f003 0301 	and.w	r3, r3, #1
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00a      	beq.n	800ce14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	430a      	orrs	r2, r1
 800ce12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce18:	f003 0302 	and.w	r3, r3, #2
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00a      	beq.n	800ce36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	430a      	orrs	r2, r1
 800ce34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce3a:	f003 0304 	and.w	r3, r3, #4
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00a      	beq.n	800ce58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	430a      	orrs	r2, r1
 800ce56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce5c:	f003 0310 	and.w	r3, r3, #16
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00a      	beq.n	800ce7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	430a      	orrs	r2, r1
 800ce78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce7e:	f003 0320 	and.w	r3, r3, #32
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00a      	beq.n	800ce9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	430a      	orrs	r2, r1
 800ce9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d01a      	beq.n	800cede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	430a      	orrs	r2, r1
 800cebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cec6:	d10a      	bne.n	800cede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	430a      	orrs	r2, r1
 800cedc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00a      	beq.n	800cf00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	430a      	orrs	r2, r1
 800cefe:	605a      	str	r2, [r3, #4]
  }
}
 800cf00:	bf00      	nop
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b098      	sub	sp, #96	@ 0x60
 800cf10:	af02      	add	r7, sp, #8
 800cf12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf1c:	f7f5 fc30 	bl	8002780 <HAL_GetTick>
 800cf20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f003 0308 	and.w	r3, r3, #8
 800cf2c:	2b08      	cmp	r3, #8
 800cf2e:	d12f      	bne.n	800cf90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 f88e 	bl	800d060 <UART_WaitOnFlagUntilTimeout>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d022      	beq.n	800cf90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf52:	e853 3f00 	ldrex	r3, [r3]
 800cf56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cf58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf5e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	461a      	mov	r2, r3
 800cf66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf68:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cf6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf70:	e841 2300 	strex	r3, r2, [r1]
 800cf74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cf76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1e6      	bne.n	800cf4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2220      	movs	r2, #32
 800cf80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e063      	b.n	800d058 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f003 0304 	and.w	r3, r3, #4
 800cf9a:	2b04      	cmp	r3, #4
 800cf9c:	d149      	bne.n	800d032 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cfa2:	9300      	str	r3, [sp, #0]
 800cfa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 f857 	bl	800d060 <UART_WaitOnFlagUntilTimeout>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d03c      	beq.n	800d032 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc0:	e853 3f00 	ldrex	r3, [r3]
 800cfc4:	623b      	str	r3, [r7, #32]
   return(result);
 800cfc6:	6a3b      	ldr	r3, [r7, #32]
 800cfc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cfcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfd6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cfd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cfdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfde:	e841 2300 	strex	r3, r2, [r1]
 800cfe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cfe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1e6      	bne.n	800cfb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	3308      	adds	r3, #8
 800cff0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	e853 3f00 	ldrex	r3, [r3]
 800cff8:	60fb      	str	r3, [r7, #12]
   return(result);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f023 0301 	bic.w	r3, r3, #1
 800d000:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	3308      	adds	r3, #8
 800d008:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d00a:	61fa      	str	r2, [r7, #28]
 800d00c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d00e:	69b9      	ldr	r1, [r7, #24]
 800d010:	69fa      	ldr	r2, [r7, #28]
 800d012:	e841 2300 	strex	r3, r2, [r1]
 800d016:	617b      	str	r3, [r7, #20]
   return(result);
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1e5      	bne.n	800cfea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2220      	movs	r2, #32
 800d022:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d02e:	2303      	movs	r3, #3
 800d030:	e012      	b.n	800d058 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2220      	movs	r2, #32
 800d036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2220      	movs	r2, #32
 800d03e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d056:	2300      	movs	r3, #0
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3758      	adds	r7, #88	@ 0x58
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	603b      	str	r3, [r7, #0]
 800d06c:	4613      	mov	r3, r2
 800d06e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d070:	e04f      	b.n	800d112 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d078:	d04b      	beq.n	800d112 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d07a:	f7f5 fb81 	bl	8002780 <HAL_GetTick>
 800d07e:	4602      	mov	r2, r0
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	1ad3      	subs	r3, r2, r3
 800d084:	69ba      	ldr	r2, [r7, #24]
 800d086:	429a      	cmp	r2, r3
 800d088:	d302      	bcc.n	800d090 <UART_WaitOnFlagUntilTimeout+0x30>
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d101      	bne.n	800d094 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d090:	2303      	movs	r3, #3
 800d092:	e04e      	b.n	800d132 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f003 0304 	and.w	r3, r3, #4
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d037      	beq.n	800d112 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	2b80      	cmp	r3, #128	@ 0x80
 800d0a6:	d034      	beq.n	800d112 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	2b40      	cmp	r3, #64	@ 0x40
 800d0ac:	d031      	beq.n	800d112 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	69db      	ldr	r3, [r3, #28]
 800d0b4:	f003 0308 	and.w	r3, r3, #8
 800d0b8:	2b08      	cmp	r3, #8
 800d0ba:	d110      	bne.n	800d0de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2208      	movs	r2, #8
 800d0c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f000 f839 	bl	800d13c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2208      	movs	r2, #8
 800d0ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e029      	b.n	800d132 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	69db      	ldr	r3, [r3, #28]
 800d0e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d0e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d0ec:	d111      	bne.n	800d112 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d0f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f000 f81f 	bl	800d13c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2220      	movs	r2, #32
 800d102:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2200      	movs	r2, #0
 800d10a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d10e:	2303      	movs	r3, #3
 800d110:	e00f      	b.n	800d132 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	69da      	ldr	r2, [r3, #28]
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	4013      	ands	r3, r2
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	429a      	cmp	r2, r3
 800d120:	bf0c      	ite	eq
 800d122:	2301      	moveq	r3, #1
 800d124:	2300      	movne	r3, #0
 800d126:	b2db      	uxtb	r3, r3
 800d128:	461a      	mov	r2, r3
 800d12a:	79fb      	ldrb	r3, [r7, #7]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d0a0      	beq.n	800d072 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
	...

0800d13c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b095      	sub	sp, #84	@ 0x54
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d14c:	e853 3f00 	ldrex	r3, [r3]
 800d150:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d158:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	461a      	mov	r2, r3
 800d160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d162:	643b      	str	r3, [r7, #64]	@ 0x40
 800d164:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d166:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d168:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d16a:	e841 2300 	strex	r3, r2, [r1]
 800d16e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1e6      	bne.n	800d144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	3308      	adds	r3, #8
 800d17c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17e:	6a3b      	ldr	r3, [r7, #32]
 800d180:	e853 3f00 	ldrex	r3, [r3]
 800d184:	61fb      	str	r3, [r7, #28]
   return(result);
 800d186:	69fa      	ldr	r2, [r7, #28]
 800d188:	4b1e      	ldr	r3, [pc, #120]	@ (800d204 <UART_EndRxTransfer+0xc8>)
 800d18a:	4013      	ands	r3, r2
 800d18c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	3308      	adds	r3, #8
 800d194:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d198:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d19c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d19e:	e841 2300 	strex	r3, r2, [r1]
 800d1a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d1e5      	bne.n	800d176 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d118      	bne.n	800d1e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	e853 3f00 	ldrex	r3, [r3]
 800d1be:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	f023 0310 	bic.w	r3, r3, #16
 800d1c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1d0:	61bb      	str	r3, [r7, #24]
 800d1d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d4:	6979      	ldr	r1, [r7, #20]
 800d1d6:	69ba      	ldr	r2, [r7, #24]
 800d1d8:	e841 2300 	strex	r3, r2, [r1]
 800d1dc:	613b      	str	r3, [r7, #16]
   return(result);
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1e6      	bne.n	800d1b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2220      	movs	r2, #32
 800d1e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d1f8:	bf00      	nop
 800d1fa:	3754      	adds	r7, #84	@ 0x54
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr
 800d204:	effffffe 	.word	0xeffffffe

0800d208 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d216:	2b01      	cmp	r3, #1
 800d218:	d101      	bne.n	800d21e <HAL_UARTEx_DisableFifoMode+0x16>
 800d21a:	2302      	movs	r3, #2
 800d21c:	e027      	b.n	800d26e <HAL_UARTEx_DisableFifoMode+0x66>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2201      	movs	r2, #1
 800d222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2224      	movs	r2, #36	@ 0x24
 800d22a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f022 0201 	bic.w	r2, r2, #1
 800d244:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d24c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2200      	movs	r2, #0
 800d252:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	68fa      	ldr	r2, [r7, #12]
 800d25a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2220      	movs	r2, #32
 800d260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d26c:	2300      	movs	r3, #0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3714      	adds	r7, #20
 800d272:	46bd      	mov	sp, r7
 800d274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d278:	4770      	bx	lr

0800d27a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b084      	sub	sp, #16
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
 800d282:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d101      	bne.n	800d292 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d28e:	2302      	movs	r3, #2
 800d290:	e02d      	b.n	800d2ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2201      	movs	r2, #1
 800d296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2224      	movs	r2, #36	@ 0x24
 800d29e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f022 0201 	bic.w	r2, r2, #1
 800d2b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	683a      	ldr	r2, [r7, #0]
 800d2ca:	430a      	orrs	r2, r1
 800d2cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f850 	bl	800d374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2220      	movs	r2, #32
 800d2e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}

0800d2f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b084      	sub	sp, #16
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
 800d2fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d306:	2b01      	cmp	r3, #1
 800d308:	d101      	bne.n	800d30e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d30a:	2302      	movs	r3, #2
 800d30c:	e02d      	b.n	800d36a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2201      	movs	r2, #1
 800d312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2224      	movs	r2, #36	@ 0x24
 800d31a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f022 0201 	bic.w	r2, r2, #1
 800d334:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	683a      	ldr	r2, [r7, #0]
 800d346:	430a      	orrs	r2, r1
 800d348:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 f812 	bl	800d374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2220      	movs	r2, #32
 800d35c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d368:	2300      	movs	r3, #0
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
	...

0800d374 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d374:	b480      	push	{r7}
 800d376:	b085      	sub	sp, #20
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d380:	2b00      	cmp	r3, #0
 800d382:	d108      	bne.n	800d396 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2201      	movs	r2, #1
 800d388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d394:	e031      	b.n	800d3fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d396:	2310      	movs	r3, #16
 800d398:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d39a:	2310      	movs	r3, #16
 800d39c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	0e5b      	lsrs	r3, r3, #25
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	f003 0307 	and.w	r3, r3, #7
 800d3ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	0f5b      	lsrs	r3, r3, #29
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	f003 0307 	and.w	r3, r3, #7
 800d3bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3be:	7bbb      	ldrb	r3, [r7, #14]
 800d3c0:	7b3a      	ldrb	r2, [r7, #12]
 800d3c2:	4911      	ldr	r1, [pc, #68]	@ (800d408 <UARTEx_SetNbDataToProcess+0x94>)
 800d3c4:	5c8a      	ldrb	r2, [r1, r2]
 800d3c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d3ca:	7b3a      	ldrb	r2, [r7, #12]
 800d3cc:	490f      	ldr	r1, [pc, #60]	@ (800d40c <UARTEx_SetNbDataToProcess+0x98>)
 800d3ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d3dc:	7bfb      	ldrb	r3, [r7, #15]
 800d3de:	7b7a      	ldrb	r2, [r7, #13]
 800d3e0:	4909      	ldr	r1, [pc, #36]	@ (800d408 <UARTEx_SetNbDataToProcess+0x94>)
 800d3e2:	5c8a      	ldrb	r2, [r1, r2]
 800d3e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d3e8:	7b7a      	ldrb	r2, [r7, #13]
 800d3ea:	4908      	ldr	r1, [pc, #32]	@ (800d40c <UARTEx_SetNbDataToProcess+0x98>)
 800d3ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d3ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3f2:	b29a      	uxth	r2, r3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d3fa:	bf00      	nop
 800d3fc:	3714      	adds	r7, #20
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	0800f13c 	.word	0x0800f13c
 800d40c:	0800f144 	.word	0x0800f144

0800d410 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d410:	b084      	sub	sp, #16
 800d412:	b480      	push	{r7}
 800d414:	b085      	sub	sp, #20
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	f107 001c 	add.w	r0, r7, #28
 800d41e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d422:	2300      	movs	r3, #0
 800d424:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d426:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d428:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d42a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800d42e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800d432:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800d436:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d438:	68fa      	ldr	r2, [r7, #12]
 800d43a:	4313      	orrs	r3, r2
 800d43c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	685a      	ldr	r2, [r3, #4]
 800d442:	4b07      	ldr	r3, [pc, #28]	@ (800d460 <SDMMC_Init+0x50>)
 800d444:	4013      	ands	r3, r2
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	431a      	orrs	r2, r3
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3714      	adds	r7, #20
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	b004      	add	sp, #16
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	ffc02c00 	.word	0xffc02c00

0800d464 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d472:	4618      	mov	r0, r3
 800d474:	370c      	adds	r7, #12
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr

0800d47e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d47e:	b480      	push	{r7}
 800d480:	b083      	sub	sp, #12
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
 800d486:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f043 0203 	orr.w	r2, r3, #3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	370c      	adds	r7, #12
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr

0800d4c2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d4c2:	b480      	push	{r7}
 800d4c4:	b083      	sub	sp, #12
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f003 0303 	and.w	r3, r3, #3
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	370c      	adds	r7, #12
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr
	...

0800d4e0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d4fe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d504:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d50a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	4313      	orrs	r3, r2
 800d510:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	68da      	ldr	r2, [r3, #12]
 800d516:	4b06      	ldr	r3, [pc, #24]	@ (800d530 <SDMMC_SendCommand+0x50>)
 800d518:	4013      	ands	r3, r2
 800d51a:	68fa      	ldr	r2, [r7, #12]
 800d51c:	431a      	orrs	r2, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3714      	adds	r7, #20
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr
 800d530:	fffee0c0 	.word	0xfffee0c0

0800d534 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	691b      	ldr	r3, [r3, #16]
 800d540:	b2db      	uxtb	r3, r3
}
 800d542:	4618      	mov	r0, r3
 800d544:	370c      	adds	r7, #12
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr

0800d54e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d54e:	b480      	push	{r7}
 800d550:	b085      	sub	sp, #20
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
 800d556:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	3314      	adds	r3, #20
 800d55c:	461a      	mov	r2, r3
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	4413      	add	r3, r2
 800d562:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3714      	adds	r7, #20
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d57e:	2300      	movs	r3, #0
 800d580:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	685a      	ldr	r2, [r3, #4]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d59a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d5a0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d5a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	431a      	orrs	r2, r3
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d5be:	2300      	movs	r3, #0

}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b088      	sub	sp, #32
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d5da:	2310      	movs	r3, #16
 800d5dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d5e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5ee:	f107 0308 	add.w	r3, r7, #8
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7ff ff73 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d5fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5fe:	2110      	movs	r1, #16
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 fa5f 	bl	800dac4 <SDMMC_GetCmdResp1>
 800d606:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d608:	69fb      	ldr	r3, [r7, #28]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3720      	adds	r7, #32
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b088      	sub	sp, #32
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
 800d61a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d620:	2311      	movs	r3, #17
 800d622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d62a:	2300      	movs	r3, #0
 800d62c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d62e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d634:	f107 0308 	add.w	r3, r7, #8
 800d638:	4619      	mov	r1, r3
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7ff ff50 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d640:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d644:	2111      	movs	r1, #17
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fa3c 	bl	800dac4 <SDMMC_GetCmdResp1>
 800d64c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d64e:	69fb      	ldr	r3, [r7, #28]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3720      	adds	r7, #32
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b088      	sub	sp, #32
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d666:	2312      	movs	r3, #18
 800d668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d66a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d66e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d670:	2300      	movs	r3, #0
 800d672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d678:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d67a:	f107 0308 	add.w	r3, r7, #8
 800d67e:	4619      	mov	r1, r3
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f7ff ff2d 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d68a:	2112      	movs	r1, #18
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 fa19 	bl	800dac4 <SDMMC_GetCmdResp1>
 800d692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d694:	69fb      	ldr	r3, [r7, #28]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3720      	adds	r7, #32
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b088      	sub	sp, #32
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
 800d6a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d6ac:	2318      	movs	r3, #24
 800d6ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d6b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d6be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6c0:	f107 0308 	add.w	r3, r7, #8
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f7ff ff0a 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d6cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6d0:	2118      	movs	r1, #24
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 f9f6 	bl	800dac4 <SDMMC_GetCmdResp1>
 800d6d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6da:	69fb      	ldr	r3, [r7, #28]
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3720      	adds	r7, #32
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b088      	sub	sp, #32
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d6f2:	2319      	movs	r3, #25
 800d6f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d6fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d704:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d706:	f107 0308 	add.w	r3, r7, #8
 800d70a:	4619      	mov	r1, r3
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f7ff fee7 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d712:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d716:	2119      	movs	r1, #25
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 f9d3 	bl	800dac4 <SDMMC_GetCmdResp1>
 800d71e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d720:	69fb      	ldr	r3, [r7, #28]
}
 800d722:	4618      	mov	r0, r3
 800d724:	3720      	adds	r7, #32
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
	...

0800d72c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b088      	sub	sp, #32
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d734:	2300      	movs	r3, #0
 800d736:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d738:	230c      	movs	r3, #12
 800d73a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d73c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d742:	2300      	movs	r3, #0
 800d744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d74a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	68db      	ldr	r3, [r3, #12]
 800d750:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d764:	f107 0308 	add.w	r3, r7, #8
 800d768:	4619      	mov	r1, r3
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f7ff feb8 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d770:	4a0b      	ldr	r2, [pc, #44]	@ (800d7a0 <SDMMC_CmdStopTransfer+0x74>)
 800d772:	210c      	movs	r1, #12
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 f9a5 	bl	800dac4 <SDMMC_GetCmdResp1>
 800d77a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d78e:	d101      	bne.n	800d794 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d790:	2300      	movs	r3, #0
 800d792:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d794:	69fb      	ldr	r3, [r7, #28]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3720      	adds	r7, #32
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	05f5e100 	.word	0x05f5e100

0800d7a4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b088      	sub	sp, #32
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d7b2:	2307      	movs	r3, #7
 800d7b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d7c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7c6:	f107 0308 	add.w	r3, r7, #8
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7ff fe87 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d7d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7d6:	2107      	movs	r1, #7
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 f973 	bl	800dac4 <SDMMC_GetCmdResp1>
 800d7de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7e0:	69fb      	ldr	r3, [r7, #28]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3720      	adds	r7, #32
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b088      	sub	sp, #32
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7fe:	2300      	movs	r3, #0
 800d800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d802:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d806:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d808:	f107 0308 	add.w	r3, r7, #8
 800d80c:	4619      	mov	r1, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff fe66 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 fb97 	bl	800df48 <SDMMC_GetCmdError>
 800d81a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d81c:	69fb      	ldr	r3, [r7, #28]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3720      	adds	r7, #32
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b088      	sub	sp, #32
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d82e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d832:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d834:	2308      	movs	r3, #8
 800d836:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d838:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d83c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d83e:	2300      	movs	r3, #0
 800d840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d842:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d846:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d848:	f107 0308 	add.w	r3, r7, #8
 800d84c:	4619      	mov	r1, r3
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f7ff fe46 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 fb29 	bl	800deac <SDMMC_GetCmdResp7>
 800d85a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d85c:	69fb      	ldr	r3, [r7, #28]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3720      	adds	r7, #32
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b088      	sub	sp, #32
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d874:	2337      	movs	r3, #55	@ 0x37
 800d876:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d878:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d87c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d87e:	2300      	movs	r3, #0
 800d880:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d886:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d888:	f107 0308 	add.w	r3, r7, #8
 800d88c:	4619      	mov	r1, r3
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f7ff fe26 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d894:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d898:	2137      	movs	r1, #55	@ 0x37
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f000 f912 	bl	800dac4 <SDMMC_GetCmdResp1>
 800d8a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8a2:	69fb      	ldr	r3, [r7, #28]
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3720      	adds	r7, #32
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b088      	sub	sp, #32
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d8ba:	2329      	movs	r3, #41	@ 0x29
 800d8bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d8c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d8cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8ce:	f107 0308 	add.w	r3, r7, #8
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f7ff fe03 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 fa2e 	bl	800dd3c <SDMMC_GetCmdResp3>
 800d8e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8e2:	69fb      	ldr	r3, [r7, #28]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3720      	adds	r7, #32
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b088      	sub	sp, #32
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d8fa:	2306      	movs	r3, #6
 800d8fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d904:	2300      	movs	r3, #0
 800d906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d90c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d90e:	f107 0308 	add.w	r3, r7, #8
 800d912:	4619      	mov	r1, r3
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f7ff fde3 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d91a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d91e:	2106      	movs	r1, #6
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 f8cf 	bl	800dac4 <SDMMC_GetCmdResp1>
 800d926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d928:	69fb      	ldr	r3, [r7, #28]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3720      	adds	r7, #32
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b088      	sub	sp, #32
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d93a:	2300      	movs	r3, #0
 800d93c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d93e:	2333      	movs	r3, #51	@ 0x33
 800d940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d942:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d948:	2300      	movs	r3, #0
 800d94a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d94c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d950:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d952:	f107 0308 	add.w	r3, r7, #8
 800d956:	4619      	mov	r1, r3
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7ff fdc1 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d95e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d962:	2133      	movs	r1, #51	@ 0x33
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 f8ad 	bl	800dac4 <SDMMC_GetCmdResp1>
 800d96a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d96c:	69fb      	ldr	r3, [r7, #28]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3720      	adds	r7, #32
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}

0800d976 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d976:	b580      	push	{r7, lr}
 800d978:	b088      	sub	sp, #32
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d97e:	2300      	movs	r3, #0
 800d980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d982:	2302      	movs	r3, #2
 800d984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d986:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d98a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d98c:	2300      	movs	r3, #0
 800d98e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d994:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d996:	f107 0308 	add.w	r3, r7, #8
 800d99a:	4619      	mov	r1, r3
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7ff fd9f 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 f980 	bl	800dca8 <SDMMC_GetCmdResp2>
 800d9a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9aa:	69fb      	ldr	r3, [r7, #28]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3720      	adds	r7, #32
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b088      	sub	sp, #32
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d9c2:	2309      	movs	r3, #9
 800d9c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d9c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d9ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d9d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9d6:	f107 0308 	add.w	r3, r7, #8
 800d9da:	4619      	mov	r1, r3
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7ff fd7f 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 f960 	bl	800dca8 <SDMMC_GetCmdResp2>
 800d9e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9ea:	69fb      	ldr	r3, [r7, #28]
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3720      	adds	r7, #32
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b088      	sub	sp, #32
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d9fe:	2300      	movs	r3, #0
 800da00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800da02:	2303      	movs	r3, #3
 800da04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da0c:	2300      	movs	r3, #0
 800da0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da16:	f107 0308 	add.w	r3, r7, #8
 800da1a:	4619      	mov	r1, r3
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f7ff fd5f 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800da22:	683a      	ldr	r2, [r7, #0]
 800da24:	2103      	movs	r1, #3
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f000 f9c8 	bl	800ddbc <SDMMC_GetCmdResp6>
 800da2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da2e:	69fb      	ldr	r3, [r7, #28]
}
 800da30:	4618      	mov	r0, r3
 800da32:	3720      	adds	r7, #32
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b088      	sub	sp, #32
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800da46:	230d      	movs	r3, #13
 800da48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da50:	2300      	movs	r3, #0
 800da52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da5a:	f107 0308 	add.w	r3, r7, #8
 800da5e:	4619      	mov	r1, r3
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7ff fd3d 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800da66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da6a:	210d      	movs	r1, #13
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 f829 	bl	800dac4 <SDMMC_GetCmdResp1>
 800da72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da74:	69fb      	ldr	r3, [r7, #28]
}
 800da76:	4618      	mov	r0, r3
 800da78:	3720      	adds	r7, #32
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b088      	sub	sp, #32
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800da86:	2300      	movs	r3, #0
 800da88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800da8a:	230d      	movs	r3, #13
 800da8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da94:	2300      	movs	r3, #0
 800da96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da9e:	f107 0308 	add.w	r3, r7, #8
 800daa2:	4619      	mov	r1, r3
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7ff fd1b 	bl	800d4e0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800daaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800daae:	210d      	movs	r1, #13
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 f807 	bl	800dac4 <SDMMC_GetCmdResp1>
 800dab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dab8:	69fb      	ldr	r3, [r7, #28]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3720      	adds	r7, #32
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
	...

0800dac4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b088      	sub	sp, #32
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	460b      	mov	r3, r1
 800dace:	607a      	str	r2, [r7, #4]
 800dad0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dad2:	4b70      	ldr	r3, [pc, #448]	@ (800dc94 <SDMMC_GetCmdResp1+0x1d0>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a70      	ldr	r2, [pc, #448]	@ (800dc98 <SDMMC_GetCmdResp1+0x1d4>)
 800dad8:	fba2 2303 	umull	r2, r3, r2, r3
 800dadc:	0a5a      	lsrs	r2, r3, #9
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	fb02 f303 	mul.w	r3, r2, r3
 800dae4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	1e5a      	subs	r2, r3, #1
 800daea:	61fa      	str	r2, [r7, #28]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d102      	bne.n	800daf6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800daf0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800daf4:	e0c9      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dafa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800dafc:	69ba      	ldr	r2, [r7, #24]
 800dafe:	4b67      	ldr	r3, [pc, #412]	@ (800dc9c <SDMMC_GetCmdResp1+0x1d8>)
 800db00:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800db02:	2b00      	cmp	r3, #0
 800db04:	d0ef      	beq.n	800dae6 <SDMMC_GetCmdResp1+0x22>
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d1ea      	bne.n	800dae6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db14:	f003 0304 	and.w	r3, r3, #4
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d004      	beq.n	800db26 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2204      	movs	r2, #4
 800db20:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db22:	2304      	movs	r3, #4
 800db24:	e0b1      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db2a:	f003 0301 	and.w	r3, r3, #1
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d004      	beq.n	800db3c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2201      	movs	r2, #1
 800db36:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db38:	2301      	movs	r3, #1
 800db3a:	e0a6      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	4a58      	ldr	r2, [pc, #352]	@ (800dca0 <SDMMC_GetCmdResp1+0x1dc>)
 800db40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f7ff fcf6 	bl	800d534 <SDMMC_GetCommandResponse>
 800db48:	4603      	mov	r3, r0
 800db4a:	461a      	mov	r2, r3
 800db4c:	7afb      	ldrb	r3, [r7, #11]
 800db4e:	4293      	cmp	r3, r2
 800db50:	d001      	beq.n	800db56 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db52:	2301      	movs	r3, #1
 800db54:	e099      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800db56:	2100      	movs	r1, #0
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f7ff fcf8 	bl	800d54e <SDMMC_GetResponse>
 800db5e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800db60:	697a      	ldr	r2, [r7, #20]
 800db62:	4b50      	ldr	r3, [pc, #320]	@ (800dca4 <SDMMC_GetCmdResp1+0x1e0>)
 800db64:	4013      	ands	r3, r2
 800db66:	2b00      	cmp	r3, #0
 800db68:	d101      	bne.n	800db6e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800db6a:	2300      	movs	r3, #0
 800db6c:	e08d      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	2b00      	cmp	r3, #0
 800db72:	da02      	bge.n	800db7a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800db74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800db78:	e087      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800db80:	2b00      	cmp	r3, #0
 800db82:	d001      	beq.n	800db88 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800db84:	2340      	movs	r3, #64	@ 0x40
 800db86:	e080      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d001      	beq.n	800db96 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800db92:	2380      	movs	r3, #128	@ 0x80
 800db94:	e079      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d002      	beq.n	800dba6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dba0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dba4:	e071      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d002      	beq.n	800dbb6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dbb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dbb4:	e069      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d002      	beq.n	800dbc6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dbc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbc4:	e061      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d002      	beq.n	800dbd6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dbd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dbd4:	e059      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dbe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dbe4:	e051      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d002      	beq.n	800dbf6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dbf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dbf4:	e049      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d002      	beq.n	800dc06 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dc00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800dc04:	e041      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d002      	beq.n	800dc16 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800dc10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc14:	e039      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dc20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800dc24:	e031      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d002      	beq.n	800dc36 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dc30:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800dc34:	e029      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dc40:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dc44:	e021      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d002      	beq.n	800dc56 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dc50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800dc54:	e019      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dc60:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800dc64:	e011      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d002      	beq.n	800dc76 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dc70:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800dc74:	e009      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	f003 0308 	and.w	r3, r3, #8
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dc80:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800dc84:	e001      	b.n	800dc8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dc86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3720      	adds	r7, #32
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	2400000c 	.word	0x2400000c
 800dc98:	10624dd3 	.word	0x10624dd3
 800dc9c:	00200045 	.word	0x00200045
 800dca0:	002000c5 	.word	0x002000c5
 800dca4:	fdffe008 	.word	0xfdffe008

0800dca8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dcb0:	4b1f      	ldr	r3, [pc, #124]	@ (800dd30 <SDMMC_GetCmdResp2+0x88>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a1f      	ldr	r2, [pc, #124]	@ (800dd34 <SDMMC_GetCmdResp2+0x8c>)
 800dcb6:	fba2 2303 	umull	r2, r3, r2, r3
 800dcba:	0a5b      	lsrs	r3, r3, #9
 800dcbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dcc0:	fb02 f303 	mul.w	r3, r2, r3
 800dcc4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	1e5a      	subs	r2, r3, #1
 800dcca:	60fa      	str	r2, [r7, #12]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d102      	bne.n	800dcd6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dcd0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dcd4:	e026      	b.n	800dd24 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcda:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d0ef      	beq.n	800dcc6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d1ea      	bne.n	800dcc6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcf4:	f003 0304 	and.w	r3, r3, #4
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d004      	beq.n	800dd06 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2204      	movs	r2, #4
 800dd00:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd02:	2304      	movs	r3, #4
 800dd04:	e00e      	b.n	800dd24 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd0a:	f003 0301 	and.w	r3, r3, #1
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d004      	beq.n	800dd1c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2201      	movs	r2, #1
 800dd16:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	e003      	b.n	800dd24 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	4a06      	ldr	r2, [pc, #24]	@ (800dd38 <SDMMC_GetCmdResp2+0x90>)
 800dd20:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dd22:	2300      	movs	r3, #0
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3714      	adds	r7, #20
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr
 800dd30:	2400000c 	.word	0x2400000c
 800dd34:	10624dd3 	.word	0x10624dd3
 800dd38:	002000c5 	.word	0x002000c5

0800dd3c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b085      	sub	sp, #20
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dd44:	4b1a      	ldr	r3, [pc, #104]	@ (800ddb0 <SDMMC_GetCmdResp3+0x74>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a1a      	ldr	r2, [pc, #104]	@ (800ddb4 <SDMMC_GetCmdResp3+0x78>)
 800dd4a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd4e:	0a5b      	lsrs	r3, r3, #9
 800dd50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd54:	fb02 f303 	mul.w	r3, r2, r3
 800dd58:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	1e5a      	subs	r2, r3, #1
 800dd5e:	60fa      	str	r2, [r7, #12]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d102      	bne.n	800dd6a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd68:	e01b      	b.n	800dda2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd6e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d0ef      	beq.n	800dd5a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d1ea      	bne.n	800dd5a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd88:	f003 0304 	and.w	r3, r3, #4
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d004      	beq.n	800dd9a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2204      	movs	r2, #4
 800dd94:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd96:	2304      	movs	r3, #4
 800dd98:	e003      	b.n	800dda2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	4a06      	ldr	r2, [pc, #24]	@ (800ddb8 <SDMMC_GetCmdResp3+0x7c>)
 800dd9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dda0:	2300      	movs	r3, #0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3714      	adds	r7, #20
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	2400000c 	.word	0x2400000c
 800ddb4:	10624dd3 	.word	0x10624dd3
 800ddb8:	002000c5 	.word	0x002000c5

0800ddbc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b088      	sub	sp, #32
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	607a      	str	r2, [r7, #4]
 800ddc8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ddca:	4b35      	ldr	r3, [pc, #212]	@ (800dea0 <SDMMC_GetCmdResp6+0xe4>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4a35      	ldr	r2, [pc, #212]	@ (800dea4 <SDMMC_GetCmdResp6+0xe8>)
 800ddd0:	fba2 2303 	umull	r2, r3, r2, r3
 800ddd4:	0a5b      	lsrs	r3, r3, #9
 800ddd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ddda:	fb02 f303 	mul.w	r3, r2, r3
 800ddde:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	1e5a      	subs	r2, r3, #1
 800dde4:	61fa      	str	r2, [r7, #28]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d102      	bne.n	800ddf0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ddea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ddee:	e052      	b.n	800de96 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddf4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d0ef      	beq.n	800dde0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800de00:	69bb      	ldr	r3, [r7, #24]
 800de02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1ea      	bne.n	800dde0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de0e:	f003 0304 	and.w	r3, r3, #4
 800de12:	2b00      	cmp	r3, #0
 800de14:	d004      	beq.n	800de20 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2204      	movs	r2, #4
 800de1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de1c:	2304      	movs	r3, #4
 800de1e:	e03a      	b.n	800de96 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de24:	f003 0301 	and.w	r3, r3, #1
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d004      	beq.n	800de36 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2201      	movs	r2, #1
 800de30:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de32:	2301      	movs	r3, #1
 800de34:	e02f      	b.n	800de96 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800de36:	68f8      	ldr	r0, [r7, #12]
 800de38:	f7ff fb7c 	bl	800d534 <SDMMC_GetCommandResponse>
 800de3c:	4603      	mov	r3, r0
 800de3e:	461a      	mov	r2, r3
 800de40:	7afb      	ldrb	r3, [r7, #11]
 800de42:	4293      	cmp	r3, r2
 800de44:	d001      	beq.n	800de4a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de46:	2301      	movs	r3, #1
 800de48:	e025      	b.n	800de96 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	4a16      	ldr	r2, [pc, #88]	@ (800dea8 <SDMMC_GetCmdResp6+0xec>)
 800de4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800de50:	2100      	movs	r1, #0
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	f7ff fb7b 	bl	800d54e <SDMMC_GetResponse>
 800de58:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800de60:	2b00      	cmp	r3, #0
 800de62:	d106      	bne.n	800de72 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	0c1b      	lsrs	r3, r3, #16
 800de68:	b29a      	uxth	r2, r3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800de6e:	2300      	movs	r3, #0
 800de70:	e011      	b.n	800de96 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d002      	beq.n	800de82 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800de7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800de80:	e009      	b.n	800de96 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d002      	beq.n	800de92 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800de8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de90:	e001      	b.n	800de96 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800de92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800de96:	4618      	mov	r0, r3
 800de98:	3720      	adds	r7, #32
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
 800de9e:	bf00      	nop
 800dea0:	2400000c 	.word	0x2400000c
 800dea4:	10624dd3 	.word	0x10624dd3
 800dea8:	002000c5 	.word	0x002000c5

0800deac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800deac:	b480      	push	{r7}
 800deae:	b085      	sub	sp, #20
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800deb4:	4b22      	ldr	r3, [pc, #136]	@ (800df40 <SDMMC_GetCmdResp7+0x94>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4a22      	ldr	r2, [pc, #136]	@ (800df44 <SDMMC_GetCmdResp7+0x98>)
 800deba:	fba2 2303 	umull	r2, r3, r2, r3
 800debe:	0a5b      	lsrs	r3, r3, #9
 800dec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dec4:	fb02 f303 	mul.w	r3, r2, r3
 800dec8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	1e5a      	subs	r2, r3, #1
 800dece:	60fa      	str	r2, [r7, #12]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d102      	bne.n	800deda <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ded4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ded8:	e02c      	b.n	800df34 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dede:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d0ef      	beq.n	800deca <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800def0:	2b00      	cmp	r3, #0
 800def2:	d1ea      	bne.n	800deca <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800def8:	f003 0304 	and.w	r3, r3, #4
 800defc:	2b00      	cmp	r3, #0
 800defe:	d004      	beq.n	800df0a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2204      	movs	r2, #4
 800df04:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df06:	2304      	movs	r3, #4
 800df08:	e014      	b.n	800df34 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df0e:	f003 0301 	and.w	r3, r3, #1
 800df12:	2b00      	cmp	r3, #0
 800df14:	d004      	beq.n	800df20 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2201      	movs	r2, #1
 800df1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df1c:	2301      	movs	r3, #1
 800df1e:	e009      	b.n	800df34 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d002      	beq.n	800df32 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2240      	movs	r2, #64	@ 0x40
 800df30:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800df32:	2300      	movs	r3, #0

}
 800df34:	4618      	mov	r0, r3
 800df36:	3714      	adds	r7, #20
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr
 800df40:	2400000c 	.word	0x2400000c
 800df44:	10624dd3 	.word	0x10624dd3

0800df48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800df48:	b480      	push	{r7}
 800df4a:	b085      	sub	sp, #20
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800df50:	4b11      	ldr	r3, [pc, #68]	@ (800df98 <SDMMC_GetCmdError+0x50>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a11      	ldr	r2, [pc, #68]	@ (800df9c <SDMMC_GetCmdError+0x54>)
 800df56:	fba2 2303 	umull	r2, r3, r2, r3
 800df5a:	0a5b      	lsrs	r3, r3, #9
 800df5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df60:	fb02 f303 	mul.w	r3, r2, r3
 800df64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	1e5a      	subs	r2, r3, #1
 800df6a:	60fa      	str	r2, [r7, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d102      	bne.n	800df76 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800df74:	e009      	b.n	800df8a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d0f1      	beq.n	800df66 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	4a06      	ldr	r2, [pc, #24]	@ (800dfa0 <SDMMC_GetCmdError+0x58>)
 800df86:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800df88:	2300      	movs	r3, #0
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3714      	adds	r7, #20
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr
 800df96:	bf00      	nop
 800df98:	2400000c 	.word	0x2400000c
 800df9c:	10624dd3 	.word	0x10624dd3
 800dfa0:	002000c5 	.word	0x002000c5

0800dfa4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dfa8:	4904      	ldr	r1, [pc, #16]	@ (800dfbc <MX_FATFS_Init+0x18>)
 800dfaa:	4805      	ldr	r0, [pc, #20]	@ (800dfc0 <MX_FATFS_Init+0x1c>)
 800dfac:	f000 fa8e 	bl	800e4cc <FATFS_LinkDriver>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	4b03      	ldr	r3, [pc, #12]	@ (800dfc4 <MX_FATFS_Init+0x20>)
 800dfb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dfb8:	bf00      	nop
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	240007ac 	.word	0x240007ac
 800dfc0:	0800f14c 	.word	0x0800f14c
 800dfc4:	240007a8 	.word	0x240007a8

0800dfc8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dfd2:	f000 f885 	bl	800e0e0 <BSP_SD_IsDetected>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d001      	beq.n	800dfe0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800dfdc:	2302      	movs	r3, #2
 800dfde:	e012      	b.n	800e006 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800dfe0:	480b      	ldr	r0, [pc, #44]	@ (800e010 <BSP_SD_Init+0x48>)
 800dfe2:	f7fb f95d 	bl	80092a0 <HAL_SD_Init>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800dfea:	79fb      	ldrb	r3, [r7, #7]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d109      	bne.n	800e004 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800dff0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800dff4:	4806      	ldr	r0, [pc, #24]	@ (800e010 <BSP_SD_Init+0x48>)
 800dff6:	f7fc f813 	bl	800a020 <HAL_SD_ConfigWideBusOperation>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d001      	beq.n	800e004 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e004:	79fb      	ldrb	r3, [r7, #7]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3708      	adds	r7, #8
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	240002e4 	.word	0x240002e4

0800e014 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b086      	sub	sp, #24
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	68ba      	ldr	r2, [r7, #8]
 800e028:	68f9      	ldr	r1, [r7, #12]
 800e02a:	4806      	ldr	r0, [pc, #24]	@ (800e044 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e02c:	f7fb fa58 	bl	80094e0 <HAL_SD_ReadBlocks_DMA>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e036:	2301      	movs	r3, #1
 800e038:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3718      	adds	r7, #24
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	240002e4 	.word	0x240002e4

0800e048 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b086      	sub	sp, #24
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e054:	2300      	movs	r3, #0
 800e056:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	68ba      	ldr	r2, [r7, #8]
 800e05c:	68f9      	ldr	r1, [r7, #12]
 800e05e:	4806      	ldr	r0, [pc, #24]	@ (800e078 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e060:	f7fb fae6 	bl	8009630 <HAL_SD_WriteBlocks_DMA>
 800e064:	4603      	mov	r3, r0
 800e066:	2b00      	cmp	r3, #0
 800e068:	d001      	beq.n	800e06e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e06e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e070:	4618      	mov	r0, r3
 800e072:	3718      	adds	r7, #24
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	240002e4 	.word	0x240002e4

0800e07c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e080:	4805      	ldr	r0, [pc, #20]	@ (800e098 <BSP_SD_GetCardState+0x1c>)
 800e082:	f7fc f8df 	bl	800a244 <HAL_SD_GetCardState>
 800e086:	4603      	mov	r3, r0
 800e088:	2b04      	cmp	r3, #4
 800e08a:	bf14      	ite	ne
 800e08c:	2301      	movne	r3, #1
 800e08e:	2300      	moveq	r3, #0
 800e090:	b2db      	uxtb	r3, r3
}
 800e092:	4618      	mov	r0, r3
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	240002e4 	.word	0x240002e4

0800e09c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e0a4:	6879      	ldr	r1, [r7, #4]
 800e0a6:	4803      	ldr	r0, [pc, #12]	@ (800e0b4 <BSP_SD_GetCardInfo+0x18>)
 800e0a8:	f7fb ff8e 	bl	8009fc8 <HAL_SD_GetCardInfo>
}
 800e0ac:	bf00      	nop
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	240002e4 	.word	0x240002e4

0800e0b8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e0c0:	f000 f9a0 	bl	800e404 <BSP_SD_WriteCpltCallback>
}
 800e0c4:	bf00      	nop
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e0d4:	f000 f9a2 	bl	800e41c <BSP_SD_ReadCpltCallback>
}
 800e0d8:	bf00      	nop
 800e0da:	3708      	adds	r7, #8
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e0ea:	f000 f80b 	bl	800e104 <BSP_PlatformIsDetected>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d101      	bne.n	800e0f8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e0f8:	79fb      	ldrb	r3, [r7, #7]
 800e0fa:	b2db      	uxtb	r3, r3
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3708      	adds	r7, #8
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e10a:	2301      	movs	r3, #1
 800e10c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e10e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e112:	4806      	ldr	r0, [pc, #24]	@ (800e12c <BSP_PlatformIsDetected+0x28>)
 800e114:	f7f7 fd0c 	bl	8005b30 <HAL_GPIO_ReadPin>
 800e118:	4603      	mov	r3, r0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d001      	beq.n	800e122 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e11e:	2300      	movs	r3, #0
 800e120:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e122:	79fb      	ldrb	r3, [r7, #7]
}
 800e124:	4618      	mov	r0, r3
 800e126:	3708      	adds	r7, #8
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	58021400 	.word	0x58021400

0800e130 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e138:	f7f4 fb22 	bl	8002780 <HAL_GetTick>
 800e13c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e13e:	e006      	b.n	800e14e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e140:	f7ff ff9c 	bl	800e07c <BSP_SD_GetCardState>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d101      	bne.n	800e14e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e14a:	2300      	movs	r3, #0
 800e14c:	e009      	b.n	800e162 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e14e:	f7f4 fb17 	bl	8002780 <HAL_GetTick>
 800e152:	4602      	mov	r2, r0
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	1ad3      	subs	r3, r2, r3
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d8f0      	bhi.n	800e140 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e15e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
	...

0800e16c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	4603      	mov	r3, r0
 800e174:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e176:	4b0b      	ldr	r3, [pc, #44]	@ (800e1a4 <SD_CheckStatus+0x38>)
 800e178:	2201      	movs	r2, #1
 800e17a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e17c:	f7ff ff7e 	bl	800e07c <BSP_SD_GetCardState>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d107      	bne.n	800e196 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e186:	4b07      	ldr	r3, [pc, #28]	@ (800e1a4 <SD_CheckStatus+0x38>)
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	f023 0301 	bic.w	r3, r3, #1
 800e190:	b2da      	uxtb	r2, r3
 800e192:	4b04      	ldr	r3, [pc, #16]	@ (800e1a4 <SD_CheckStatus+0x38>)
 800e194:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e196:	4b03      	ldr	r3, [pc, #12]	@ (800e1a4 <SD_CheckStatus+0x38>)
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	b2db      	uxtb	r3, r3
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3708      	adds	r7, #8
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	24000019 	.word	0x24000019

0800e1a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e1b2:	f7ff ff09 	bl	800dfc8 <BSP_SD_Init>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d107      	bne.n	800e1cc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e1bc:	79fb      	ldrb	r3, [r7, #7]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7ff ffd4 	bl	800e16c <SD_CheckStatus>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	4b04      	ldr	r3, [pc, #16]	@ (800e1dc <SD_initialize+0x34>)
 800e1ca:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e1cc:	4b03      	ldr	r3, [pc, #12]	@ (800e1dc <SD_initialize+0x34>)
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	b2db      	uxtb	r3, r3
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3708      	adds	r7, #8
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	24000019 	.word	0x24000019

0800e1e0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e1ea:	79fb      	ldrb	r3, [r7, #7]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7ff ffbd 	bl	800e16c <SD_CheckStatus>
 800e1f2:	4603      	mov	r3, r0
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af00      	add	r7, sp, #0
 800e202:	60b9      	str	r1, [r7, #8]
 800e204:	607a      	str	r2, [r7, #4]
 800e206:	603b      	str	r3, [r7, #0]
 800e208:	4603      	mov	r3, r0
 800e20a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e20c:	2301      	movs	r3, #1
 800e20e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e210:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e214:	f7ff ff8c 	bl	800e130 <SD_CheckStatusWithTimeout>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	da01      	bge.n	800e222 <SD_read+0x26>
  {
    return res;
 800e21e:	7dfb      	ldrb	r3, [r7, #23]
 800e220:	e03b      	b.n	800e29a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e222:	683a      	ldr	r2, [r7, #0]
 800e224:	6879      	ldr	r1, [r7, #4]
 800e226:	68b8      	ldr	r0, [r7, #8]
 800e228:	f7ff fef4 	bl	800e014 <BSP_SD_ReadBlocks_DMA>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d132      	bne.n	800e298 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e232:	4b1c      	ldr	r3, [pc, #112]	@ (800e2a4 <SD_read+0xa8>)
 800e234:	2200      	movs	r2, #0
 800e236:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e238:	f7f4 faa2 	bl	8002780 <HAL_GetTick>
 800e23c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e23e:	bf00      	nop
 800e240:	4b18      	ldr	r3, [pc, #96]	@ (800e2a4 <SD_read+0xa8>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d108      	bne.n	800e25a <SD_read+0x5e>
 800e248:	f7f4 fa9a 	bl	8002780 <HAL_GetTick>
 800e24c:	4602      	mov	r2, r0
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e256:	4293      	cmp	r3, r2
 800e258:	d9f2      	bls.n	800e240 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800e25a:	4b12      	ldr	r3, [pc, #72]	@ (800e2a4 <SD_read+0xa8>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d102      	bne.n	800e268 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e262:	2301      	movs	r3, #1
 800e264:	75fb      	strb	r3, [r7, #23]
 800e266:	e017      	b.n	800e298 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e268:	4b0e      	ldr	r3, [pc, #56]	@ (800e2a4 <SD_read+0xa8>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e26e:	f7f4 fa87 	bl	8002780 <HAL_GetTick>
 800e272:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e274:	e007      	b.n	800e286 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e276:	f7ff ff01 	bl	800e07c <BSP_SD_GetCardState>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d102      	bne.n	800e286 <SD_read+0x8a>
          {
            res = RES_OK;
 800e280:	2300      	movs	r3, #0
 800e282:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e284:	e008      	b.n	800e298 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e286:	f7f4 fa7b 	bl	8002780 <HAL_GetTick>
 800e28a:	4602      	mov	r2, r0
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	1ad3      	subs	r3, r2, r3
 800e290:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e294:	4293      	cmp	r3, r2
 800e296:	d9ee      	bls.n	800e276 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e298:	7dfb      	ldrb	r3, [r7, #23]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3718      	adds	r7, #24
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	240007b4 	.word	0x240007b4

0800e2a8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b086      	sub	sp, #24
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60b9      	str	r1, [r7, #8]
 800e2b0:	607a      	str	r2, [r7, #4]
 800e2b2:	603b      	str	r3, [r7, #0]
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e2bc:	4b24      	ldr	r3, [pc, #144]	@ (800e350 <SD_write+0xa8>)
 800e2be:	2200      	movs	r2, #0
 800e2c0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e2c2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e2c6:	f7ff ff33 	bl	800e130 <SD_CheckStatusWithTimeout>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	da01      	bge.n	800e2d4 <SD_write+0x2c>
  {
    return res;
 800e2d0:	7dfb      	ldrb	r3, [r7, #23]
 800e2d2:	e038      	b.n	800e346 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	6879      	ldr	r1, [r7, #4]
 800e2d8:	68b8      	ldr	r0, [r7, #8]
 800e2da:	f7ff feb5 	bl	800e048 <BSP_SD_WriteBlocks_DMA>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d12f      	bne.n	800e344 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e2e4:	f7f4 fa4c 	bl	8002780 <HAL_GetTick>
 800e2e8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e2ea:	bf00      	nop
 800e2ec:	4b18      	ldr	r3, [pc, #96]	@ (800e350 <SD_write+0xa8>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d108      	bne.n	800e306 <SD_write+0x5e>
 800e2f4:	f7f4 fa44 	bl	8002780 <HAL_GetTick>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	1ad3      	subs	r3, r2, r3
 800e2fe:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e302:	4293      	cmp	r3, r2
 800e304:	d9f2      	bls.n	800e2ec <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800e306:	4b12      	ldr	r3, [pc, #72]	@ (800e350 <SD_write+0xa8>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d102      	bne.n	800e314 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e30e:	2301      	movs	r3, #1
 800e310:	75fb      	strb	r3, [r7, #23]
 800e312:	e017      	b.n	800e344 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e314:	4b0e      	ldr	r3, [pc, #56]	@ (800e350 <SD_write+0xa8>)
 800e316:	2200      	movs	r2, #0
 800e318:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e31a:	f7f4 fa31 	bl	8002780 <HAL_GetTick>
 800e31e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e320:	e007      	b.n	800e332 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e322:	f7ff feab 	bl	800e07c <BSP_SD_GetCardState>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d102      	bne.n	800e332 <SD_write+0x8a>
          {
            res = RES_OK;
 800e32c:	2300      	movs	r3, #0
 800e32e:	75fb      	strb	r3, [r7, #23]
            break;
 800e330:	e008      	b.n	800e344 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e332:	f7f4 fa25 	bl	8002780 <HAL_GetTick>
 800e336:	4602      	mov	r2, r0
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	1ad3      	subs	r3, r2, r3
 800e33c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e340:	4293      	cmp	r3, r2
 800e342:	d9ee      	bls.n	800e322 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e344:	7dfb      	ldrb	r3, [r7, #23]
}
 800e346:	4618      	mov	r0, r3
 800e348:	3718      	adds	r7, #24
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	240007b0 	.word	0x240007b0

0800e354 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b08c      	sub	sp, #48	@ 0x30
 800e358:	af00      	add	r7, sp, #0
 800e35a:	4603      	mov	r3, r0
 800e35c:	603a      	str	r2, [r7, #0]
 800e35e:	71fb      	strb	r3, [r7, #7]
 800e360:	460b      	mov	r3, r1
 800e362:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e364:	2301      	movs	r3, #1
 800e366:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e36a:	4b25      	ldr	r3, [pc, #148]	@ (800e400 <SD_ioctl+0xac>)
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	f003 0301 	and.w	r3, r3, #1
 800e374:	2b00      	cmp	r3, #0
 800e376:	d001      	beq.n	800e37c <SD_ioctl+0x28>
 800e378:	2303      	movs	r3, #3
 800e37a:	e03c      	b.n	800e3f6 <SD_ioctl+0xa2>

  switch (cmd)
 800e37c:	79bb      	ldrb	r3, [r7, #6]
 800e37e:	2b03      	cmp	r3, #3
 800e380:	d834      	bhi.n	800e3ec <SD_ioctl+0x98>
 800e382:	a201      	add	r2, pc, #4	@ (adr r2, 800e388 <SD_ioctl+0x34>)
 800e384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e388:	0800e399 	.word	0x0800e399
 800e38c:	0800e3a1 	.word	0x0800e3a1
 800e390:	0800e3b9 	.word	0x0800e3b9
 800e394:	0800e3d3 	.word	0x0800e3d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e398:	2300      	movs	r3, #0
 800e39a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e39e:	e028      	b.n	800e3f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e3a0:	f107 0308 	add.w	r3, r7, #8
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7ff fe79 	bl	800e09c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e3aa:	6a3a      	ldr	r2, [r7, #32]
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e3b6:	e01c      	b.n	800e3f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e3b8:	f107 0308 	add.w	r3, r7, #8
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7ff fe6d 	bl	800e09c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c4:	b29a      	uxth	r2, r3
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e3d0:	e00f      	b.n	800e3f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e3d2:	f107 0308 	add.w	r3, r7, #8
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7ff fe60 	bl	800e09c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3de:	0a5a      	lsrs	r2, r3, #9
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e3ea:	e002      	b.n	800e3f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e3ec:	2304      	movs	r3, #4
 800e3ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800e3f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3730      	adds	r7, #48	@ 0x30
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	24000019 	.word	0x24000019

0800e404 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e404:	b480      	push	{r7}
 800e406:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e408:	4b03      	ldr	r3, [pc, #12]	@ (800e418 <BSP_SD_WriteCpltCallback+0x14>)
 800e40a:	2201      	movs	r2, #1
 800e40c:	601a      	str	r2, [r3, #0]
}
 800e40e:	bf00      	nop
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr
 800e418:	240007b0 	.word	0x240007b0

0800e41c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e41c:	b480      	push	{r7}
 800e41e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e420:	4b03      	ldr	r3, [pc, #12]	@ (800e430 <BSP_SD_ReadCpltCallback+0x14>)
 800e422:	2201      	movs	r2, #1
 800e424:	601a      	str	r2, [r3, #0]
}
 800e426:	bf00      	nop
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr
 800e430:	240007b4 	.word	0x240007b4

0800e434 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e434:	b480      	push	{r7}
 800e436:	b087      	sub	sp, #28
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	4613      	mov	r3, r2
 800e440:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e442:	2301      	movs	r3, #1
 800e444:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e446:	2300      	movs	r3, #0
 800e448:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e44a:	4b1f      	ldr	r3, [pc, #124]	@ (800e4c8 <FATFS_LinkDriverEx+0x94>)
 800e44c:	7a5b      	ldrb	r3, [r3, #9]
 800e44e:	b2db      	uxtb	r3, r3
 800e450:	2b00      	cmp	r3, #0
 800e452:	d131      	bne.n	800e4b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e454:	4b1c      	ldr	r3, [pc, #112]	@ (800e4c8 <FATFS_LinkDriverEx+0x94>)
 800e456:	7a5b      	ldrb	r3, [r3, #9]
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	461a      	mov	r2, r3
 800e45c:	4b1a      	ldr	r3, [pc, #104]	@ (800e4c8 <FATFS_LinkDriverEx+0x94>)
 800e45e:	2100      	movs	r1, #0
 800e460:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e462:	4b19      	ldr	r3, [pc, #100]	@ (800e4c8 <FATFS_LinkDriverEx+0x94>)
 800e464:	7a5b      	ldrb	r3, [r3, #9]
 800e466:	b2db      	uxtb	r3, r3
 800e468:	4a17      	ldr	r2, [pc, #92]	@ (800e4c8 <FATFS_LinkDriverEx+0x94>)
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	4413      	add	r3, r2
 800e46e:	68fa      	ldr	r2, [r7, #12]
 800e470:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e472:	4b15      	ldr	r3, [pc, #84]	@ (800e4c8 <FATFS_LinkDriverEx+0x94>)
 800e474:	7a5b      	ldrb	r3, [r3, #9]
 800e476:	b2db      	uxtb	r3, r3
 800e478:	461a      	mov	r2, r3
 800e47a:	4b13      	ldr	r3, [pc, #76]	@ (800e4c8 <FATFS_LinkDriverEx+0x94>)
 800e47c:	4413      	add	r3, r2
 800e47e:	79fa      	ldrb	r2, [r7, #7]
 800e480:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e482:	4b11      	ldr	r3, [pc, #68]	@ (800e4c8 <FATFS_LinkDriverEx+0x94>)
 800e484:	7a5b      	ldrb	r3, [r3, #9]
 800e486:	b2db      	uxtb	r3, r3
 800e488:	1c5a      	adds	r2, r3, #1
 800e48a:	b2d1      	uxtb	r1, r2
 800e48c:	4a0e      	ldr	r2, [pc, #56]	@ (800e4c8 <FATFS_LinkDriverEx+0x94>)
 800e48e:	7251      	strb	r1, [r2, #9]
 800e490:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e492:	7dbb      	ldrb	r3, [r7, #22]
 800e494:	3330      	adds	r3, #48	@ 0x30
 800e496:	b2da      	uxtb	r2, r3
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	223a      	movs	r2, #58	@ 0x3a
 800e4a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	3302      	adds	r3, #2
 800e4a8:	222f      	movs	r2, #47	@ 0x2f
 800e4aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	3303      	adds	r3, #3
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e4b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	371c      	adds	r7, #28
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr
 800e4c6:	bf00      	nop
 800e4c8:	240007b8 	.word	0x240007b8

0800e4cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	6839      	ldr	r1, [r7, #0]
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f7ff ffaa 	bl	800e434 <FATFS_LinkDriverEx>
 800e4e0:	4603      	mov	r3, r0
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3708      	adds	r7, #8
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
	...

0800e4ec <siprintf>:
 800e4ec:	b40e      	push	{r1, r2, r3}
 800e4ee:	b510      	push	{r4, lr}
 800e4f0:	b09d      	sub	sp, #116	@ 0x74
 800e4f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e4f4:	9002      	str	r0, [sp, #8]
 800e4f6:	9006      	str	r0, [sp, #24]
 800e4f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e4fc:	480a      	ldr	r0, [pc, #40]	@ (800e528 <siprintf+0x3c>)
 800e4fe:	9107      	str	r1, [sp, #28]
 800e500:	9104      	str	r1, [sp, #16]
 800e502:	490a      	ldr	r1, [pc, #40]	@ (800e52c <siprintf+0x40>)
 800e504:	f853 2b04 	ldr.w	r2, [r3], #4
 800e508:	9105      	str	r1, [sp, #20]
 800e50a:	2400      	movs	r4, #0
 800e50c:	a902      	add	r1, sp, #8
 800e50e:	6800      	ldr	r0, [r0, #0]
 800e510:	9301      	str	r3, [sp, #4]
 800e512:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e514:	f000 f9a2 	bl	800e85c <_svfiprintf_r>
 800e518:	9b02      	ldr	r3, [sp, #8]
 800e51a:	701c      	strb	r4, [r3, #0]
 800e51c:	b01d      	add	sp, #116	@ 0x74
 800e51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e522:	b003      	add	sp, #12
 800e524:	4770      	bx	lr
 800e526:	bf00      	nop
 800e528:	2400001c 	.word	0x2400001c
 800e52c:	ffff0208 	.word	0xffff0208

0800e530 <memset>:
 800e530:	4402      	add	r2, r0
 800e532:	4603      	mov	r3, r0
 800e534:	4293      	cmp	r3, r2
 800e536:	d100      	bne.n	800e53a <memset+0xa>
 800e538:	4770      	bx	lr
 800e53a:	f803 1b01 	strb.w	r1, [r3], #1
 800e53e:	e7f9      	b.n	800e534 <memset+0x4>

0800e540 <__errno>:
 800e540:	4b01      	ldr	r3, [pc, #4]	@ (800e548 <__errno+0x8>)
 800e542:	6818      	ldr	r0, [r3, #0]
 800e544:	4770      	bx	lr
 800e546:	bf00      	nop
 800e548:	2400001c 	.word	0x2400001c

0800e54c <__libc_init_array>:
 800e54c:	b570      	push	{r4, r5, r6, lr}
 800e54e:	4d0d      	ldr	r5, [pc, #52]	@ (800e584 <__libc_init_array+0x38>)
 800e550:	4c0d      	ldr	r4, [pc, #52]	@ (800e588 <__libc_init_array+0x3c>)
 800e552:	1b64      	subs	r4, r4, r5
 800e554:	10a4      	asrs	r4, r4, #2
 800e556:	2600      	movs	r6, #0
 800e558:	42a6      	cmp	r6, r4
 800e55a:	d109      	bne.n	800e570 <__libc_init_array+0x24>
 800e55c:	4d0b      	ldr	r5, [pc, #44]	@ (800e58c <__libc_init_array+0x40>)
 800e55e:	4c0c      	ldr	r4, [pc, #48]	@ (800e590 <__libc_init_array+0x44>)
 800e560:	f000 fc64 	bl	800ee2c <_init>
 800e564:	1b64      	subs	r4, r4, r5
 800e566:	10a4      	asrs	r4, r4, #2
 800e568:	2600      	movs	r6, #0
 800e56a:	42a6      	cmp	r6, r4
 800e56c:	d105      	bne.n	800e57a <__libc_init_array+0x2e>
 800e56e:	bd70      	pop	{r4, r5, r6, pc}
 800e570:	f855 3b04 	ldr.w	r3, [r5], #4
 800e574:	4798      	blx	r3
 800e576:	3601      	adds	r6, #1
 800e578:	e7ee      	b.n	800e558 <__libc_init_array+0xc>
 800e57a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e57e:	4798      	blx	r3
 800e580:	3601      	adds	r6, #1
 800e582:	e7f2      	b.n	800e56a <__libc_init_array+0x1e>
 800e584:	0800f19c 	.word	0x0800f19c
 800e588:	0800f19c 	.word	0x0800f19c
 800e58c:	0800f19c 	.word	0x0800f19c
 800e590:	0800f1a0 	.word	0x0800f1a0

0800e594 <__retarget_lock_acquire_recursive>:
 800e594:	4770      	bx	lr

0800e596 <__retarget_lock_release_recursive>:
 800e596:	4770      	bx	lr

0800e598 <memcpy>:
 800e598:	440a      	add	r2, r1
 800e59a:	4291      	cmp	r1, r2
 800e59c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5a0:	d100      	bne.n	800e5a4 <memcpy+0xc>
 800e5a2:	4770      	bx	lr
 800e5a4:	b510      	push	{r4, lr}
 800e5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5ae:	4291      	cmp	r1, r2
 800e5b0:	d1f9      	bne.n	800e5a6 <memcpy+0xe>
 800e5b2:	bd10      	pop	{r4, pc}

0800e5b4 <_free_r>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	4605      	mov	r5, r0
 800e5b8:	2900      	cmp	r1, #0
 800e5ba:	d041      	beq.n	800e640 <_free_r+0x8c>
 800e5bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5c0:	1f0c      	subs	r4, r1, #4
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	bfb8      	it	lt
 800e5c6:	18e4      	addlt	r4, r4, r3
 800e5c8:	f000 f8e0 	bl	800e78c <__malloc_lock>
 800e5cc:	4a1d      	ldr	r2, [pc, #116]	@ (800e644 <_free_r+0x90>)
 800e5ce:	6813      	ldr	r3, [r2, #0]
 800e5d0:	b933      	cbnz	r3, 800e5e0 <_free_r+0x2c>
 800e5d2:	6063      	str	r3, [r4, #4]
 800e5d4:	6014      	str	r4, [r2, #0]
 800e5d6:	4628      	mov	r0, r5
 800e5d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5dc:	f000 b8dc 	b.w	800e798 <__malloc_unlock>
 800e5e0:	42a3      	cmp	r3, r4
 800e5e2:	d908      	bls.n	800e5f6 <_free_r+0x42>
 800e5e4:	6820      	ldr	r0, [r4, #0]
 800e5e6:	1821      	adds	r1, r4, r0
 800e5e8:	428b      	cmp	r3, r1
 800e5ea:	bf01      	itttt	eq
 800e5ec:	6819      	ldreq	r1, [r3, #0]
 800e5ee:	685b      	ldreq	r3, [r3, #4]
 800e5f0:	1809      	addeq	r1, r1, r0
 800e5f2:	6021      	streq	r1, [r4, #0]
 800e5f4:	e7ed      	b.n	800e5d2 <_free_r+0x1e>
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	b10b      	cbz	r3, 800e600 <_free_r+0x4c>
 800e5fc:	42a3      	cmp	r3, r4
 800e5fe:	d9fa      	bls.n	800e5f6 <_free_r+0x42>
 800e600:	6811      	ldr	r1, [r2, #0]
 800e602:	1850      	adds	r0, r2, r1
 800e604:	42a0      	cmp	r0, r4
 800e606:	d10b      	bne.n	800e620 <_free_r+0x6c>
 800e608:	6820      	ldr	r0, [r4, #0]
 800e60a:	4401      	add	r1, r0
 800e60c:	1850      	adds	r0, r2, r1
 800e60e:	4283      	cmp	r3, r0
 800e610:	6011      	str	r1, [r2, #0]
 800e612:	d1e0      	bne.n	800e5d6 <_free_r+0x22>
 800e614:	6818      	ldr	r0, [r3, #0]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	6053      	str	r3, [r2, #4]
 800e61a:	4408      	add	r0, r1
 800e61c:	6010      	str	r0, [r2, #0]
 800e61e:	e7da      	b.n	800e5d6 <_free_r+0x22>
 800e620:	d902      	bls.n	800e628 <_free_r+0x74>
 800e622:	230c      	movs	r3, #12
 800e624:	602b      	str	r3, [r5, #0]
 800e626:	e7d6      	b.n	800e5d6 <_free_r+0x22>
 800e628:	6820      	ldr	r0, [r4, #0]
 800e62a:	1821      	adds	r1, r4, r0
 800e62c:	428b      	cmp	r3, r1
 800e62e:	bf04      	itt	eq
 800e630:	6819      	ldreq	r1, [r3, #0]
 800e632:	685b      	ldreq	r3, [r3, #4]
 800e634:	6063      	str	r3, [r4, #4]
 800e636:	bf04      	itt	eq
 800e638:	1809      	addeq	r1, r1, r0
 800e63a:	6021      	streq	r1, [r4, #0]
 800e63c:	6054      	str	r4, [r2, #4]
 800e63e:	e7ca      	b.n	800e5d6 <_free_r+0x22>
 800e640:	bd38      	pop	{r3, r4, r5, pc}
 800e642:	bf00      	nop
 800e644:	24000908 	.word	0x24000908

0800e648 <sbrk_aligned>:
 800e648:	b570      	push	{r4, r5, r6, lr}
 800e64a:	4e0f      	ldr	r6, [pc, #60]	@ (800e688 <sbrk_aligned+0x40>)
 800e64c:	460c      	mov	r4, r1
 800e64e:	6831      	ldr	r1, [r6, #0]
 800e650:	4605      	mov	r5, r0
 800e652:	b911      	cbnz	r1, 800e65a <sbrk_aligned+0x12>
 800e654:	f000 fba4 	bl	800eda0 <_sbrk_r>
 800e658:	6030      	str	r0, [r6, #0]
 800e65a:	4621      	mov	r1, r4
 800e65c:	4628      	mov	r0, r5
 800e65e:	f000 fb9f 	bl	800eda0 <_sbrk_r>
 800e662:	1c43      	adds	r3, r0, #1
 800e664:	d103      	bne.n	800e66e <sbrk_aligned+0x26>
 800e666:	f04f 34ff 	mov.w	r4, #4294967295
 800e66a:	4620      	mov	r0, r4
 800e66c:	bd70      	pop	{r4, r5, r6, pc}
 800e66e:	1cc4      	adds	r4, r0, #3
 800e670:	f024 0403 	bic.w	r4, r4, #3
 800e674:	42a0      	cmp	r0, r4
 800e676:	d0f8      	beq.n	800e66a <sbrk_aligned+0x22>
 800e678:	1a21      	subs	r1, r4, r0
 800e67a:	4628      	mov	r0, r5
 800e67c:	f000 fb90 	bl	800eda0 <_sbrk_r>
 800e680:	3001      	adds	r0, #1
 800e682:	d1f2      	bne.n	800e66a <sbrk_aligned+0x22>
 800e684:	e7ef      	b.n	800e666 <sbrk_aligned+0x1e>
 800e686:	bf00      	nop
 800e688:	24000904 	.word	0x24000904

0800e68c <_malloc_r>:
 800e68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e690:	1ccd      	adds	r5, r1, #3
 800e692:	f025 0503 	bic.w	r5, r5, #3
 800e696:	3508      	adds	r5, #8
 800e698:	2d0c      	cmp	r5, #12
 800e69a:	bf38      	it	cc
 800e69c:	250c      	movcc	r5, #12
 800e69e:	2d00      	cmp	r5, #0
 800e6a0:	4606      	mov	r6, r0
 800e6a2:	db01      	blt.n	800e6a8 <_malloc_r+0x1c>
 800e6a4:	42a9      	cmp	r1, r5
 800e6a6:	d904      	bls.n	800e6b2 <_malloc_r+0x26>
 800e6a8:	230c      	movs	r3, #12
 800e6aa:	6033      	str	r3, [r6, #0]
 800e6ac:	2000      	movs	r0, #0
 800e6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e788 <_malloc_r+0xfc>
 800e6b6:	f000 f869 	bl	800e78c <__malloc_lock>
 800e6ba:	f8d8 3000 	ldr.w	r3, [r8]
 800e6be:	461c      	mov	r4, r3
 800e6c0:	bb44      	cbnz	r4, 800e714 <_malloc_r+0x88>
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	f7ff ffbf 	bl	800e648 <sbrk_aligned>
 800e6ca:	1c43      	adds	r3, r0, #1
 800e6cc:	4604      	mov	r4, r0
 800e6ce:	d158      	bne.n	800e782 <_malloc_r+0xf6>
 800e6d0:	f8d8 4000 	ldr.w	r4, [r8]
 800e6d4:	4627      	mov	r7, r4
 800e6d6:	2f00      	cmp	r7, #0
 800e6d8:	d143      	bne.n	800e762 <_malloc_r+0xd6>
 800e6da:	2c00      	cmp	r4, #0
 800e6dc:	d04b      	beq.n	800e776 <_malloc_r+0xea>
 800e6de:	6823      	ldr	r3, [r4, #0]
 800e6e0:	4639      	mov	r1, r7
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	eb04 0903 	add.w	r9, r4, r3
 800e6e8:	f000 fb5a 	bl	800eda0 <_sbrk_r>
 800e6ec:	4581      	cmp	r9, r0
 800e6ee:	d142      	bne.n	800e776 <_malloc_r+0xea>
 800e6f0:	6821      	ldr	r1, [r4, #0]
 800e6f2:	1a6d      	subs	r5, r5, r1
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	f7ff ffa6 	bl	800e648 <sbrk_aligned>
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	d03a      	beq.n	800e776 <_malloc_r+0xea>
 800e700:	6823      	ldr	r3, [r4, #0]
 800e702:	442b      	add	r3, r5
 800e704:	6023      	str	r3, [r4, #0]
 800e706:	f8d8 3000 	ldr.w	r3, [r8]
 800e70a:	685a      	ldr	r2, [r3, #4]
 800e70c:	bb62      	cbnz	r2, 800e768 <_malloc_r+0xdc>
 800e70e:	f8c8 7000 	str.w	r7, [r8]
 800e712:	e00f      	b.n	800e734 <_malloc_r+0xa8>
 800e714:	6822      	ldr	r2, [r4, #0]
 800e716:	1b52      	subs	r2, r2, r5
 800e718:	d420      	bmi.n	800e75c <_malloc_r+0xd0>
 800e71a:	2a0b      	cmp	r2, #11
 800e71c:	d917      	bls.n	800e74e <_malloc_r+0xc2>
 800e71e:	1961      	adds	r1, r4, r5
 800e720:	42a3      	cmp	r3, r4
 800e722:	6025      	str	r5, [r4, #0]
 800e724:	bf18      	it	ne
 800e726:	6059      	strne	r1, [r3, #4]
 800e728:	6863      	ldr	r3, [r4, #4]
 800e72a:	bf08      	it	eq
 800e72c:	f8c8 1000 	streq.w	r1, [r8]
 800e730:	5162      	str	r2, [r4, r5]
 800e732:	604b      	str	r3, [r1, #4]
 800e734:	4630      	mov	r0, r6
 800e736:	f000 f82f 	bl	800e798 <__malloc_unlock>
 800e73a:	f104 000b 	add.w	r0, r4, #11
 800e73e:	1d23      	adds	r3, r4, #4
 800e740:	f020 0007 	bic.w	r0, r0, #7
 800e744:	1ac2      	subs	r2, r0, r3
 800e746:	bf1c      	itt	ne
 800e748:	1a1b      	subne	r3, r3, r0
 800e74a:	50a3      	strne	r3, [r4, r2]
 800e74c:	e7af      	b.n	800e6ae <_malloc_r+0x22>
 800e74e:	6862      	ldr	r2, [r4, #4]
 800e750:	42a3      	cmp	r3, r4
 800e752:	bf0c      	ite	eq
 800e754:	f8c8 2000 	streq.w	r2, [r8]
 800e758:	605a      	strne	r2, [r3, #4]
 800e75a:	e7eb      	b.n	800e734 <_malloc_r+0xa8>
 800e75c:	4623      	mov	r3, r4
 800e75e:	6864      	ldr	r4, [r4, #4]
 800e760:	e7ae      	b.n	800e6c0 <_malloc_r+0x34>
 800e762:	463c      	mov	r4, r7
 800e764:	687f      	ldr	r7, [r7, #4]
 800e766:	e7b6      	b.n	800e6d6 <_malloc_r+0x4a>
 800e768:	461a      	mov	r2, r3
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	42a3      	cmp	r3, r4
 800e76e:	d1fb      	bne.n	800e768 <_malloc_r+0xdc>
 800e770:	2300      	movs	r3, #0
 800e772:	6053      	str	r3, [r2, #4]
 800e774:	e7de      	b.n	800e734 <_malloc_r+0xa8>
 800e776:	230c      	movs	r3, #12
 800e778:	6033      	str	r3, [r6, #0]
 800e77a:	4630      	mov	r0, r6
 800e77c:	f000 f80c 	bl	800e798 <__malloc_unlock>
 800e780:	e794      	b.n	800e6ac <_malloc_r+0x20>
 800e782:	6005      	str	r5, [r0, #0]
 800e784:	e7d6      	b.n	800e734 <_malloc_r+0xa8>
 800e786:	bf00      	nop
 800e788:	24000908 	.word	0x24000908

0800e78c <__malloc_lock>:
 800e78c:	4801      	ldr	r0, [pc, #4]	@ (800e794 <__malloc_lock+0x8>)
 800e78e:	f7ff bf01 	b.w	800e594 <__retarget_lock_acquire_recursive>
 800e792:	bf00      	nop
 800e794:	24000900 	.word	0x24000900

0800e798 <__malloc_unlock>:
 800e798:	4801      	ldr	r0, [pc, #4]	@ (800e7a0 <__malloc_unlock+0x8>)
 800e79a:	f7ff befc 	b.w	800e596 <__retarget_lock_release_recursive>
 800e79e:	bf00      	nop
 800e7a0:	24000900 	.word	0x24000900

0800e7a4 <__ssputs_r>:
 800e7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7a8:	688e      	ldr	r6, [r1, #8]
 800e7aa:	461f      	mov	r7, r3
 800e7ac:	42be      	cmp	r6, r7
 800e7ae:	680b      	ldr	r3, [r1, #0]
 800e7b0:	4682      	mov	sl, r0
 800e7b2:	460c      	mov	r4, r1
 800e7b4:	4690      	mov	r8, r2
 800e7b6:	d82d      	bhi.n	800e814 <__ssputs_r+0x70>
 800e7b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e7c0:	d026      	beq.n	800e810 <__ssputs_r+0x6c>
 800e7c2:	6965      	ldr	r5, [r4, #20]
 800e7c4:	6909      	ldr	r1, [r1, #16]
 800e7c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e7ca:	eba3 0901 	sub.w	r9, r3, r1
 800e7ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e7d2:	1c7b      	adds	r3, r7, #1
 800e7d4:	444b      	add	r3, r9
 800e7d6:	106d      	asrs	r5, r5, #1
 800e7d8:	429d      	cmp	r5, r3
 800e7da:	bf38      	it	cc
 800e7dc:	461d      	movcc	r5, r3
 800e7de:	0553      	lsls	r3, r2, #21
 800e7e0:	d527      	bpl.n	800e832 <__ssputs_r+0x8e>
 800e7e2:	4629      	mov	r1, r5
 800e7e4:	f7ff ff52 	bl	800e68c <_malloc_r>
 800e7e8:	4606      	mov	r6, r0
 800e7ea:	b360      	cbz	r0, 800e846 <__ssputs_r+0xa2>
 800e7ec:	6921      	ldr	r1, [r4, #16]
 800e7ee:	464a      	mov	r2, r9
 800e7f0:	f7ff fed2 	bl	800e598 <memcpy>
 800e7f4:	89a3      	ldrh	r3, [r4, #12]
 800e7f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e7fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7fe:	81a3      	strh	r3, [r4, #12]
 800e800:	6126      	str	r6, [r4, #16]
 800e802:	6165      	str	r5, [r4, #20]
 800e804:	444e      	add	r6, r9
 800e806:	eba5 0509 	sub.w	r5, r5, r9
 800e80a:	6026      	str	r6, [r4, #0]
 800e80c:	60a5      	str	r5, [r4, #8]
 800e80e:	463e      	mov	r6, r7
 800e810:	42be      	cmp	r6, r7
 800e812:	d900      	bls.n	800e816 <__ssputs_r+0x72>
 800e814:	463e      	mov	r6, r7
 800e816:	6820      	ldr	r0, [r4, #0]
 800e818:	4632      	mov	r2, r6
 800e81a:	4641      	mov	r1, r8
 800e81c:	f000 faa6 	bl	800ed6c <memmove>
 800e820:	68a3      	ldr	r3, [r4, #8]
 800e822:	1b9b      	subs	r3, r3, r6
 800e824:	60a3      	str	r3, [r4, #8]
 800e826:	6823      	ldr	r3, [r4, #0]
 800e828:	4433      	add	r3, r6
 800e82a:	6023      	str	r3, [r4, #0]
 800e82c:	2000      	movs	r0, #0
 800e82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e832:	462a      	mov	r2, r5
 800e834:	f000 fac4 	bl	800edc0 <_realloc_r>
 800e838:	4606      	mov	r6, r0
 800e83a:	2800      	cmp	r0, #0
 800e83c:	d1e0      	bne.n	800e800 <__ssputs_r+0x5c>
 800e83e:	6921      	ldr	r1, [r4, #16]
 800e840:	4650      	mov	r0, sl
 800e842:	f7ff feb7 	bl	800e5b4 <_free_r>
 800e846:	230c      	movs	r3, #12
 800e848:	f8ca 3000 	str.w	r3, [sl]
 800e84c:	89a3      	ldrh	r3, [r4, #12]
 800e84e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e852:	81a3      	strh	r3, [r4, #12]
 800e854:	f04f 30ff 	mov.w	r0, #4294967295
 800e858:	e7e9      	b.n	800e82e <__ssputs_r+0x8a>
	...

0800e85c <_svfiprintf_r>:
 800e85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e860:	4698      	mov	r8, r3
 800e862:	898b      	ldrh	r3, [r1, #12]
 800e864:	061b      	lsls	r3, r3, #24
 800e866:	b09d      	sub	sp, #116	@ 0x74
 800e868:	4607      	mov	r7, r0
 800e86a:	460d      	mov	r5, r1
 800e86c:	4614      	mov	r4, r2
 800e86e:	d510      	bpl.n	800e892 <_svfiprintf_r+0x36>
 800e870:	690b      	ldr	r3, [r1, #16]
 800e872:	b973      	cbnz	r3, 800e892 <_svfiprintf_r+0x36>
 800e874:	2140      	movs	r1, #64	@ 0x40
 800e876:	f7ff ff09 	bl	800e68c <_malloc_r>
 800e87a:	6028      	str	r0, [r5, #0]
 800e87c:	6128      	str	r0, [r5, #16]
 800e87e:	b930      	cbnz	r0, 800e88e <_svfiprintf_r+0x32>
 800e880:	230c      	movs	r3, #12
 800e882:	603b      	str	r3, [r7, #0]
 800e884:	f04f 30ff 	mov.w	r0, #4294967295
 800e888:	b01d      	add	sp, #116	@ 0x74
 800e88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e88e:	2340      	movs	r3, #64	@ 0x40
 800e890:	616b      	str	r3, [r5, #20]
 800e892:	2300      	movs	r3, #0
 800e894:	9309      	str	r3, [sp, #36]	@ 0x24
 800e896:	2320      	movs	r3, #32
 800e898:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e89c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8a0:	2330      	movs	r3, #48	@ 0x30
 800e8a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ea40 <_svfiprintf_r+0x1e4>
 800e8a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e8aa:	f04f 0901 	mov.w	r9, #1
 800e8ae:	4623      	mov	r3, r4
 800e8b0:	469a      	mov	sl, r3
 800e8b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8b6:	b10a      	cbz	r2, 800e8bc <_svfiprintf_r+0x60>
 800e8b8:	2a25      	cmp	r2, #37	@ 0x25
 800e8ba:	d1f9      	bne.n	800e8b0 <_svfiprintf_r+0x54>
 800e8bc:	ebba 0b04 	subs.w	fp, sl, r4
 800e8c0:	d00b      	beq.n	800e8da <_svfiprintf_r+0x7e>
 800e8c2:	465b      	mov	r3, fp
 800e8c4:	4622      	mov	r2, r4
 800e8c6:	4629      	mov	r1, r5
 800e8c8:	4638      	mov	r0, r7
 800e8ca:	f7ff ff6b 	bl	800e7a4 <__ssputs_r>
 800e8ce:	3001      	adds	r0, #1
 800e8d0:	f000 80a7 	beq.w	800ea22 <_svfiprintf_r+0x1c6>
 800e8d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8d6:	445a      	add	r2, fp
 800e8d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8da:	f89a 3000 	ldrb.w	r3, [sl]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f000 809f 	beq.w	800ea22 <_svfiprintf_r+0x1c6>
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8ee:	f10a 0a01 	add.w	sl, sl, #1
 800e8f2:	9304      	str	r3, [sp, #16]
 800e8f4:	9307      	str	r3, [sp, #28]
 800e8f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8fc:	4654      	mov	r4, sl
 800e8fe:	2205      	movs	r2, #5
 800e900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e904:	484e      	ldr	r0, [pc, #312]	@ (800ea40 <_svfiprintf_r+0x1e4>)
 800e906:	f7f1 fd0b 	bl	8000320 <memchr>
 800e90a:	9a04      	ldr	r2, [sp, #16]
 800e90c:	b9d8      	cbnz	r0, 800e946 <_svfiprintf_r+0xea>
 800e90e:	06d0      	lsls	r0, r2, #27
 800e910:	bf44      	itt	mi
 800e912:	2320      	movmi	r3, #32
 800e914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e918:	0711      	lsls	r1, r2, #28
 800e91a:	bf44      	itt	mi
 800e91c:	232b      	movmi	r3, #43	@ 0x2b
 800e91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e922:	f89a 3000 	ldrb.w	r3, [sl]
 800e926:	2b2a      	cmp	r3, #42	@ 0x2a
 800e928:	d015      	beq.n	800e956 <_svfiprintf_r+0xfa>
 800e92a:	9a07      	ldr	r2, [sp, #28]
 800e92c:	4654      	mov	r4, sl
 800e92e:	2000      	movs	r0, #0
 800e930:	f04f 0c0a 	mov.w	ip, #10
 800e934:	4621      	mov	r1, r4
 800e936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e93a:	3b30      	subs	r3, #48	@ 0x30
 800e93c:	2b09      	cmp	r3, #9
 800e93e:	d94b      	bls.n	800e9d8 <_svfiprintf_r+0x17c>
 800e940:	b1b0      	cbz	r0, 800e970 <_svfiprintf_r+0x114>
 800e942:	9207      	str	r2, [sp, #28]
 800e944:	e014      	b.n	800e970 <_svfiprintf_r+0x114>
 800e946:	eba0 0308 	sub.w	r3, r0, r8
 800e94a:	fa09 f303 	lsl.w	r3, r9, r3
 800e94e:	4313      	orrs	r3, r2
 800e950:	9304      	str	r3, [sp, #16]
 800e952:	46a2      	mov	sl, r4
 800e954:	e7d2      	b.n	800e8fc <_svfiprintf_r+0xa0>
 800e956:	9b03      	ldr	r3, [sp, #12]
 800e958:	1d19      	adds	r1, r3, #4
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	9103      	str	r1, [sp, #12]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	bfbb      	ittet	lt
 800e962:	425b      	neglt	r3, r3
 800e964:	f042 0202 	orrlt.w	r2, r2, #2
 800e968:	9307      	strge	r3, [sp, #28]
 800e96a:	9307      	strlt	r3, [sp, #28]
 800e96c:	bfb8      	it	lt
 800e96e:	9204      	strlt	r2, [sp, #16]
 800e970:	7823      	ldrb	r3, [r4, #0]
 800e972:	2b2e      	cmp	r3, #46	@ 0x2e
 800e974:	d10a      	bne.n	800e98c <_svfiprintf_r+0x130>
 800e976:	7863      	ldrb	r3, [r4, #1]
 800e978:	2b2a      	cmp	r3, #42	@ 0x2a
 800e97a:	d132      	bne.n	800e9e2 <_svfiprintf_r+0x186>
 800e97c:	9b03      	ldr	r3, [sp, #12]
 800e97e:	1d1a      	adds	r2, r3, #4
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	9203      	str	r2, [sp, #12]
 800e984:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e988:	3402      	adds	r4, #2
 800e98a:	9305      	str	r3, [sp, #20]
 800e98c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ea50 <_svfiprintf_r+0x1f4>
 800e990:	7821      	ldrb	r1, [r4, #0]
 800e992:	2203      	movs	r2, #3
 800e994:	4650      	mov	r0, sl
 800e996:	f7f1 fcc3 	bl	8000320 <memchr>
 800e99a:	b138      	cbz	r0, 800e9ac <_svfiprintf_r+0x150>
 800e99c:	9b04      	ldr	r3, [sp, #16]
 800e99e:	eba0 000a 	sub.w	r0, r0, sl
 800e9a2:	2240      	movs	r2, #64	@ 0x40
 800e9a4:	4082      	lsls	r2, r0
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	3401      	adds	r4, #1
 800e9aa:	9304      	str	r3, [sp, #16]
 800e9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b0:	4824      	ldr	r0, [pc, #144]	@ (800ea44 <_svfiprintf_r+0x1e8>)
 800e9b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e9b6:	2206      	movs	r2, #6
 800e9b8:	f7f1 fcb2 	bl	8000320 <memchr>
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	d036      	beq.n	800ea2e <_svfiprintf_r+0x1d2>
 800e9c0:	4b21      	ldr	r3, [pc, #132]	@ (800ea48 <_svfiprintf_r+0x1ec>)
 800e9c2:	bb1b      	cbnz	r3, 800ea0c <_svfiprintf_r+0x1b0>
 800e9c4:	9b03      	ldr	r3, [sp, #12]
 800e9c6:	3307      	adds	r3, #7
 800e9c8:	f023 0307 	bic.w	r3, r3, #7
 800e9cc:	3308      	adds	r3, #8
 800e9ce:	9303      	str	r3, [sp, #12]
 800e9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9d2:	4433      	add	r3, r6
 800e9d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9d6:	e76a      	b.n	800e8ae <_svfiprintf_r+0x52>
 800e9d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9dc:	460c      	mov	r4, r1
 800e9de:	2001      	movs	r0, #1
 800e9e0:	e7a8      	b.n	800e934 <_svfiprintf_r+0xd8>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	3401      	adds	r4, #1
 800e9e6:	9305      	str	r3, [sp, #20]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	f04f 0c0a 	mov.w	ip, #10
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9f4:	3a30      	subs	r2, #48	@ 0x30
 800e9f6:	2a09      	cmp	r2, #9
 800e9f8:	d903      	bls.n	800ea02 <_svfiprintf_r+0x1a6>
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d0c6      	beq.n	800e98c <_svfiprintf_r+0x130>
 800e9fe:	9105      	str	r1, [sp, #20]
 800ea00:	e7c4      	b.n	800e98c <_svfiprintf_r+0x130>
 800ea02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea06:	4604      	mov	r4, r0
 800ea08:	2301      	movs	r3, #1
 800ea0a:	e7f0      	b.n	800e9ee <_svfiprintf_r+0x192>
 800ea0c:	ab03      	add	r3, sp, #12
 800ea0e:	9300      	str	r3, [sp, #0]
 800ea10:	462a      	mov	r2, r5
 800ea12:	4b0e      	ldr	r3, [pc, #56]	@ (800ea4c <_svfiprintf_r+0x1f0>)
 800ea14:	a904      	add	r1, sp, #16
 800ea16:	4638      	mov	r0, r7
 800ea18:	f3af 8000 	nop.w
 800ea1c:	1c42      	adds	r2, r0, #1
 800ea1e:	4606      	mov	r6, r0
 800ea20:	d1d6      	bne.n	800e9d0 <_svfiprintf_r+0x174>
 800ea22:	89ab      	ldrh	r3, [r5, #12]
 800ea24:	065b      	lsls	r3, r3, #25
 800ea26:	f53f af2d 	bmi.w	800e884 <_svfiprintf_r+0x28>
 800ea2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea2c:	e72c      	b.n	800e888 <_svfiprintf_r+0x2c>
 800ea2e:	ab03      	add	r3, sp, #12
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	462a      	mov	r2, r5
 800ea34:	4b05      	ldr	r3, [pc, #20]	@ (800ea4c <_svfiprintf_r+0x1f0>)
 800ea36:	a904      	add	r1, sp, #16
 800ea38:	4638      	mov	r0, r7
 800ea3a:	f000 f879 	bl	800eb30 <_printf_i>
 800ea3e:	e7ed      	b.n	800ea1c <_svfiprintf_r+0x1c0>
 800ea40:	0800f160 	.word	0x0800f160
 800ea44:	0800f16a 	.word	0x0800f16a
 800ea48:	00000000 	.word	0x00000000
 800ea4c:	0800e7a5 	.word	0x0800e7a5
 800ea50:	0800f166 	.word	0x0800f166

0800ea54 <_printf_common>:
 800ea54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea58:	4616      	mov	r6, r2
 800ea5a:	4698      	mov	r8, r3
 800ea5c:	688a      	ldr	r2, [r1, #8]
 800ea5e:	690b      	ldr	r3, [r1, #16]
 800ea60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea64:	4293      	cmp	r3, r2
 800ea66:	bfb8      	it	lt
 800ea68:	4613      	movlt	r3, r2
 800ea6a:	6033      	str	r3, [r6, #0]
 800ea6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea70:	4607      	mov	r7, r0
 800ea72:	460c      	mov	r4, r1
 800ea74:	b10a      	cbz	r2, 800ea7a <_printf_common+0x26>
 800ea76:	3301      	adds	r3, #1
 800ea78:	6033      	str	r3, [r6, #0]
 800ea7a:	6823      	ldr	r3, [r4, #0]
 800ea7c:	0699      	lsls	r1, r3, #26
 800ea7e:	bf42      	ittt	mi
 800ea80:	6833      	ldrmi	r3, [r6, #0]
 800ea82:	3302      	addmi	r3, #2
 800ea84:	6033      	strmi	r3, [r6, #0]
 800ea86:	6825      	ldr	r5, [r4, #0]
 800ea88:	f015 0506 	ands.w	r5, r5, #6
 800ea8c:	d106      	bne.n	800ea9c <_printf_common+0x48>
 800ea8e:	f104 0a19 	add.w	sl, r4, #25
 800ea92:	68e3      	ldr	r3, [r4, #12]
 800ea94:	6832      	ldr	r2, [r6, #0]
 800ea96:	1a9b      	subs	r3, r3, r2
 800ea98:	42ab      	cmp	r3, r5
 800ea9a:	dc26      	bgt.n	800eaea <_printf_common+0x96>
 800ea9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eaa0:	6822      	ldr	r2, [r4, #0]
 800eaa2:	3b00      	subs	r3, #0
 800eaa4:	bf18      	it	ne
 800eaa6:	2301      	movne	r3, #1
 800eaa8:	0692      	lsls	r2, r2, #26
 800eaaa:	d42b      	bmi.n	800eb04 <_printf_common+0xb0>
 800eaac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eab0:	4641      	mov	r1, r8
 800eab2:	4638      	mov	r0, r7
 800eab4:	47c8      	blx	r9
 800eab6:	3001      	adds	r0, #1
 800eab8:	d01e      	beq.n	800eaf8 <_printf_common+0xa4>
 800eaba:	6823      	ldr	r3, [r4, #0]
 800eabc:	6922      	ldr	r2, [r4, #16]
 800eabe:	f003 0306 	and.w	r3, r3, #6
 800eac2:	2b04      	cmp	r3, #4
 800eac4:	bf02      	ittt	eq
 800eac6:	68e5      	ldreq	r5, [r4, #12]
 800eac8:	6833      	ldreq	r3, [r6, #0]
 800eaca:	1aed      	subeq	r5, r5, r3
 800eacc:	68a3      	ldr	r3, [r4, #8]
 800eace:	bf0c      	ite	eq
 800ead0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ead4:	2500      	movne	r5, #0
 800ead6:	4293      	cmp	r3, r2
 800ead8:	bfc4      	itt	gt
 800eada:	1a9b      	subgt	r3, r3, r2
 800eadc:	18ed      	addgt	r5, r5, r3
 800eade:	2600      	movs	r6, #0
 800eae0:	341a      	adds	r4, #26
 800eae2:	42b5      	cmp	r5, r6
 800eae4:	d11a      	bne.n	800eb1c <_printf_common+0xc8>
 800eae6:	2000      	movs	r0, #0
 800eae8:	e008      	b.n	800eafc <_printf_common+0xa8>
 800eaea:	2301      	movs	r3, #1
 800eaec:	4652      	mov	r2, sl
 800eaee:	4641      	mov	r1, r8
 800eaf0:	4638      	mov	r0, r7
 800eaf2:	47c8      	blx	r9
 800eaf4:	3001      	adds	r0, #1
 800eaf6:	d103      	bne.n	800eb00 <_printf_common+0xac>
 800eaf8:	f04f 30ff 	mov.w	r0, #4294967295
 800eafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb00:	3501      	adds	r5, #1
 800eb02:	e7c6      	b.n	800ea92 <_printf_common+0x3e>
 800eb04:	18e1      	adds	r1, r4, r3
 800eb06:	1c5a      	adds	r2, r3, #1
 800eb08:	2030      	movs	r0, #48	@ 0x30
 800eb0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eb0e:	4422      	add	r2, r4
 800eb10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eb14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eb18:	3302      	adds	r3, #2
 800eb1a:	e7c7      	b.n	800eaac <_printf_common+0x58>
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	4622      	mov	r2, r4
 800eb20:	4641      	mov	r1, r8
 800eb22:	4638      	mov	r0, r7
 800eb24:	47c8      	blx	r9
 800eb26:	3001      	adds	r0, #1
 800eb28:	d0e6      	beq.n	800eaf8 <_printf_common+0xa4>
 800eb2a:	3601      	adds	r6, #1
 800eb2c:	e7d9      	b.n	800eae2 <_printf_common+0x8e>
	...

0800eb30 <_printf_i>:
 800eb30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb34:	7e0f      	ldrb	r7, [r1, #24]
 800eb36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eb38:	2f78      	cmp	r7, #120	@ 0x78
 800eb3a:	4691      	mov	r9, r2
 800eb3c:	4680      	mov	r8, r0
 800eb3e:	460c      	mov	r4, r1
 800eb40:	469a      	mov	sl, r3
 800eb42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb46:	d807      	bhi.n	800eb58 <_printf_i+0x28>
 800eb48:	2f62      	cmp	r7, #98	@ 0x62
 800eb4a:	d80a      	bhi.n	800eb62 <_printf_i+0x32>
 800eb4c:	2f00      	cmp	r7, #0
 800eb4e:	f000 80d1 	beq.w	800ecf4 <_printf_i+0x1c4>
 800eb52:	2f58      	cmp	r7, #88	@ 0x58
 800eb54:	f000 80b8 	beq.w	800ecc8 <_printf_i+0x198>
 800eb58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eb60:	e03a      	b.n	800ebd8 <_printf_i+0xa8>
 800eb62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eb66:	2b15      	cmp	r3, #21
 800eb68:	d8f6      	bhi.n	800eb58 <_printf_i+0x28>
 800eb6a:	a101      	add	r1, pc, #4	@ (adr r1, 800eb70 <_printf_i+0x40>)
 800eb6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb70:	0800ebc9 	.word	0x0800ebc9
 800eb74:	0800ebdd 	.word	0x0800ebdd
 800eb78:	0800eb59 	.word	0x0800eb59
 800eb7c:	0800eb59 	.word	0x0800eb59
 800eb80:	0800eb59 	.word	0x0800eb59
 800eb84:	0800eb59 	.word	0x0800eb59
 800eb88:	0800ebdd 	.word	0x0800ebdd
 800eb8c:	0800eb59 	.word	0x0800eb59
 800eb90:	0800eb59 	.word	0x0800eb59
 800eb94:	0800eb59 	.word	0x0800eb59
 800eb98:	0800eb59 	.word	0x0800eb59
 800eb9c:	0800ecdb 	.word	0x0800ecdb
 800eba0:	0800ec07 	.word	0x0800ec07
 800eba4:	0800ec95 	.word	0x0800ec95
 800eba8:	0800eb59 	.word	0x0800eb59
 800ebac:	0800eb59 	.word	0x0800eb59
 800ebb0:	0800ecfd 	.word	0x0800ecfd
 800ebb4:	0800eb59 	.word	0x0800eb59
 800ebb8:	0800ec07 	.word	0x0800ec07
 800ebbc:	0800eb59 	.word	0x0800eb59
 800ebc0:	0800eb59 	.word	0x0800eb59
 800ebc4:	0800ec9d 	.word	0x0800ec9d
 800ebc8:	6833      	ldr	r3, [r6, #0]
 800ebca:	1d1a      	adds	r2, r3, #4
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	6032      	str	r2, [r6, #0]
 800ebd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ebd8:	2301      	movs	r3, #1
 800ebda:	e09c      	b.n	800ed16 <_printf_i+0x1e6>
 800ebdc:	6833      	ldr	r3, [r6, #0]
 800ebde:	6820      	ldr	r0, [r4, #0]
 800ebe0:	1d19      	adds	r1, r3, #4
 800ebe2:	6031      	str	r1, [r6, #0]
 800ebe4:	0606      	lsls	r6, r0, #24
 800ebe6:	d501      	bpl.n	800ebec <_printf_i+0xbc>
 800ebe8:	681d      	ldr	r5, [r3, #0]
 800ebea:	e003      	b.n	800ebf4 <_printf_i+0xc4>
 800ebec:	0645      	lsls	r5, r0, #25
 800ebee:	d5fb      	bpl.n	800ebe8 <_printf_i+0xb8>
 800ebf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ebf4:	2d00      	cmp	r5, #0
 800ebf6:	da03      	bge.n	800ec00 <_printf_i+0xd0>
 800ebf8:	232d      	movs	r3, #45	@ 0x2d
 800ebfa:	426d      	negs	r5, r5
 800ebfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec00:	4858      	ldr	r0, [pc, #352]	@ (800ed64 <_printf_i+0x234>)
 800ec02:	230a      	movs	r3, #10
 800ec04:	e011      	b.n	800ec2a <_printf_i+0xfa>
 800ec06:	6821      	ldr	r1, [r4, #0]
 800ec08:	6833      	ldr	r3, [r6, #0]
 800ec0a:	0608      	lsls	r0, r1, #24
 800ec0c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec10:	d402      	bmi.n	800ec18 <_printf_i+0xe8>
 800ec12:	0649      	lsls	r1, r1, #25
 800ec14:	bf48      	it	mi
 800ec16:	b2ad      	uxthmi	r5, r5
 800ec18:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec1a:	4852      	ldr	r0, [pc, #328]	@ (800ed64 <_printf_i+0x234>)
 800ec1c:	6033      	str	r3, [r6, #0]
 800ec1e:	bf14      	ite	ne
 800ec20:	230a      	movne	r3, #10
 800ec22:	2308      	moveq	r3, #8
 800ec24:	2100      	movs	r1, #0
 800ec26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ec2a:	6866      	ldr	r6, [r4, #4]
 800ec2c:	60a6      	str	r6, [r4, #8]
 800ec2e:	2e00      	cmp	r6, #0
 800ec30:	db05      	blt.n	800ec3e <_printf_i+0x10e>
 800ec32:	6821      	ldr	r1, [r4, #0]
 800ec34:	432e      	orrs	r6, r5
 800ec36:	f021 0104 	bic.w	r1, r1, #4
 800ec3a:	6021      	str	r1, [r4, #0]
 800ec3c:	d04b      	beq.n	800ecd6 <_printf_i+0x1a6>
 800ec3e:	4616      	mov	r6, r2
 800ec40:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec44:	fb03 5711 	mls	r7, r3, r1, r5
 800ec48:	5dc7      	ldrb	r7, [r0, r7]
 800ec4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec4e:	462f      	mov	r7, r5
 800ec50:	42bb      	cmp	r3, r7
 800ec52:	460d      	mov	r5, r1
 800ec54:	d9f4      	bls.n	800ec40 <_printf_i+0x110>
 800ec56:	2b08      	cmp	r3, #8
 800ec58:	d10b      	bne.n	800ec72 <_printf_i+0x142>
 800ec5a:	6823      	ldr	r3, [r4, #0]
 800ec5c:	07df      	lsls	r7, r3, #31
 800ec5e:	d508      	bpl.n	800ec72 <_printf_i+0x142>
 800ec60:	6923      	ldr	r3, [r4, #16]
 800ec62:	6861      	ldr	r1, [r4, #4]
 800ec64:	4299      	cmp	r1, r3
 800ec66:	bfde      	ittt	le
 800ec68:	2330      	movle	r3, #48	@ 0x30
 800ec6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec72:	1b92      	subs	r2, r2, r6
 800ec74:	6122      	str	r2, [r4, #16]
 800ec76:	f8cd a000 	str.w	sl, [sp]
 800ec7a:	464b      	mov	r3, r9
 800ec7c:	aa03      	add	r2, sp, #12
 800ec7e:	4621      	mov	r1, r4
 800ec80:	4640      	mov	r0, r8
 800ec82:	f7ff fee7 	bl	800ea54 <_printf_common>
 800ec86:	3001      	adds	r0, #1
 800ec88:	d14a      	bne.n	800ed20 <_printf_i+0x1f0>
 800ec8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec8e:	b004      	add	sp, #16
 800ec90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec94:	6823      	ldr	r3, [r4, #0]
 800ec96:	f043 0320 	orr.w	r3, r3, #32
 800ec9a:	6023      	str	r3, [r4, #0]
 800ec9c:	4832      	ldr	r0, [pc, #200]	@ (800ed68 <_printf_i+0x238>)
 800ec9e:	2778      	movs	r7, #120	@ 0x78
 800eca0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eca4:	6823      	ldr	r3, [r4, #0]
 800eca6:	6831      	ldr	r1, [r6, #0]
 800eca8:	061f      	lsls	r7, r3, #24
 800ecaa:	f851 5b04 	ldr.w	r5, [r1], #4
 800ecae:	d402      	bmi.n	800ecb6 <_printf_i+0x186>
 800ecb0:	065f      	lsls	r7, r3, #25
 800ecb2:	bf48      	it	mi
 800ecb4:	b2ad      	uxthmi	r5, r5
 800ecb6:	6031      	str	r1, [r6, #0]
 800ecb8:	07d9      	lsls	r1, r3, #31
 800ecba:	bf44      	itt	mi
 800ecbc:	f043 0320 	orrmi.w	r3, r3, #32
 800ecc0:	6023      	strmi	r3, [r4, #0]
 800ecc2:	b11d      	cbz	r5, 800eccc <_printf_i+0x19c>
 800ecc4:	2310      	movs	r3, #16
 800ecc6:	e7ad      	b.n	800ec24 <_printf_i+0xf4>
 800ecc8:	4826      	ldr	r0, [pc, #152]	@ (800ed64 <_printf_i+0x234>)
 800ecca:	e7e9      	b.n	800eca0 <_printf_i+0x170>
 800eccc:	6823      	ldr	r3, [r4, #0]
 800ecce:	f023 0320 	bic.w	r3, r3, #32
 800ecd2:	6023      	str	r3, [r4, #0]
 800ecd4:	e7f6      	b.n	800ecc4 <_printf_i+0x194>
 800ecd6:	4616      	mov	r6, r2
 800ecd8:	e7bd      	b.n	800ec56 <_printf_i+0x126>
 800ecda:	6833      	ldr	r3, [r6, #0]
 800ecdc:	6825      	ldr	r5, [r4, #0]
 800ecde:	6961      	ldr	r1, [r4, #20]
 800ece0:	1d18      	adds	r0, r3, #4
 800ece2:	6030      	str	r0, [r6, #0]
 800ece4:	062e      	lsls	r6, r5, #24
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	d501      	bpl.n	800ecee <_printf_i+0x1be>
 800ecea:	6019      	str	r1, [r3, #0]
 800ecec:	e002      	b.n	800ecf4 <_printf_i+0x1c4>
 800ecee:	0668      	lsls	r0, r5, #25
 800ecf0:	d5fb      	bpl.n	800ecea <_printf_i+0x1ba>
 800ecf2:	8019      	strh	r1, [r3, #0]
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	6123      	str	r3, [r4, #16]
 800ecf8:	4616      	mov	r6, r2
 800ecfa:	e7bc      	b.n	800ec76 <_printf_i+0x146>
 800ecfc:	6833      	ldr	r3, [r6, #0]
 800ecfe:	1d1a      	adds	r2, r3, #4
 800ed00:	6032      	str	r2, [r6, #0]
 800ed02:	681e      	ldr	r6, [r3, #0]
 800ed04:	6862      	ldr	r2, [r4, #4]
 800ed06:	2100      	movs	r1, #0
 800ed08:	4630      	mov	r0, r6
 800ed0a:	f7f1 fb09 	bl	8000320 <memchr>
 800ed0e:	b108      	cbz	r0, 800ed14 <_printf_i+0x1e4>
 800ed10:	1b80      	subs	r0, r0, r6
 800ed12:	6060      	str	r0, [r4, #4]
 800ed14:	6863      	ldr	r3, [r4, #4]
 800ed16:	6123      	str	r3, [r4, #16]
 800ed18:	2300      	movs	r3, #0
 800ed1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed1e:	e7aa      	b.n	800ec76 <_printf_i+0x146>
 800ed20:	6923      	ldr	r3, [r4, #16]
 800ed22:	4632      	mov	r2, r6
 800ed24:	4649      	mov	r1, r9
 800ed26:	4640      	mov	r0, r8
 800ed28:	47d0      	blx	sl
 800ed2a:	3001      	adds	r0, #1
 800ed2c:	d0ad      	beq.n	800ec8a <_printf_i+0x15a>
 800ed2e:	6823      	ldr	r3, [r4, #0]
 800ed30:	079b      	lsls	r3, r3, #30
 800ed32:	d413      	bmi.n	800ed5c <_printf_i+0x22c>
 800ed34:	68e0      	ldr	r0, [r4, #12]
 800ed36:	9b03      	ldr	r3, [sp, #12]
 800ed38:	4298      	cmp	r0, r3
 800ed3a:	bfb8      	it	lt
 800ed3c:	4618      	movlt	r0, r3
 800ed3e:	e7a6      	b.n	800ec8e <_printf_i+0x15e>
 800ed40:	2301      	movs	r3, #1
 800ed42:	4632      	mov	r2, r6
 800ed44:	4649      	mov	r1, r9
 800ed46:	4640      	mov	r0, r8
 800ed48:	47d0      	blx	sl
 800ed4a:	3001      	adds	r0, #1
 800ed4c:	d09d      	beq.n	800ec8a <_printf_i+0x15a>
 800ed4e:	3501      	adds	r5, #1
 800ed50:	68e3      	ldr	r3, [r4, #12]
 800ed52:	9903      	ldr	r1, [sp, #12]
 800ed54:	1a5b      	subs	r3, r3, r1
 800ed56:	42ab      	cmp	r3, r5
 800ed58:	dcf2      	bgt.n	800ed40 <_printf_i+0x210>
 800ed5a:	e7eb      	b.n	800ed34 <_printf_i+0x204>
 800ed5c:	2500      	movs	r5, #0
 800ed5e:	f104 0619 	add.w	r6, r4, #25
 800ed62:	e7f5      	b.n	800ed50 <_printf_i+0x220>
 800ed64:	0800f171 	.word	0x0800f171
 800ed68:	0800f182 	.word	0x0800f182

0800ed6c <memmove>:
 800ed6c:	4288      	cmp	r0, r1
 800ed6e:	b510      	push	{r4, lr}
 800ed70:	eb01 0402 	add.w	r4, r1, r2
 800ed74:	d902      	bls.n	800ed7c <memmove+0x10>
 800ed76:	4284      	cmp	r4, r0
 800ed78:	4623      	mov	r3, r4
 800ed7a:	d807      	bhi.n	800ed8c <memmove+0x20>
 800ed7c:	1e43      	subs	r3, r0, #1
 800ed7e:	42a1      	cmp	r1, r4
 800ed80:	d008      	beq.n	800ed94 <memmove+0x28>
 800ed82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed8a:	e7f8      	b.n	800ed7e <memmove+0x12>
 800ed8c:	4402      	add	r2, r0
 800ed8e:	4601      	mov	r1, r0
 800ed90:	428a      	cmp	r2, r1
 800ed92:	d100      	bne.n	800ed96 <memmove+0x2a>
 800ed94:	bd10      	pop	{r4, pc}
 800ed96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed9e:	e7f7      	b.n	800ed90 <memmove+0x24>

0800eda0 <_sbrk_r>:
 800eda0:	b538      	push	{r3, r4, r5, lr}
 800eda2:	4d06      	ldr	r5, [pc, #24]	@ (800edbc <_sbrk_r+0x1c>)
 800eda4:	2300      	movs	r3, #0
 800eda6:	4604      	mov	r4, r0
 800eda8:	4608      	mov	r0, r1
 800edaa:	602b      	str	r3, [r5, #0]
 800edac:	f7f3 fb8a 	bl	80024c4 <_sbrk>
 800edb0:	1c43      	adds	r3, r0, #1
 800edb2:	d102      	bne.n	800edba <_sbrk_r+0x1a>
 800edb4:	682b      	ldr	r3, [r5, #0]
 800edb6:	b103      	cbz	r3, 800edba <_sbrk_r+0x1a>
 800edb8:	6023      	str	r3, [r4, #0]
 800edba:	bd38      	pop	{r3, r4, r5, pc}
 800edbc:	240008fc 	.word	0x240008fc

0800edc0 <_realloc_r>:
 800edc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc4:	4607      	mov	r7, r0
 800edc6:	4614      	mov	r4, r2
 800edc8:	460d      	mov	r5, r1
 800edca:	b921      	cbnz	r1, 800edd6 <_realloc_r+0x16>
 800edcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edd0:	4611      	mov	r1, r2
 800edd2:	f7ff bc5b 	b.w	800e68c <_malloc_r>
 800edd6:	b92a      	cbnz	r2, 800ede4 <_realloc_r+0x24>
 800edd8:	f7ff fbec 	bl	800e5b4 <_free_r>
 800eddc:	4625      	mov	r5, r4
 800edde:	4628      	mov	r0, r5
 800ede0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede4:	f000 f81a 	bl	800ee1c <_malloc_usable_size_r>
 800ede8:	4284      	cmp	r4, r0
 800edea:	4606      	mov	r6, r0
 800edec:	d802      	bhi.n	800edf4 <_realloc_r+0x34>
 800edee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800edf2:	d8f4      	bhi.n	800edde <_realloc_r+0x1e>
 800edf4:	4621      	mov	r1, r4
 800edf6:	4638      	mov	r0, r7
 800edf8:	f7ff fc48 	bl	800e68c <_malloc_r>
 800edfc:	4680      	mov	r8, r0
 800edfe:	b908      	cbnz	r0, 800ee04 <_realloc_r+0x44>
 800ee00:	4645      	mov	r5, r8
 800ee02:	e7ec      	b.n	800edde <_realloc_r+0x1e>
 800ee04:	42b4      	cmp	r4, r6
 800ee06:	4622      	mov	r2, r4
 800ee08:	4629      	mov	r1, r5
 800ee0a:	bf28      	it	cs
 800ee0c:	4632      	movcs	r2, r6
 800ee0e:	f7ff fbc3 	bl	800e598 <memcpy>
 800ee12:	4629      	mov	r1, r5
 800ee14:	4638      	mov	r0, r7
 800ee16:	f7ff fbcd 	bl	800e5b4 <_free_r>
 800ee1a:	e7f1      	b.n	800ee00 <_realloc_r+0x40>

0800ee1c <_malloc_usable_size_r>:
 800ee1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee20:	1f18      	subs	r0, r3, #4
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	bfbc      	itt	lt
 800ee26:	580b      	ldrlt	r3, [r1, r0]
 800ee28:	18c0      	addlt	r0, r0, r3
 800ee2a:	4770      	bx	lr

0800ee2c <_init>:
 800ee2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2e:	bf00      	nop
 800ee30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee32:	bc08      	pop	{r3}
 800ee34:	469e      	mov	lr, r3
 800ee36:	4770      	bx	lr

0800ee38 <_fini>:
 800ee38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee3a:	bf00      	nop
 800ee3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee3e:	bc08      	pop	{r3}
 800ee40:	469e      	mov	lr, r3
 800ee42:	4770      	bx	lr
